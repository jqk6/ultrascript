{"version":3,"sources":["webpack://asc/webpack/universalModuleDefinition","webpack://asc/webpack/bootstrap","webpack://asc/../node_modules/node-libs-browser/mock/process.js","webpack://asc/../node_modules/path-browserify/index.js","webpack://asc/../node_modules/webpack/buildin/global.js","webpack://asc/./asc.js","webpack://asc/../node_modules/@protobufjs/utf8/index.js","webpack://asc/./util/colors.js","webpack://asc/./util/options.js","webpack://asc/external \"assemblyscript\"","webpack://asc/. sync","webpack://asc/../node_modules/browser-process-hrtime/index.js"],"names":["root","factory","exports","module","require","e","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__9__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","nextTick","fn","setTimeout","platform","arch","execPath","title","pid","browser","env","argv","binding","Error","path","cwd","chdir","dir","resolve","exit","kill","umask","dlopen","uptime","memoryUsage","uvCounters","features","process","normalizeArray","parts","allowAboveRoot","up","length","last","splice","unshift","splitPathRe","splitPath","filename","exec","slice","filter","xs","f","res","push","resolvedPath","resolvedAbsolute","arguments","TypeError","charAt","split","join","normalize","isAbsolute","trailingSlash","substr","paths","Array","index","relative","from","to","trim","arr","start","end","fromParts","toParts","Math","min","samePartsLength","outputParts","concat","sep","delimiter","dirname","result","basename","ext","extname","str","len","g","Function","eval","window","global","fs","utf8","colorsUtil","optionsUtil","EOL","removeAllListeners","assemblyscript","isDev","code","register","project","e_ts","stack","isBundle","version","options","sourceMapRoot","libraryPrefix","LIBRARY_PREFIX","nodeModulesPrefix","defaultOptimizeLevel","defaultShrinkLevel","libraryFiles","allocator/arena","allocator/buddy","allocator/emscripten","allocator/system","allocator/tlsf","array","arraybuffer","block","builtins","collector/itcm","error","gc","internal/allocator","internal/array","internal/arraybuffer","internal/hash","internal/itoa","internal/string","internal/typedarray","iterator","map","math","memory","msg","polyfills","regexp","set","string","symbol","table","typedarray","libDir","bundled","sync","forEach","file","replace","readFileSync","definitionFiles","assembly","portable","stdDir","compileString","sources","input.ts","output","stdout","createMemoryStream","stderr","binary","text","keys","val","isArray","String","main","readFile","writeFile","contents","listFiles","callback","isDispatch","readFileNode","writeFileNode","listFilesNode","stats","createStats","opts","parse","args","noColors","supported","unknown","arg","write","yellow","trailing","err","red","help","out","color","white","cyan","baseDir","transforms","transform","parser","noLib","libPath","indexOf","parseCount","parseTime","measure","parseFile","customLibDirs","lib","apply","k","libFiles","endsWith","j","libText","sourcePath","sourceText","insertSerializeMethodText","elementPath","resolveSourceText","applyText","abiObj","nextFile","startsWith","plainName","substring","indexName","checkDiagnostics","applyTransform","program","finishParsing","optimizeLevel","shrinkLevel","optimize","max","compilerOptions","createOptions","setTarget","setNoTreeShaking","noTreeShaking","setNoAssert","noAssert","setImportMemory","importMemory","setImportTable","importTable","setMemoryBase","memoryBase","setSourceMap","sourceMap","setOptimizeLevelHints","setGlobalAlias","use","aliases","part","alias","enable","flag","toUpperCase","enableFeature","compileCount","compileTime","compileProgram","dispose","validate","validateCount","validateTime","trapMode","optimizeCount","optimizeTime","runPasses","setOptimizeLevel","setShrinkLevel","setDebugInfo","noDebug","pass","toAbi","dispatch","console","log","noEmit","hasStdout","hasOutput","outFile","test","textFile","asmjsFile","binaryFile","abiFile","abi","emitCount","emitTime","JSON","stringify","abiInfo","undefined","writeStdout","wasm","sourceMapURL","toBinary","sourceRoot","stdName","sourceContents","asm","toAsmjs","idlFile","idl","buildIDL","tsdFile","tsd","buildTSD","wat","toText","printStats","readCount","readTime","encoding","writeCount","writeTime","writeFileSync","files","readdirSync","used","argumentSubstitutions","-O","-Os","-Oz","-O0","-O0s","-O0z","-O1","-O1s","-O1z","-O2","-O2s","-O2z","-O3","-O3s","-O3z","emitter","diagnostic","hasErrors","nextDiagnostic","formatDiagnostic","isTTY","isError","hrtime","times","formatTime","time","toFixed","format","count","allocBuffer","Buffer","allocUnsafe","Uint8Array","stream","chunk","buffer","reset","toBuffer","offset","toString","read","library","resultTextBuffer","importedLibrary","internalPath","hasElement","serializeLookup","fileSerializeLookup","has","serializeArray","data","serialize","line","toSerialize","toDeserialize","toPrimarykey","tscOptions","alwaysStrict","noImplicitAny","noImplicitReturns","noImplicitThis","noEmitOnError","strictNullChecks","experimentalDecorators","target","types","allowJs","charCodeAt","fromCharCode","c1","c2","proc","isCI","base","colors","gray","GRAY","RESET","RED","green","GREEN","YELLOW","blue","BLUE","magenta","MAGENTA","CYAN","WHITE","config","option","default","match","type","parseInt","parseFloat","indent","padding","eol","sb","description","webpackEmptyContext","req","id","previousTimestamp","clocktime","performanceNow","performance","seconds","floor","nanoseconds","now","mozNow","msNow","oNow","webkitNow","Date","getTime"],"mappings":"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","file":"asc.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory((function webpackLoadOptionalExternalModule() { try { return require(\"assemblyscript\"); } catch(e) {} }()));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"assemblyscript\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"asc\"] = factory((function webpackLoadOptionalExternalModule() { try { return require(\"assemblyscript\"); } catch(e) {} }()));\n\telse\n\t\troot[\"asc\"] = factory(root[\"assemblyscript\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__9__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","exports.nextTick = function nextTick(fn) {\n\tsetTimeout(fn, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = require('path');\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Compiler frontend for node.js\n *\n * Uses the low-level API exported from src/index.ts so it works with the compiler compiled to\n * JavaScript as well as the compiler compiled to WebAssembly (eventually). Runs the sources\n * directly through ts-node if distribution files are not present (indicated by a `-dev` version).\n *\n * Can also be packaged as a bundle suitable for in-browser use with the standard library injected\n * in the build step. See dist/asc.js for the bundle and webpack.config.js for building details.\n *\n * @module cli/asc\n */\n\n// Use \".\" instead of \"/\" as cwd in browsers\nif (process.browser) process.cwd = function () { return \".\"; };\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst utf8 = require(\"@protobufjs/utf8\");\nconst colorsUtil = require(\"./util/colors\");\nconst optionsUtil = require(\"./util/options\");\nconst EOL = process.platform === \"win32\" ? \"\\r\\n\" : \"\\n\";\n\n// Emscripten adds an `uncaughtException` listener to Binaryen that results in an additional\n// useless code fragment on top of an actual error. suppress this:\nif (process.removeAllListeners) process.removeAllListeners(\"uncaughtException\");\n\n// Use distribution files if present, otherwise run the sources directly\nvar assemblyscript, isDev = false;\n(() => {\n  try { // `asc` on the command line\n    assemblyscript = require(\"../dist/assemblyscript.js\");\n    throw new Error();\n  } catch (e) {\n    try { // `asc` on the command line without dist files\n      require(\"ts-node\").register({ project: path.join(__dirname, \"..\", \"src\", \"tsconfig.json\") });\n      require(\"../src/glue/js\");\n      assemblyscript = require(\"../src\");\n      isDev = true;\n    } catch (e_ts) {\n      try { // `require(\"dist/asc.js\")` in explicit browser tests\n        assemblyscript = eval(\"require('./assemblyscript')\");\n      } catch (e) {\n        // combine both errors that lead us here\n        e.stack = e_ts.stack + \"\\n---\\n\" + e.stack;\n        throw e;\n      }\n    }\n  }\n})();\n\n/** Whether this is a webpack bundle or not. */\nexports.isBundle = typeof BUNDLE_VERSION === \"string\";\n\n/** Whether asc runs the sources directly or not. */\nexports.isDev = isDev;\n\n/** AssemblyScript version. */\nexports.version = exports.isBundle ? BUNDLE_VERSION : require(\"../package.json\").version;\n\n/** Available CLI options. */\nexports.options = require(\"./asc.json\");\n\n/** Common root used in source maps. */\nexports.sourceMapRoot = \"assemblyscript:///\";\n\n/** Prefix used for library files. */\nexports.libraryPrefix = assemblyscript.LIBRARY_PREFIX;\n\n/** node modules path */\nexports.nodeModulesPrefix = \"./node_modules/\";\n\n/** Default Binaryen optimization level. */\nexports.defaultOptimizeLevel = 2;\n\n/** Default Binaryen shrink level. */\nexports.defaultShrinkLevel = 1;\n\n/** Bundled library files. */\nexports.libraryFiles = exports.isBundle ? BUNDLE_LIBRARY : (() => { // set up if not a bundle\n  const libDir = path.join(__dirname, \"..\", \"std\", \"assembly\");\n  const libFiles = require(\"glob\").sync(\"**/!(*.d).ts\", { cwd: libDir });\n  const bundled = {};\n  libFiles.forEach(file => bundled[file.replace(/\\.ts$/, \"\")] = fs.readFileSync(path.join(libDir, file), \"utf8\"));\n  return bundled;\n})();\n\n/** Bundled definition files. */\nexports.definitionFiles = exports.isBundle ? BUNDLE_DEFINITIONS : (() => { // set up if not a bundle\n  const stdDir = path.join(__dirname, \"..\", \"std\");\n  return {\n    \"assembly\": fs.readFileSync(path.join(stdDir, \"assembly\", \"index.d.ts\"), \"utf8\"),\n    \"portable\": fs.readFileSync(path.join(stdDir, \"portable\", \"index.d.ts\"), \"utf8\")\n  };\n\n})();\n\n/** Convenience function that parses and compiles source strings directly. */\nexports.compileString = (sources, options) => {\n  if (typeof sources === \"string\") sources = { \"input.ts\": sources };\n  const output = Object.create({\n    stdout: createMemoryStream(),\n    stderr: createMemoryStream(),\n    binary: null,\n    text: null\n  });\n  var argv = [\n    \"--binaryFile\", \"binary\",\n    \"--textFile\", \"text\",\n  ];\n  Object.keys(options || {}).forEach(key => {\n    var val = options[key];\n    if (Array.isArray(val)) val.forEach(val => argv.push(\"--\" + key, String(val)));\n    else argv.push(\"--\" + key, String(val));\n  });\n  exports.main(argv.concat(Object.keys(sources)), {\n    stdout: output.stdout,\n    stderr: output.stderr,\n    readFile: name => sources.hasOwnProperty(name) ? sources[name] : null,\n    writeFile: (name, contents) => output[name] = contents,\n    listFiles: () => []\n  });\n  return output;\n}\n\n/** Runs the command line utility using the specified arguments array. */\nexports.main = function main(argv, options, callback, isDispatch) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  } else if (!options) {\n    options = {};\n  }\n\n  const stdout = options.stdout || process.stdout;\n  const stderr = options.stderr || process.stderr;\n  const readFile = options.readFile || readFileNode;\n  const writeFile = options.writeFile || writeFileNode;\n  const listFiles = options.listFiles || listFilesNode;\n  const stats = options.stats || createStats();\n\n  // Output must be specified if not present in the environment\n  if (!stdout) throw Error(\"'options.stdout' must be specified\");\n  if (!stderr) throw Error(\"'options.stderr' must be specified\");\n\n  const opts = optionsUtil.parse(argv, exports.options);\n  const args = opts.options;\n  argv = opts.arguments;\n  if (args.noColors) {\n    colorsUtil.stdout.supported =\n      colorsUtil.stderr.supported = false;\n  } else {\n    colorsUtil.stdout = colorsUtil.from(stdout);\n    colorsUtil.stderr = colorsUtil.from(stderr);\n  }\n\n  // Check for unknown arguments\n  if (opts.unknown.length) {\n    opts.unknown.forEach(arg => {\n      stderr.write(colorsUtil.stderr.yellow(\"WARN: \") + \"Unknown option '\" + arg + \"'\" + EOL);\n    });\n  }\n\n  // Check for trailing arguments\n  if (opts.trailing.length) {\n    stderr.write(colorsUtil.stderr.yellow(\"WARN: \") + \"Unsupported trailing arguments: \" + opts.trailing.join(\" \") + EOL);\n  }\n\n  // Use default callback if none is provided\n  if (!callback) callback = function defaultCallback(err) {\n    var code = 0;\n    if (err) {\n      stderr.write(colorsUtil.stderr.red(\"ERROR: \") + err.stack.replace(/^ERROR: /i, \"\") + EOL);\n      code = 1;\n    }\n    return code;\n  };\n\n  // Just print the version if requested\n  if (args.version) {\n    stdout.write(\"Version \" + exports.version + (isDev ? \"-dev\" : \"\") + EOL);\n    return callback(null);\n  }\n  // Print the help message if requested or no source files are provided\n  if (args.help || !argv.length) {\n    var out = args.help ? stdout : stderr;\n    var color = args.help ? colorsUtil.stdout : colorsUtil.stderr;\n    out.write([\n      color.white(\"SYNTAX\"),\n      \"  \" + color.cyan(\"asc\") + \" [entryFile ...] [options]\",\n      \"\",\n      color.white(\"EXAMPLES\"),\n      \"  \" + color.cyan(\"asc\") + \" hello.ts\",\n      \"  \" + color.cyan(\"asc\") + \" hello.ts -b hello.wasm -t hello.wat\",\n      \"  \" + color.cyan(\"asc\") + \" hello1.ts hello2.ts -b -O > hello.wasm\",\n      \"\",\n      color.white(\"OPTIONS\"),\n    ].concat(\n      optionsUtil.help(exports.options, 24, EOL)\n    ).join(EOL) + EOL);\n    return callback(null);\n  }\n\n  // I/O must be specified if not present in the environment\n  if (!fs.readFileSync) {\n    if (readFile === readFileNode) throw Error(\"'options.readFile' must be specified\");\n    if (writeFile === writeFileNode) throw Error(\"'options.writeFile' must be specified\");\n    if (listFiles === listFilesNode) throw Error(\"'options.listFiles' must be specified\");\n  }\n\n  // Set up base directory\n  const baseDir = args.baseDir ? path.resolve(args.baseDir) : \".\";\n\n  // Set up transforms\n  const transforms = [];\n  if (args.transform) {\n    args.transform.forEach(transform =>\n      transforms.push(\n        require(\n          path.isAbsolute(transform = transform.trim())\n            ? transform\n            : path.join(process.cwd(), transform)\n        )\n      )\n    );\n  }\n  function applyTransform(name, ...args) {\n    transforms.forEach(transform => {\n      if (typeof transform[name] === \"function\") transform[name](...args);\n    });\n  }\n\n  // Begin parsing\n  var parser = null;\n\n  // Include library files\n  if (!args.noLib) { // bundled\n\n    Object.keys(exports.libraryFiles).forEach(libPath => {\n      if (libPath.indexOf(\"/\") >= 0) return; // in sub-directory: imported on demand\n      stats.parseCount++;\n      stats.parseTime += measure(() => {\n        parser = assemblyscript.parseFile(\n          exports.libraryFiles[libPath],\n          exports.libraryPrefix + libPath + \".ts\",\n          false,\n          parser\n        );\n      });\n    });\n  }\n\n\n  const customLibDirs = [];\n\n  args.lib = (!args.lib) ? exports.nodeModulesPrefix : exports.nodeModulesPrefix + \",\" + args.lib;\n\n  if (args.lib) {\n    let lib = args.lib;\n    if (typeof lib === \"string\") lib = lib.split(\",\");\n    Array.prototype.push.apply(customLibDirs, lib.map(lib => lib.trim()));\n    for (let i = 0, k = customLibDirs.length; i < k; ++i) { // custom\n      let libDir = customLibDirs[i];\n      let libFiles;\n      if (libDir.endsWith(\".ts\")) {\n        libFiles = [path.basename(libDir)];\n        libDir = path.dirname(libDir);\n      } else {\n        libFiles = listFiles(libDir);\n      }\n\n      for (let j = 0, l = libFiles.length; j < l; ++j) {\n        let libPath = libFiles[j];\n        let libText = readFile(path.join(libDir, libPath));\n        if (libText === null) return callback(Error(\"Library file '\" + libPath + \"' not found.\"));\n        stats.parseCount++;\n        stats.parseTime += measure(() => {\n          parser = assemblyscript.parseFile(\n            libText,\n            exports.libraryPrefix + libPath,\n            false,\n            parser\n          );\n        });\n      }\n    }\n  }\n\n  // Include entry files\n  for (let i = 0, k = argv.length; i < k; ++i) {\n    const filename = argv[i];\n\n    let sourcePath = String(filename).replace(/\\\\/g, \"/\").replace(/(\\.ts|\\/)$/, \"\");\n\n    // Try entryPath.ts, then entryPath/index.ts\n    let sourceText = readFile(path.join(baseDir, sourcePath) + \".ts\");\n    if (sourceText === null) {\n      sourceText = readFile(path.join(baseDir, sourcePath, \"index.ts\"));\n      if (sourceText === null) {\n        return callback(Error(\"Entry file '\" + sourcePath + \".ts' not found.\"));\n      } else {\n        sourcePath += \"/index.ts\";\n      }\n    } else {\n      sourcePath += \".ts\";\n    }\n\n    stats.parseCount++;\n    stats.parseTime += measure(() => {\n\n      // if <pre> isDispathch == true </pre>, reproduce the code \n      if (!isDispatch) {\n        sourceText = exports.resolveSourceText(sourceText, null, exports.libraryFiles, null);\n        parser = assemblyscript.parseFile(sourceText, sourcePath, true, parser);\n      } else {\n        sourceText = exports.insertSerializeMethodText(sourcePath, sourceText);\n        let elementPath =  sourcePath.split(\".\")[0];\n        sourceText = exports.resolveSourceText(sourceText, exports.applyText, exports.libraryFiles, exports.abiObj, elementPath);\n        parser = assemblyscript.parseFile(sourceText, sourcePath, true, parser);\n      }\n    });\n\n\n    // Process backlog\n    while ((sourcePath = parser.nextFile()) != null) {\n      let found = false;\n\n      // Load library file if explicitly requested\n      if (sourcePath.startsWith(exports.libraryPrefix)) {\n        const plainName = sourcePath.substring(exports.libraryPrefix.length);\n        const indexName = sourcePath.substring(exports.libraryPrefix.length) + \"/index\";\n\n        if (exports.libraryFiles.hasOwnProperty(plainName)) {\n          sourceText = exports.libraryFiles[plainName];\n          sourcePath = exports.libraryPrefix + plainName + \".ts\";\n        } else if (exports.libraryFiles.hasOwnProperty(indexName)) {\n          sourceText = exports.libraryFiles[indexName];\n          sourcePath = exports.libraryPrefix + indexName + \".ts\";\n        } else {\n          for (let i = 0, k = customLibDirs.length; i < k; ++i) {\n            const dir = customLibDirs[i];\n\n            sourceText = readFile(path.join(dir, plainName + \".ts\"));\n            if (sourceText !== null) {\n              sourcePath = exports.libraryPrefix + plainName + \".ts\";\n              break;\n            } else {\n              sourceText = readFile(path.join(dir, indexName + \".ts\"));\n              if (sourceText !== null) {\n                sourcePath = exports.libraryPrefix + indexName + \".ts\";\n                break;\n              }\n            }\n          }\n        }\n\n        // Otherwise try nextFile.ts, nextFile/index.ts, ~lib/nextFile.ts, ~lib/nextFile/index.ts\n      } else {\n        const plainName = sourcePath;\n        const indexName = sourcePath + \"/index\";\n        sourceText = readFile(path.join(baseDir, plainName + \".ts\"));\n        if (sourceText !== null) {\n          sourcePath = plainName + \".ts\";\n        } else {\n          sourceText = readFile(path.join(baseDir, indexName + \".ts\"));\n          if (sourceText !== null) {\n            sourcePath = indexName + \".ts\";\n          } else if (!plainName.startsWith(\".\")) {\n            if (exports.libraryFiles.hasOwnProperty(plainName)) {\n              sourceText = exports.libraryFiles[plainName];\n              sourcePath = exports.libraryPrefix + plainName + \".ts\";\n            } else if (exports.libraryFiles.hasOwnProperty(indexName)) {\n              sourceText = exports.libraryFiles[indexName];\n              sourcePath = exports.libraryPrefix + indexName + \".ts\";\n            } else {\n              for (let i = 0, k = customLibDirs.length; i < k; ++i) {\n                const dir = customLibDirs[i];\n                sourceText = readFile(path.join(dir, plainName + \".ts\"));\n                if (sourceText !== null) {\n                  sourcePath = exports.libraryPrefix + plainName + \".ts\";\n                  break;\n                } else {\n                  sourceText = readFile(path.join(dir, indexName + \".ts\"));\n                  if (sourceText !== null) {\n                    sourcePath = exports.libraryPrefix + indexName + \".ts\";\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (sourceText == null) {\n        return callback(Error(\"Import file '\" + sourcePath + \".ts' not found.\"));\n      }\n      stats.parseCount++;\n      stats.parseTime += measure(() => {\n        // console.log(`source Text: ${sourceText}`);\n\n        if (isDispatch) {\n          // console.log(`SourcePath :${sourcePath}`);\n          sourceText = exports.insertSerializeMethodText(sourcePath, sourceText);\n        }\n        assemblyscript.parseFile(sourceText, sourcePath, false, parser);\n      });\n    }\n    if (checkDiagnostics(parser, stderr)) {\n      return callback(Error(\"Parse error\"));\n    }\n  }\n\n  applyTransform(\"afterParse\", parser);\n\n  // Finish parsing\n  const program = assemblyscript.finishParsing(parser);\n\n  // Set up optimization levels\n  var optimizeLevel = 0;\n  var shrinkLevel = 0;\n  if (args.optimize) {\n    optimizeLevel = exports.defaultOptimizeLevel;\n    shrinkLevel = exports.defaultShrinkLevel;\n  }\n  if (typeof args.optimizeLevel === \"number\") {\n    optimizeLevel = args.optimizeLevel;\n  }\n  if (typeof args.shrinkLevel === \"number\") {\n    shrinkLevel = args.shrinkLevel;\n  }\n  optimizeLevel = Math.min(Math.max(optimizeLevel, 0), 3);\n  shrinkLevel = Math.min(Math.max(shrinkLevel, 0), 2);\n\n  // Begin compilation\n  const compilerOptions = assemblyscript.createOptions();\n  assemblyscript.setTarget(compilerOptions, 0);\n  assemblyscript.setNoTreeShaking(compilerOptions, args.noTreeShaking);\n  assemblyscript.setNoAssert(compilerOptions, args.noAssert);\n  assemblyscript.setImportMemory(compilerOptions, args.importMemory);\n  assemblyscript.setImportTable(compilerOptions, args.importTable);\n  assemblyscript.setMemoryBase(compilerOptions, args.memoryBase >>> 0);\n  assemblyscript.setSourceMap(compilerOptions, args.sourceMap != null);\n  assemblyscript.setOptimizeLevelHints(compilerOptions, optimizeLevel, shrinkLevel);\n\n  if (!args.noLib) {\n    // Initialize default aliases\n    assemblyscript.setGlobalAlias(compilerOptions, \"Math\", \"NativeMath\");\n    assemblyscript.setGlobalAlias(compilerOptions, \"Mathf\", \"NativeMathf\");\n    assemblyscript.setGlobalAlias(compilerOptions, \"abort\", \"~lib/env/abort\");\n    assemblyscript.setGlobalAlias(compilerOptions, \"trace\", \"~lib/env/trace\");\n  }\n\n  // Add or override aliases if specified\n  if (args.use) {\n    let aliases = args.use;\n    for (let i = 0, k = aliases.length; i < k; ++i) {\n      let part = aliases[i];\n      let p = part.indexOf(\"=\");\n      if (p < 0) return callback(Error(\"Global alias '\" + part + \"' is invalid.\"));\n      let name = part.substring(0, p).trim();\n      let alias = part.substring(p + 1).trim();\n      if (!name.length) return callback(Error(\"Global alias '\" + part + \"' is invalid.\"));\n      assemblyscript.setGlobalAlias(compilerOptions, name, alias);\n    }\n  }\n\n  // Enable additional features if specified\n  var features = args.enable;\n  if (features != null) {\n    if (typeof features === \"string\") features = features.split(\",\");\n    for (let i = 0, k = features.length; i < k; ++i) {\n      let name = features[i].trim();\n      let flag = assemblyscript[\"FEATURE_\" + name.replace(/\\-/g, \"_\").toUpperCase()];\n      if (!flag) return callback(Error(\"Feature '\" + name + \"' is unknown.\"));\n      assemblyscript.enableFeature(compilerOptions, flag);\n    }\n  }\n\n  var module;\n  stats.compileCount++;\n  (() => {\n    try {\n      stats.compileTime += measure(() => {\n        module = assemblyscript.compileProgram(program, compilerOptions);\n      });\n    } catch (e) {\n      return callback(e);\n    }\n  })();\n\n  if (checkDiagnostics(parser, stderr)) {\n    if (module) module.dispose();\n    return callback(Error(\"Compile error\"));\n  }\n\n  // Validate the module if requested\n  if (args.validate) {\n    stats.validateCount++;\n    stats.validateTime += measure(() => {\n      if (!module.validate()) {\n        module.dispose();\n        return callback(Error(\"Validate error\"));\n      }\n    });\n  }\n\n  // Set Binaryen-specific options\n  if (args.trapMode === \"clamp\") {\n    stats.optimizeCount++;\n    stats.optimizeTime += measure(() => {\n      module.runPasses([\"trap-mode-clamp\"]);\n    });\n  } else if (args.trapMode === \"js\") {\n    stats.optimizeCount++;\n    stats.optimizeTime += measure(() => {\n      module.runPasses([\"trap-mode-js\"]);\n    });\n  } else if (args.trapMode !== \"allow\") {\n    module.dispose();\n    return callback(Error(\"Unsupported trap mode\"));\n  }\n\n  // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n  // see: https://github.com/WebAssembly/binaryen/pull/1596\n  if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n  module.setOptimizeLevel(optimizeLevel);\n  module.setShrinkLevel(shrinkLevel);\n  module.setDebugInfo(!args.noDebug);\n\n  var runPasses = [];\n  if (args.runPasses) {\n    if (typeof args.runPasses === \"string\") {\n      args.runPasses = args.runPasses.split(\",\");\n    }\n    if (args.runPasses.length) {\n      args.runPasses.forEach(pass => {\n        if (runPasses.indexOf(pass) < 0)\n          runPasses.push(pass);\n      });\n    }\n  }\n\n  // Optimize the module if requested\n  if (optimizeLevel > 0 || shrinkLevel > 0) {\n    stats.optimizeCount++;\n    stats.optimizeTime += measure(() => {\n      module.optimize();\n    });\n  }\n\n  // Run additional passes if requested\n  if (runPasses.length) {\n    stats.optimizeCount++;\n    stats.optimizeTime += measure(() => {\n      module.runPasses(runPasses.map(pass => pass.trim()));\n    });\n  }\n\n  if (!isDispatch) {\n    exports.abiObj = program.toAbi();\n    exports.applyText = exports.abiObj.dispatch;\n  }\n\n  // console.log(\"applyText:\" + exports.applyText);\n  if (args.applyText && isDispatch) {\n    console.log(\"The generated apply text:\");\n    console.log(exports.applyText);\n  }\n\n  // Prepare output\n  if (!args.noEmit) {\n    let hasStdout = false;\n    let hasOutput = false;\n\n    if (args.outFile != null) {\n      if (/\\.was?t$/.test(args.outFile) && args.textFile == null) {\n        args.textFile = args.outFile;\n      } else if (/\\.js$/.test(args.outFile) && args.asmjsFile == null) {\n        args.asmjsFile = args.outFile;\n      } else if (args.binaryFile == null) {\n        args.binaryFile = args.outFile;\n      }\n    }\n\n    // Write abi.file\n    if (args.abiFile != null) {\n      let abi;\n      if (args.abiFile && args.abiFile.length) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          abi = JSON.stringify(exports.abiObj.abiInfo, undefined, 2);\n        });\n\n        writeFile(path.join(baseDir, args.abiFile), abi);\n      } else if (!hasStdout) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          abi = JSON.stringify(exports.abiObj.abiInfo, undefined, 2);\n        });\n        writeStdout(abi);\n      }\n    }\n\n\n    // Write binary\n    if (args.binaryFile != null) {\n      let sourceMapURL = args.sourceMap != null\n        ? args.sourceMap.length\n          ? args.sourceMap\n          : path.basename(args.binaryFile) + \".map\"\n        : null;\n\n      let wasm;\n      stats.emitCount++;\n      stats.emitTime += measure(() => {\n        wasm = module.toBinary(sourceMapURL)\n      });\n\n      if (args.binaryFile.length) {\n        writeFile(path.join(baseDir, args.binaryFile), wasm.output);\n      } else {\n        writeStdout(wasm.output);\n        hasStdout = true;\n      }\n      hasOutput = true;\n\n      // Post-process source map\n      if (wasm.sourceMap != null) {\n        if (args.binaryFile.length) {\n          let sourceMap = JSON.parse(wasm.sourceMap);\n          sourceMap.sourceRoot = exports.sourceMapRoot;\n          sourceMap.sources.forEach((name, index) => {\n            let text = null;\n            if (name.startsWith(exports.libraryPrefix)) {\n              let stdName = name.substring(exports.libraryPrefix.length).replace(/\\.ts$/, \"\");\n              if (exports.libraryFiles.hasOwnProperty(stdName)) {\n                text = exports.libraryFiles[stdName];\n              } else {\n                for (let i = 0, k = customLibDirs.length; i < k; ++i) {\n                  text = readFile(path.join(\n                    customLibDirs[i],\n                    name.substring(exports.libraryPrefix.length))\n                  );\n                  if (text !== null) break;\n                }\n              }\n            } else {\n              text = readFile(path.join(baseDir, name));\n            }\n            if (text === null) {\n              return callback(Error(\"Source file '\" + name + \"' not found.\"));\n            }\n            if (!sourceMap.sourceContents) sourceMap.sourceContents = [];\n            sourceMap.sourceContents[index] = text;\n          });\n          writeFile(path.join(\n            baseDir,\n            path.dirname(args.binaryFile),\n            path.basename(sourceMapURL)\n          ), JSON.stringify(sourceMap));\n        } else {\n          stderr.write(\"Skipped source map (stdout already occupied)\" + EOL);\n        }\n      }\n    }\n\n    // Write asm.js\n    if (args.asmjsFile != null) {\n      let asm;\n      if (args.asmjsFile.length) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          asm = module.toAsmjs();\n        });\n        writeFile(path.join(baseDir, args.asmjsFile), asm);\n      } else if (!hasStdout) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          asm = module.toAsmjs();\n        });\n        writeStdout(asm);\n        hasStdout = true;\n      }\n      hasOutput = true;\n    }\n\n    // Write WebIDL\n    if (args.idlFile != null) {\n      let idl;\n      if (args.idlFile.length) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          idl = assemblyscript.buildIDL(program);\n        });\n        writeFile(path.join(baseDir, args.idlFile), idl);\n      } else if (!hasStdout) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          idl = assemblyscript.buildIDL(program);\n        });\n        writeStdout(idl);\n        hasStdout = true;\n      }\n      hasOutput = true;\n    }\n\n    // Write TypeScript definition\n    if (args.tsdFile != null) {\n      let tsd;\n      if (args.tsdFile.length) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          tsd = assemblyscript.buildTSD(program);\n        });\n        writeFile(path.join(baseDir, args.tsdFile), tsd);\n      } else if (!hasStdout) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          tsd = assemblyscript.buildTSD(program);\n        });\n        writeStdout(tsd);\n        hasStdout = true;\n      }\n      hasOutput = true;\n    }\n\n    // Write text (must be last)\n    if (args.textFile != null || !hasOutput) {\n      let wat;\n      if (args.textFile && args.textFile.length) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          wat = module.toText();\n        });\n        writeFile(path.join(baseDir, args.textFile), wat);\n      } else if (!hasStdout) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          wat = module.toText()\n        });\n        writeStdout(wat);\n      }\n    }\n  }\n\n  module.dispose();\n  if (args.measure) {\n    printStats(stats, stderr);\n  }\n  return callback(null);\n\n  function readFileNode(filename) {\n    try {\n      let text;\n      stats.readCount++;\n      stats.readTime += measure(() => {\n        text = fs.readFileSync(filename, { encoding: \"utf8\" });\n      });\n      return text;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function writeFileNode(filename, contents) {\n    try {\n      stats.writeCount++;\n      stats.writeTime += measure(() => {\n        if (typeof contents === \"string\") {\n          fs.writeFileSync(filename, contents, { encoding: \"utf8\" });\n        } else {\n          fs.writeFileSync(filename, contents);\n        }\n      });\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function listFilesNode(dirname) {\n    var files;\n    try {\n      stats.readTime += measure(() => {\n        files = fs.readdirSync(dirname).filter(file => /^(?!.*\\.d\\.ts$).*\\.ts$/.test(file));\n      });\n      return files;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  function writeStdout(contents) {\n    if (!writeStdout.used) {\n      stats.writeCount++;\n      writeStdout.used = true;\n    }\n    stats.writeTime += measure(() => {\n      if (typeof contents === \"string\") {\n        stdout.write(contents, { encoding: \"utf8\" });\n      } else {\n        stdout.write(contents);\n      }\n    });\n  }\n}\n\nvar argumentSubstitutions = {\n  \"-O\": [\"--optimize\"],\n  \"-Os\": [\"--optimize\", \"--shrinkLevel\", \"1\"],\n  \"-Oz\": [\"--optimize\", \"--shrinkLevel\", \"2\"],\n  \"-O0\": [\"--optimizeLevel\", \"0\", \"--shrinkLevel\", \"0\"],\n  \"-O0s\": [\"--optimizeLevel\", \"0\", \"--shrinkLevel\", \"1\"],\n  \"-O0z\": [\"--optimizeLevel\", \"0\", \"--shrinkLevel\", \"2\"],\n  \"-O1\": [\"--optimizeLevel\", \"1\", \"--shrinkLevel\", \"0\"],\n  \"-O1s\": [\"--optimizeLevel\", \"1\", \"--shrinkLevel\", \"1\"],\n  \"-O1z\": [\"--optimizeLevel\", \"1\", \"--shrinkLevel\", \"2\"],\n  \"-O2\": [\"--optimizeLevel\", \"2\", \"--shrinkLevel\", \"0\"],\n  \"-O2s\": [\"--optimizeLevel\", \"2\", \"--shrinkLevel\", \"1\"],\n  \"-O2z\": [\"--optimizeLevel\", \"2\", \"--shrinkLevel\", \"2\"],\n  \"-O3\": [\"--optimizeLevel\", \"3\", \"--shrinkLevel\", \"0\"],\n  \"-O3s\": [\"--optimizeLevel\", \"3\", \"--shrinkLevel\", \"1\"],\n  \"-O3z\": [\"--optimizeLevel\", \"3\", \"--shrinkLevel\", \"2\"],\n};\n\n/** Checks diagnostics emitted so far for errors. */\nfunction checkDiagnostics(emitter, stderr) {\n  var diagnostic;\n  var hasErrors = false;\n  while ((diagnostic = assemblyscript.nextDiagnostic(emitter)) != null) {\n    if (stderr) {\n      stderr.write(\n        assemblyscript.formatDiagnostic(diagnostic, stderr.isTTY, true) +\n        EOL + EOL\n      );\n    }\n    if (assemblyscript.isError(diagnostic)) hasErrors = true;\n  }\n  return hasErrors;\n}\n\nexports.checkDiagnostics = checkDiagnostics;\n\n/** Creates an empty set of stats. */\nfunction createStats() {\n  return {\n    readTime: 0,\n    readCount: 0,\n    writeTime: 0,\n    writeCount: 0,\n    parseTime: 0,\n    parseCount: 0,\n    compileTime: 0,\n    compileCount: 0,\n    emitTime: 0,\n    emitCount: 0,\n    validateTime: 0,\n    validateCount: 0,\n    optimizeTime: 0,\n    optimizeCount: 0\n  };\n}\n\nexports.createStats = createStats;\n\nif (!process.hrtime) process.hrtime = require(\"browser-process-hrtime\");\n\n/** Measures the execution time of the specified function.  */\nfunction measure(fn) {\n  const start = process.hrtime();\n  fn();\n  const times = process.hrtime(start);\n  return times[0] * 1e9 + times[1];\n}\n\nexports.measure = measure;\n\n/** Formats a high resolution time to a human readable string. */\nfunction formatTime(time) {\n  return time ? (time / 1e6).toFixed(3) + \" ms\" : \"N/A\";\n}\n\nexports.formatTime = formatTime;\n\n/** Formats and prints out the contents of a set of stats. */\nfunction printStats(stats, output) {\n  function format(time, count) {\n    return formatTime(time);\n  }\n  (output || process.stdout).write([\n    \"I/O Read  : \" + format(stats.readTime, stats.readCount),\n    \"I/O Write : \" + format(stats.writeTime, stats.writeCount),\n    \"Parse     : \" + format(stats.parseTime, stats.parseCount),\n    \"Compile   : \" + format(stats.compileTime, stats.compileCount),\n    \"Emit      : \" + format(stats.emitTime, stats.emitCount),\n    \"Validate  : \" + format(stats.validateTime, stats.validateCount),\n    \"Optimize  : \" + format(stats.optimizeTime, stats.optimizeCount)\n  ].join(EOL) + EOL);\n}\n\nexports.printStats = printStats;\n\nvar allocBuffer = typeof global !== \"undefined\" && global.Buffer\n  ? global.Buffer.allocUnsafe || function (len) { return new global.Buffer(len); }\n  : function (len) { return new Uint8Array(len) };\n\n/** Creates a memory stream that can be used in place of stdout/stderr. */\nfunction createMemoryStream(fn) {\n  var stream = [];\n  stream.write = function (chunk) {\n    if (fn) fn(chunk);\n    if (typeof chunk === \"string\") {\n      let buffer = allocBuffer(utf8.length(chunk));\n      utf8.write(chunk, buffer, 0);\n      chunk = buffer;\n    }\n    this.push(chunk);\n  };\n  stream.reset = function () {\n    stream.length = 0;\n  };\n  stream.toBuffer = function () {\n    var offset = 0, i = 0, k = this.length;\n    while (i < k) offset += this[i++].length;\n    var buffer = allocBuffer(offset);\n    offset = i = 0;\n    while (i < k) {\n      buffer.set(this[i], offset);\n      offset += this[i].length;\n      ++i;\n    }\n    return buffer;\n  };\n  stream.toString = function () {\n    var buffer = this.toBuffer();\n    return utf8.read(buffer, 0, buffer.length);\n  };\n  return stream;\n}\n\nexports.createMemoryStream = createMemoryStream;\n\n/** Compatible TypeScript compiler options for syntax highlighting etc. */\nexports.tscOptions = {\n  alwaysStrict: true,\n  noImplicitAny: true,\n  noImplicitReturns: true,\n  noImplicitThis: true,\n  noEmitOnError: true,\n  strictNullChecks: true,\n  experimentalDecorators: true,\n  target: \"esnext\",\n  module: \"commonjs\",\n  noLib: true,\n  types: [],\n  allowJs: false\n};\n\nfunction resolveSourceText(sourceText, applyText, library, abiObj, filename) {\n  let memoryLib = \"allocate/arena\";\n  let resultTextBuffer = new Array();\n  if (library[memoryLib] == undefined) {\n    resultTextBuffer.push(`import \"allocator/arena\";`);\n  }\n\n  let importedLibrary = [\"NEX\", \"N\", \"NameEx\" ];\n  if(abiObj){\n\n    for(let library of importedLibrary){\n      let internalPath = path.join(filename, library);\n\n      // console.log(`internal path ${internalPath}`);\n\n      if(!abiObj.hasElement(internalPath)){\n\n        // console.log(`ddd internal path ${internalPath}`);\n\n        resultTextBuffer.push(`import { ${library} }from \"../../src/name_ex\";`);\n      }\n    }\n  }\n\n  resultTextBuffer.push(sourceText);\n\n  if (applyText) {\n    resultTextBuffer.push(applyText);\n  }\n  return resultTextBuffer.join(\"\\n\");\n}\n\nexports.resolveSourceText = resolveSourceText;\n\nfunction insertSerializeMethodText(sourcePath, sourceText) {\n  let serializeLookup = exports.abiObj.fileSerializeLookup;\n  if (serializeLookup.has(sourcePath)) {\n\n    let serializeArray = serializeLookup.get(sourcePath);\n    let data = sourceText.split(EOL);\n    // console.log(`data.length :${data.length}`);\n    for (let serialize of serializeArray) {\n      data.splice(serialize.line, 0, serialize.toSerialize());\n      // data.splice(serialize.line, 0, EOL);\n      data.splice(serialize.line, 0, serialize.toDeserialize());\n      // data.splice(serialize.line, 0, EOL);\n      data.splice(serialize.line, 0, serialize.toPrimarykey());\n      // console.log( `${serialize.line}`);\n    }\n    console.log(`return sourceText: ${data.join(EOL)}`);\n    return data.join(EOL);\n  } else {\n    return sourceText;\n  }\n}\n\nexports.insertSerializeMethodText = insertSerializeMethodText;\n\n\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","var proc = typeof process !== \"undefined\" && process || {};\nvar isCI = proc.env && \"CI\" in proc.env; // doesn't work when bundled because 'process' is a mock\n\nfunction from(stream, base) {\n  var colors = base || {};\n  colors.supported = (stream && !!stream.isTTY) || isCI;\n  colors.gray = text => colors.supported ? exports.GRAY + text + exports.RESET : text;\n  colors.red = text => colors.supported ? exports.RED + text + exports.RESET : text;\n  colors.green = text => colors.supported ? exports.GREEN + text + exports.RESET : text;\n  colors.yellow = text => colors.supported ? exports.YELLOW + text + exports.RESET : text;\n  colors.blue = text => colors.supported ? exports.BLUE + text + exports.RESET : text;\n  colors.magenta = text => colors.supported ? exports.MAGENTA + text + exports.RESET : text;\n  colors.cyan = text => colors.supported ? exports.CYAN + text + exports.RESET : text;\n  colors.white = text => colors.supported ? exports.WHITE + text + exports.RESET : text;\n  return colors;\n}\n\nexports.stdout = from(proc.stdout, exports);\nexports.stderr = from(proc.stderr);\nexports.from = from;\n\nexports.GRAY = \"\\u001b[90m\";\nexports.RED = \"\\u001b[91m\";\nexports.GREEN = \"\\u001b[92m\";\nexports.YELLOW = \"\\u001b[93m\";\nexports.BLUE = \"\\u001b[94m\";\nexports.MAGENTA = \"\\u001b[95m\";\nexports.CYAN = \"\\u001b[96m\";\nexports.WHITE = \"\\u001b[97m\";\nexports.RESET = \"\\u001b[0m\";\n","// type | meaning\n// -----|---------------\n// b    | boolean\n// i    | integer\n// f    | float\n// s    | string\n// I    | integer array\n// F    | float array\n// S    | string array\n\n/** Parses the specified command line arguments according to the given configuration. */\nfunction parse(argv, config) {\n  var options = {};\n  var unknown = [];\n  var arguments = [];\n  var trailing = [];\n\n  // make an alias map and initialize defaults\n  var aliases = {};\n  Object.keys(config).forEach(key => {\n    var option = config[key];\n    if (option.alias != null) {\n      if (typeof option.alias === \"string\") aliases[option.alias] = key;\n      else if (Array.isArray(option.alias)) option.alias.forEach(alias => aliases[alias] = key);\n    }\n    if (option.default != null) options[key] = option.default;\n  });\n\n  // iterate over argv\n  for (var i = 0, k = (argv = argv.slice()).length; i < k; ++i) {\n    let arg = argv[i];\n    if (arg == \"--\") { ++i; break; }\n    let match = /^(?:(\\-\\w)(?:=(.*))?|(\\-\\-\\w{2,})(?:=(.*))?)$/.exec(arg), option, key;\n    if (match) {\n      if (config[arg]) option = config[key = arg]; // exact\n      else if (match[1] != null) { // alias\n        option = config[key = aliases[match[1].substring(1)]];\n        if (option && match[2] != null) argv[i--] = match[2];\n      } else if (match[3] != null) { // full\n        option = config[key = match[3].substring(2)];\n        if (option && match[4] != null) argv[i--] = match[4];\n      }\n    } else {\n      if (arg.charCodeAt(0) == 45) option = config[key = arg]; // exact\n      else { arguments.push(arg); continue; } // argument\n    }\n    if (option) {\n      if (option.type == null || option.type === \"b\") options[key] = true; // flag\n      else {\n        if (i + 1 < argv.length && argv[i + 1].charCodeAt(0) != 45) { // present\n          switch (option.type) {\n            case \"i\": options[key] = parseInt(argv[++i], 10); break;\n            case \"I\": options[key] = (options[key] || []).concat(parseInt(argv[++i], 10)); break;\n            case \"f\": options[key] = parseFloat(argv[++i]); break;\n            case \"F\": options[key] = (options[key] || []).concat(parseFloat(argv[++i])); break;\n            case \"s\": options[key] = String(argv[++i]); break;\n            case \"S\": options[key] = (options[key] || []).concat(argv[++i].split(\",\")); break;\n            default: unknown.push(arg); --i;\n          }\n        } else { // omitted\n          switch (option.type) {\n            case \"i\":\n            case \"f\": options[key] = option.default || 0; break;\n            case \"s\": options[key] = option.default || \"\"; break;\n            case \"I\":\n            case \"F\":\n            case \"S\": options[key] = options.default || []; break;\n            default: unknown.push(arg);\n          }\n        }\n      }\n      if (option.value) Object.keys(option.value).forEach(k => options[k] = option.value[k]);\n    } else unknown.push(arg);\n  }\n  while (i < k) trailing.push(argv[i++]); // trailing\n\n  return { options, unknown, arguments, trailing };\n}\n\nexports.parse = parse;\n\n/** Generates the help text for the specified configuration. */\nfunction help(config, options) {\n  if (!options) options = {};\n  var indent = options.indent || 2;\n  var padding = options.padding || 24;\n  var eol = options.eol || \"\\n\";\n  var sb = [];\n  Object.keys(config).forEach(key => {\n    var option = config[key];\n    if (option.description == null) return;\n    var text = \"\";\n    while (text.length < indent) text += \" \";\n    text += \"--\" + key;\n    if (option.alias) text += \", -\" + option.alias;\n    while (text.length < padding) text += \" \";\n    if (Array.isArray(option.description)) {\n      sb.push(text + option.description[0] + option.description.slice(1).map(line => {\n        for (let i = 0; i < padding; ++i) line = \" \" + line;\n        return eol + line;\n      }).join(\"\"));\n    } else sb.push(text + option.description);\n  });\n  return sb.join(eol);\n}\n\nexports.help = help;\n","if(typeof __WEBPACK_EXTERNAL_MODULE__9__ === 'undefined') {var e = new Error(\"Cannot find module 'assemblyscript'\"); e.code = 'MODULE_NOT_FOUND'; throw e;}\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__9__;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 11;","module.exports = process.hrtime || hrtime\n\n// polyfil for window.performance.now\nvar performance = global.performance || {}\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime() }\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nfunction hrtime(previousTimestamp){\n  var clocktime = performanceNow.call(performance)*1e-3\n  var seconds = Math.floor(clocktime)\n  var nanoseconds = Math.floor((clocktime%1)*1e9)\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0]\n    nanoseconds = nanoseconds - previousTimestamp[1]\n    if (nanoseconds<0) {\n      seconds--\n      nanoseconds += 1e9\n    }\n  }\n  return [seconds,nanoseconds]\n}"],"sourceRoot":""}