{"version":3,"sources":["webpack://asc/webpack/universalModuleDefinition","webpack://asc/webpack/bootstrap","webpack://asc/../node_modules/node-libs-browser/mock/process.js","webpack://asc/../node_modules/webpack/buildin/global.js","webpack://asc/../node_modules/path-browserify/index.js","webpack://asc/../node_modules/browser-process-hrtime/index.js","webpack://asc/. sync","webpack://asc/external \"assemblyscript\"","webpack://asc/./util/options.js","webpack://asc/./util/colors.js","webpack://asc/../node_modules/@protobufjs/utf8/index.js","webpack://asc/./asc.js"],"names":["root","factory","exports","module","require","e","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__6__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","nextTick","fn","setTimeout","platform","arch","execPath","title","pid","browser","env","argv","binding","Error","path","cwd","chdir","dir","resolve","exit","kill","umask","dlopen","uptime","memoryUsage","uvCounters","features","g","Function","eval","window","process","normalizeArray","parts","allowAboveRoot","up","length","last","splice","unshift","splitPathRe","splitPath","filename","exec","slice","filter","xs","f","res","push","resolvedPath","resolvedAbsolute","arguments","TypeError","charAt","split","join","normalize","isAbsolute","trailingSlash","substr","paths","Array","index","relative","from","to","trim","arr","start","end","fromParts","toParts","Math","min","samePartsLength","outputParts","concat","sep","delimiter","dirname","result","basename","ext","extname","str","len","global","hrtime","previousTimestamp","clocktime","performanceNow","performance","seconds","floor","nanoseconds","now","mozNow","msNow","oNow","webkitNow","Date","getTime","webpackEmptyContext","req","code","keys","id","parse","config","options","unknown","trailing","aliases","forEach","option","alias","isArray","default","k","arg","match","substring","charCodeAt","type","parseInt","parseFloat","String","help","indent","padding","eol","sb","description","text","map","line","proc","isCI","stream","base","colors","supported","isTTY","gray","GRAY","RESET","red","RED","green","GREEN","yellow","YELLOW","blue","BLUE","magenta","MAGENTA","cyan","CYAN","white","WHITE","stdout","stderr","utf8","string","read","buffer","chunk","fromCharCode","apply","write","offset","c1","c2","fs","colorsUtil","optionsUtil","EOL","assemblyscript","isDev","register","project","e_ts","stack","removeAllListeners","isBundle","version","sourceMapRoot","libraryPrefix","LIBRARY_PREFIX","nodeModulesPrefix","defaultOptimizeLevel","defaultShrinkLevel","libraryFiles","allocator/arena","allocator/buddy","allocator/emscripten","allocator/system","allocator/tlsf","array","arraybuffer","block","builtins","collector/itcm","error","internal/allocator","internal/array","internal/arraybuffer","internal/hash","internal/string","internal/typedarray","iterator","math","memory","msg","polyfills","regexp","set","symbol","typedarray","libDir","bundled","sync","file","replace","readFileSync","definitionFiles","assembly","portable","stdDir","compileString","sources","input.ts","output","createMemoryStream","binary","val","main","readFile","writeFile","contents","listFiles","callback","isDispatch","readFileNode","writeFileNode","listFilesNode","stats","createStats","opts","args","noColors","err","out","color","baseDir","transforms","transform","parser","noLib","libPath","indexOf","parseCount","parseTime","measure","parseFile","customLibDirs","lib","libFiles","endsWith","j","libText","sourcePath","sourceText","insertSerializeMethodText","resolveSourceText","applyText","nextFile","startsWith","plainName","indexName","checkDiagnostics","applyTransform","program","finishParsing","optimizeLevel","shrinkLevel","optimize","max","compilerOptions","createOptions","setTarget","setNoTreeShaking","noTreeShaking","setNoAssert","noAssert","setImportMemory","importMemory","setImportTable","importTable","setMemoryBase","memoryBase","setSourceMap","sourceMap","setOptimizeLevelHints","setGlobalAlias","use","part","enable","flag","toUpperCase","enableFeature","compileCount","compileTime","compileProgram","dispose","validate","validateCount","validateTime","trapMode","optimizeCount","optimizeTime","runPasses","setOptimizeLevel","setShrinkLevel","setDebugInfo","noDebug","pass","abiObj","toAbi","dispatch","console","log","noEmit","hasStdout","hasOutput","outFile","test","textFile","asmjsFile","binaryFile","abiFile","abi","emitCount","emitTime","JSON","stringify","abiInfo","undefined","writeStdout","wasm","sourceMapURL","toBinary","sourceRoot","stdName","sourceContents","asm","toAsmjs","idlFile","idl","buildIDL","tsdFile","tsd","buildTSD","wat","toText","printStats","readCount","readTime","encoding","writeCount","writeTime","writeFileSync","files","readdirSync","used","argumentSubstitutions","-O","-Os","-Oz","-O0","-O0s","-O0z","-O1","-O1s","-O1z","-O2","-O2s","-O2z","-O3","-O3s","-O3z","emitter","diagnostic","hasErrors","nextDiagnostic","formatDiagnostic","isError","times","formatTime","time","toFixed","format","count","allocBuffer","Buffer","allocUnsafe","Uint8Array","reset","toBuffer","toString","library","resultTextBuffer","serializeLookup","fileSerializeLookup","has","serializeArray","data","serialize","toSerialize","toDeserialize","toPrimarykey","tscOptions","alwaysStrict","noImplicitAny","noImplicitReturns","noImplicitThis","noEmitOnError","strictNullChecks","experimentalDecorators","target","types","allowJs"],"mappings":"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","file":"asc.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory((function webpackLoadOptionalExternalModule() { try { return require(\"assemblyscript\"); } catch(e) {} }()));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"assemblyscript\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"asc\"] = factory((function webpackLoadOptionalExternalModule() { try { return require(\"assemblyscript\"); } catch(e) {} }()));\n\telse\n\t\troot[\"asc\"] = factory(root[\"assemblyscript\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__6__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","exports.nextTick = function nextTick(fn) {\n\tsetTimeout(fn, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = require('path');\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","module.exports = process.hrtime || hrtime\n\n// polyfil for window.performance.now\nvar performance = global.performance || {}\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime() }\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nfunction hrtime(previousTimestamp){\n  var clocktime = performanceNow.call(performance)*1e-3\n  var seconds = Math.floor(clocktime)\n  var nanoseconds = Math.floor((clocktime%1)*1e9)\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0]\n    nanoseconds = nanoseconds - previousTimestamp[1]\n    if (nanoseconds<0) {\n      seconds--\n      nanoseconds += 1e9\n    }\n  }\n  return [seconds,nanoseconds]\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 4;","if(typeof __WEBPACK_EXTERNAL_MODULE__6__ === 'undefined') {var e = new Error(\"Cannot find module 'assemblyscript'\"); e.code = 'MODULE_NOT_FOUND'; throw e;}\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__6__;","// type | meaning\n// -----|---------------\n// b    | boolean\n// i    | integer\n// f    | float\n// s    | string\n// I    | integer array\n// F    | float array\n// S    | string array\n\n/** Parses the specified command line arguments according to the given configuration. */\nfunction parse(argv, config) {\n  var options = {};\n  var unknown = [];\n  var arguments = [];\n  var trailing = [];\n\n  // make an alias map and initialize defaults\n  var aliases = {};\n  Object.keys(config).forEach(key => {\n    var option = config[key];\n    if (option.alias != null) {\n      if (typeof option.alias === \"string\") aliases[option.alias] = key;\n      else if (Array.isArray(option.alias)) option.alias.forEach(alias => aliases[alias] = key);\n    }\n    if (option.default != null) options[key] = option.default;\n  });\n\n  // iterate over argv\n  for (var i = 0, k = (argv = argv.slice()).length; i < k; ++i) {\n    let arg = argv[i];\n    if (arg == \"--\") { ++i; break; }\n    let match = /^(?:(\\-\\w)(?:=(.*))?|(\\-\\-\\w{2,})(?:=(.*))?)$/.exec(arg), option, key;\n    if (match) {\n      if (config[arg]) option = config[key = arg]; // exact\n      else if (match[1] != null) { // alias\n        option = config[key = aliases[match[1].substring(1)]];\n        if (option && match[2] != null) argv[i--] = match[2];\n      } else if (match[3] != null) { // full\n        option = config[key = match[3].substring(2)];\n        if (option && match[4] != null) argv[i--] = match[4];\n      }\n    } else {\n      if (arg.charCodeAt(0) == 45) option = config[key = arg]; // exact\n      else { arguments.push(arg); continue; } // argument\n    }\n    if (option) {\n      if (option.type == null || option.type === \"b\") options[key] = true; // flag\n      else {\n        if (i + 1 < argv.length && argv[i + 1].charCodeAt(0) != 45) { // present\n          switch (option.type) {\n            case \"i\": options[key] = parseInt(argv[++i], 10); break;\n            case \"I\": options[key] = (options[key] || []).concat(parseInt(argv[++i], 10)); break;\n            case \"f\": options[key] = parseFloat(argv[++i]); break;\n            case \"F\": options[key] = (options[key] || []).concat(parseFloat(argv[++i])); break;\n            case \"s\": options[key] = String(argv[++i]); break;\n            case \"S\": options[key] = (options[key] || []).concat(argv[++i].split(\",\")); break;\n            default: unknown.push(arg); --i;\n          }\n        } else { // omitted\n          switch (option.type) {\n            case \"i\":\n            case \"f\": options[key] = option.default || 0; break;\n            case \"s\": options[key] = option.default || \"\"; break;\n            case \"I\":\n            case \"F\":\n            case \"S\": options[key] = options.default || []; break;\n            default: unknown.push(arg);\n          }\n        }\n      }\n      if (option.value) Object.keys(option.value).forEach(k => options[k] = option.value[k]);\n    } else unknown.push(arg);\n  }\n  while (i < k) trailing.push(argv[i++]); // trailing\n\n  return { options, unknown, arguments, trailing };\n}\n\nexports.parse = parse;\n\n/** Generates the help text for the specified configuration. */\nfunction help(config, options) {\n  if (!options) options = {};\n  var indent = options.indent || 2;\n  var padding = options.padding || 24;\n  var eol = options.eol || \"\\n\";\n  var sb = [];\n  Object.keys(config).forEach(key => {\n    var option = config[key];\n    if (option.description == null) return;\n    var text = \"\";\n    while (text.length < indent) text += \" \";\n    text += \"--\" + key;\n    if (option.alias) text += \", -\" + option.alias;\n    while (text.length < padding) text += \" \";\n    if (Array.isArray(option.description)) {\n      sb.push(text + option.description[0] + option.description.slice(1).map(line => {\n        for (let i = 0; i < padding; ++i) line = \" \" + line;\n        return eol + line;\n      }).join(\"\"));\n    } else sb.push(text + option.description);\n  });\n  return sb.join(eol);\n}\n\nexports.help = help;\n","var proc = typeof process !== \"undefined\" && process || {};\nvar isCI = proc.env && \"CI\" in proc.env; // doesn't work when bundled because 'process' is a mock\n\nfunction from(stream, base) {\n  var colors = base || {};\n  colors.supported = (stream && !!stream.isTTY) || isCI;\n  colors.gray = text => colors.supported ? exports.GRAY + text + exports.RESET : text;\n  colors.red = text => colors.supported ? exports.RED + text + exports.RESET : text;\n  colors.green = text => colors.supported ? exports.GREEN + text + exports.RESET : text;\n  colors.yellow = text => colors.supported ? exports.YELLOW + text + exports.RESET : text;\n  colors.blue = text => colors.supported ? exports.BLUE + text + exports.RESET : text;\n  colors.magenta = text => colors.supported ? exports.MAGENTA + text + exports.RESET : text;\n  colors.cyan = text => colors.supported ? exports.CYAN + text + exports.RESET : text;\n  colors.white = text => colors.supported ? exports.WHITE + text + exports.RESET : text;\n  return colors;\n}\n\nexports.stdout = from(proc.stdout, exports);\nexports.stderr = from(proc.stderr);\nexports.from = from;\n\nexports.GRAY = \"\\u001b[90m\";\nexports.RED = \"\\u001b[91m\";\nexports.GREEN = \"\\u001b[92m\";\nexports.YELLOW = \"\\u001b[93m\";\nexports.BLUE = \"\\u001b[94m\";\nexports.MAGENTA = \"\\u001b[95m\";\nexports.CYAN = \"\\u001b[96m\";\nexports.WHITE = \"\\u001b[97m\";\nexports.RESET = \"\\u001b[0m\";\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","/**\n * Compiler frontend for node.js\n *\n * Uses the low-level API exported from src/index.ts so it works with the compiler compiled to\n * JavaScript as well as the compiler compiled to WebAssembly (eventually). Runs the sources\n * directly through ts-node if distribution files are not present (indicated by a `-dev` version).\n *\n * Can also be packaged as a bundle suitable for in-browser use with the standard library injected\n * in the build step. See dist/asc.js for the bundle and webpack.config.js for building details.\n *\n * @module cli/asc\n */\n\n// Use \".\" instead of \"/\" as cwd in browsers\nif (process.browser) process.cwd = function() { return \".\"; };\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst utf8 = require(\"@protobufjs/utf8\");\nconst colorsUtil = require(\"./util/colors\");\nconst optionsUtil = require(\"./util/options\");\nconst EOL = process.platform === \"win32\" ? \"\\r\\n\" : \"\\n\";\n\n// Use distribution files if present, otherwise run the sources directly\nvar assemblyscript, isDev = false;\n(() => {\n  try { // `asc` on the command line\n    assemblyscript = require(\"../dist/assemblyscript.js\");\n  } catch (e) {\n    try { // `asc` on the command line without dist files\n      require(\"ts-node\").register({ project: path.join(__dirname, \"..\", \"src\", \"tsconfig.json\") });\n      require(\"../src/glue/js\");\n      assemblyscript = require(\"../src\");\n      isDev = true;\n    } catch (e_ts) {\n      try { // `require(\"dist/asc.js\")` in explicit browser tests\n        assemblyscript = eval(\"require('./assemblyscript')\");\n      } catch (e) {\n        // combine both errors that lead us here\n        e.stack = e_ts.stack + \"\\n---\\n\" + e.stack;\n        // Emscripten adds an `uncaughtException` listener to Binaryen that results in an additional\n        // useless code fragment on top of the actual error. suppress this:\n        if (process.removeAllListeners) process.removeAllListeners(\"uncaughtException\");\n        throw e;\n      }\n    }\n  }\n})();\n\n/** Whether this is a webpack bundle or not. */\nexports.isBundle = typeof BUNDLE_VERSION === \"string\";\n\n/** Whether asc runs the sources directly or not. */\nexports.isDev = isDev;\n\n/** AssemblyScript version. */\nexports.version = exports.isBundle ? BUNDLE_VERSION : require(\"../package.json\").version;\n\n/** Available CLI options. */\nexports.options = require(\"./asc.json\");\n\n/** Common root used in source maps. */\nexports.sourceMapRoot = \"assemblyscript:///\";\n\n/** Prefix used for library files. */\nexports.libraryPrefix = assemblyscript.LIBRARY_PREFIX;\n\n/** node modules path */\nexports.nodeModulesPrefix = \"./node_modules/\";\n\n/** Default Binaryen optimization level. */\nexports.defaultOptimizeLevel = 2;\n\n/** Default Binaryen shrink level. */\nexports.defaultShrinkLevel = 1;\n\n/** Bundled library files. */\nexports.libraryFiles = exports.isBundle ? BUNDLE_LIBRARY : (() => { // set up if not a bundle\n  const libDir = path.join(__dirname, \"..\", \"std\", \"assembly\");\n  const libFiles = require(\"glob\").sync(\"**/!(*.d).ts\", { cwd: libDir });\n  const bundled = {};\n  libFiles.forEach(file => bundled[file.replace(/\\.ts$/, \"\")] = fs.readFileSync(path.join(libDir, file), \"utf8\" ));\n  return bundled;\n})();\n\n/** Bundled definition files. */\nexports.definitionFiles = exports.isBundle ? BUNDLE_DEFINITIONS : (() => { // set up if not a bundle\n  const stdDir = path.join(__dirname, \"..\", \"std\");\n  return {\n    \"assembly\": fs.readFileSync(path.join(stdDir, \"assembly\", \"index.d.ts\"), \"utf8\"),\n    \"portable\": fs.readFileSync(path.join(stdDir, \"portable\", \"index.d.ts\"), \"utf8\")\n  };\n\n})();\n\n/** Convenience function that parses and compiles source strings directly. */\nexports.compileString = (sources, options) => {\n  if (typeof sources === \"string\") sources = { \"input.ts\": sources };\n  const output = Object.create({\n    stdout: createMemoryStream(),\n    stderr: createMemoryStream(),\n    binary: null,\n    text: null\n  });\n  var argv = [\n    \"--binaryFile\", \"binary\",\n    \"--textFile\", \"text\",\n  ];\n  Object.keys(options || {}).forEach(key => {\n    var val = options[key];\n    if (Array.isArray(val)) val.forEach(val => argv.push(\"--\" + key, String(val)));\n    else argv.push(\"--\" + key, String(val));\n  });\n  exports.main(argv.concat(Object.keys(sources)), {\n    stdout: output.stdout,\n    stderr: output.stderr,\n    readFile: name => sources.hasOwnProperty(name) ? sources[name] : null,\n    writeFile: (name, contents) => output[name] = contents,\n    listFiles: () => []\n  });\n  return output;\n}\n\n/** Runs the command line utility using the specified arguments array. */\nexports.main = function main(argv, options, callback, isDispatch) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  } else if (!options) {\n    options = {};\n  }\n\n  const stdout = options.stdout || process.stdout;\n  const stderr = options.stderr || process.stderr;\n  const readFile = options.readFile || readFileNode;\n  const writeFile = options.writeFile || writeFileNode;\n  const listFiles = options.listFiles || listFilesNode;\n  const stats = options.stats || createStats();\n\n  // Output must be specified if not present in the environment\n  if (!stdout) throw Error(\"'options.stdout' must be specified\");\n  if (!stderr) throw Error(\"'options.stderr' must be specified\");\n\n  const opts = optionsUtil.parse(argv, exports.options);\n  const args = opts.options;\n  argv = opts.arguments;\n  if (args.noColors) {\n    colorsUtil.stdout.supported =\n    colorsUtil.stderr.supported = false;\n  } else {\n    colorsUtil.stdout = colorsUtil.from(stdout);\n    colorsUtil.stderr = colorsUtil.from(stderr);\n  }\n\n  // Check for unknown arguments\n  if (opts.unknown.length) {\n    opts.unknown.forEach(arg => {\n      stderr.write(colorsUtil.stderr.yellow(\"WARN: \") + \"Unknown option '\" + arg + \"'\" + EOL);\n    });\n  }\n\n  // Check for trailing arguments\n  if (opts.trailing.length) {\n    stderr.write(colorsUtil.stderr.yellow(\"WARN: \") + \"Unsupported trailing arguments: \" + opts.trailing.join(\" \") + EOL);\n  }\n\n  // Use default callback if none is provided\n  if (!callback) callback = function defaultCallback(err) {\n    var code = 0;\n    if (err) {\n      stderr.write(colorsUtil.stderr.red(\"ERROR: \") + err.stack.replace(/^ERROR: /i, \"\") + EOL);\n      code = 1;\n    }\n    return code;\n  };\n\n  // Just print the version if requested\n  if (args.version) {\n    stdout.write(\"Version \" + exports.version + (isDev ? \"-dev\" : \"\") + EOL);\n    return callback(null);\n  }\n  // Print the help message if requested or no source files are provided\n  if (args.help || !argv.length) {\n    var out = args.help ? stdout : stderr;\n    var color = args.help ? colorsUtil.stdout : colorsUtil.stderr;\n    out.write([\n      color.white(\"SYNTAX\"),\n      \"  \" + color.cyan(\"asc\") + \" [entryFile ...] [options]\",\n      \"\",\n      color.white(\"EXAMPLES\"),\n      \"  \" + color.cyan(\"asc\") + \" hello.ts\",\n      \"  \" + color.cyan(\"asc\") + \" hello.ts -b hello.wasm -t hello.wat\",\n      \"  \" + color.cyan(\"asc\") + \" hello1.ts hello2.ts -b -O > hello.wasm\",\n      \"\",\n      color.white(\"OPTIONS\"),\n    ].concat(\n      optionsUtil.help(exports.options, 24, EOL)\n    ).join(EOL) + EOL);\n    return callback(null);\n  }\n\n  // I/O must be specified if not present in the environment\n  if (!fs.readFileSync) {\n    if (readFile === readFileNode) throw Error(\"'options.readFile' must be specified\");\n    if (writeFile === writeFileNode) throw Error(\"'options.writeFile' must be specified\");\n    if (listFiles === listFilesNode) throw Error(\"'options.listFiles' must be specified\");\n  }\n\n  // Set up base directory\n  const baseDir = args.baseDir ? path.resolve(args.baseDir) : \".\";\n\n  // Set up transforms\n  const transforms = [];\n  if (args.transform) {\n    args.transform.forEach(transform =>\n      transforms.push(\n        require(\n          path.isAbsolute(transform = transform.trim())\n            ? transform\n            : path.join(process.cwd(), transform)\n        )\n      )\n    );\n  }\n  function applyTransform(name, ...args) {\n    transforms.forEach(transform => {\n      if (typeof transform[name] === \"function\") transform[name](...args);\n    });\n  }\n\n  // Begin parsing\n  var parser = null;\n\n  // Include library files\n  if (!args.noLib) { // bundled\n\n    Object.keys(exports.libraryFiles).forEach(libPath => {\n      if (libPath.indexOf(\"/\") >= 0) return; // in sub-directory: imported on demand\n      stats.parseCount++;\n      stats.parseTime += measure(() => {\n        parser = assemblyscript.parseFile(\n          exports.libraryFiles[libPath],\n          exports.libraryPrefix + libPath + \".ts\",\n          false,\n          parser\n        );\n      });\n    });\n  }\n\n\n  const customLibDirs = [];\n\n  args.lib = (!args.lib) ? exports.nodeModulesPrefix : exports.nodeModulesPrefix + \",\" + args.lib;\n\n  if (args.lib) {\n    let lib = args.lib;\n    if (typeof lib === \"string\") lib = lib.split(\",\");\n    Array.prototype.push.apply(customLibDirs, lib.map(lib => lib.trim()));\n    for (let i = 0, k = customLibDirs.length; i < k; ++i) { // custom\n      let libDir = customLibDirs[i];\n      let libFiles;\n      if (libDir.endsWith(\".ts\")) {\n        libFiles = [ path.basename(libDir) ];\n        libDir = path.dirname(libDir);\n      } else {\n        libFiles = listFiles(libDir);\n      }\n\n      for (let j = 0, l = libFiles.length; j < l; ++j) {\n        let libPath = libFiles[j];\n        let libText = readFile(path.join(libDir, libPath));\n        if (libText === null) return callback(Error(\"Library file '\" + libPath + \"' not found.\"));\n        stats.parseCount++;\n        stats.parseTime += measure(() => {\n          parser = assemblyscript.parseFile(\n            libText,\n            exports.libraryPrefix + libPath,\n            false,\n            parser\n          );\n        });\n      }\n    }\n  }\n\n  // Include entry files\n  for (let i = 0, k = argv.length; i < k; ++i) {\n    const filename = argv[i];\n\n    let sourcePath = String(filename).replace(/\\\\/g, \"/\").replace(/(\\.ts|\\/)$/, \"\");\n\n    // Try entryPath.ts, then entryPath/index.ts\n    let sourceText = readFile(path.join(baseDir, sourcePath) + \".ts\");\n    if (sourceText === null) {\n      sourceText = readFile(path.join(baseDir, sourcePath, \"index.ts\"));\n      if (sourceText === null) {\n        return callback(Error(\"Entry file '\" + sourcePath + \".ts' not found.\"));\n      } else {\n        sourcePath += \"/index.ts\";\n      }\n    } else {\n      sourcePath += \".ts\";\n    }\n\n    stats.parseCount++;\n    stats.parseTime += measure(() => {\n      \n      // if <pre> isDispathch == true </pre>, reproduce the code \n      if(!isDispatch){\n        sourceText = exports.resolveSourceText(sourceText, null,exports.libraryFiles);\n        parser = assemblyscript.parseFile(sourceText, sourcePath, true, parser);\n      } else {\n        sourceText = exports.insertSerializeMethodText(sourcePath, sourceText);\n        sourceText = exports.resolveSourceText(sourceText, exports.applyText,exports.libraryFiles);\n        parser = assemblyscript.parseFile(sourceText, sourcePath, true, parser);\n      }\n\n    });\n\n\n    // Process backlog\n    while ((sourcePath = parser.nextFile()) != null) {\n      let found = false;\n\n      // Load library file if explicitly requested\n      if (sourcePath.startsWith(exports.libraryPrefix)) {\n        const plainName = sourcePath.substring(exports.libraryPrefix.length);\n        const indexName = sourcePath.substring(exports.libraryPrefix.length) + \"/index\";\n\n        if (exports.libraryFiles.hasOwnProperty(plainName)) {\n          sourceText = exports.libraryFiles[plainName];\n          sourcePath = exports.libraryPrefix + plainName + \".ts\";\n        } else if (exports.libraryFiles.hasOwnProperty(indexName)) {\n          sourceText = exports.libraryFiles[indexName];\n          sourcePath = exports.libraryPrefix + indexName + \".ts\";\n        } else {\n          for (let i = 0, k = customLibDirs.length; i < k; ++i) {\n            const dir = customLibDirs[i];\n\n            sourceText = readFile(path.join(dir, plainName + \".ts\"));\n            if (sourceText !== null) {\n              sourcePath = exports.libraryPrefix + plainName + \".ts\";\n              break;\n            } else {\n              sourceText = readFile(path.join(dir, indexName + \".ts\"));\n              if (sourceText !== null) {\n                sourcePath = exports.libraryPrefix + indexName + \".ts\";\n                break;\n              }\n            }\n          }\n        }\n\n      // Otherwise try nextFile.ts, nextFile/index.ts, ~lib/nextFile.ts, ~lib/nextFile/index.ts\n      } else {\n        const plainName = sourcePath;\n        const indexName = sourcePath + \"/index\";\n        sourceText = readFile(path.join(baseDir, plainName + \".ts\"));\n        if (sourceText !== null) {\n          sourcePath = plainName + \".ts\";\n        } else {\n          sourceText = readFile(path.join(baseDir, indexName + \".ts\"));\n          if (sourceText !== null) {\n            sourcePath = indexName + \".ts\";\n          } else if (!plainName.startsWith(\".\")) {\n            if (exports.libraryFiles.hasOwnProperty(plainName)) {\n              sourceText = exports.libraryFiles[plainName];\n              sourcePath = exports.libraryPrefix + plainName + \".ts\";\n            } else if (exports.libraryFiles.hasOwnProperty(indexName)) {\n              sourceText = exports.libraryFiles[indexName];\n              sourcePath = exports.libraryPrefix + indexName + \".ts\";\n            } else {\n              for (let i = 0, k = customLibDirs.length; i < k; ++i) {\n                const dir = customLibDirs[i];\n                sourceText = readFile(path.join(dir, plainName + \".ts\"));\n                if (sourceText !== null) {\n                  sourcePath = exports.libraryPrefix + plainName + \".ts\";\n                  break;\n                } else {\n                  sourceText = readFile(path.join(dir, indexName + \".ts\"));\n                  if (sourceText !== null) {\n                    sourcePath = exports.libraryPrefix + indexName + \".ts\";\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (sourceText == null) {\n        return callback(Error(\"Import file '\" + sourcePath + \".ts' not found.\"));\n      }\n      stats.parseCount++;\n      stats.parseTime += measure(() => {\n        // console.log(`source Text: ${sourceText}`);\n\n        if(isDispatch){\n          // console.log(`SourcePath :${sourcePath}`);\n          sourceText = exports.insertSerializeMethodText(sourcePath, sourceText); \n        }\n        assemblyscript.parseFile(sourceText, sourcePath, false, parser);\n      });\n    }\n    if (checkDiagnostics(parser, stderr)) {\n      return callback(Error(\"Parse error\"));\n    }\n  }\n\n  applyTransform(\"afterParse\", parser);\n\n  // Finish parsing\n  const program = assemblyscript.finishParsing(parser);\n\n  // Set up optimization levels\n  var optimizeLevel = 0;\n  var shrinkLevel = 0;\n  if (args.optimize) {\n    optimizeLevel = exports.defaultOptimizeLevel;\n    shrinkLevel = exports.defaultShrinkLevel;\n  }\n  if (typeof args.optimizeLevel === \"number\") {\n    optimizeLevel = args.optimizeLevel;\n  }\n  if (typeof args.shrinkLevel === \"number\") {\n    shrinkLevel = args.shrinkLevel;\n  }\n  optimizeLevel = Math.min(Math.max(optimizeLevel, 0), 3);\n  shrinkLevel = Math.min(Math.max(shrinkLevel, 0), 2);\n\n  // Begin compilation\n  const compilerOptions = assemblyscript.createOptions();\n  assemblyscript.setTarget(compilerOptions, 0);\n  assemblyscript.setNoTreeShaking(compilerOptions, args.noTreeShaking);\n  assemblyscript.setNoAssert(compilerOptions, args.noAssert);\n  assemblyscript.setImportMemory(compilerOptions, args.importMemory);\n  assemblyscript.setImportTable(compilerOptions, args.importTable);\n  assemblyscript.setMemoryBase(compilerOptions, args.memoryBase >>> 0);\n  assemblyscript.setSourceMap(compilerOptions, args.sourceMap != null);\n  assemblyscript.setOptimizeLevelHints(compilerOptions, optimizeLevel, shrinkLevel);\n\n  // Initialize default aliases\n  assemblyscript.setGlobalAlias(compilerOptions, \"Math\", \"NativeMath\");\n  assemblyscript.setGlobalAlias(compilerOptions, \"Mathf\", \"NativeMathf\");\n  assemblyscript.setGlobalAlias(compilerOptions, \"abort\", \"~lib/env/abort\"); // to disable: --use abort=\n\n  // Add or override aliases if specified\n  if (args.use) {\n    let aliases = args.use;\n    for (let i = 0, k = aliases.length; i < k; ++i) {\n      let part = aliases[i];\n      let p = part.indexOf(\"=\");\n      if (p < 0) return callback(Error(\"Global alias '\" + part + \"' is invalid.\"));\n      let name = part.substring(0, p).trim();\n      let alias = part.substring(p + 1).trim();\n      if (!name.length) return callback(Error(\"Global alias '\" + part + \"' is invalid.\"));\n      assemblyscript.setGlobalAlias(compilerOptions, name, alias);\n    }\n  }\n\n  // Enable additional features if specified\n  var features = args.enable;\n  if (features != null) {\n    if (typeof features === \"string\") features = features.split(\",\");\n    for (let i = 0, k = features.length; i < k; ++i) {\n      let name = features[i].trim();\n      let flag = assemblyscript[\"FEATURE_\" + name.replace(/\\-/g, \"_\").toUpperCase()];\n      if (!flag) return callback(Error(\"Feature '\" + name + \"' is unknown.\"));\n      assemblyscript.enableFeature(compilerOptions, flag);\n    }\n  }\n\n  var module;\n  stats.compileCount++;\n  (() => {\n    try {\n      stats.compileTime += measure(() => {\n        module = assemblyscript.compileProgram(program, compilerOptions);\n      });\n    } catch (e) {\n      return callback(e);\n    }\n  })();\n\n  if (checkDiagnostics(parser, stderr)) {\n    if (module) module.dispose();\n    return callback(Error(\"Compile error\"));\n  }\n\n  // Validate the module if requested\n  if (args.validate) {\n    stats.validateCount++;\n    stats.validateTime += measure(() => {\n      if (!module.validate()) {\n        module.dispose();\n        return callback(Error(\"Validate error\"));\n      }\n    });\n  }\n\n  // Set Binaryen-specific options\n  if (args.trapMode === \"clamp\") {\n    stats.optimizeCount++;\n    stats.optimizeTime += measure(() => {\n      module.runPasses([ \"trap-mode-clamp\" ]);\n    });\n  } else if (args.trapMode === \"js\") {\n    stats.optimizeCount++;\n    stats.optimizeTime += measure(() => {\n      module.runPasses([ \"trap-mode-js\" ]);\n    });\n  } else if (args.trapMode !== \"allow\") {\n    module.dispose();\n    return callback(Error(\"Unsupported trap mode\"));\n  }\n\n  // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n  // see: https://github.com/WebAssembly/binaryen/pull/1596\n  if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n  module.setOptimizeLevel(optimizeLevel);\n  module.setShrinkLevel(shrinkLevel);\n  module.setDebugInfo(!args.noDebug);\n\n  var runPasses = [];\n  if (args.runPasses) {\n    if (typeof args.runPasses === \"string\") {\n      args.runPasses = args.runPasses.split(\",\");\n    }\n    if (args.runPasses.length) {\n      args.runPasses.forEach(pass => {\n        if (runPasses.indexOf(pass) < 0)\n          runPasses.push(pass);\n      });\n    }\n  }\n\n  // Optimize the module if requested\n  if (optimizeLevel > 0 || shrinkLevel > 0) {\n    stats.optimizeCount++;\n    stats.optimizeTime += measure(() => {\n      module.optimize();\n    });\n  }\n\n  // Run additional passes if requested\n  if (runPasses.length) {\n    stats.optimizeCount++;\n    stats.optimizeTime += measure(() => {\n      module.runPasses(runPasses.map(pass => pass.trim()));\n    });\n  }\n  \n  if(!isDispatch){\n    exports.abiObj = program.toAbi();\n    exports.applyText = exports.abiObj.dispatch;\n  }\n\n  // console.log(\"applyText:\" + exports.applyText);\n  if(args.applyText && isDispatch){\n    console.log(\"The generated apply text:\");\n    console.log(exports.applyText);\n  }\n\n  // Prepare output\n  if (!args.noEmit) {\n    let hasStdout = false;\n    let hasOutput = false;\n\n    if (args.outFile != null) {\n      if (/\\.was?t$/.test(args.outFile) && args.textFile == null) {\n        args.textFile = args.outFile;\n      } else if (/\\.js$/.test(args.outFile) && args.asmjsFile == null) {\n        args.asmjsFile = args.outFile;\n      } else if (args.binaryFile == null) {\n        args.binaryFile = args.outFile;\n      }\n    }\n\n    // Write abi.file\n    if (args.abiFile != null) {\n      let abi;\n      if (args.abiFile && args.abiFile.length) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          abi = JSON.stringify(exports.abiObj.abiInfo, undefined, 2);\n        });\n\n        writeFile(path.join(baseDir, args.abiFile), abi);\n      } else if (!hasStdout) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          abi = JSON.stringify(exports.abiObj.abiInfo, undefined, 2);\n        });\n        writeStdout(abi);\n      }\n    }\n\n\n    // Write binary\n    if (args.binaryFile != null) {\n      let sourceMapURL = args.sourceMap != null\n        ? args.sourceMap.length\n          ? args.sourceMap\n          : path.basename(args.binaryFile) + \".map\"\n        : null;\n\n      let wasm;\n      stats.emitCount++;\n      stats.emitTime += measure(() => {\n        wasm = module.toBinary(sourceMapURL)\n      });\n\n      if (args.binaryFile.length) {\n        writeFile(path.join(baseDir, args.binaryFile), wasm.output);\n      } else {\n        writeStdout(wasm.output);\n        hasStdout = true;\n      }\n      hasOutput = true;\n\n      // Post-process source map\n      if (wasm.sourceMap != null) {\n        if (args.binaryFile.length) {\n          let sourceMap = JSON.parse(wasm.sourceMap);\n          sourceMap.sourceRoot = exports.sourceMapRoot;\n          sourceMap.sources.forEach((name, index) => {\n            let text = null;\n            if (name.startsWith(exports.libraryPrefix)) {\n              let stdName = name.substring(exports.libraryPrefix.length).replace(/\\.ts$/, \"\");\n              if (exports.libraryFiles.hasOwnProperty(stdName)) {\n                text = exports.libraryFiles[stdName];\n              } else {\n                for (let i = 0, k = customLibDirs.length; i < k; ++i) {\n                  text = readFile(path.join(\n                    customLibDirs[i],\n                    name.substring(exports.libraryPrefix.length))\n                  );\n                  if (text !== null) break;\n                }\n              }\n            } else {\n              text = readFile(path.join(baseDir, name));\n            }\n            if (text === null) {\n              return callback(Error(\"Source file '\" + name + \"' not found.\"));\n            }\n            if (!sourceMap.sourceContents) sourceMap.sourceContents = [];\n            sourceMap.sourceContents[index] = text;\n          });\n          writeFile(path.join(\n            baseDir,\n            path.dirname(args.binaryFile),\n            path.basename(sourceMapURL)\n          ), JSON.stringify(sourceMap));\n        } else {\n          stderr.write(\"Skipped source map (stdout already occupied)\" + EOL);\n        }\n      }\n    }\n\n    // Write asm.js\n    if (args.asmjsFile != null) {\n      let asm;\n      if (args.asmjsFile.length) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          asm = module.toAsmjs();\n        });\n        writeFile(path.join(baseDir, args.asmjsFile), asm);\n      } else if (!hasStdout) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          asm = module.toAsmjs();\n        });\n        writeStdout(asm);\n        hasStdout = true;\n      }\n      hasOutput = true;\n    }\n\n    // Write WebIDL\n    if (args.idlFile != null) {\n      let idl;\n      if (args.idlFile.length) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          idl = assemblyscript.buildIDL(program);\n        });\n        writeFile(path.join(baseDir, args.idlFile), idl);\n      } else if (!hasStdout) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          idl = assemblyscript.buildIDL(program);\n        });\n        writeStdout(idl);\n        hasStdout = true;\n      }\n      hasOutput = true;\n    }\n\n    // Write TypeScript definition\n    if (args.tsdFile != null) {\n      let tsd;\n      if (args.tsdFile.length) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          tsd = assemblyscript.buildTSD(program);\n        });\n        writeFile(path.join(baseDir, args.tsdFile), tsd);\n      } else if (!hasStdout) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          tsd = assemblyscript.buildTSD(program);\n        });\n        writeStdout(tsd);\n        hasStdout = true;\n      }\n      hasOutput = true;\n    }\n\n    // Write text (must be last)\n    if (args.textFile != null || !hasOutput) {\n      let wat;\n      if (args.textFile && args.textFile.length) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          wat = module.toText();\n        });\n        writeFile(path.join(baseDir, args.textFile), wat);\n      } else if (!hasStdout) {\n        stats.emitCount++;\n        stats.emitTime += measure(() => {\n          wat = module.toText()\n        });\n        writeStdout(wat);\n      }\n    }\n  }\n\n  module.dispose();\n  if (args.measure) {\n    printStats(stats, stderr);\n  }\n  return callback(null);\n\n  function readFileNode(filename) {\n    try {\n      let text;\n      stats.readCount++;\n      stats.readTime += measure(() => {\n        text = fs.readFileSync(filename, { encoding: \"utf8\" });\n      });\n      return text;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function writeFileNode(filename, contents) {\n    try {\n      stats.writeCount++;\n      stats.writeTime += measure(() => {\n        if (typeof contents === \"string\") {\n          fs.writeFileSync(filename, contents, { encoding: \"utf8\" } );\n        } else {\n          fs.writeFileSync(filename, contents);\n        }\n      });\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function listFilesNode(dirname) {\n    var files;\n    try {\n      stats.readTime += measure(() => {\n        files = fs.readdirSync(dirname).filter(file => /^(?!.*\\.d\\.ts$).*\\.ts$/.test(file));\n      });\n      return files;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  function writeStdout(contents) {\n    if (!writeStdout.used) {\n      stats.writeCount++;\n      writeStdout.used = true;\n    }\n    stats.writeTime += measure(() => {\n      if (typeof contents === \"string\") {\n        stdout.write(contents, { encoding: \"utf8\" });\n      } else {\n        stdout.write(contents);\n      }\n    });\n  }\n}\n\nvar argumentSubstitutions = {\n  \"-O\"  : [ \"--optimize\" ],\n  \"-Os\" : [ \"--optimize\", \"--shrinkLevel\", \"1\" ],\n  \"-Oz\" : [ \"--optimize\", \"--shrinkLevel\", \"2\" ],\n  \"-O0\" : [ \"--optimizeLevel\", \"0\", \"--shrinkLevel\", \"0\" ],\n  \"-O0s\": [ \"--optimizeLevel\", \"0\", \"--shrinkLevel\", \"1\" ],\n  \"-O0z\": [ \"--optimizeLevel\", \"0\", \"--shrinkLevel\", \"2\" ],\n  \"-O1\" : [ \"--optimizeLevel\", \"1\", \"--shrinkLevel\", \"0\" ],\n  \"-O1s\": [ \"--optimizeLevel\", \"1\", \"--shrinkLevel\", \"1\" ],\n  \"-O1z\": [ \"--optimizeLevel\", \"1\", \"--shrinkLevel\", \"2\" ],\n  \"-O2\" : [ \"--optimizeLevel\", \"2\", \"--shrinkLevel\", \"0\" ],\n  \"-O2s\": [ \"--optimizeLevel\", \"2\", \"--shrinkLevel\", \"1\" ],\n  \"-O2z\": [ \"--optimizeLevel\", \"2\", \"--shrinkLevel\", \"2\" ],\n  \"-O3\" : [ \"--optimizeLevel\", \"3\", \"--shrinkLevel\", \"0\" ],\n  \"-O3s\": [ \"--optimizeLevel\", \"3\", \"--shrinkLevel\", \"1\" ],\n  \"-O3z\": [ \"--optimizeLevel\", \"3\", \"--shrinkLevel\", \"2\" ],\n};\n\n/** Checks diagnostics emitted so far for errors. */\nfunction checkDiagnostics(emitter, stderr) {\n  var diagnostic;\n  var hasErrors = false;\n  while ((diagnostic = assemblyscript.nextDiagnostic(emitter)) != null) {\n    if (stderr) {\n      stderr.write(\n        assemblyscript.formatDiagnostic(diagnostic, stderr.isTTY, true) +\n        EOL + EOL\n      );\n    }\n    if (assemblyscript.isError(diagnostic)) hasErrors = true;\n  }\n  return hasErrors;\n}\n\nexports.checkDiagnostics = checkDiagnostics;\n\n/** Creates an empty set of stats. */\nfunction createStats() {\n  return {\n    readTime: 0,\n    readCount: 0,\n    writeTime: 0,\n    writeCount: 0,\n    parseTime: 0,\n    parseCount: 0,\n    compileTime: 0,\n    compileCount: 0,\n    emitTime: 0,\n    emitCount: 0,\n    validateTime: 0,\n    validateCount: 0,\n    optimizeTime: 0,\n    optimizeCount: 0\n  };\n}\n\nexports.createStats = createStats;\n\nif (!process.hrtime) process.hrtime = require(\"browser-process-hrtime\");\n\n/** Measures the execution time of the specified function.  */\nfunction measure(fn) {\n  const start = process.hrtime();\n  fn();\n  const times = process.hrtime(start);\n  return times[0] * 1e9 + times[1];\n}\n\nexports.measure = measure;\n\n/** Formats a high resolution time to a human readable string. */\nfunction formatTime(time) {\n  return time ? (time / 1e6).toFixed(3) + \" ms\" : \"N/A\";\n}\n\nexports.formatTime = formatTime;\n\n/** Formats and prints out the contents of a set of stats. */\nfunction printStats(stats, output) {\n  function format(time, count) {\n    return formatTime(time);\n  }\n  (output || process.stdout).write([\n    \"I/O Read  : \" + format(stats.readTime, stats.readCount),\n    \"I/O Write : \" + format(stats.writeTime, stats.writeCount),\n    \"Parse     : \" + format(stats.parseTime, stats.parseCount),\n    \"Compile   : \" + format(stats.compileTime, stats.compileCount),\n    \"Emit      : \" + format(stats.emitTime, stats.emitCount),\n    \"Validate  : \" + format(stats.validateTime, stats.validateCount),\n    \"Optimize  : \" + format(stats.optimizeTime, stats.optimizeCount)\n  ].join(EOL) + EOL);\n}\n\nexports.printStats = printStats;\n\nvar allocBuffer = typeof global !== \"undefined\" && global.Buffer\n  ? global.Buffer.allocUnsafe || function(len) { return new global.Buffer(len); }\n  : function(len) { return new Uint8Array(len) };\n\n/** Creates a memory stream that can be used in place of stdout/stderr. */\nfunction createMemoryStream(fn) {\n  var stream = [];\n  stream.write = function(chunk) {\n    if (fn) fn(chunk);\n    if (typeof chunk === \"string\") {\n      let buffer = allocBuffer(utf8.length(chunk));\n      utf8.write(chunk, buffer, 0);\n      chunk = buffer;\n    }\n    this.push(chunk);\n  };\n  stream.reset = function() {\n    stream.length = 0;\n  };\n  stream.toBuffer = function() {\n    var offset = 0, i = 0, k = this.length;\n    while (i < k) offset += this[i++].length;\n    var buffer = allocBuffer(offset);\n    offset = i = 0;\n    while (i < k) {\n      buffer.set(this[i], offset);\n      offset += this[i].length;\n      ++i;\n    }\n    return buffer;\n  };\n  stream.toString = function() {\n    var buffer = this.toBuffer();\n    return utf8.read(buffer, 0, buffer.length);\n  };\n  return stream;\n}\n\nexports.createMemoryStream = createMemoryStream;\n\n/** Compatible TypeScript compiler options for syntax highlighting etc. */\nexports.tscOptions = {\n  alwaysStrict: true,\n  noImplicitAny: true,\n  noImplicitReturns: true,\n  noImplicitThis: true,\n  noEmitOnError: true,\n  strictNullChecks: true,\n  experimentalDecorators: true,\n  target: \"esnext\",\n  module: \"commonjs\",\n  noLib: true,\n  types: [],\n  allowJs: false\n};\n\nfunction resolveSourceText(sourceText, applyText, library){\n  let memoryLib = \"allocate/arena\";\n  let resultTextBuffer  = new Array();\n  if(library[memoryLib] == undefined){\n    resultTextBuffer.push( `import \"allocator/arena\";`);\n  }\n\n  resultTextBuffer.push(sourceText);\n\n  if(applyText){\n    resultTextBuffer.push(applyText);\n  }\n  return resultTextBuffer.join(\"\\n\");\n}\n\nexports.resolveSourceText = resolveSourceText;\n\nfunction insertSerializeMethodText(sourcePath, sourceText){\n  \n  let serializeLookup =  exports.abiObj.fileSerializeLookup;\n\n  if(serializeLookup.has(sourcePath)){\n\n    let serializeArray = serializeLookup.get(sourcePath);\n    let data = sourceText.split(EOL);\n\n    console.log(`data.length :${data.length}`);\n\n    for(let serialize of serializeArray){\n      data.splice(serialize.line, 0, serialize.toSerialize());\n      data.splice(serialize.line, 0 , EOL);\n      data.splice(serialize.line, 0, serialize.toDeserialize());\n      data.splice(serialize.line, 0 , EOL);\n      data.splice(serialize.line, 0, serialize.toPrimarykey());\n      // console.log( `${serialize.line}`);\n    }\n     console.log(`return sourceText: ${data.join(EOL)}`);\n\n    return data.join(EOL);\n  } else {\n    return sourceText;\n  }\n}\n\nexports.insertSerializeMethodText = insertSerializeMethodText;\n\n\n"],"sourceRoot":""}