{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/serialize.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__18__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","common_1","tokenizer_1","Token","Range","NodeKind","util_1","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","nodeIsGenericCallable","Node","parent","flags","CommonFlags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","range","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","text","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","length","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizedPath","normalizePath","startsWith","resolvePath","source","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","LIBRARY_PREFIX","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","assert","charCodeAt","ACTION","DATABASE","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","PATH_DELIMITER","simplePath","substring","Array","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","STATIC_DELIMITER","INSTANCE_DELIMITER","endsWith","findDecorator","decorator","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","line","column","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","warning","error","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INNER_DELIMITER","LIBRARY_SUBST","FILESPACE_PREFIX","OperatorKind","diagnostics_1","types_1","ast_1","module_1","abi_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","stringInstance","mainFunction","resolver","Resolver","sources","toAbi","abi","Abi","resolve","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","stringPrototype","resolveClass","has","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","globalName","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","Duplicate_decorator","Decorator_0_is_not_valid_here","checkGlobal","parentNode","hasDecorator","BUILTIN","isLibrary","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","global_1","Element","program","_internalName","replaceComma","str","result","str_1","str_1_1","ch","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","CONST","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","DECLARE","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","NativeType","I32","I64","F32","F64","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","instance","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","byteSize","toSize","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","None","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeFunction","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","_BinaryenFunctionGetBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","__export","g","eval","e","window","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","builtins_1","program_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","reportNode","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileInlineConstant","compileExpression","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","resolveFunctionInclTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureTrampoline","ensureArgcSet","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","setter","ctorInstance","_e","_f","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","repeatLabel","alwaysTrue","condPre","incrExpr","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","precomputeExpression","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","resolveFunction","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","retainConstantType","scopedThis","_this_cannot_be_referenced_in_current_location","superType","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","compileObjectLiteral","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","elementType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","classInstance","currentClassInstance","makeAllocate","propertyAccess","resolvePropertyAccess","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","field","fieldType","nativeFieldType","fieldDeclaration","parentElement","serialize_1","Struct","fields","AbiTypeAlias","newTypeName","wasmType","new_type_name","Action","ricardian_contract","AbiHelper","abiTypeLookup","Table","index_type","keys_names","keys_types","typeAliasSet","structsLookup","elementLookup","fileSerializeLookup","abiInfo","version","structs","actions","tables","toAbiStruct","methodName","struct","types_1_1","typeKind","addAbiTypeAlias","typeKindName","originalTypeName","findContractOriginalType","typeAlias","commonaTypeName","findScriptOriginalTypeName","findScriptOriginalType","checkFuncPrototypeDecorator","funcPrototype","isActionDecorator","decorators_1","decorators_1_1","isWrapWithQutation","undefined","charAt","isActionFuncPrototype","funcType","resolveClassDecorator","decorators_2","decorators_2_1","retrieveArgumentText","resolveExpressionToStruct","argu","internelName","NodeUtil","getInternalName","retrieveStructByInternalName","resolveClassPrototypeToStruct","members_1","members_1_1","filedDeclare","filedName","filedType","addStruct","checkName","nameMap","indexOf","resolveClassDispatcher","clzPrototype","hasActionDecorator","contractName","contractVarName","resolveFunctionPrototype","funcName","abiType","resolveAbiParameterType","isArray","VarialbeKind","NUMBER","factType","BOOL","printTypeAliasInfo","typesLookupKeys","keys","typesLookupKeys_1","typesLookupKeys_1_1","console","log","typesAliasKeys","typesAliasKeys_1","typesAliasKeys_1_1","printElementLookUpInfo","keys_1","keys_1_1","printClassProtoTypeInfo","keys_2","keys_2_1","serializeHelper","SerializeHelper","dispatchBuffer","forEach","dispatch","assemblyDispatch","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","contextualFunction","targetExpression","propertyName","elementAccess","explicitLocal","functionTarget","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","_g","inheritedMember","constructorPartial","_h","_j","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","_k","_l","_m","overloadPrototype","operatorPartial","typeParameterNodes","globalScope","UnreachableError","captureStackTrace","stack","AssertionError","ASC_TARGET","defineProperties","writable","Math","fround","MIN_POSITIVE_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","EPSILON","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","fromCodePoint","Number","isInteger","HEAP","HEAP_OFFSET","oldHeap","dest","src","copyWithin","binaryen","Binaryen","_malloc","_free","move_memory","_memmove","HEAPU8","emitText","emitAsmjs","compiler","evaluateConstantType","SWALLOW","expr_1","ClzI64","CtzI64","PopcntI64","RotlI32","RotlI64","RotrI32","RotrI64","AbsF32","AbsF64","tempLocal0","tempLocal1","MaxF32","MaxF64","MinF32","MinF64","CeilF32","CeilF64","FloorF32","FloorF64","CopysignF32","CopysignF64","NearestF32","NearestF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","SqrtF32","SqrtF64","TruncF32","TruncF64","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","CurrentMemory","GrowMemory","abort","operandExprs","signatureParts","nativeParamTypes","operandType","deferASM","deferASMCall","typeArgument","valueType","allocateInternalName","allocatePrototype","An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf","allocateInstance","abortInternalName","abortPrototype","abortInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","lo","hi","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","indent","readI32","readI64","readF32","i32_as_f32","f32_as_i32","readF64","i64_as_f64","valueI64","f64_as_i64","commonTypeNode","variableType","declareType","baseTypeName","getBaseTypeName","findAbiType","findFactType","bracketIndex","findFactTypeName","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needImplSerialize","needImplDeSerialize","needImplPrimary","generatorSerializeFlag","functionPrototype","checkFieldImplSerialize","hasImplSerialize","SERIALIZE_INTERFANCE","getSerializePoints","serializePoint","SerializePoint","needDeserialize","needSerialize","needPrimaryKey","addSerializeExpr","serializeField","addDeserializeExpr","deserializeField","typeNodeHelper","paramDeclaration","serialize","deserialize","primaryKey","toSerialize","toDeserialize","toPrimarykey","serializeClassname","classDeclaration","classpath","addSerializePoint","sortSerializePoints","fileSerialize","sort","Long","ZERO","ONE","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","gte","lte","minSafeF64","maxSafeF64","toNumber","i64_to_string","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","decompiler_1","definitions_1","formatDiagnostic","parser_1","parseFile","parser","Parser","nextFile","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","decompiler","Decompiler","decompile","buildIDL","IDLBuilder","build","buildTSD","TSDBuilder","functionId","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Break","Switch","CallImport","CallIndirect","SetGlobal","Store","Drop","Return","Host","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","indentLevel","isConst","typeToString","visitInterface","numMembers","members_2","members_2_1","builtinsFile","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","skipBlock","depth","Precedence"],"mappings":"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AAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__18__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  EXTERNAL\n}\n\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a:{\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.d:{\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is a builtin. */\n  BUILTIN = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Abi\n} from \"./abi\";\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,Element> = new Map();\n\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n\n  toAbi(): Abi {\n    let abi = new Abi(this);\n    abi.resolve();\n    return abi;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    var globalAliases = options.globalAliases;\n    if (globalAliases) {\n      for (let [alias, name] of globalAliases) {\n        if (!name.length) continue; // explicitly disabled\n        let element = this.elementsLookup.get(name);\n        if (element) this.elementsLookup.set(alias, element);\n        else throw new Error(\"element not found: \" + name);\n      }\n    }\n\n    // register 'Array'\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\n    if (arrayPrototype) {\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\n    }\n\n    // register 'String'\n    var stringPrototype = this.elementsLookup.get(\"String\");\n    if (stringPrototype) {\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      let stringInstance = resolver.resolveClass(<ClassPrototype>stringPrototype, null);\n      if (stringInstance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = stringInstance;\n          this.typesLookup.set(\"string\", stringInstance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = <Element>assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = <Element>this.moduleLevelExports.get(\"main\");\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias the element globally if it is ...\n    if (\n      // explicitly annotated with @global - or -\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      // part of the special builtins library file - or -\n      (declaration.range.source.is(CommonFlags.BUILTIN)) ||\n      // exported from a top-level library file\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n        // builtins can use the global name directly instead of being just an alias\n        if (element.is(CommonFlags.BUILTIN)) element.internalName = globalName;\n      }\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, prototype);\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.NONE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, element);\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    identifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = identifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = identifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if from a library file\n    if (identifier.range.source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          identifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, prototype);\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, prototype);\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          if (this.moduleLevelExports.get(simpleName) !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, namespace);\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, global);\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  _internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this._internalName = internalName;\n  }\n\n  static replaceComma(str: string):string{\n    if(!str) return str;\n    let result  = \"\";\n    for(let ch of str){\n      result +=  ch == \",\" ? \"_\" : ch;\n    }\n    return result;\n  }\n\n  get internalName():string{\n    return Element.replaceComma(this._internalName);\n  }\n\n  set internalName(internalName:string) {\n    this._internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32 = _BinaryenTypeInt32(),\n  I64 = _BinaryenTypeInt64(),\n  F32 = _BinaryenTypeFloat32(),\n  F64 =  _BinaryenTypeFloat64(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = allocate_memory(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      free_memory(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      free_memory(cArr3);\n      free_memory(cArr2);\n      free_memory(cArr1);\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\n      free_memory(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocPtrArray(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      free_memory(cArr);\n      for (let i = numNames; i >= 0; --i) {\n        free_memory(names[i]);\n      }\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0;\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeFunction(func: FunctionRef): void {\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) free_memory(cStr);\n      if (binaryPtr) free_memory(binaryPtr);\n      if (sourceMapPtr) free_memory(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    free_memory(this.cachedByValue);\n    free_memory(this.cachedTemporaryName);\n    free_memory(this.cachedPrecomputeName);\n    free_memory(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = allocate_memory(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = allocate_memory(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate as compileBuiltinAllocate,\n  compileAbort as compileBuiltinAbort\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getFunctionBody,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: Function[] = [];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      this.options.isWasm64\n        ? Module.MAX_MEMORY_WASM64\n        : Module.MAX_MEMORY_WASM32,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    var functionTableExported = false;\n    if (functionTableSize) {\n      let entries = new Array<FunctionRef>(functionTableSize);\n      for (let i = 0; i < functionTableSize; ++i) {\n        entries[i] = functionTable[i].ref;\n      }\n      module.setFunctionTable(entries);\n      module.addTableExport(\"0\", \"table\");\n      functionTableExported = true;\n    }\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\n    }\n\n    return module;\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration, global.parent);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // inlined constant can be compiled as-is\n    if (global.is(CommonFlags.INLINED)) {\n      initExpr = this.compileInlineConstant(global, global.type, true);\n\n    } else {\n\n      // evaluate initializer if present\n      if (declaration && declaration.initializer) {\n        if (!initExpr) {\n          initExpr = this.compileExpression(\n            declaration.initializer,\n            global.type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          );\n        }\n\n        // check if the initializer is constant\n        if (getExpressionId(initExpr) != ExpressionId.Const) {\n\n          // if a constant global, check if the initializer becomes constant after precompute\n          if (isConstant) {\n            initExpr = this.precomputeExpressionRef(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                declaration.range\n              );\n              initializeInStart = true;\n            }\n          } else {\n            initializeInStart = true;\n          }\n        }\n\n      // initialize to zero if there's no initializer\n      } else {\n        initExpr = global.type.toNativeZero(module);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile as-is\n\n      if (isConstant) {\n        let exprType = getExpressionType(initExpr);\n        switch (exprType) {\n          case NativeType.I32: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n            break;\n          }\n          case NativeType.I64: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(\n              getConstValueI64Low(initExpr),\n              getConstValueI64High(initExpr)\n            );\n            break;\n          }\n          case NativeType.F32: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = getConstValueF32(initExpr);\n            break;\n          }\n          case NativeType.F64: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = getConstValueF64(initExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            return false;\n          }\n        }\n        global.set(CommonFlags.INLINED); // inline the value from now on\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\n          module.addGlobal(internalName, nativeType, false, initExpr);\n          module.addGlobalExport(internalName, mangleExportName(global));\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\n          module.addGlobal(internalName, nativeType, false, initExpr);\n        }\n\n      } else /* mutable */ {\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\n      }\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        if (val.is(CommonFlags.INLINED)) {\n          if (element.declaration.isTopLevelExport) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              false, // constant\n              module.createI32(val.constantValue)\n            );\n          }\n        } else {\n          let initExpr: ExpressionRef;\n          if (valueDeclaration.value) {\n            initExpr = this.compileExpression(\n              <Expression>valueDeclaration.value,\n              Type.i32,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            );\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              initExpr = this.precomputeExpressionRef(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                if (element.is(CommonFlags.CONST)) {\n                  this.warning(\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                    valueDeclaration.range\n                  );\n                }\n                initInStart = true;\n              }\n            }\n          } else if (previousValue == null) {\n            initExpr = module.createI32(0);\n          } else if (previousValue.is(CommonFlags.INLINED)) {\n            initExpr = module.createI32(previousValue.constantValue + 1);\n          } else {\n            // in TypeScript this errors with TS1061, but actually we can do:\n            initExpr = module.createBinary(BinaryOp.AddI32,\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\n              module.createI32(1)\n            );\n            if (element.is(CommonFlags.CONST)) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n          if (initInStart) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              true, // mutable\n              module.createI32(0)\n            );\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            if (getExpressionType(initExpr) == NativeType.I32) {\n              val.constantValue = getConstValueI32(initExpr);\n              val.set(CommonFlags.INLINED);\n            } else {\n              assert(false);\n              val.constantValue = 0;\n            }\n          }\n        }\n        previousValue = <EnumValue>val;\n\n        // export values if the enum is exported\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\n          if (member.is(CommonFlags.INLINED) || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n            module.addGlobalExport(member.internalName, mangleExportName(member));\n          } else if (valueDeclaration) {\n            this.warning(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              valueDeclaration.range\n            );\n          }\n        }\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  private ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration, instance.prototype.parent); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    // check module-level export\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\n      if (signature.requiredParameters < signature.parameterTypes.length) {\n        // export the trampoline if the function takes optional parameters\n        instance = this.ensureTrampoline(instance);\n        this.ensureArgcSet();\n      }\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var module = this.module;\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let internalExportName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        member.externalName.text\n      );\n      let element = fileLevelExports.get(internalExportName);\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            let functionInstance = this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n            if (functionInstance) {\n              let functionDeclaration = functionInstance.prototype.declaration;\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\n            let globalDeclaration = (<Global>element).declaration;\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\n              if ((<Global>element).is(CommonFlags.INLINED)) {\n                module.addGlobalExport(element.internalName, member.externalName.text);\n              } else {\n                this.warning(\n                  DiagnosticCode.Cannot_export_a_mutable_global,\n                  member.range\n                );\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\n            let module = this.module;\n            let name = (<Field>element).simpleName;\n            let type = (<Field>element).type;\n            let nativeType = type.toNativeType();\n            let offset = (<Field>element).memoryOffset;\n            let usizeType = this.options.usizeType;\n            let nativeSizeType = this.options.nativeSizeType;\n\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\n            module.addFunction(\n              getterName,\n              this.ensureFunctionType(null, type, usizeType),\n              null,\n              module.createLoad(\n                type.byteSize,\n                type.is(TypeFlags.SIGNED),\n                module.createGetLocal(0, nativeSizeType),\n                nativeType,\n                offset\n              )\n            );\n            module.addFunctionExport(getterName, getterName);\n\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\n            if (element.is(CommonFlags.READONLY)) break;\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\n            module.addFunction(\n              setterName,\n              this.ensureFunctionType([ type ], Type.void, usizeType),\n              null,\n              module.createStore(\n                type.byteSize,\n                module.createGetLocal(0, nativeSizeType),\n                module.createGetLocal(1, nativeType),\n                nativeType,\n                offset\n              )\n            );\n            module.addFunctionExport(setterName, setterName);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ], terminated ? NativeType.Unreachable : NativeType.None);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = this.precomputeExpressionRef(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyExpr = this.compileStatement(statement.statement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    var terminated = alwaysTrue && flow.isAny(FlowFlags.ANY_TERMINATING);\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel,\n        module.createBlock(null, repeatBlock, NativeType.None)\n      )\n    );\n\n    return module.createBlock(\n      breakLabel,\n      breakBlock,\n      terminated\n        ? NativeType.Unreachable\n        : NativeType.None\n      );\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileBuiltinAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.precomputeExpressionRef(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var alwaysReturns = alwaysTrue && flow.is(FlowFlags.RETURNS);\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var expr = module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ], alwaysReturns ? NativeType.Unreachable : NativeType.None);\n    return expr;\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        if (!(element.is(CommonFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.precomputeExpressionRef(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\n    var module = this.module;\n    var type = this.currentType;\n    var nativeType = type.toNativeType();\n    var funcRef = module.addTemporaryFunction(nativeType, null, expr);\n    module.runPasses([ \"precompute\" ], funcRef);\n    var ret = getFunctionBody(funcRef);\n    module.removeTemporaryFunction();\n    return ret;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.resolver.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(\n            prototype,\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n      case ElementKind.PROPERTY: // TODO\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        this.currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"oob\", [\n        module.createSwitch(names, \"oob\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\n    return ret;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localType = (<Local>target).type;\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  compileStaticString(stringValue: string): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var stringSegments = this.stringSegments;\n\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\n    if (!stringSegment) {\n      let stringLength = stringValue.length;\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\n      stringBuffer[0] =  stringLength         & 0xff;\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\n      for (let i = 0; i < stringLength; ++i) {\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\n      }\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\n      stringSegments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    var stringType = this.program.typesLookup.get(\"string\");\n    this.currentType = stringType ? stringType : options.usizeType;\n    if (options.isWasm64) {\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    }\n    assert(i64_is_i32(stringOffset));\n    return module.createI32(i64_low(stringOffset));\n  }\n\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\n    var isStatic = true;\n    var module = this.module;\n\n    // obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    var elementCount = expressions.length;\n    if (elementCount) { // non-empty static or dynamic\n      let nativeElementType = elementType.toNativeType();\n      let values: usize;\n      let byteLength: usize;\n      switch (nativeElementType) {\n        case NativeType.I32: {\n          values = changetype<usize>(new Int32Array(elementCount));\n          byteLength = elementCount * 4;\n          break;\n        }\n        case NativeType.I64: {\n          values = changetype<usize>(new Array<I64>(elementCount));\n          byteLength = elementCount * 8;\n          break;\n        }\n        case NativeType.F32: {\n          values = changetype<usize>(new Float32Array(elementCount));\n          byteLength = elementCount * 4;\n          break;\n        }\n        case NativeType.F64: {\n          values = changetype<usize>(new Float64Array(elementCount));\n          byteLength = elementCount * 8;\n          break;\n        }\n        default: {\n          assert(false);\n          return module.createUnreachable();\n        }\n      }\n\n      // precompute value expressions\n      let exprs = new Array<ExpressionRef>(elementCount);\n      let expr: BinaryenExpressionRef;\n      for (let i = 0; i < elementCount; ++i) {\n        exprs[i] = expressions[i]\n          ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n          : elementType.toNativeZero(module);\n        if (isStatic) {\n          expr = this.precomputeExpressionRef(exprs[i]);\n          if (getExpressionId(expr) == ExpressionId.Const) {\n            assert(getExpressionType(expr) == nativeElementType);\n            switch (nativeElementType) {\n              case NativeType.I32: {\n                changetype<i32[]>(values)[i] = getConstValueI32(expr);\n                break;\n              }\n              case NativeType.I64: {\n                changetype<I64[]>(values)[i] = i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                );\n                break;\n              }\n              case NativeType.F32: {\n                changetype<f32[]>(values)[i] = getConstValueF32(expr);\n                break;\n              }\n              case NativeType.F64: {\n                changetype<f64[]>(values)[i] = getConstValueF64(expr);\n                break;\n              }\n              default: assert(false); // checked above\n            }\n          } else {\n            // TODO: emit a warning if declared 'const'\n            // if (isConst) {\n            //   this.warn(\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n            //     reportNode.range\n            //   );\n            // }\n            isStatic = false;\n          }\n        }\n      }\n\n      let usizeTypeSize = this.options.usizeType.byteSize;\n      if (isStatic) { // non-empty, all elements can be precomputed\n\n        // Create a combined static memory segment composed of:\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\n\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\n        let data = new Uint8Array(arraySize + bufferTotalSize);\n        let segment = this.addMemorySegment(data);\n        let offset = 0;\n\n        // write Array struct\n        if (usizeTypeSize == 8) {\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\n          offset += 8;\n        } else {\n          assert(i64_high(segment.offset) == 0);\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\n          offset += 4;\n        }\n        writeI32(elementCount, data, offset); // length_\n        offset += 4;\n        assert(offset == arraySize);\n\n        // write ArrayBuffer struct\n        writeI32(byteLength, data, offset);\n        offset += bufferHeaderSize; // incl. alignment\n\n        // write ArrayBuffer data\n        switch (nativeElementType) {\n          case NativeType.I32: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        assert(offset <= arraySize + bufferTotalSize);\n\n        this.currentType = arrayType;\n        return usizeTypeSize == 8\n          ? module.createI64(\n              i64_low(segment.offset),\n              i64_high(segment.offset)\n            )\n          : module.createI32(\n              i64_low(segment.offset)\n            );\n\n      } else { // non-empty, some elements can't be precomputed\n\n        this.currentType = arrayType;\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n        if (!setter) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            reportNode.range, arrayInstance.internalName\n          );\n          return module.createUnreachable();\n        }\n        let nativeArrayType = arrayType.toNativeType();\n        let currentFunction = this.currentFunction;\n        let tempLocal = currentFunction.getTempLocal(arrayType, false);\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\n        let index = 0;\n        stmts[index++] = module.createSetLocal(tempLocal.index,\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n            module.createI32(0), // this\n            module.createI32(elementCount)\n          ])\n        );\n        for (let i = 0; i < elementCount; ++i) {\n          stmts[index++] = this.makeCallDirect(setter, [\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\n            module.createI32(i),\n            exprs[i]\n          ]);\n        }\n        assert(index + 1 == stmts.length);\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n        currentFunction.freeTempLocal(tempLocal);\n        this.currentType = arrayType;\n        return module.createBlock(null, stmts, nativeArrayType);\n      }\n\n    } else { // empty, TBD: cache this somehow?\n      this.currentType = arrayType;\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(0)\n      ]);\n    }\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      compileBuiltinAllocate(this, classReference, expression)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the first matching constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance = classInstance.constructorInstance;\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\n      constructorInstance = currentClassInstance.constructorInstance;\n    }\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>target).getterPrototype;\n        if (prototype) {\n          let instance = this.resolver.resolveFunction(prototype, null);\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.parent);\n            assert(parent.kind == ElementKind.CLASS);\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr, inline);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, 0, inline);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileBuiltinAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleExportName(element: Element, simpleName: string = element.simpleName): string {\n  switch (element.kind) {\n    case ElementKind.FUNCTION: {\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\n      return parent\n        ? mangleExportName(parent)\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n        + simpleName\n        : simpleName;\n    }\n    case ElementKind.FIELD: {\n      let parent = assert((<Field>element).parent);\n      return mangleExportName(parent)\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n          + simpleName;\n    }\n    case ElementKind.ENUMVALUE: {\n      let parent = assert((<EnumValue>element).parent);\n      return mangleExportName(parent)\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n          + simpleName;\n    }\n    case ElementKind.CLASS: {\n      let parent = (<Class>element).prototype.parent;\n      return parent\n        ? mangleExportName(parent)\n        + STATIC_DELIMITER\n        + simpleName\n        : simpleName;\n    }\n    default: {\n      let parent = element.parent;\n      return parent\n        ? mangleExportName(parent)\n        + STATIC_DELIMITER\n        + simpleName\n        : simpleName;\n    }\n  }\n}\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement,\n  parentElement: Element | null = null\n): void {\n  mangleImportName_moduleName = parentElement ? parentElement.simpleName : declaration.range.source.simplePath;\n  mangleImportName_elementName = element.simpleName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","import {\n  SerializeHelper,\n  SerializePoint,\n  VariableDeclaration,\n  VarialbeKind,\n  NodeUtil\n} from \"./serialize\";\n\nimport {\n  Type,\n  TypeKind,\n  Signature\n} from \"./types\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement,\n  Class\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  DecoratorNode,\n  SignatureNode,\n  ClassDeclaration,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  TypeNode,\n  NodeKind,\n  Source,\n  ParameterNode,\n  Expression,\n  Node,\n  VariableLikeDeclarationStatement,\n  LiteralKind,\n  StringLiteralExpression,\n  CommonTypeNode\n} from \"./ast\";\n\nclass Struct {\n\n  name: string;\n  base: string;\n  fields: Array<Object> = new Array<Object>();\n}\n\nclass AbiTypeAlias {\n  new_type_name: string;\n  type: string\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\nclass Action {\n\n  name: string;\n  type: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string) {\n    this.name = name;\n    this.type = type;\n  }\n}\n\n\nexport class AbiHelper {\n\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"bool\", \"uint8\"], // eos not support the bool\n    [\"f32\", \"f32\"],\n    [\"f64\", \"f64\"],\n    [\"boolean\", \"uint8\"], // eos not suppot the bool\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass Table {\n  name: string;\n  type: string;\n  index_type: string = \"int64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string) {\n    this.name = name;\n    this.type = type;\n  }\n}\n\n\nexport class Abi {\n\n  abiInfo: {\n    version: string,\n    types: Array<AbiTypeAlias>,\n    structs: Array<Struct>,\n    actions: Array<Action>,\n    tables: Array<Table>\n  };\n\n  dispatch: string;\n\n  program: Program;\n\n  abiTypeLookup: Map<string, string> = new Map();\n\n  typeAliasSet: Set<string> = new Set<string>();\n\n  structsLookup: Map<string, Struct> = new Map();\n\n  elementLookup: Map<string, Element> = new Map();\n\n  fileSerializeLookup: Map<string, Array<SerializePoint>> = new Map<string, Array<SerializePoint>>();\n\n  constructor(program: Program) {\n\n    this.program = program;\n\n    this.abiInfo = {\n      version: \"ultraio:1.0\",\n      types: new Array<AbiTypeAlias>(),\n      structs: new Array<Struct>(),\n      actions: new Array<Action>(),\n      tables: new Array<Table>()\n    };\n\n    this.abiTypeLookup = AbiHelper.abiTypeLookup;\n  }\n\n  /**\n  *  Add abi struct for abi info.\n  */\n  toAbiStruct(methodName: string, signature: SignatureNode): Struct {\n\n    let struct = new Struct();\n    struct.name = methodName;\n    struct.base = \"\";\n\n    let types = signature.parameters;\n    if (types) {\n      for (let type of types) {\n        let typeKind = type.type.range.toString();\n        this.addAbiTypeAlias(typeKind);\n        struct.fields.push({ name: type.name.range.toString(), type: type.type.range.toString() });\n      }\n    }\n    return struct;\n  }\n\n\n  addAbiTypeAlias(typeKindName: string): void {\n\n    if (!this.typeAliasSet.has(typeKindName)) {\n      // It's the assemblyscript internal type \n      let originalTypeName = this.findContractOriginalType(typeKindName);\n      let wasmType = this.abiTypeLookup.get(originalTypeName);\n      if (wasmType) {\n        this.abiInfo.types.push(new AbiTypeAlias(typeKindName, wasmType));\n      }\n      this.typeAliasSet.add(typeKindName);\n    }\n  }\n\n  /**\n  * Find the original type name, \n  * eg: declare type account_name = u64;\n        declare type account_name_alias = account_name;\n\n    findContractOriginalType(\"account_name_alias\") return \"account_name\";\n  */\n  findContractOriginalType(typeKindName: string): string {\n\n    let abiType: string | null = this.abiTypeLookup.get(typeKindName);\n    if (abiType) {\n      return typeKindName;\n    }\n    let typeAlias = this.program.typeAliases.get(typeKindName);\n    if (typeAlias) {\n      let commonaTypeName = typeAlias.type.range.toString()\n      return this.findContractOriginalType(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find the script original type name\n  * @param typeKindName\n  */\n  findScriptOriginalTypeName(typeKindName: string): string {\n    let typeAlias = this.program.typeAliases.get(typeKindName);\n    if (typeAlias) {\n      let commonaTypeName = typeAlias.type.range.toString()\n      return this.findScriptOriginalTypeName(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find assemblyscript original type name \n  * eg: account_name return 'u64'\n  * \n  * @param typeKindName\n  */\n  findScriptOriginalType(typeKindName: string): Type | null {\n    let originalName = this.findScriptOriginalTypeName(typeKindName);\n    //Get the AssemblyScript original type \n    let scriptType: Type | null = this.program.typesLookup.get(originalName);\n    return scriptType;\n  }\n\n\n  // Check the FunctionPrototype weather has decoratorKind\n  checkFuncPrototypeDecorator(funcPrototype: FunctionPrototype, decoratorKind: DecoratorKind): bool {\n    let decorators = funcPrototype.declaration.decorators;\n    let isActionDecorator = false;\n    if (decorators) {\n      for (let decorator of decorators) {\n        if (decorator.decoratorKind == decoratorKind) {\n          isActionDecorator = true;\n        }\n      }\n    }\n    return isActionDecorator;\n  }\n\n  isWrapWithQutation(str: string): bool {\n\n    if (str == undefined || str == null) {\n      return false;\n    }\n    return str.charAt(0) == \"\\\"\" && str.charAt(str.length - 1) == \"\\\"\"\n      ? true : false;\n  }\n\n\n  /**\n  *  Check that element whether is functionPrototype  \n  *\n  */\n  isActionFuncPrototype(element: Element): bool {\n\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return this.checkFuncPrototypeDecorator(funcType, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  /**\n  * Resolve the class database decoreator \n  */\n  resolveClassDecorator(decorators: DecoratorNode[]): void {\n    for (let decorator of decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments \n        if (decorator.arguments.length < 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n\n        let type = decorator.arguments[0].range.toString();\n        let name = this.retrieveArgumentText(decorator.arguments[1]);\n\n        this.abiInfo.tables.push(new Table(name, type));\n\n        this.resolveExpressionToStruct(decorator.arguments[0]);\n      }\n    }\n  }\n\n\n  retrieveArgumentText(expr: Expression): string {\n    let argu: string = expr.range.toString();\n\n    if (this.isWrapWithQutation(argu)) {\n      return argu.substring(1, argu.length - 2);\n    }\n\n    let internelName = NodeUtil.getInternalName(expr);\n    let element: Element | null = this.program.elementsLookup.get(internelName);\n\n    if (element) {\n      let declaration: VariableLikeDeclarationStatement | null = (<VariableLikeElement>element).declaration;\n      if (declaration && declaration.initializer) {\n        let literal: StringLiteralExpression = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Cann't find constant ${internelName}`);\n  }\n\n\n\n\n\n  /**\n  *  Get struct from expression. \n  */\n  resolveExpressionToStruct(expr: Expression): void {\n\n    let internalPath = expr.range.source.internalPath;\n    let name = expr.range.toString();\n    let internalName = `${internalPath}/${name}`;\n    this.retrieveStructByInternalName(internalName);\n  }\n\n  retrieveStructByInternalName(internalName: string): void {\n\n    let element = this.program.elementsLookup.get(internalName);\n    if (!element || element.kind != ElementKind.CLASS_PROTOTYPE) {\n      throw new Error(`Element ${internalName} not found, pleasure make sure that class ${internalName} was existed.`);\n    }\n    let classPrototype = <ClassPrototype>element;\n    this.resolveClassPrototypeToStruct(classPrototype);\n  }\n\n\n  resolveClassPrototypeToStruct(classPrototype: ClassPrototype): void {\n\n    let members: DeclarationStatement[] = classPrototype.declaration.members;\n    let struct = new Struct();\n    struct.name = classPrototype.simpleName;\n\n    if (this.abiTypeLookup.get(struct.name)) {\n      return;\n    }\n\n    struct.base = \"\";\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let filedDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let filedName = member.name.range.toString();\n        let filedType = filedDeclare.type;\n\n        if (filedType) {\n          struct.fields.push({ name: filedName, type: filedType.range.toString() });\n        }\n      }\n    }\n    this.addStruct(struct);\n  }\n\n\n  addStruct(struct: Struct): void {\n\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n\n  static nameMap = \".12345abcdefghijklmnopqrstuvwxyz\";\n\n\n  checkName(str: string): void {\n\n    if (str.length > 13) {\n      throw new Error(`Action Name:${str} should be less than 13 characters.`);\n    }\n\n    for (let ch of str) {\n      if (Abi.nameMap.indexOf(ch) == -1) {\n        throw new Error(`Action Name:${str} should only contains the following symbol .12345abcdefghijklmnopqrstuvwxyz`);\n      }\n    }\n  }\n\n\n  /**\n  *  Resolve ClassPrototype to dispatcher  \n  */\n  resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n\n    let body = new Array<string>();\n    let hasActionDecorator = false;\n    if (clzPrototype.instanceMembers) {\n\n      let contractName = clzPrototype.simpleName; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  if (receiver == code) {`);\n      body.push(`    let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let instance of clzPrototype.instanceMembers.values()) {\n        if (this.isActionFuncPrototype(instance)) {\n\n          this.resolveFunctionPrototype(<FunctionPrototype>instance);\n          hasActionDecorator = true;\n          let declaration: FunctionDeclaration = (<FunctionPrototype>instance).declaration; // FunctionDeclaration\n\n          let funcName = declaration.name.range.toString();\n          let types = declaration.signature.parameters; // FunctionDeclaration parameter types\n\n          // this.checkName(funcName);\n\n          body.push(`    if (action == N(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (var index = 0; index < types.length; index++) {\n            let type: ParameterNode = types[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n\n\n            let variableDeclaration: VariableDeclaration = new VariableDeclaration(this.program, type.type);\n            let abiType = variableDeclaration.resolveAbiParameterType();\n\n            if (abiType.isArray) {\n              if (abiType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${abiType.factType}>();`);\n              } else if (abiType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${parameterName} = ds.readVector<u8>();`);\n              } else if (abiType.kind == VarialbeKind.STRING) {\n\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${abiType.baseType}>();`);\n              }\n            } else {\n              if (abiType.kind == VarialbeKind.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${parameterName} = ds.read<u8>() != 0;`);\n              } else if (abiType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${abiType.factType}>();`);\n              } else {\n                let internalName = NodeUtil.getInternalName(type.type);\n                this.retrieveStructByInternalName(internalName);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n          body.push(`      ${contractVarName}.${funcName}(${fields.join(',')});`);\n          body.push(\"    }\");\n        }\n      }\n      body.push(\"  }\");\n\n      if (hasActionDecorator) {\n        let clzName = clzPrototype.simpleName;\n        let sourcePath = clzPrototype.declaration.range.source.internalPath;\n        if (clzPrototype.declaration.decorators) {\n          this.resolveClassDecorator(clzPrototype.declaration.decorators);\n        }\n      }\n    }\n    return hasActionDecorator ? body : new Array();\n  }\n\n  resolveFunctionPrototype(funcPrototype: FunctionPrototype): void {\n\n    let declaration: FunctionDeclaration = funcPrototype.declaration;\n    let funcName = declaration.name.range.toString();\n    let signature = funcPrototype.declaration.signature;\n    let struct = this.toAbiStruct(funcName, signature);\n\n    this.addStruct(struct)\n    this.abiInfo.actions.push(new Action(funcName, funcName));\n  }\n\n\n  printTypeAliasInfo(): void {\n\n    let typesLookupKeys = this.program.typesLookup.keys();\n    for (let key of typesLookupKeys) {\n      let value = this.program.typesLookup.get(key);\n      if (value) {\n        console.log(`type look up key: ${key}. value: ${value.kind}`);\n      }\n    }\n\n    let typesAliasKeys = this.program.typeAliases.keys();\n    for (let key of typesAliasKeys) {\n      let value = this.program.typeAliases.get(key);\n      if (value) {\n        console.log(`type alias key: ${key}. Value: ${value.type.range.toString()}`);\n      }\n    }\n  }\n\n  printElementLookUpInfo(): void {\n    let keys = this.program.elementsLookup.keys();\n    for (let key of keys) {\n      let value = this.program.elementsLookup.get(key);\n      if (value)\n        console.log(`Element lookup key:${key}.Kind:${value.kind}`);\n    }\n  }\n\n  private printClassProtoTypeInfo(): void {\n    let keys = this.program.elementsLookup.keys();\n    for (let key of keys) {\n      let value: Element | null = this.program.elementsLookup.get(key);\n      if (value && value.kind == ElementKind.CLASS_PROTOTYPE) {\n        // console.log(`Element lookup key:${key}.Kind:${value.kind}`);\n        let classPrototype: ClassPrototype = <ClassPrototype>value;\n        if (classPrototype.basePrototype)\n          console.log(`Element lookup key:${key}. Base prototype:${classPrototype.basePrototype.simpleName}`);\n      }\n\n    }\n  }\n\n  resolve(): void {\n\n    // this.printTypeAliasInfo();\n    // this.printElementLookUpInfo();\n    // this.findDBManager();\n    // this.printClassProtoTypeInfo();\n\n    let serializeHelper: SerializeHelper = new SerializeHelper(this.program);\n    serializeHelper.resolve();\n    this.fileSerializeLookup = serializeHelper.fileSerializeLookup;\n\n    let dispatchBuffer = new Array<string>();\n\n    for (let element of this.program.elementsLookup.values()) {\n      // The element is ClassPrototype\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(clzPrototype.internalName)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          classDispatch.forEach((value: string, index: number): void => {\n            dispatchBuffer.push(value);\n          });\n          this.elementLookup.set(clzPrototype.internalName, element);\n        }\n      }\n    }\n\n    if (dispatchBuffer.length == 0) {\n      // throw new Error(`The smart contract must specify one action.`);\n    }\n\n    this.dispatch = this.assemblyDispatch(dispatchBuffer);\n  }\n\n\n  // Concat the dispatch message\n  assemblyDispatch(body: Array<string>): string {\n\n    let sb = new Array<string>();\n    sb.push(\"export function apply(receiver: u64, code: u64, action: u64): void {\");\n\n    body.forEach((value: string, index: number): void => {\n      sb.push(value);\n    });\n    sb.push(\"}\");\n\n    return sb.join(\"\\n\");\n  }\n}\n\n\n\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              contextualTypeArguments,\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    {\n      let typeArgumentNodes = typeNode.typeArguments;\n      if (typeArgumentNodes) {\n        let numTypeArguments = typeArgumentNodes.length;\n        let paramTypes = new Array<Type>(numTypeArguments);\n        for (let i = 0; i < numTypeArguments; ++i) {\n          let paramType = this.resolveType( // reports\n            typeArgumentNodes[i],\n            contextualTypeArguments,\n            reportMode\n          );\n          if (!paramType) return null;\n          paramTypes[i] = paramType;\n        }\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\n          let instanceKey = typesToString(paramTypes);\n          if (instanceKey.length) {\n            localName += \"<\" + instanceKey + \">\";\n            globalName += \"<\" + instanceKey + \">\";\n          }\n        } else if (contextualTypeArguments) {\n          let placeholderType = contextualTypeArguments.get(globalName);\n          if (placeholderType) return placeholderType;\n        }\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        return type;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let classReference = (<VariableLikeElement>target).type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          null,\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType(\n          (<AssertionExpression>expression).toType,\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this.program, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = prototype.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(prototype.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (prototype.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Copy contextual type arguments so we don't pollute the original map\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    if (prototype.constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        prototype.constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\n      } else {\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let typeParameterNodes = prototype.declaration.typeParameters;\n      let expectedTypeArguments = typeParameterNodes.length;\n      assert(expectedTypeArguments > 0);\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\n      if (expectedTypeArguments != actualTypeArguments) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\n          );\n        }\n        return null;\n      }\n      resolvedTypeArguments = this.resolveTypeArguments(\n        typeParameterNodes,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"../../../std/portable/index\";\nimport \"./binaryen\";\nimport \"./float\";\nimport \"./i64\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nrequire(\"./memory\")(globalScope);\n","module.exports = globalScope => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\n    if (!(size >>>= 0)) return 0;\n\n    if (HEAP_OFFSET + size > HEAP.length) {\n      var oldHeap = HEAP;\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n      HEAP.set(oldHeap);\n    }\n\n    var ptr = HEAP_OFFSET;\n    if ((HEAP_OFFSET += size) & 7)\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n\n    return ptr;\n  };\n\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\n    // TODO\n  };\n\n  globalScope[\"move_memory\"] = function move_memory(dest, src, size) {\n    HEAP.copyWithin(dest, src, src + size);\n  };\n\n  globalScope[\"store\"] = function store(ptr, value, offset) {\n    HEAP[ptr + (offset | 0)] = value;\n  };\n\n  globalScope[\"load\"] = function load(ptr, offset) {\n    return HEAP[ptr + (offset | 0)];\n  };\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\n\nfor (var key in binaryen)\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\n    global[key] = binaryen[key];\n\n// Utilize Binaryen's heap\n\nglobal.allocate_memory = function(size) {\n  if (!size) return 0; // should be safe in our case\n  return binaryen._malloc(size);\n};\n\nglobal.free_memory = function(ptr) {\n  if (ptr) binaryen._free(ptr);\n};\n\nglobal.move_memory = function(dest, src, n) {\n  return binaryen._memmove(dest, src, n);\n};\n\nglobal.store = function(ptr, val) {\n  binaryen.HEAPU8[ptr] = val;\n};\n\nglobal.load = function(ptr) {\n  return binaryen.HEAPU8[ptr];\n};\n\n// Implement module stubs\n\nconst Module = require(\"../../module\").Module;\n\nModule.prototype.toText = function() {\n  return new binaryen.Module(this.ref).emitText();\n};\n\nModule.prototype.toAsmjs = function() {\n  return new binaryen.Module(this.ref).emitAsmjs();\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (operands.length != 1) {\n        if (typeArguments) {\n          compiler.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (operands.length != 1) {\n        if (typeArguments) {\n          compiler.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"current_memory\": { // current_memory() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"set_memory\": { // set_memory(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\nconst allocateInternalName = \"allocate_memory\";\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\n  if (!allocatePrototype) {\n    program.error(\n      DiagnosticCode.Cannot_find_name_0,\n      reportNode.range, allocateInternalName\n    );\n    program.info(\n      DiagnosticCode.An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf,\n      reportNode.range\n    );\n    return module.createUnreachable();\n  }\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\n    program.error(\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n      reportNode.range, allocatePrototype.internalName\n    );\n    return module.createUnreachable();\n  }\n\n  var allocateInstance = compiler.resolver.resolveFunction(<FunctionPrototype>allocatePrototype, null);\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\n\n  compiler.currentType = classInstance.type;\n  return module.createCall(\n    allocateInstance.internalName, [\n      options.isWasm64\n        ? module.createI64(classInstance.currentMemoryOffset)\n        : module.createI32(classInstance.currentMemoryOffset)\n    ],\n    options.nativeSizeType\n  );\n}\n\nconst abortInternalName = \"abort\";\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\n  if (!stringType) return module.createUnreachable();\n\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\n\n  var abortInstance = compiler.resolver.resolveFunction(<FunctionPrototype>abortPrototype, null);\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","import {\n    Type,\n    TypeKind,\n    Signature,\n    typesToString\n} from \"./types\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    ElementKind,\n    Element,\n    ClassPrototype,\n    FunctionPrototype,\n    Program,\n    VariableLikeElement,\n    Class,\n    Field,\n    FieldPrototype\n} from \"./program\";\n\nimport {\n    DecoratorKind,\n    DecoratorNode,\n    SignatureNode,\n    ClassDeclaration,\n    FunctionDeclaration,\n    DeclarationStatement,\n    FieldDeclaration,\n    TypeNode,\n    NodeKind,\n    Source,\n    ParameterNode,\n    Expression,\n    Node,\n    VariableLikeDeclarationStatement,\n    LiteralKind,\n    StringLiteralExpression,\n    CommonTypeNode,\n    IdentifierExpression\n} from \"./ast\";\nimport { AbiHelper } from \"./abi\";\n\nexport enum VarialbeKind {\n    BOOL, // boolean and bool\n    NUMBER, // original type except boolean and bool\n    STRING, // string kind\n    ARRAY, // array kind\n    CLASS // class kind\n}\n\n\n\nexport class NodeUtil {\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        let internalPath = node.range.source.internalPath;\n        let name = node.range.toString();\n        let internalName = `${internalPath}/${name}`;\n        return internalName;\n    }\n}\n\n\n\nexport class VariableDeclaration {\n\n    program: Program;\n\n    abiTypeLookup: Map<string, string> = new Map();\n\n    commonTypeNode: CommonTypeNode;\n\n    kind: VarialbeKind;\n    /** Parameter name, u64 */\n    declareType: string;\n    /** Base Parameter type */\n    baseType:string;\n    /** The abi field type, eg:account_name */\n    abiType: string; \n    /** The field fact type, eg: u64, u32 */\n    factType: string;\n    // /** Whether parameter or field is array  */\n\n    constructor(program: Program, commonTypeNode: CommonTypeNode) {\n        this.program = program;\n        this.commonTypeNode = commonTypeNode;\n        this.abiTypeLookup = AbiHelper.abiTypeLookup;\n  \n    }\n\n    /**\n     * string TypeKind is 9, and usize TypeKind is also 9.\n     * @param type \n     */\n    resolveAbiParameterType(): VariableDeclaration {\n\n        let variableType = this.commonTypeNode.range.toString();\n        let typeAlias = this.program.typeAliases.get(variableType);\n        if (typeAlias) {\n            variableType = typeAlias.type.range.toString();\n        }\n        this.declareType = variableType;\n        let baseTypeName: string = this.getBaseTypeName(variableType);\n        this.baseType = baseTypeName;\n        if (baseTypeName == \"string\") {\n            this.kind = VarialbeKind.STRING;\n            this.factType = \"string\";\n        }\n        this.abiType = this.findAbiType(baseTypeName);\n        let factType: Type | null = this.findFactType(this.abiType);\n\n        if (!factType) {\n            this.kind = VarialbeKind.CLASS;\n        } else if (factType.kind == TypeKind.BOOL) {\n            this.kind = VarialbeKind.BOOL;\n            this.factType = factType.toString();\n        } else {\n            this.kind = VarialbeKind.NUMBER\n            this.factType = factType.toString();\n        }\n        return this;\n    }\n\n    /**\n     * Find the original type name, \n     * eg: declare type account_name = u64;\n     *     declare type account_name_alias = account_name;\n     *     findAbiType(\"account_name_alias\") return \"account_name\";\n     * \n     * eg: findAbiType(\"u64\") return \"u64\";\n     * @param typeKindName\n     * */\n    findAbiType(typeKindName: string): string {\n\n        /**Watch the type whether was the root type */\n        let abiType: string | null = this.abiTypeLookup.get(typeKindName);\n        if (abiType) {\n            return typeKindName;\n        }\n        let typeAlias = this.program.typeAliases.get(typeKindName);\n        if (typeAlias) {\n            let typeName = typeAlias.type.range.toString()\n            return this.findAbiType(typeName);\n        } else {\n            return typeKindName;\n        }\n    }\n\n    get isArray(): bool {\n        return this.declareType.includes(\"[\");\n    }\n\n    /**\n     * Get the base type name, \n     * If the type name is string[], so the base type name is string\n     * @param typeName \n     */\n    getBaseTypeName(typeName: string): string {\n\n        let bracketIndex = typeName.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = typeName.indexOf(\" \") == -1 ? bracketIndex : typeName.indexOf(\" \");\n            let baseTypeName = typeName.substring(0, index);\n            return baseTypeName;\n        }\n        return typeName;\n    }\n\n    /**\n     *  Find the script original type name\n     *  @param typeKindName\n     * \n     */\n    private findFactTypeName(typeKindName: string): string {\n        let typeAlias = this.program.typeAliases.get(typeKindName);\n        if (typeAlias) {\n            let commonaTypeName = typeAlias.type.range.toString()\n            return this.findFactTypeName(commonaTypeName);\n        } else {\n            return typeKindName;\n        }\n    }\n\n    /**\n    * Find assemblyscript original type name \n    * eg: account_name return 'u64'\n    * \n    * @param typeKindName\n    */\n    private findFactType(typeKindName: string): Type | null {\n        let originalName = this.findFactTypeName(typeKindName);\n        //Get the AssemblyScript original type \n        let scriptType: Type | null = this.program.typesLookup.get(originalName);\n        return scriptType;\n    }\n}\n\n/**\n * \n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needImplSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needImplDeSerialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needImplPrimary: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.generatorSerializeFlag();\n    }\n\n    getInternalName(node: Node): string {\n        let internalPath = node.range.source.internalPath;\n        let name = node.range.toString();\n        let internalName = `${internalPath}/${name}`;\n        return internalName;\n    }\n\n    generatorSerializeFlag(): void {\n\n        if (!this.classPrototype.instanceMembers) {\n            return;\n        }\n\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                let functionPrototype = <FunctionPrototype>element;\n                if (functionPrototype.declaration.name.range.toString() == this.SERIALIZE_METHOD_NAME) {\n                    this.needImplSerialize = false;\n                }\n                if (functionPrototype.declaration.name.range.toString() == this.DESERIALIZE_METHOD_NAME) {\n                    this.needImplDeSerialize = false;\n                }\n                if (functionPrototype.declaration.name.range.toString() == this.PRIMARY_METHOD_NAME) {\n                    this.needImplPrimary = false;\n                }\n            }\n        }\n    }\n\n\n    checkFieldImplSerialize(typeNode: CommonTypeNode): void {\n\n        let internalName = NodeUtil.getInternalName(typeNode);\n        let element: Element | null = this.classPrototype.program.elementsLookup.get(internalName)\n\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = SerializeHelper.hasImplSerialize((<ClassPrototype>element).declaration);\n            if (!hasImpl) {\n                throw new Error(`Class ${internalName} not implements the interface ${SerializeHelper.SERIALIZE_INTERFANCE}`);\n            }\n        }\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoints(): SerializePoint {\n\n        let serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.needDeserialize = this.needImplDeSerialize;\n        serializePoint.needSerialize = this.needImplSerialize;\n        serializePoint.needPrimaryKey = this.needImplPrimary;\n\n        if (!this.classPrototype.instanceMembers)\n            return serializePoint;\n\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = fieldPrototype.declaration;\n                let commonType: CommonTypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.TYPE) {\n\n                    let typeNode = <TypeNode>commonType;\n                    if (this.needImplDeSerialize && this.checkFieldImplSerialize(commonType))\n                        serializePoint.addSerializeExpr(this.serializeField(fieldName, typeNode));\n\n                    if (this.needImplSerialize && this.checkFieldImplSerialize(commonType))\n                        serializePoint.addDeserializeExpr(this.deserializeField(fieldName, typeNode));\n                }\n            }\n        }\n        serializePoint.addDeserializeExpr(`   }`);\n        serializePoint.addSerializeExpr(`   }`);\n\n        return serializePoint;\n    }\n\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: TypeNode): string {\n\n        let typeNodeHelper: VariableDeclaration = new VariableDeclaration(this.classPrototype.program, typeNode);\n        let body: Array<string> = new Array<string>();\n        let paramDeclaration: VariableDeclaration = typeNodeHelper.resolveAbiParameterType();\n\n        if (paramDeclaration.isArray) {\n            if (paramDeclaration.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${fieldName} = ds.readVector<${paramDeclaration.abiType}>();`);\n            } else if (paramDeclaration.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${fieldName} = ds.readVector<u8>();`);\n            } else if (paramDeclaration.kind == VarialbeKind.STRING) {\n\n            } else {\n                body.push(`      let ${fieldName} = ds.readComplexVector<${paramDeclaration.declareType}>();`);\n            }\n        } else {\n            if (paramDeclaration.kind == VarialbeKind.STRING) {\n                body.push(`      ds.writeString(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.BOOL) {\n                body.push(`      ds.write<u8>(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.NUMBER) {\n                body.push(`      ds.write<${paramDeclaration.declareType}>(this.${fieldName});`);\n            } else {\n                body.push(`      this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return body.join(\"\\n\");\n    }\n\n    deserializeField(fieldName: string, type: TypeNode): string {\n\n        let typeNodeHelper: VariableDeclaration = new VariableDeclaration(this.classPrototype.program, type);\n\n        let body: Array<string> = new Array<string>();\n        let variableType:VariableDeclaration = typeNodeHelper.resolveAbiParameterType();\n\n        if (variableType.isArray) {\n            if (variableType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${fieldName} = ds.readVector<${variableType.factType}>();`);\n            } else if (variableType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${fieldName} = ds.readVector<u8>();`);\n            } else if (variableType.kind == VarialbeKind.STRING) {\n\n            } else {\n                body.push(`      let ${fieldName} = ds.readComplexVector<${variableType.baseType}>();`);\n            }\n        } else {\n            if (variableType.kind == VarialbeKind.STRING) {\n                body.push(`      this.${fieldName} = ds.readString();`);\n            } else if (variableType.kind == VarialbeKind.BOOL) {\n                body.push(`      this.${fieldName} = ds.read<u8>() != 0;`);\n            } else if (variableType.kind == VarialbeKind.NUMBER) {\n                body.push(`      this.${fieldName} = ds.read<${variableType.factType}>();`);\n            } else {\n                body.push(`      this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return body.join(\"\\n\");\n    }\n}\n\nexport class SerializePoint {\n\n    private serialize: Array<string> = new Array<string>();\n\n    private deserialize: Array<string> = new Array<string>();\n\n    private primaryKey: Array<string> = new Array<string>();\n\n    needSerialize: bool;\n\n    needDeserialize: bool;\n\n    needPrimaryKey: bool;\n\n    range: Range;\n\n    get line(): i32 {\n        return this.range.line;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get classpath(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    constructor(range: Range) {\n        this.range = range;\n        this.serialize.push(`    serialize(ds: DataStream): void {`);\n        this.deserialize.push(`    deserialize(ds: DataStream): void {`);\n        \n        this.primaryKey.push(`     primaryKey(): id_type {`);\n        this.primaryKey.push(`       return 0;`)\n        this.primaryKey.push(`    }`)\n    }\n\n    addSerializeExpr(expr: string): void {\n        this.serialize.push(expr);\n    }\n\n    addDeserializeExpr(expr: string): void {\n        this.deserialize.push(expr);\n    }\n\n    toSerialize(): string {\n        if (!this.needSerialize) {\n            return \"\";\n        }\n        return this.serialize.join(\"\\n\");\n    }\n\n    toDeserialize(): string {\n        if (!this.needDeserialize) {\n            return \"\";\n        }\n        return this.deserialize.join(\"\\n\");\n    }\n\n    toPrimarykey(): string {\n        return  this.needPrimaryKey ? this.primaryKey.join(\"\\n\") : \"\";\n    }\n}\n\n\nexport class SerializeHelper {\n\n    static SERIALIZE_INTERFANCE: string = \"ISerializable\";\n    /**Program  */\n    program: Program;\n\n    serializeClassname: Set<string> = new Set<string>();\n\n    fileSerializeLookup: Map<string, Array<SerializePoint>> = new Map<string, Array<SerializePoint>>();\n\n    constructor(program: Program) {\n        this.program = program;\n    }\n\n    static hasImplSerialize(classDeclaration: ClassDeclaration): bool {\n        let classDeclareStr = classDeclaration.range.toString();\n        return classDeclareStr.includes(this.SERIALIZE_INTERFANCE)\n    }\n\n    resolve(): void {\n\n        for (let [key, element] of this.program.elementsLookup) {\n\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let classDeclaration: ClassDeclaration = (<ClassPrototype>element).declaration;\n                if (SerializeHelper.hasImplSerialize(classDeclaration)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n                    let serializePoint: SerializePoint = generator.getSerializePoints();\n\n                    if (!this.serializeClassname.has(serializePoint.classpath)) {\n                        this.addSerializePoint(serializePoint);\n                        this.serializeClassname.add(serializePoint.classpath);\n                    }\n                }\n            }\n        }\n        this.sortSerializePoints();\n    }\n\n    /**\n     * Add the serialize point\n     * @param serialize The serialize point\n     */\n    addSerializePoint(serialize: SerializePoint): void {\n\n        let normalizedPath = serialize.normalizedPath;\n        let fileSerialize: Array<SerializePoint> | null = this.fileSerializeLookup.get(normalizedPath);\n\n        if (fileSerialize) {\n            fileSerialize.push(serialize);\n        } else {\n            fileSerialize = new Array<SerializePoint>();\n            fileSerialize.push(serialize);\n            this.fileSerializeLookup.set(normalizedPath, fileSerialize);\n        }\n    }\n\n    /**\n     * Sorting the serialize points by the line number, \n     * the max line number is in front of.\n     */\n    sortSerializePoints(): void {\n        for (let [key, array] of this.fileSerializeLookup) {\n            let compartor = (a: SerializePoint, b: SerializePoint): i32 => {\n                return (b.line - a.line);\n            }\n            array.sort(compartor);\n        }\n    }\n}","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"current_memory()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"grow_memory(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // mark the special builtins library file\n    if (source.normalizedPath == builtinsFile) {\n      source.set(CommonFlags.BUILTIN);\n    }\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // mark builtins\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    // return backlog.length ? backlog.shift() : null;\n    let fileName = backlog.length ? backlog.shift() : null;\n\n    return fileName;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorator.range\n        );\n      }\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET | CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Expression_expected,\n          tn.range()\n        );\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression?\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) return null;\n        expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos)); // is again callable\n      }\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n"],"sourceRoot":""}