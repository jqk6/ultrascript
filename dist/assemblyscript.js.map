{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/serialize.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__25__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","common_1","tokenizer_1","Token","Range","NodeKind","util_1","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","nodeIsGenericCallable","Node","parent","flags","CommonFlags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","range","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","text","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","length","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","declaration","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","values","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizedPath","normalizePath","startsWith","resolvePath","source","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","LIBRARY_PREFIX","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","assert","charCodeAt","ACTION","DATABASE","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","PATH_DELIMITER","simplePath","substring","Array","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","STATIC_DELIMITER","INSTANCE_DELIMITER","endsWith","findDecorator","decorator","OperatorKind","diagnostics_1","types_1","ast_1","module_1","abi_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnostics","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","stringInstance","mainFunction","resolvedThisExpression","resolvedElementExpression","sources","toAbi","abi","Abi","resolve","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryResolveImport","localName","splice","externalNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","stringPrototype","has","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","globalName","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","filterDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","Duplicate_decorator","toString","Decorator_0_is_not_valid_here","checkGlobalOptions","parentNode","hasDecorator","BUILTIN","isLibrary","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","join","push","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","staticField","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","GETTER_PREFIX","SETTER_PREFIX","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","prefix","FILESPACE_PREFIX","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","global_1","resolveSignature","contextualTypeArguments","reportNotFound","thisType","resolveType","parameterTypeNodes","numParameters","parameterTypes","parameterNames","requiredParameters","hasRest","parameterTypeNode","DEFAULT","REST","parameterType","returnTypeNode","Signature","asNullable","typeNode","ENUM","instance","resolveUsingTypeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","context","flow","getScopedLocal","CLASS","resolvePropertyAccess","propertyAccess","contextualFunction","targetExpression","target","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","indexedGet","lookupOverload","Index_signature_is_missing_in_type_0","base","resolveElementAccess","elementAccess","classType","explicitLocal","_this_cannot_be_referenced_in_current_location","_super_can_only_be_referenced_in_a_derived_class","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","DiagnosticEmitter","Element","program","_internalName","replaceComma","str","result","str_1","str_1_1","ch","NAMESPACE","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","CONST","INLINED","constantFloatValue","Parameter","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","resolveBuiltinTypeArguments","resolvedType","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","DECLARE","localIndex","local","inheritedTypeArguments_2","inheritedTypeArguments_2_1","parameterName","getParameterName","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","NativeType","I32","I64","F32","F64","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","line","column","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_3","inheritedTypeArguments_3_1","_e","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Class","currentMemoryOffset","_f","_g","inheritedMember","partialConstructor","constructorInstance","_h","_j","fieldDeclaration","fieldType","fieldInstance","byteSize","instanceProperty","partialGetterPrototype","partialSetterPrototype","_k","_l","_m","operatorInstance","operatorPartial","asClass","inheritedTypeArguments_4","inheritedTypeArguments_4_1","baseType","isAssignableTo","current","unchecked","uncheckedOverload","overload","INTERFACE_PROTOTYPE","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","PARENT_SUBST","INNER_DELIMITER","LIBRARY_SUBST","__export","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","None","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeFunction","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","_BinaryenFunctionGetBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","g","eval","e","window","TypeKind","TypeFlags","cachedNullableType","ceil","nonNullableType","isize64","isize32","usize64","usize32","computeSmallIntegerShift","targetType","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","serialize_1","program_1","Struct","fields","AbiTypeAlias","newTypeName","wasmType","new_type_name","Action","ricardian_contract","AbiHelper","abiTypeLookup","Table","index_type","keys_names","keys_types","typeAliasSet","structsLookup","elementLookup","fileSerializeLookup","abiInfo","version","structs","actions","tables","toAbiStruct","methodName","struct","types_1_1","typeKind","addAbiTypeAlias","typeKindName","originalTypeName","findContractOriginalType","typeAlias","commonaTypeName","findScriptOriginalTypeName","findScriptOriginalType","originalName","checkFuncPrototypeDecorator","funcPrototype","isActionDecorator","decorators_1","decorators_1_1","isWrapWithQutation","undefined","charAt","isActionFuncPrototype","funcType","resolveClassDecorator","decorators_2","decorators_2_1","retrieveArgumentText","resolveExpressionToStruct","argu","internelName","NodeUtil","getInternalName","retrieveStructByInternalName","resolveClassPrototypeToStruct","members_1","members_1_1","filedDeclare","filedName","filedType","addStruct","checkName","nameMap","indexOf","resolveClassDispatcher","clzPrototype","hasActionDecorator","contractName","contractVarName","resolveFunctionPrototype","funcName","abiType","resolveAbiParameterType","isArray","VarialbeKind","NUMBER","factType","BOOL","printTypeAliasInfo","typesLookupKeys","keys","typesLookupKeys_1","typesLookupKeys_1_1","console","log","typesAliasKeys","typesAliasKeys_1","typesAliasKeys_1_1","printElementLookUpInfo","keys_1","keys_1_1","printClassProtoTypeInfo","keys_2","keys_2_1","serializeHelper","SerializeHelper","dispatchBuffer","forEach","dispatch","assemblyDispatch","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileInlineConstant","compileExpression","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureTrampoline","ensureArgcSet","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","staticMembers","setter","ctorInstance","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","repeatLabel","alwaysTrue","condPre","incrExpr","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","exception","convertExpression","ensureSmallIntegerWrap","precomputeExpression","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","compileCallInlineUnchecked","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","bodyStatement","original","originalSignature","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","elementType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","compileAllocate","field","nativeFieldType","parentElement","builtinsFile","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","ctor","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Break","Switch","CallImport","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Return","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","commonTypeNode","variableType","declareType","baseTypeName","getBaseTypeName","findAbiType","findFactType","includes","bracketIndex","findFactTypeName","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needImplSerialize","needImplDeSerialize","needImplPrimary","generatorSerializeFlag","functionPrototype","checkFieldImplSerialize","hasImplSerialize","SERIALIZE_INTERFANCE","getSerializePoints","serializePoint","SerializePoint","needDeserialize","needSerialize","needPrimaryKey","fieldName","addSerializeExpr","serializeField","addDeserializeExpr","deserializeField","typeNodeHelper","paramDeclaration","serialize","deserialize","primaryKey","toSerialize","toDeserialize","toPrimarykey","serializeClassname","classDeclaration","classpath","addSerializePoint","sortSerializePoints","fileSerialize","sort","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","compiler","evaluateConstantType","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","deferASM","deferASMCall","typeArgument","valueType","allocateInternalName","allocatePrototype","An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf","allocateInstance","abortInternalName","abortPrototype","abortInstance","binaryen","Binaryen","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","ASC_TARGET","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","y","sign","isTrueish","fromCodePoint","Number","isInteger"],"mappings":"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KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAAAH,EAA4BjrD,EAAWpI,GACrC,GAAIoI,EAAOpI,EAAI,GAAI,OAAO,EAM1B,IAJA,IAEI0zD,EAFAxF,EAAK,EACLD,EAAKjuD,EAAIvvB,OAGNy9E,EAAK,EAAID,GAAI,CAGlB,GAFAyF,EAAMxF,GAAMD,EAAKC,GAAM,EAEnBluD,EADJ0zD,GAAOA,EAAM,IACGtrD,GAAQA,GAAQpI,EAAI0zD,EAAM,GACxC,OAAO,EAELtrD,EAAOpI,EAAI0zD,GACbzF,EAAKyF,EAELxF,EAAKwF,EAAM,EAGf,OAAO,kFCjWT,IAAAvxE,EAAAnY,EAAA,GAIAqY,EAAArY,EAAA,GASAoY,EAAApY,EAAA,GAMAsY,EAAAtY,EAAA,GAcAutD,EAAAvtD,EAAA,GAUA,SAAAqlE,EACEskB,EACA7nF,EACAgC,EACAypC,EACA2wB,EACAzvC,GAEA,IAEI6P,EACAC,EACAC,EACA4Y,EALA53C,EAASmqF,EAASnqF,OAWtB,OAAQsC,EAAUyc,cAIhB,IAAK,YACH,IAAIta,EAAO2lF,EAAqBD,EAAU7lF,EAAeypC,EAAU9e,GAEnE,OADAk7D,EAAS70B,YAAc18C,EAAAqE,KAAKW,KACvBnZ,EACEA,EAAKR,GAAE,KAAwBQ,EAAKR,GAAE,KACzCjE,EAAO6sC,UAAU,GACjB7sC,EAAO6sC,UAAU,GAHH7sC,EAAOmyC,oBAK3B,IAAK,UACC1tC,EAAO2lF,EAAqBD,EAAU7lF,EAAeypC,EAAU9e,GAEnE,OADAk7D,EAAS70B,YAAc18C,EAAAqE,KAAKW,KACvBnZ,EACEA,EAAKR,GAAE,GACVjE,EAAO6sC,UAAU,GACjB7sC,EAAO6sC,UAAU,GAHH7sC,EAAOmyC,oBAK3B,IAAK,WACC1tC,EAAO2lF,EAAqBD,EAAU7lF,EAAeypC,EAAU9e,GAEnE,OADAk7D,EAAS70B,YAAc18C,EAAAqE,KAAKW,KACvBnZ,EACEA,EAAKR,GAAE,GACVjE,EAAO6sC,UAAU,GACjB7sC,EAAO6sC,UAAU,GAHH7sC,EAAOmyC,oBAK3B,IAAK,cACC1tC,EAAO2lF,EAAqBD,EAAU7lF,EAAeypC,EAAU9e,GAEnE,OADAk7D,EAAS70B,YAAc18C,EAAAqE,KAAKW,KACvBnZ,GACL0lF,EAAS70B,YAAc18C,EAAAqE,KAAKW,KACrBnZ,EAAKR,GAAE,KACVjE,EAAO6sC,UAAU,GACjB7sC,EAAO6sC,UAAU,IAJH7sC,EAAOmyC,oBAM3B,IAAK,WACC1tC,EAAO2lF,EAAqBD,EAAU7lF,EAAeypC,EAAU9e,GAEnE,GADAk7D,EAAS70B,YAAc18C,EAAAqE,KAAKW,MACvBnZ,EAAM,OAAOzE,EAAOmyC,oBAEzB,GADI3mB,EAAY/mB,EAAKumB,eACN,CACb,IAAI9O,EAAiBiuE,EAASh+D,QAAQjQ,eACtC,GAAIA,GAAkBsP,EAAUmJ,eAAezY,GAAiB,OAAOlc,EAAO6sC,UAAU,GAE1F,OAAO7sC,EAAO6sC,UAAU,GAE1B,IAAK,UACCpoC,EAAO2lF,EAAqBD,EAAU7lF,EAAeypC,EAAU9e,GAEnE,OADAk7D,EAAS70B,YAAc18C,EAAAqE,KAAKW,KACvBnZ,EAEe,OADhB+mB,EAAY/mB,EAAKumB,iBAC6D,MAAtDQ,EAAUL,eAAe4iC,EAAAr1C,aAAaW,aAC9DrZ,EAAO6sC,UAAU,GACjB7sC,EAAO6sC,UAAU,GAJH7sC,EAAOmyC,oBAS3B,IAAK,MACH,GAAuB,GAAnBpE,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKG,IAAG,KAEzD,OAAQ+sE,EAAS70B,YAAYryD,MAC3B,OACA,OACA,OACA,OACE20C,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQG,OAAQkD,GACzC,MAEF,QACA,OACA,OACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQG,OAAQkD,GACzC,MAEF,OACE,GAAIqrD,EAAS70B,YAAYrxD,GAAE,KAAuB,CAChDkmF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBACb,MAIJ,OACEyF,EAAM53C,EAAOytC,YACX08C,EAASntE,QAAQkB,SACbpF,EAAA2iB,QAAQ08C,OACRr/D,EAAA2iB,QAAQG,OACZkD,GAEF,MAEF,OACA,OACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQ08C,OAAQr5C,GACzC,MAEF,QACEqrD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAET,IAAK,MACH,GAAuB,GAAnB7J,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKG,IAAG,KAEzD,OAAQ+sE,EAAS70B,YAAYryD,MAC3B,OACA,OACA,OACA,OACE20C,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQI,OAAQiD,GACzC,MAEF,QACA,OACA,OACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQI,OAAQiD,GACzC,MAEF,OACE,GAAIqrD,EAAS70B,YAAYrxD,GAAE,KAAuB,CAChDkmF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBACb,MAIJ,OACEyF,EAAM53C,EAAOytC,YACX08C,EAASntE,QAAQkB,SACbpF,EAAA2iB,QAAQ28C,OACRt/D,EAAA2iB,QAAQI,OACZiD,GAEF,MAEF,OACA,OACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQ28C,OAAQt5C,GACzC,MAEF,QACEqrD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAET,IAAK,SACH,GAAuB,GAAnB7J,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKG,IAAG,KAEzD,OAAQ+sE,EAAS70B,YAAYryD,MAC3B,OACA,OACA,OACA,OACE20C,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQK,UAAWgD,GAC5C,MAEF,QACA,OACA,OACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQK,UAAWgD,GAC5C,MAEF,OACE,GAAIqrD,EAAS70B,YAAYrxD,GAAE,KAAuB,CAChDkmF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBACb,MAIJ,OACEyF,EAAM53C,EAAOytC,YACX08C,EAASntE,QAAQkB,SACbpF,EAAA2iB,QAAQ48C,UACRv/D,EAAA2iB,QAAQK,UACZgD,GAEF,MAEF,OACA,OACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQ48C,UAAWv5C,GAC5C,MAEF,QACEqrD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAET,IAAK,OACH,GAAuB,GAAnB7J,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKG,IAAG,KAGzD,OADA2hB,EAAOorD,EAAS5xB,kBAAkBxqB,EAAS,GAAIo8C,EAAS70B,YAAW,KAC3D60B,EAAS70B,YAAYryD,MAC3B,OACA,OACA,OACA,OACA,QACE20C,EAAMuyC,EAASnqB,uBACbhgE,EAAO4tC,aAAa90B,EAAAyf,SAASygD,QAASl6C,EAAMC,GAC5CorD,EAAS70B,aAIb,OACA,OACE1d,EAAM53C,EAAO4tC,aAAa90B,EAAAyf,SAASygD,QAASl6C,EAAMC,GAClD,MAEF,OACE,GAAIorD,EAAS70B,YAAYrxD,GAAE,KAAuB,CAChDkmF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBACb,MAIJ,OACEyF,EAAM53C,EAAO4tC,aACXu8C,EAASntE,QAAQkB,SACbpF,EAAAyf,SAAS2gD,QACTpgE,EAAAyf,SAASygD,QACbl6C,EACAC,GAEF,MAEF,OACA,OACE6Y,EAAM53C,EAAO4tC,aAAa90B,EAAAyf,SAAS2gD,QAASp6C,EAAMC,GAClD,MAEF,QACEorD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAET,IAAK,OACH,GAAuB,GAAnB7J,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKG,IAAG,KAGzD,OADA2hB,EAAOorD,EAAS5xB,kBAAkBxqB,EAAS,GAAIo8C,EAAS70B,YAAW,KAC3D60B,EAAS70B,YAAYryD,MAC3B,OACA,OACA,OACA,OACA,QACE20C,EAAMuyC,EAASnqB,uBACbhgE,EAAO4tC,aAAa90B,EAAAyf,SAAS0gD,QAASn6C,EAAMC,GAC5CorD,EAAS70B,aAEX,MAEF,OACA,OACE1d,EAAM53C,EAAO4tC,aAAa90B,EAAAyf,SAAS0gD,QAASn6C,EAAMC,GAClD,MAEF,OACE,GAAIorD,EAAS70B,YAAYrxD,GAAE,KAAuB,CAChDkmF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBACb,MAIJ,OACEyF,EAAM53C,EAAO4tC,aACXu8C,EAASntE,QAAQkB,SACbpF,EAAAyf,SAAS4gD,QACTrgE,EAAAyf,SAAS0gD,QACbn6C,EACAC,GAEF,MAEF,OACA,OACE6Y,EAAM53C,EAAO4tC,aAAa90B,EAAAyf,SAAS4gD,QAASr6C,EAAMC,GAClD,MAEF,QACEorD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAET,IAAK,MACH,GAAuB,GAAnB7J,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKa,IAAG,KAEzD,OAAQqsE,EAAS70B,YAAYryD,MAC3B,OACA,OACA,OAEE,IAAIq6D,EAAY6sB,EAAS90D,gBAAgB3D,oBAAoB9Y,EAAAqE,KAAKG,KAAK,GACvEw6B,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAekvB,EAAU/vC,MAAOuR,GACvC9+B,EAAO4tC,aAAa90B,EAAAyf,SAAS6pC,OAC3BpiE,EAAO6sC,UAAU,GACjB7sC,EAAOkuC,eAAeovB,EAAU/vC,MAAOzU,EAAAoY,WAAWC,MAEpDnxB,EAAO4tC,aAAa90B,EAAAyf,SAASqB,MAC3B55B,EAAOkuC,eAAeovB,EAAU/vC,MAAOzU,EAAAoY,WAAWC,KAClDnxB,EAAO6sC,UAAU,KAGrB,MAEF,OACMywB,EAAY6sB,EAAS90D,gBAAgB3D,oBAAoBy4D,EAASntE,QAAQW,WAAW,GACzFi6B,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAekvB,EAAU/vC,MAAOuR,GACvC9+B,EAAO4tC,aACLu8C,EAASntE,QAAQkB,SACbpF,EAAAyf,SAAS8pC,OACTvpD,EAAAyf,SAAS6pC,OACb+nB,EAASntE,QAAQW,UAAUmkC,aAAa9hD,GACxCA,EAAOkuC,eAAeovB,EAAU/vC,MAAO48D,EAASntE,QAAQ28C,iBAE1D35D,EAAO4tC,aACLu8C,EAASntE,QAAQkB,SACbpF,EAAAyf,SAASuB,MACThhB,EAAAyf,SAASqB,MACb55B,EAAOkuC,eAAeovB,EAAU/vC,MAAO48D,EAASntE,QAAQ28C,gBACxDwwB,EAASntE,QAAQW,UAAUmkC,aAAa9hD,KAG5C,MAEF,OACMs9D,EAAY6sB,EAAS90D,gBAAgB3D,oBAAoB9Y,EAAAqE,KAAKI,KAAK,GACvEu6B,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAekvB,EAAU/vC,MAAOuR,GACvC9+B,EAAO4tC,aAAa90B,EAAAyf,SAAS8pC,OAC3BriE,EAAOitC,UAAU,EAAG,GACpBjtC,EAAOkuC,eAAeovB,EAAU/vC,MAAOzU,EAAAoY,WAAWE,MAEpDpxB,EAAO4tC,aAAa90B,EAAAyf,SAASuB,MAC3B95B,EAAOkuC,eAAeovB,EAAU/vC,MAAOzU,EAAAoY,WAAWE,KAClDpxB,EAAOitC,UAAU,EAAG,KAGxB,MAEF,OACE,GAAIk9C,EAAS70B,YAAYrxD,GAAE,KAAuB,CAChDkmF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBACb,MAIJ,OACA,OACA,OACA,OACA,QACEyF,EAAM9Y,EACN,MAEF,QACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQo8C,OAAQ/4C,GACzC,MAEF,QACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQ68C,OAAQx5C,GACzC,MAEF,QACE8Y,EAAM53C,EAAOmyC,oBACb,MAEF,QACEg4C,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAET,IAAK,MACH,GAAuB,GAAnB7J,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKa,IAAG,KAGzD,OADAihB,EAAOorD,EAAS5xB,kBAAkBxqB,EAAS,GAAIo8C,EAAS70B,YAAW,KAC3D60B,EAAS70B,YAAYryD,MAC3B,OACA,OACA,OACE,IAAImnB,EAAO+/D,EAAS90D,gBAAgBjL,KAChCigE,EAAaF,EAAS90D,gBAAgBvE,aACxCq5D,EAAS70B,aACRlrC,EAAKuN,YAAYmH,EAAMqrD,EAAS70B,cAE/Bg1B,EAAaH,EAAS90D,gBAAgB3D,oBACxCy4D,EAAS70B,aACRlrC,EAAKuN,YAAYoH,EAAMorD,EAAS70B,cAEnC60B,EAAS90D,gBAAgB5D,cAAc44D,GACvCzyC,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAei8C,EAAW98D,MAAOuR,GACxC9+B,EAAOouC,eAAek8C,EAAW/8D,MAAOwR,GACxC/+B,EAAO4tC,aAAa90B,EAAAyf,SAASqB,MAC3B55B,EAAOkuC,eAAem8C,EAAW98D,MAAOzU,EAAAoY,WAAWC,KACnDnxB,EAAOkuC,eAAeo8C,EAAW/8D,MAAOzU,EAAAoY,WAAWC,OAGvD,MAEF,OACA,OACA,OACA,QACM/G,EAAO+/D,EAAS90D,gBAAgBjL,KAChCigE,EAAaF,EAAS90D,gBAAgBvE,aACxCq5D,EAAS70B,aACRlrC,EAAKuN,YAAYmH,EAAMqrD,EAAS70B,cAE/Bg1B,EAAaH,EAAS90D,gBAAgB3D,oBACxCy4D,EAAS70B,aACRlrC,EAAKuN,YAAYoH,EAAMorD,EAAS70B,cAEnC60B,EAAS90D,gBAAgB5D,cAAc44D,GACvCzyC,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAei8C,EAAW98D,MAAOuR,GACxC9+B,EAAOouC,eAAek8C,EAAW/8D,MAAOwR,GACxC/+B,EAAO4tC,aAAa90B,EAAAyf,SAASsB,MAC3B75B,EAAOkuC,eAAem8C,EAAW98D,MAAOzU,EAAAoY,WAAWC,KACnDnxB,EAAOkuC,eAAeo8C,EAAW/8D,MAAOzU,EAAAoY,WAAWC,OAGvD,MAEF,OACMk5D,EAAaF,EAAS90D,gBAAgBvE,aAAalY,EAAAqE,KAAKI,KAAK,GAC7DitE,EAAaH,EAAS90D,gBAAgB3D,oBAAoB9Y,EAAAqE,KAAKI,KAAK,GACxE8sE,EAAS90D,gBAAgB5D,cAAc44D,GACvCzyC,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAei8C,EAAW98D,MAAOuR,GACxC9+B,EAAOouC,eAAek8C,EAAW/8D,MAAOwR,GACxC/+B,EAAO4tC,aAAa90B,EAAAyf,SAASuB,MAC3B95B,EAAOkuC,eAAem8C,EAAW98D,MAAOzU,EAAAoY,WAAWE,KACnDpxB,EAAOkuC,eAAeo8C,EAAW/8D,MAAOzU,EAAAoY,WAAWE,OAGvD,MAEF,OACMi5D,EAAaF,EAAS90D,gBAAgBvE,aAAalY,EAAAqE,KAAKI,KAAK,GAC7DitE,EAAaH,EAAS90D,gBAAgB3D,oBAAoB9Y,EAAAqE,KAAKI,KAAK,GACxE8sE,EAAS90D,gBAAgB5D,cAAc44D,GACvCzyC,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAei8C,EAAW98D,MAAOuR,GACxC9+B,EAAOouC,eAAek8C,EAAW/8D,MAAOwR,GACxC/+B,EAAO4tC,aAAa90B,EAAAyf,SAASwB,MAC3B/5B,EAAOkuC,eAAem8C,EAAW98D,MAAOzU,EAAAoY,WAAWE,KACnDpxB,EAAOkuC,eAAeo8C,EAAW/8D,MAAOzU,EAAAoY,WAAWE,OAGvD,MAEF,OACMi5D,EAAaF,EAAS90D,gBAAgBvE,aAAaq5D,EAASntE,QAAQW,WAAW,GAC/E2sE,EAAaH,EAAS90D,gBAAgB3D,oBAAoBy4D,EAASntE,QAAQW,WAAW,GAC1FwsE,EAAS90D,gBAAgB5D,cAAc44D,GACvCzyC,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAei8C,EAAW98D,MAAOuR,GACxC9+B,EAAOouC,eAAek8C,EAAW/8D,MAAOwR,GACxC/+B,EAAO4tC,aACLu8C,EAASntE,QAAQkB,SACbpF,EAAAyf,SAASuB,MACThhB,EAAAyf,SAASqB,MACb55B,EAAOkuC,eAAem8C,EAAW98D,MAAO48D,EAASntE,QAAQ28C,gBACzD35D,EAAOkuC,eAAeo8C,EAAW/8D,MAAO48D,EAASntE,QAAQ28C,kBAG7D,MAEF,OACE,GAAIwwB,EAAS70B,YAAYrxD,GAAE,KAAuB,CAChDkmF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBACb,MAEEk4C,EAAaF,EAAS90D,gBAAgBvE,aAAaq5D,EAASntE,QAAQW,WAAW,GAC/E2sE,EAAaH,EAAS90D,gBAAgB3D,oBAAoBy4D,EAASntE,QAAQW,WAAW,GAC1FwsE,EAAS90D,gBAAgB5D,cAAc44D,GACvCzyC,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAei8C,EAAW98D,MAAOuR,GACxC9+B,EAAOouC,eAAek8C,EAAW/8D,MAAOwR,GACxC/+B,EAAO4tC,aACLu8C,EAASntE,QAAQkB,SACbpF,EAAAyf,SAASwB,MACTjhB,EAAAyf,SAASsB,MACb75B,EAAOkuC,eAAem8C,EAAW98D,MAAO48D,EAASntE,QAAQ28C,gBACzD35D,EAAOkuC,eAAeo8C,EAAW/8D,MAAO48D,EAASntE,QAAQ28C,kBAG7D,MAEF,QACE/hB,EAAM53C,EAAO4tC,aAAa90B,EAAAyf,SAAS+gD,OAAQx6C,EAAMC,GACjD,MAEF,QACE6Y,EAAM53C,EAAO4tC,aAAa90B,EAAAyf,SAASkhD,OAAQ36C,EAAMC,GACjD,MAEF,QACEorD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAET,IAAK,MACH,GAAuB,GAAnB7J,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKa,IAAG,KAGzD,OADAihB,EAAOorD,EAAS5xB,kBAAkBxqB,EAAS,GAAIo8C,EAAS70B,YAAW,KAC3D60B,EAAS70B,YAAYryD,MAC3B,OACA,OACA,OACMmnB,EAAO+/D,EAAS90D,gBAAgBjL,KAChCigE,EAAaF,EAAS90D,gBAAgBvE,aACxCq5D,EAAS70B,aACRlrC,EAAKuN,YAAYmH,EAAMqrD,EAAS70B,cAE/Bg1B,EAAaH,EAAS90D,gBAAgB3D,oBACxCy4D,EAAS70B,aACRlrC,EAAKuN,YAAYoH,EAAMorD,EAAS70B,cAEnC60B,EAAS90D,gBAAgB5D,cAAc44D,GACvCzyC,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAei8C,EAAW98D,MAAOuR,GACxC9+B,EAAOouC,eAAek8C,EAAW/8D,MAAOwR,GACxC/+B,EAAO4tC,aAAa90B,EAAAyf,SAASS,MAC3Bh5B,EAAOkuC,eAAem8C,EAAW98D,MAAOzU,EAAAoY,WAAWC,KACnDnxB,EAAOkuC,eAAeo8C,EAAW/8D,MAAOzU,EAAAoY,WAAWC,OAGvD,MAEF,OACA,OACA,OACA,QACM/G,EAAO+/D,EAAS90D,gBAAgBjL,KAChCigE,EAAaF,EAAS90D,gBAAgBvE,aACxCq5D,EAAS70B,aACRlrC,EAAKuN,YAAYmH,EAAMqrD,EAAS70B,cAE/Bg1B,EAAaH,EAAS90D,gBAAgB3D,oBACxCy4D,EAAS70B,aACRlrC,EAAKuN,YAAYoH,EAAMorD,EAAS70B,cAEnC60B,EAAS90D,gBAAgB5D,cAAc44D,GACvCzyC,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAei8C,EAAW98D,MAAOuR,GACxC9+B,EAAOouC,eAAek8C,EAAW/8D,MAAOwR,GACxC/+B,EAAO4tC,aAAa90B,EAAAyf,SAASU,MAC3Bj5B,EAAOkuC,eAAem8C,EAAW98D,MAAOzU,EAAAoY,WAAWC,KACnDnxB,EAAOkuC,eAAeo8C,EAAW/8D,MAAOzU,EAAAoY,WAAWC,OAGvD,MAEF,OACMk5D,EAAaF,EAAS90D,gBAAgBvE,aAAalY,EAAAqE,KAAKI,KAAK,GAC7DitE,EAAaH,EAAS90D,gBAAgB3D,oBAAoB9Y,EAAAqE,KAAKI,KAAK,GACxE8sE,EAAS90D,gBAAgB5D,cAAc44D,GACvCzyC,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAei8C,EAAW98D,MAAOuR,GACxC9+B,EAAOouC,eAAek8C,EAAW/8D,MAAOwR,GACxC/+B,EAAO4tC,aAAa90B,EAAAyf,SAASW,MAC3Bl5B,EAAOkuC,eAAem8C,EAAW98D,MAAOzU,EAAAoY,WAAWE,KACnDpxB,EAAOkuC,eAAeo8C,EAAW/8D,MAAOzU,EAAAoY,WAAWE,OAGvD,MAEF,OACMi5D,EAAaF,EAAS90D,gBAAgBvE,aAAalY,EAAAqE,KAAKI,KAAK,GAC7DitE,EAAaH,EAAS90D,gBAAgB3D,oBAAoB9Y,EAAAqE,KAAKI,KAAK,GACxE8sE,EAAS90D,gBAAgB5D,cAAc44D,GACvCzyC,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAei8C,EAAW98D,MAAOuR,GACxC9+B,EAAOouC,eAAek8C,EAAW/8D,MAAOwR,GACxC/+B,EAAO4tC,aAAa90B,EAAAyf,SAASY,MAC3Bn5B,EAAOkuC,eAAem8C,EAAW98D,MAAOzU,EAAAoY,WAAWE,KACnDpxB,EAAOkuC,eAAeo8C,EAAW/8D,MAAOzU,EAAAoY,WAAWE,OAGvD,MAEF,OACMi5D,EAAaF,EAAS90D,gBAAgBvE,aAAaq5D,EAASntE,QAAQW,WAAW,GAC/E2sE,EAAaH,EAAS90D,gBAAgB3D,oBAAoBy4D,EAASntE,QAAQW,WAAW,GAC1FwsE,EAAS90D,gBAAgB5D,cAAc44D,GACvCzyC,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAei8C,EAAW98D,MAAOuR,GACxC9+B,EAAOouC,eAAek8C,EAAW/8D,MAAOwR,GACxC/+B,EAAO4tC,aACLu8C,EAASntE,QAAQkB,SACbpF,EAAAyf,SAASW,MACTpgB,EAAAyf,SAASS,MACbh5B,EAAOkuC,eAAem8C,EAAW98D,MAAO48D,EAASntE,QAAQ28C,gBACzD35D,EAAOkuC,eAAeo8C,EAAW/8D,MAAO48D,EAASntE,QAAQ28C,kBAG7D,MAEF,OACE,GAAIwwB,EAAS70B,YAAYrxD,GAAE,KAAuB,CAChDkmF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBACb,MAEEk4C,EAAaF,EAAS90D,gBAAgBvE,aAAaq5D,EAASntE,QAAQW,WAAW,GAC/E2sE,EAAaH,EAAS90D,gBAAgB3D,oBAAoBy4D,EAASntE,QAAQW,WAAW,GAC1FwsE,EAAS90D,gBAAgB5D,cAAc44D,GACvCzyC,EAAM53C,EAAOoxC,aACXpxC,EAAOouC,eAAei8C,EAAW98D,MAAOuR,GACxC9+B,EAAOouC,eAAek8C,EAAW/8D,MAAOwR,GACxC/+B,EAAO4tC,aACLu8C,EAASntE,QAAQkB,SACbpF,EAAAyf,SAASY,MACTrgB,EAAAyf,SAASU,MACbj5B,EAAOkuC,eAAem8C,EAAW98D,MAAO48D,EAASntE,QAAQ28C,gBACzD35D,EAAOkuC,eAAeo8C,EAAW/8D,MAAO48D,EAASntE,QAAQ28C,kBAG7D,MAEF,QACE/hB,EAAM53C,EAAO4tC,aAAa90B,EAAAyf,SAAS8gD,OAAQv6C,EAAMC,GACjD,MAEF,QACE6Y,EAAM53C,EAAO4tC,aAAa90B,EAAAyf,SAASihD,OAAQ16C,EAAMC,GACjD,MAEF,QACEorD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAET,IAAK,OACH,GAAuB,GAAnB7J,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKa,IAAG,KAEzD,OAAQqsE,EAAS70B,YAAYryD,MAC3B,OACE,GAAIknF,EAAS70B,YAAYrxD,GAAE,KAAuB,CAChDkmF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBACb,MAIJ,QACEyF,EAAM9Y,EACN,MAEF,QACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQq8C,QAASh5C,GAC1C,MAEF,QACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQ88C,QAASz5C,GAC1C,MAEF,QACEqrD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAET,IAAK,QACH,GAAuB,GAAnB7J,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKa,IAAG,KAEzD,OAAQqsE,EAAS70B,YAAYryD,MAC3B,OACE,GAAIknF,EAAS70B,YAAYrxD,GAAE,KAAuB,CAChDkmF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBACb,MAIJ,QACEyF,EAAM9Y,EACN,MAEF,QACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQs8C,SAAUj5C,GAC3C,MAEF,QACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQ+8C,SAAU15C,GAC3C,MAEF,QACEqrD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAET,IAAK,WACH,GAAuB,GAAnB7J,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKa,IAAG,KAGzD,OADAihB,EAAOorD,EAAS5xB,kBAAkBxqB,EAAS,GAAIo8C,EAAS70B,YAAW,KAC3D60B,EAAS70B,YAAYryD,MAC3B,QACE20C,EAAM53C,EAAO4tC,aAAa90B,EAAAyf,SAAS6gD,YAAat6C,EAAMC,GACtD,MAEF,QACE6Y,EAAM53C,EAAO4tC,aAAa90B,EAAAyf,SAASghD,YAAaz6C,EAAMC,GACtD,MAEF,QACEorD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAET,IAAK,UACH,GAAuB,GAAnB7J,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKa,IAAG,KAEzD,OAAQqsE,EAAS70B,YAAYryD,MAC3B,OACE,GAAIknF,EAAS70B,YAAYrxD,GAAE,KAAuB,CAChDkmF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBACb,MAIJ,QACEyF,EAAM9Y,EACN,MAEF,QACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQw8C,WAAYn5C,GAC7C,MAEF,QACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQi9C,WAAY55C,GAC7C,MAEF,QACEqrD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAET,IAAK,cACH,GAAuB,GAAnB7J,EAAS9mC,OAYX,OAXM3C,GAAyC,GAAxBA,EAAc2C,SAC/B3C,GAAiBA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAChF6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgc,SAAS,IAAM,MAG/EknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,IAAM7tC,GAAyC,GAAxBA,EAAc2C,OAMnC,OALI3C,GAAiBA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAChF6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgc,SAAS,IAAM,KAEtEjjB,EAAOmyC,oBAEhB,OAAQ7tC,EAAc,GAAGrB,MACvB,OACA,OACE67B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKY,IAAG,KACvD+5B,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQm9C,eAAgB95C,GACjD,MAEF,OACA,OACEA,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKa,IAAG,KACvD85B,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQo9C,eAAgB/5C,GACjD,MAEF,OACE,GAAIx6B,EAAc,GAAGL,GAAE,KAMrB,OALAkmF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEb2lF,EAAS70B,YAAchxD,EAAc,GAC9BtE,EAAOmyC,oBAIlB,OACErT,EAAOqrD,EAAS5xB,kBACdxqB,EAAS,GACTo8C,EAASntE,QAAQkB,SACbtF,EAAAqE,KAAKa,IACLlF,EAAAqE,KAAKY,IAAG,KAId+5B,EAAM53C,EAAOytC,YACX08C,EAASntE,QAAQkB,SACbpF,EAAA2iB,QAAQo9C,eACR//D,EAAA2iB,QAAQm9C,eACZ95C,GAEF,MAEF,QACEA,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKG,IAAG,KACvDw6B,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQq9C,eAAgBh6C,GACjD,MAEF,QACEA,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKI,IAAG,KACvDu6B,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQs9C,eAAgBj6C,GACjD,MAEF,QACEqrD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAKjB,OADAg4C,EAAS70B,YAAchxD,EAAc,GAC9BszC,EAET,IAAK,OACH,GAAuB,GAAnB7J,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKa,IAAG,KAEzD,OAAQqsE,EAAS70B,YAAYryD,MAC3B,QACE20C,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQy8C,QAASp5C,GAC1C,MAEF,QACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQk9C,QAAS75C,GAC1C,MAGF,QACEqrD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAET,IAAK,QACH,GAAuB,GAAnB7J,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,GAAiBA,EAAc2C,OAAQ,CAEzC,GADAkjF,EAAS70B,YAAchxD,EAAc,GACT,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKa,IAAG,KAEzD,OAAQqsE,EAAS70B,YAAYryD,MAC3B,OACE,GAAIknF,EAAS70B,YAAYrxD,GAAE,KAAuB,CAChDkmF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBACb,MAIJ,QACEyF,EAAM9Y,EACN,MAGF,QACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQu8C,SAAUl5C,GAC3C,MAEF,QACE8Y,EAAM53C,EAAOytC,YAAY30B,EAAA2iB,QAAQg9C,SAAU35C,GAC3C,MAEF,QACEqrD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAKT,IAAK,OACH,OAAI7J,EAAS9mC,OAAS,GAAK8mC,EAAS9mC,OAAS,GACrC3C,GAAyC,GAAxBA,EAAc2C,QACnCkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgc,SAAS,IAAM,KAG3E8qB,EAAS9mC,OAAS,EACpBkjF,EAASnqE,MACPrH,EAAAsH,eAAegmD,wCACfh3C,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAGlDknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAG7CjjB,EAAOmyC,qBAEV7tC,GAAyC,GAAxBA,EAAc2C,QAQrC63B,EAAOqrD,EAAS5xB,kBACdxqB,EAAS,GACTo8C,EAASntE,QAAQW,UAAS,MAIxBytB,EAA4B,GAAnB2C,EAAS9mC,OAAcsjF,EAAuBJ,EAAUp8C,EAAS,IAAM,GACvE,EACJ/tC,EAAOmyC,qBAEhBg4C,EAAS70B,YAAchxD,EAAc,GAC9BtE,EAAOwuC,WACZlqC,EAAc,GAAGwvB,SACjBxvB,EAAc,GAAGL,GAAG,GACpB66B,EACAx6B,EAAc,GAAGL,GAAE,IACnBy6D,EAAez6D,GAAE,IACjBy6D,EAAezjC,KAAO32B,EAAc,GAAG22B,MAClCkvD,EAAS70B,YAAcoJ,GAAgBztC,gBACvCk5D,EAAS70B,YAAchxD,EAAc,IAAI2sB,eAC9Cma,MA3BI9mC,GAAiBA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAChF6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgc,SAAS,IAAM,KAEtEjjB,EAAOmyC,qBAyBlB,IAAK,QAEH,GADAg4C,EAAS70B,YAAc18C,EAAAqE,KAAKc,KACxBgwB,EAAS9mC,OAAS,GAAK8mC,EAAS9mC,OAAS,EAkB3C,OAjBM3C,GAAyC,GAAxBA,EAAc2C,QACnCkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgc,SAAS,IAAM,KAG3E8qB,EAAS9mC,OAAS,EACpBkjF,EAASnqE,MACPrH,EAAAsH,eAAegmD,wCACfh3C,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAGlDknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAG7CjjB,EAAOmyC,oBAEhB,IAAM7tC,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJAkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgc,SAAS,IAAM,KAEtEjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBACdxqB,EAAS,GACTo8C,EAASntE,QAAQW,UAAS,KAI5BohB,EAAOorD,EAAS5xB,kBACdxqB,EAAS,GACTzpC,EAAc,GACdA,EAAc,GAAGL,GAAE,GAChB,EACA,EAAwB,GAGzBQ,OAAI,EAoBR,OAlBEH,EAAc,GAAGL,GAAE,MAEhBkmF,EAAS70B,YAAYrxD,GAAE,IACxBkmF,EAAS70B,YAAYr6B,KAAO32B,EAAc,GAAG22B,OAG/C8D,EAAOorD,EAASpqB,kBACdhhC,EACAorD,EAAS70B,YAAahxD,EAAc,GAAE,IAGtCypC,EAAS,IAEXtpC,EAAOH,EAAc,IAErBG,EAAO0lF,EAAS70B,aAEdlqB,EAA4B,GAAnB2C,EAAS9mC,OAAcsjF,EAAuBJ,EAAUp8C,EAAS,IAAM,GACvE,EACJ/tC,EAAOmyC,qBAEhBg4C,EAAS70B,YAAc18C,EAAAqE,KAAKc,KACrB/d,EAAO6uC,YAAYvqC,EAAc,GAAGwvB,SAAUgL,EAAMC,EAAMt6B,EAAKwsB,eAAgBma,IAExF,IAAK,SAEH,GADA++C,EAAS70B,YAAc60B,EAASntE,QAAQW,UACjB,GAAnBowB,EAAS9mC,OAWX,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnCkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgc,SAAS,IAAM,KAG/EknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEV7tC,GAAyC,GAAxBA,EAAc2C,QACnCkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgc,SAAS,IAAM,KAG/E,IAAI6Q,EAAoBxvB,EAAe,GAAGwvB,SAkB1C,OAjBIq2D,EAASntE,QAAQkB,SAEfwgD,EAAez6D,GAAE,IAAuBy6D,EAAezjC,MAAQ,IACjEkvD,EAAS70B,YAAc18C,EAAAqE,KAAKQ,IAC5Bm6B,EAAM53C,EAAO6sC,UAAU/Y,IAEvB8jB,EAAM53C,EAAOitC,UAAUnZ,EAAU,GAI/B4qC,EAAez6D,GAAE,IAA8C,IAAvBy6D,EAAezjC,MACzDkvD,EAAS70B,YAAc18C,EAAAqE,KAAKS,IAC5Bk6B,EAAM53C,EAAOitC,UAAUnZ,EAAU,IAEjC8jB,EAAM53C,EAAO6sC,UAAU/Y,GAGpB8jB,EAET,IAAK,UAEH,GADAuyC,EAAS70B,YAAc60B,EAASntE,QAAQW,UACjB,GAAnBowB,EAAS9mC,OAWX,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnCkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgc,SAAS,IAAM,KAG/EknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,IAAM7tC,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJAkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgc,SAAS,IAAM,KAEtEjjB,EAAOmyC,oBAEhB,IACIq4C,OAAS,EACb,OAFI12D,EAAoBxvB,EAAe,GAAGwvB,UAGxC,KAAK,EAAK02D,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,QAA0B,OAAfx4E,QAAO,GAAehS,EAAOmyC,oBAmB1C,OAjBIg4C,EAASntE,QAAQkB,SAEfwgD,EAAez6D,GAAE,IAAuBy6D,EAAezjC,MAAQ,IACjEkvD,EAAS70B,YAAc18C,EAAAqE,KAAKQ,IAC5Bm6B,EAAM53C,EAAO6sC,UAAU29C,IAEvB5yC,EAAM53C,EAAOitC,UAAUu9C,EAAW,GAIhC9rB,EAAez6D,GAAE,IAA8C,IAAvBy6D,EAAezjC,MACzDkvD,EAAS70B,YAAc18C,EAAAqE,KAAKS,IAC5Bk6B,EAAM53C,EAAOitC,UAAUu9C,EAAW,IAElC5yC,EAAM53C,EAAO6sC,UAAU29C,GAGpB5yC,EAET,IAAK,WAEH,GADAuyC,EAAS70B,YAAc60B,EAASntE,QAAQW,UACpCowB,EAAS9mC,OAAS,EAWpB,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnCkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgc,SAAS,IAAM,KAG/EknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,IAAM7tC,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJAkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgc,SAAS,IAAM,KAEtEjjB,EAAOmyC,oBAEhB,IAAI3mB,EACJ,KADIA,EAAYlnB,EAAc,GAAG0mB,gBAM/B,OAJAm/D,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAENxE,EAAOmyC,oBAEhB,IAAI/G,OAAM,EACV,GAAI2C,EAAS9mC,OAAQ,CACnB,GACE8mC,EAAS,GAAG9qC,MAAQ4V,EAAA/V,SAASI,SACT6qC,EAAS,GAAI16B,aAAewF,EAAA1F,YAAYiB,OAM5D,OAJA+1E,EAASnqE,MACPrH,EAAAsH,eAAe0F,wBACfooB,EAAS,GAAGvpC,OAEPxE,EAAOmyC,oBAEhB,IAAIy1C,EAAsC75C,EAAS,GAAIpsC,MACnD0qE,EAAQ7gD,EAAU1f,QAAU0f,EAAU1f,QAAQvK,IAAIqmF,GAAa,KACnE,IAAMvb,GAASA,EAAMppE,MAAQ8qD,EAAA3yC,YAAY2P,MAKvC,OAJAo/D,EAASnqE,MACPrH,EAAAsH,eAAewqE,yBACf18C,EAAS,GAAGvpC,MAAOgnB,EAAUzM,aAAc6oE,GAEtC5nF,EAAOmyC,oBAEhB/G,EAAiBihC,EAAO35C,kBAExB0Y,EAAS5f,EAAU2H,oBAErB,OAAIg3D,EAASntE,QAAQkB,SAEfwgD,EAAez6D,GAAE,IAAuBy6D,EAAezjC,MAAQ,IACjEkvD,EAAS70B,YAAc18C,EAAAqE,KAAKQ,IACrBzd,EAAO6sC,UAAUzB,IAEjBprC,EAAOitC,UAAU7B,GAItBszB,EAAez6D,GAAE,IAA8C,IAAvBy6D,EAAezjC,MACzDkvD,EAAS70B,YAAc18C,EAAAqE,KAAKS,IACrB1d,EAAOitC,UAAU7B,IAEjBprC,EAAO6sC,UAAUzB,GAO9B,IAAK,SACH,GAAuB,GAAnB2C,EAAS9mC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAASpyB,4BAA4BhqB,EAAS,GAAIn1B,EAAAqE,KAAKG,IAAG,GAE/D3Y,EAAO0lF,EAAS70B,YAOpB,OANAv2B,EAAOorD,EAAS5xB,kBAAkBxqB,EAAS,GAAItpC,EAAI,KACnDu6B,EAAOmrD,EAAS9tB,cACd8tB,EAASpyB,4BAA4BhqB,EAAS,GAAIn1B,EAAAqE,KAAKW,KAAI,GAC3DusE,EAAS70B,aAEX60B,EAAS70B,YAAc7wD,EACf0lF,EAAS70B,YAAYryD,MAC3B,OACA,OACA,OACA,OACA,QAIA,QACE20C,EAAM53C,EAAOoxC,aAAatS,EAAMC,EAAMC,GACtC,MAEF,QACEmrD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM53C,EAAOmyC,oBAIjB,OAAOyF,EAET,IAAK,cAaH,OAZuB,GAAnB7J,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAGhD3e,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGzB/e,EAAOmyC,oBAKhB,IAAK,iBAcH,OAbAg4C,EAAS70B,YAAc18C,EAAAqE,KAAKG,IACL,GAAnB2wB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAGhD3e,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGzB/e,EAAO8tC,WAAWh1B,EAAAwxB,OAAOuvC,eAElC,IAAK,cAiBH,OAhBAsQ,EAAS70B,YAAc18C,EAAAqE,KAAKG,IACL,GAAnB2wB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElD6b,EAAO9+B,EAAOmyC,qBAEdrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIn1B,EAAAqE,KAAKG,IAAG,KAErD9Y,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGzB/e,EAAO8tC,WAAWh1B,EAAAwxB,OAAOwvC,WAAY,MAAQh7C,IAGtD,IAAK,cAOH,GANIx6B,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,OAMX,OALAkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc18C,EAAAqE,KAAKc,KACrB/d,EAAOmyC,oBAqBhB,MAnBArT,EAAOqrD,EAAS5xB,kBACdxqB,EAAS,GACTo8C,EAASntE,QAAQW,UAAS,KAI5BohB,EAAOorD,EAAS5xB,kBACdxqB,EAAS,GACTo8C,EAASntE,QAAQW,UAAS,KAI5BqhB,EAAOmrD,EAAS5xB,kBACdxqB,EAAS,GACTo8C,EAASntE,QAAQW,UAAS,KAI5BwsE,EAAS70B,YAAc18C,EAAAqE,KAAKc,KACtB,IAAI6D,MAAM,mBAGlB,IAAK,aAOH,GANItd,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,OAMX,OALAkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc18C,EAAAqE,KAAKc,KACrB/d,EAAOmyC,oBAqBhB,MAnBArT,EAAOqrD,EAAS5xB,kBACdxqB,EAAS,GACTo8C,EAASntE,QAAQW,UAAS,KAI5BohB,EAAOorD,EAAS5xB,kBACdxqB,EAAS,GACTn1B,EAAAqE,KAAKQ,IAAG,KAIVuhB,EAAOmrD,EAAS5xB,kBACdxqB,EAAS,GACTo8C,EAASntE,QAAQW,UAAS,KAI5BwsE,EAAS70B,YAAc18C,EAAAqE,KAAKc,KACtB,IAAI6D,MAAM,mBAMlB,IAAK,aACH,OAAMtd,GAAyC,GAAxBA,EAAc2C,OAQd,GAAnB8mC,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAchxD,EAAc,GAC9BtE,EAAOmyC,sBAEhBrT,EAAOqrD,EAASpyB,4BACdhqB,EAAS,GACTzpC,EAAc,GAAE,GAGlB6lF,EAAS70B,YAAchxD,EAAc,GACjC6lF,EAAS70B,YAAYr6B,MAAQ32B,EAAc,GAAG22B,MAChDkvD,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAENxE,EAAOmyC,qBAITrT,IA9BDx6B,GAAiBA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAChF6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgc,SAAS,IAAM,KAEtEjjB,EAAOmyC,qBA2BlB,IAAK,SACH,GAAIpE,EAAS9mC,OAAS,GAAK8mC,EAAS9mC,OAAS,EAqB3C,OApBI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,GAAG08C,iBACtC,GAAxB18C,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAIvD8qB,EAAS9mC,OAAS,EACpBkjF,EAASnqE,MACPrH,EAAAsH,eAAegmD,wCACfh3C,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAEzC8qB,EAAS9mC,OAAS,GAC3BkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAG7CjjB,EAAOmyC,oBAEhB,GAAI7tC,EAAe,CAEjB,GADIA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,GAAG08C,iBACtC,GAAxB18C,EAAc2C,OAKhB,OAJAkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhBrT,EAAOqrD,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,UAE/Dw6B,EAAOqrD,EAASpyB,4BAA4BhqB,EAAS,GAAIn1B,EAAAqE,KAAKW,KAAI,GAGhEnZ,EAAO0lF,EAAS70B,YAIpB,GAHA60B,EAAS70B,YAAc7wD,EAAKu8C,gBAGxBmpC,EAASntE,QAAQoB,SACnB,OAAIsgD,GAAkB9lD,EAAAqE,KAAKc,MACzBosE,EAAS70B,YAAc18C,EAAAqE,KAAKc,KACrB/d,EAAOgxC,aAETlS,EAGT,IAAI4rD,EAAQvsB,EAAagsB,EAA6B,GAAnBp8C,EAAS9mC,OAAc8mC,EAAS,GAAK,KAAM9e,GAI9E,GAFAk7D,EAAS70B,YAAc7wD,EAAKu8C,gBAExB0d,GAAkB9lD,EAAAqE,KAAKc,KAAM,CAC/B,OAAQosE,EAAS70B,YAAYryD,MAC3B,QACE20C,EAAM53C,EAAO8wC,SACX9wC,EAAOytC,YAAY30B,EAAA2iB,QAAQC,OACzBoD,GAEF4rD,GAEF,MAEF,OACA,OACE9yC,EAAM53C,EAAO8wC,SACX9wC,EAAOytC,YAAY30B,EAAA2iB,QAAQE,OACzBmD,GAEF4rD,GAEF,MAEF,OACA,OACE9yC,EAAM53C,EAAO8wC,SACX9wC,EAAOytC,YACL08C,EAASntE,QAAQkB,SACbpF,EAAA2iB,QAAQE,OACR7iB,EAAA2iB,QAAQC,OACZoD,GAEF4rD,GAEF,MAGF,QACE9yC,EAAM53C,EAAO8wC,SACX9wC,EAAO4tC,aAAa90B,EAAAyf,SAASG,MAC3BoG,EACA9+B,EAAOqtC,UAAU,IAEnBq9C,GAEF,MAEF,QACE9yC,EAAM53C,EAAO8wC,SACX9wC,EAAO4tC,aAAa90B,EAAAyf,SAASI,MAC3BmG,EACA9+B,EAAOutC,UAAU,IAEnBm9C,GAEF,MAEF,QACEP,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM8yC,EAIVP,EAAS70B,YAAc18C,EAAAqE,KAAKc,UAE5B,OAAQosE,EAAS70B,YAAYryD,MAC3B,OACA,OACA,OACA,OACA,QACMmnB,EAAO+/D,EAAS90D,gBAAgBjL,KAChCkzC,EAAY6sB,EAAS90D,gBAAgB3D,oBACvCy4D,EAAS70B,aACRlrC,EAAKuN,YAAYmH,EAAMqrD,EAAS70B,cAEnC1d,EAAM53C,EAAO8wC,SACX9wC,EAAOouC,eAAekvB,EAAU/vC,MAAOuR,GACvC9+B,EAAOkuC,eAAeovB,EAAU/vC,MAAOzU,EAAAoY,WAAWC,KAClDu5D,GAEF,MAEF,OACA,OACA,QACMptB,EAAY6sB,EAAS90D,gBAAgB3D,oBAAoB9Y,EAAAqE,KAAKG,KAAK,GACvEw6B,EAAM53C,EAAO8wC,SACX9wC,EAAOouC,eAAekvB,EAAU/vC,MAAOuR,GACvC9+B,EAAOkuC,eAAeovB,EAAU/vC,MAAOzU,EAAAoY,WAAWC,KAClDu5D,GAEF,MAEF,OACA,OACMptB,EAAY6sB,EAAS90D,gBAAgB3D,oBAAoB9Y,EAAAqE,KAAKI,KAAK,GACvEu6B,EAAM53C,EAAO8wC,SACX9wC,EAAOytC,YAAY30B,EAAA2iB,QAAQE,OACzB37B,EAAOouC,eAAekvB,EAAU/vC,MAAOuR,IAEzC4rD,EACA1qF,EAAOkuC,eAAeovB,EAAU/vC,MAAOzU,EAAAoY,WAAWE,MAEpD,MAEF,OACA,OACMksC,EAAY6sB,EAAS90D,gBAAgB3D,oBAAoBy4D,EAASntE,QAAQW,WAAW,GACzFi6B,EAAM53C,EAAO8wC,SACX9wC,EAAOytC,YACL08C,EAASntE,QAAQkB,SACbpF,EAAA2iB,QAAQE,OACR7iB,EAAA2iB,QAAQC,OACZ17B,EAAOouC,eAAekvB,EAAU/vC,MAAOuR,IAEzC4rD,EACA1qF,EAAOkuC,eAAeovB,EAAU/vC,MAAO48D,EAASntE,QAAQ28C,iBAE1D,MAEF,QACM2D,EAAY6sB,EAAS90D,gBAAgB3D,oBAAoB9Y,EAAAqE,KAAKY,KAAK,GACvE+5B,EAAM53C,EAAO8wC,SACX9wC,EAAO4tC,aAAa90B,EAAAyf,SAASG,MAC3B14B,EAAOouC,eAAekvB,EAAU/vC,MAAOuR,GACvC9+B,EAAOqtC,UAAU,IAEnBq9C,EACA1qF,EAAOkuC,eAAeovB,EAAU/vC,MAAOzU,EAAAoY,WAAWG,MAEpD,MAEF,QACMisC,EAAY6sB,EAAS90D,gBAAgB3D,oBAAoB9Y,EAAAqE,KAAKa,KAAK,GACvE85B,EAAM53C,EAAO8wC,SACX9wC,EAAO4tC,aAAa90B,EAAAyf,SAASI,MAC3B34B,EAAOouC,eAAekvB,EAAU/vC,MAAOuR,GACvC9+B,EAAOutC,UAAU,IAEnBm9C,EACA1qF,EAAOkuC,eAAeovB,EAAU/vC,MAAOzU,EAAAoY,WAAWI,MAEpD,MAEF,QACE64D,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAEbozC,EAAM8yC,EAKZ,OAAO9yC,EAET,IAAK,YAOH,OANItzC,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,uBAEZ/nB,EAAO+/D,EAAS90D,gBAAgBjL,MAC/BhmB,IAAG,MACRwzC,EAAMuyC,EAASpyB,4BAA4BhqB,EAAS,GAAI2wB,EAAc,GACtEt0C,EAAKwL,MAAK,MACHgiB,GAET,IAAK,gBACH,GAAI7J,EAAS9mC,OAAS,EAcpB,OAbI3C,IACEA,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,MAI3DknE,EAASnqE,MACPrH,EAAAsH,eAAegmD,wCACfh3C,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3CjjB,EAAOmyC,oBAEhB,IAAI3sC,OAAU,EACd,GAAIlB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQkjF,EAAS70B,YAAchxD,EAAc,IAC/D6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhDjjB,EAAOmyC,oBAEhB3sC,EAAalB,EAAc,QAE3BkB,EAAak5D,EAGf,GADA5/B,EAAOqrD,EAASpyB,4BAA4BhqB,EAAS,GAAIn1B,EAAAqE,KAAKQ,IAAG,GACpC,GAAzB0sE,EAAS70B,YAAYryD,KAKvB,OAJAknF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACfyoB,EAAS,GAAGvpC,OAEPxE,EAAOmyC,oBAOhB,IALA,IAAIy1B,EAAc75B,EAAS9mC,OAAS,EAChC0jF,EAAe,IAAIh1E,MAAqBiyD,GACxCgjB,EAAiB,IAAIj1E,MAAciyD,EAAc,GACjD/C,EAAmBr/D,EAAWyrB,eAC9B45D,EAAmB,IAAIl1E,MAAkBiyD,GACpClnE,EAAI,EAAGA,EAAIknE,IAAelnE,EAAG,CACpCiqF,EAAajqF,GAAKypF,EAASpyB,4BAA4BhqB,EAAS,EAAIrtC,GAAIkY,EAAAqE,KAAKG,IAAG,GAChF,IAAI0tE,EAAcX,EAAS70B,YAC3Bs1B,EAAelqF,GAAKoqF,EAAYx4D,oBAChCu4D,EAAiBnqF,GAAKoqF,EAAY75D,eAEpC25D,EAAehjB,GAAepiE,EAAW8sB,oBACzC,IAAI2f,EAAW24C,EAAe9mE,KAAK,IAC/BivB,EAAU/yC,EAAOysC,2BAA2Bo4B,EAAkBgmB,GAKlE,OAJK93C,IAASA,EAAU/yC,EAAOosC,gBAAgB6F,EAAU4yB,EAAkBgmB,IAC3EV,EAAS70B,YAAc9vD,EAGhBxF,EAAOgyC,mBAAmBlT,EAAM6rD,EAAc14C,GAKvD,IAAK,KAOH,OANI3tC,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc18C,EAAAqE,KAAKC,GACrBld,EAAOmyC,qBAETg4C,EAAS5xB,kBACdxqB,EAAS,GACTn1B,EAAAqE,KAAKC,GAAE,KAKX,IAAK,MAOH,OANI5Y,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc18C,EAAAqE,KAAKE,IACrBnd,EAAOmyC,qBAETg4C,EAAS5xB,kBACdxqB,EAAS,GACTn1B,EAAAqE,KAAKE,IAAG,KAKZ,IAAK,MAOH,OANI7Y,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc18C,EAAAqE,KAAKG,IACrBpd,EAAOmyC,qBAETg4C,EAAS5xB,kBACdxqB,EAAS,GACTn1B,EAAAqE,KAAKG,IAAG,KAKZ,IAAK,MAOH,OANI9Y,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc18C,EAAAqE,KAAKI,IACrBrd,EAAOmyC,qBAETg4C,EAAS5xB,kBACdxqB,EAAS,GACTn1B,EAAAqE,KAAKI,IAAG,KAKZ,IAAK,QAOH,OANI/Y,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc60B,EAASntE,QAAQkB,SACpCtF,EAAAqE,KAAKgkC,QACLroC,EAAAqE,KAAKikC,QACFlhD,EAAOmyC,qBAETg4C,EAAS5xB,kBACdxqB,EAAS,GACTo8C,EAASntE,QAAQkB,SACbtF,EAAAqE,KAAKgkC,QACLroC,EAAAqE,KAAKikC,QAAO,KAKpB,IAAK,KAOH,OANI58C,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc18C,EAAAqE,KAAKM,GACrBvd,EAAOmyC,qBAETg4C,EAAS5xB,kBACdxqB,EAAS,GACTn1B,EAAAqE,KAAKM,GAAE,KAKX,IAAK,MAOH,OANIjZ,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc18C,EAAAqE,KAAKO,IACrBxd,EAAOmyC,qBAETg4C,EAAS5xB,kBACdxqB,EAAS,GACTn1B,EAAAqE,KAAKO,IAAG,KAKZ,IAAK,MAOH,OANIlZ,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc18C,EAAAqE,KAAKQ,IACrBzd,EAAOmyC,qBAETg4C,EAAS5xB,kBACdxqB,EAAS,GACTn1B,EAAAqE,KAAKQ,IAAG,KAKZ,IAAK,MAOH,OANInZ,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc18C,EAAAqE,KAAKS,IACrB1d,EAAOmyC,qBAETg4C,EAAS5xB,kBACdxqB,EAAS,GACTn1B,EAAAqE,KAAKS,IAAG,KAKZ,IAAK,QAOH,OANIpZ,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc60B,EAASntE,QAAQW,UACjC3d,EAAOmyC,qBAETg4C,EAAS5xB,kBACdxqB,EAAS,GACTo8C,EAASntE,QAAQW,UAAS,KAK9B,IAAK,OAOH,OANIrZ,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc18C,EAAAqE,KAAKW,KACrB5d,EAAOmyC,qBAETg4C,EAAS5xB,kBACdxqB,EAAS,GACTn1B,EAAAqE,KAAKW,KAAI,KAKb,IAAK,MAOH,OANItZ,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc18C,EAAAqE,KAAKY,IACrB7d,EAAOmyC,qBAETg4C,EAAS5xB,kBACdxqB,EAAS,GACTn1B,EAAAqE,KAAKY,IAAG,KAKZ,IAAK,MAOH,OANIvZ,GACF6lF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGT,GAAnBgvB,EAAS9mC,QACXkjF,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAElDknE,EAAS70B,YAAc18C,EAAAqE,KAAKa,IACrB9d,EAAOmyC,qBAETg4C,EAAS5xB,kBACdxqB,EAAS,GACTn1B,EAAAqE,KAAKa,IAAG,KAMd,IAAItX,EAkBN,SACE2jF,EACA7nF,EACAyrC,EACA2wB,EACAzvC,GAEA,OAAQ3sB,EAAUyc,cAOhB,IAAK,UAAW,OAAOgsE,EAAS,MAAOZ,EAAUvxE,EAAAqE,KAAKG,IAAK2wB,EAAUn1B,EAAAqE,KAAKG,IAAK6R,GAC/E,IAAK,UAAW,OAAO87D,EAAS,MAAOZ,EAAUvxE,EAAAqE,KAAKI,IAAK0wB,EAAUn1B,EAAAqE,KAAKI,IAAK4R,GAE/E,IAAK,UAAW,OAAO87D,EAAS,MAAOZ,EAAUvxE,EAAAqE,KAAKG,IAAK2wB,EAAUn1B,EAAAqE,KAAKG,IAAK6R,GAC/E,IAAK,UAAW,OAAO87D,EAAS,MAAOZ,EAAUvxE,EAAAqE,KAAKI,IAAK0wB,EAAUn1B,EAAAqE,KAAKI,IAAK4R,GAE/E,IAAK,aAAc,OAAO87D,EAAS,SAAUZ,EAAUvxE,EAAAqE,KAAKG,IAAK2wB,EAAUn1B,EAAAqE,KAAKG,IAAK6R,GACrF,IAAK,aAAc,OAAO87D,EAAS,SAAUZ,EAAUvxE,EAAAqE,KAAKI,IAAK0wB,EAAUn1B,EAAAqE,KAAKI,IAAK4R,GAErF,IAAK,WAAY,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKG,IAAK2wB,EAAUn1B,EAAAqE,KAAKG,IAAK6R,GACjF,IAAK,WAAY,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKI,IAAK0wB,EAAUn1B,EAAAqE,KAAKI,IAAK4R,GAEjF,IAAK,WAAY,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKG,IAAK2wB,EAAUn1B,EAAAqE,KAAKG,IAAK6R,GACjF,IAAK,WAAY,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKI,IAAK0wB,EAAUn1B,EAAAqE,KAAKI,IAAK4R,GAEjF,IAAK,UAAW,OAAO87D,EAAS,MAAOZ,EAAUvxE,EAAAqE,KAAKY,IAAKkwB,EAAUn1B,EAAAqE,KAAKY,IAAKoR,GAC/E,IAAK,UAAW,OAAO87D,EAAS,MAAOZ,EAAUvxE,EAAAqE,KAAKa,IAAKiwB,EAAUn1B,EAAAqE,KAAKa,IAAKmR,GAE/E,IAAK,UAAW,OAAO87D,EAAS,MAAOZ,EAAUvxE,EAAAqE,KAAKY,IAAKkwB,EAAUn1B,EAAAqE,KAAKY,IAAKoR,GAC/E,IAAK,UAAW,OAAO87D,EAAS,MAAOZ,EAAUvxE,EAAAqE,KAAKa,IAAKiwB,EAAUn1B,EAAAqE,KAAKa,IAAKmR,GAE/E,IAAK,UAAW,OAAO87D,EAAS,MAAOZ,EAAUvxE,EAAAqE,KAAKY,IAAKkwB,EAAUn1B,EAAAqE,KAAKY,IAAKoR,GAC/E,IAAK,UAAW,OAAO87D,EAAS,MAAOZ,EAAUvxE,EAAAqE,KAAKa,IAAKiwB,EAAUn1B,EAAAqE,KAAKa,IAAKmR,GAE/E,IAAK,WAAY,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKY,IAAKkwB,EAAUn1B,EAAAqE,KAAKY,IAAKoR,GACjF,IAAK,WAAY,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKa,IAAKiwB,EAAUn1B,EAAAqE,KAAKa,IAAKmR,GAEjF,IAAK,YAAa,OAAO87D,EAAS,QAASZ,EAAUvxE,EAAAqE,KAAKY,IAAKkwB,EAAUn1B,EAAAqE,KAAKY,IAAKoR,GACnF,IAAK,YAAa,OAAO87D,EAAS,QAASZ,EAAUvxE,EAAAqE,KAAKa,IAAKiwB,EAAUn1B,EAAAqE,KAAKa,IAAKmR,GAEnF,IAAK,eAAgB,OAAO87D,EAAS,WAAYZ,EAAUvxE,EAAAqE,KAAKY,IAAKkwB,EAAUn1B,EAAAqE,KAAKY,IAAKoR,GACzF,IAAK,eAAgB,OAAO87D,EAAS,WAAYZ,EAAUvxE,EAAAqE,KAAKa,IAAKiwB,EAAUn1B,EAAAqE,KAAKa,IAAKmR,GAEzF,IAAK,cAAe,OAAO87D,EAAS,UAAWZ,EAAUvxE,EAAAqE,KAAKY,IAAKkwB,EAAUn1B,EAAAqE,KAAKY,IAAKoR,GACvF,IAAK,cAAe,OAAO87D,EAAS,UAAWZ,EAAUvxE,EAAAqE,KAAKa,IAAKiwB,EAAUn1B,EAAAqE,KAAKa,IAAKmR,GAEvF,IAAK,sBAAuB,OAAO87D,EAAS,cAAeZ,EAAUvxE,EAAAqE,KAAKG,IAAK2wB,EAAUn1B,EAAAqE,KAAKY,IAAKoR,GACnG,IAAK,sBAAuB,OAAO87D,EAAS,cAAeZ,EAAUvxE,EAAAqE,KAAKI,IAAK0wB,EAAUn1B,EAAAqE,KAAKa,IAAKmR,GACnG,IAAK,sBAAuB,OAAO87D,EAAS,cAAeZ,EAAUvxE,EAAAqE,KAAKY,IAAKkwB,EAAUn1B,EAAAqE,KAAKG,IAAK6R,GACnG,IAAK,sBAAuB,OAAO87D,EAAS,cAAeZ,EAAUvxE,EAAAqE,KAAKa,IAAKiwB,EAAUn1B,EAAAqE,KAAKI,IAAK4R,GAEnG,IAAK,WAAY,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKY,IAAKkwB,EAAUn1B,EAAAqE,KAAKY,IAAKoR,GACjF,IAAK,WAAY,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKa,IAAKiwB,EAAUn1B,EAAAqE,KAAKa,IAAKmR,GAEjF,IAAK,YAAa,OAAO87D,EAAS,QAASZ,EAAUvxE,EAAAqE,KAAKY,IAAKkwB,EAAUn1B,EAAAqE,KAAKY,IAAKoR,GACnF,IAAK,YAAa,OAAO87D,EAAS,QAASZ,EAAUvxE,EAAAqE,KAAKa,IAAKiwB,EAAUn1B,EAAAqE,KAAKa,IAAKmR,GAEnF,IAAK,cAAe,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKC,GAAI6wB,EAAUn1B,EAAAqE,KAAKG,IAAK6R,GACnF,IAAK,cAAe,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKM,GAAIwwB,EAAUn1B,EAAAqE,KAAKQ,IAAKwR,GACnF,IAAK,eAAgB,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKE,IAAK4wB,EAAUn1B,EAAAqE,KAAKG,IAAK6R,GACrF,IAAK,eAAgB,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKO,IAAKuwB,EAAUn1B,EAAAqE,KAAKQ,IAAKwR,GACrF,IAAK,WAAY,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKG,IAAK2wB,EAAUn1B,EAAAqE,KAAKG,IAAK6R,GACjF,IAAK,cAAe,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKC,GAAI6wB,EAAUn1B,EAAAqE,KAAKI,IAAK4R,GACnF,IAAK,cAAe,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKM,GAAIwwB,EAAUn1B,EAAAqE,KAAKS,IAAKuR,GACnF,IAAK,eAAgB,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKE,IAAK4wB,EAAUn1B,EAAAqE,KAAKI,IAAK4R,GACrF,IAAK,eAAgB,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKO,IAAKuwB,EAAUn1B,EAAAqE,KAAKS,IAAKuR,GACrF,IAAK,eAAgB,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKG,IAAK2wB,EAAUn1B,EAAAqE,KAAKI,IAAK4R,GACrF,IAAK,eAAgB,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKQ,IAAKswB,EAAUn1B,EAAAqE,KAAKS,IAAKuR,GACrF,IAAK,WAAY,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKI,IAAK0wB,EAAUn1B,EAAAqE,KAAKI,IAAK4R,GACjF,IAAK,WAAY,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKY,IAAKkwB,EAAUn1B,EAAAqE,KAAKY,IAAKoR,GACjF,IAAK,WAAY,OAAO87D,EAAS,OAAQZ,EAAUvxE,EAAAqE,KAAKa,IAAKiwB,EAAUn1B,EAAAqE,KAAKa,IAAKmR,GAEjF,IAAK,aAAc,OAAO87D,EAAS,QAASZ,EAAUvxE,EAAAqE,KAAKC,GAAI6wB,EAAUn1B,EAAAqE,KAAKG,IAAK6R,GACnF,IAAK,cAAe,OAAO87D,EAAS,QAASZ,EAAUvxE,EAAAqE,KAAKE,IAAK4wB,EAAUn1B,EAAAqE,KAAKG,IAAK6R,GACrF,IAAK,YAAa,OAAO87D,EAAS,QAASZ,EAAUvxE,EAAAqE,KAAKG,IAAK2wB,EAAUn1B,EAAAqE,KAAKG,IAAK6R,GACnF,IAAK,aAAc,OAAO87D,EAAS,QAASZ,EAAUvxE,EAAAqE,KAAKC,GAAI6wB,EAAUn1B,EAAAqE,KAAKI,IAAK4R,GACnF,IAAK,cAAe,OAAO87D,EAAS,QAASZ,EAAUvxE,EAAAqE,KAAKE,IAAK4wB,EAAUn1B,EAAAqE,KAAKI,IAAK4R,GACrF,IAAK,cAAe,OAAO87D,EAAS,QAASZ,EAAUvxE,EAAAqE,KAAKG,IAAK2wB,EAAUn1B,EAAAqE,KAAKI,IAAK4R,GACrF,IAAK,YAAa,OAAO87D,EAAS,QAASZ,EAAUvxE,EAAAqE,KAAKI,IAAK0wB,EAAUn1B,EAAAqE,KAAKI,IAAK4R,GACnF,IAAK,YAAa,OAAO87D,EAAS,QAASZ,EAAUvxE,EAAAqE,KAAKY,IAAKkwB,EAAUn1B,EAAAqE,KAAKY,IAAKoR,GACnF,IAAK,YAAa,OAAO87D,EAAS,QAASZ,EAAUvxE,EAAAqE,KAAKa,IAAKiwB,EAAUn1B,EAAAqE,KAAKa,IAAKmR,GAErF,OAAO,EAxGI+7D,CAAab,EAAU7nF,EAAWyrC,EAAU2wB,EAAgBzvC,GACvE,OAAIzoB,GACElC,GAAiBA,EAAc2C,QACjCkjF,EAASnqE,MACPrH,EAAAsH,eAAeklD,sBACfl2C,EAAWzqB,MAAOlC,EAAUyc,cAGzBvY,IAET2jF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACf2J,EAAWzqB,OAENxE,EAAOmyC,qBA8FhB,SAAA44C,EACE9pF,EACAkpF,EACAc,EACAl9C,EACAm9C,EACAj8D,GAEA,IAAI3sB,EAAY0P,OAAOm4E,EAASh+D,QAAQxQ,eAAepa,IAAIN,IAE3D,OADA+Q,OAAO1P,EAAUW,MAAQ8qD,EAAA3yC,YAAY6G,oBAC9B4jD,EAAYskB,EAA6B7nF,GAAa2oF,GAAgBl9C,EAAUm9C,EAAWj8D,GAIpG,SAAAm7D,EACED,EACA7lF,EACAypC,EACA9e,GAEA,GAAuB,GAAnB8e,EAAS9mC,OACX,OAAK3C,GAAyC,GAAxBA,EAAc2C,OAO7B3C,EAAc,IANnB6lF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgc,SAAS,IAAM,KAEtE,MAIX,GAAuB,GAAnB8qB,EAAS9mC,OAAa,CACxB,GAAI3C,EACF,GAA4B,GAAxBA,EAAc2C,OAChBkjF,EAAS5xB,kBAAkBxqB,EAAS,GAAIzpC,EAAc,GAAE,SACnD,CACL,GAAIA,EAAc2C,OAKhB,OAJAkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAEhD,KAETknE,EAASpyB,4BAA4BhqB,EAAS,GAAIn1B,EAAAqE,KAAKG,IAAG,QAG5D+sE,EAASpyB,4BAA4BhqB,EAAS,GAAIn1B,EAAAqE,KAAKG,IAAG,GAE5D,OAAO+sE,EAAS70B,YAYlB,OAVIhxD,GAAiBA,EAAc2C,OAAS,GAC1CkjF,EAASnqE,MACPrH,EAAAsH,eAAegK,oCACfgF,EAAWzqB,MAAO,IAAKF,EAAc2C,OAAOgc,SAAS,KAGzDknE,EAASnqE,MACPrH,EAAAsH,eAAe2F,+BACfqJ,EAAWzqB,MAAO,IAAKupC,EAAS9mC,OAAOgc,SAAS,KAE3C,KAIT,SAAAsnE,EAAgCJ,EAAoB9iF,GAClD,IAAIb,EACA7E,EA6BJ,OA5BIwoF,EAASntE,QAAQkB,UACnB1X,EAAO2jF,EAASlqB,qBAAqB54D,EAAYuR,EAAAqE,KAAKkkC,QAAO,MAE3DroC,EAAA8e,gBAAgBpxB,IAASsS,EAAA+e,aAAa6C,OACtC5hB,EAAAijB,kBAAkBv1B,IAASsS,EAAAoY,WAAWE,KACR,GAA9BtY,EAAA8hC,qBAAqBp0C,KACpB7E,EAAQmX,EAAAkjB,oBAAoBx1B,IAAS,KAEtC2jF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACfje,EAAW7C,OAEb7C,GAAS,KAGX6E,EAAO2jF,EAASlqB,qBAAqB54D,EAAYuR,EAAAqE,KAAKmkC,QAAO,MAE3DtoC,EAAA8e,gBAAgBpxB,IAASsS,EAAA+e,aAAa6C,OACtC5hB,EAAAijB,kBAAkBv1B,IAASsS,EAAAoY,WAAWC,MACrCxvB,EAAQmX,EAAA6hB,iBAAiBn0B,IAAS,KAEnC2jF,EAASnqE,MACPrH,EAAAsH,eAAeqF,wBACfje,EAAW7C,OAEb7C,GAAS,IAGNA,EAlpFT5B,EAAA8lE,cAqpFA,IAAMslB,EAAuB,kBAG7BprF,EAAAqsE,gBAAA,SACE+d,EACA17D,EACAQ,GAEA,IAAI9C,EAAUg+D,EAASh+D,QACvBna,OAAOyc,EAActC,SAAWA,GAChC,IAAInsB,EAASmqF,EAASnqF,OAClBgd,EAAUmtE,EAASntE,QAEnBouE,EAAoBj/D,EAAQxQ,eAAepa,IAAI4pF,GACnD,IAAKC,EASH,OARAj/D,EAAQnM,MACNrH,EAAAsH,eAAec,mBACfkO,EAAWzqB,MAAO2mF,GAEpBh/D,EAAQ6T,KACNrnB,EAAAsH,eAAeorE,iGACfp8D,EAAWzqB,OAENxE,EAAOmyC,oBAEhB,GAAIi5C,EAAkBnoF,MAAQ8qD,EAAA3yC,YAAY6G,mBAKxC,OAJAkK,EAAQnM,MACNrH,EAAAsH,eAAe+L,uGACfiD,EAAWzqB,MAAO4mF,EAAkBrsE,cAE/B/e,EAAOmyC,oBAGhB,IAAIm5C,EAAuCF,EAAmB1uE,UAC9D,OAAM4uE,GAAoBnB,EAAShxB,gBAAgBmyB,IAEnDnB,EAAS70B,YAAc7mC,EAAchqB,KAC9BzE,EAAO4xC,WACZ05C,EAAiBvsE,cACf/B,EAAQkB,SACJle,EAAOitC,UAAUxe,EAAc0E,qBAC/BnzB,EAAO6sC,UAAUpe,EAAc0E,sBAErCnW,EAAQ28C,iBAToE35D,EAAOmyC,qBAavF,IAAMo5C,EAAoB,QAG1B,SAAAptB,EACEgsB,EACAtrD,EACA5P,GAEA,IAAI9C,EAAUg+D,EAASh+D,QACnBnsB,EAASmqF,EAASnqF,OAElB8pE,EAAa39C,EAAQtQ,YAAYta,IAAI,UACzC,IAAKuoE,EAAY,OAAO9pE,EAAOmyC,oBAE/B,IAAIq5C,EAAiBr/D,EAAQxQ,eAAepa,IAAIgqF,GAChD,IAAKC,GAAkBA,EAAevoF,MAAQ8qD,EAAA3yC,YAAY6G,mBAAoB,OAAOjiB,EAAOmyC,oBAE5F,IAAIs5C,EAAoCD,EAAgB9uE,UACxD,IAAM+uE,IAAiBtB,EAAShxB,gBAAgBsyB,GAAiB,OAAOzrF,EAAOmyC,oBAEnD,MAAXtT,EACbsrD,EAAS5xB,kBAAkB15B,EAASirC,EAAU,KAC9CA,EAAWhoB,aAAa9hD,GAEVmqF,EAAS3gB,oBAAoBv6C,EAAWzqB,MAAM4I,OAAOJ,gBAGvE,OADAm9E,EAAS70B,YAAc18C,EAAAqE,KAAKc,KACrB/d,EAAOowC,YAAY,MACxBpwC,EAAO8xC,iBACL25C,EAAc1sE,gBACdjG,EAAAoY,WAAWof,MAEbtwC,EAAOmyC,sBA7BXpyC,EAAAo+D,8BC7vFAn+D,EAAAD,QAAAO,oBCAA,SAAAs3D,GAEA,MAAA8zB,EAAA9zB,EAAA+zB,UAAAnrF,EAAA,IAEA,QAAAyB,KAAAypF,GACAzpF,EAAAiL,WAAA,cAAAjL,EAAAiL,WAAA,gBACA0qD,EAAA31D,GAAAypF,EAAAzpF,IAIA21D,EAAA/rB,gBAAA,SAAA5Q,GACA,OAAAA,EACAywD,EAAAE,QAAA3wD,GADA,GAIA28B,EAAA1rB,YAAA,SAAAyC,GACAA,GAAA+8C,EAAAG,MAAAl9C,IAGAipB,EAAAk0B,YAAA,SAAAC,EAAAC,EAAA7pF,GACA,OAAAupF,EAAAO,SAAAF,EAAAC,EAAA7pF,IAGAy1D,EAAAlY,MAAA,SAAA/Q,EAAAiR,GACA8rC,EAAAQ,OAAAv9C,GAAAiR,GAGAgY,EAAA5f,KAAA,SAAArJ,GACA,OAAA+8C,EAAAQ,OAAAv9C,IAKA,MAAArD,EAAA9qC,EAAA,GAAA8qC,OAEAA,EAAAhpC,UAAA61C,OAAA,WACA,IAAAg0C,EAAAT,EAAAU,MACAx0C,EAAA,GAIA,OAHA8zC,EAAAU,MAAA,SAAAC,GAAgCz0C,GAAAy0C,EAAA,MAChCC,qBAAAjsF,KAAAqvB,KACAg8D,EAAAU,MAAAD,EACAv0C,GAGAtM,EAAAhpC,UAAA81C,QAAA,WACA,IAAA+zC,EAAAT,EAAAU,MACAx0C,EAAA,GAIA,OAHA8zC,EAAAU,MAAA,SAAAC,GAAgCz0C,GAAAy0C,EAAA,MAChCE,0BAAAlsF,KAAAqvB,KACAg8D,EAAAU,MAAAD,EACAv0C,oCClDA53C,EAAAD,QAAAysF,KACA,IAAAC,EAAA,IAAA10C,WAAA,GACA20C,EAAA,EAEAF,EAAA,yBAAAvxD,GACA,KAAAA,KAAA,YAEA,GAAAyxD,EAAAzxD,EAAAwxD,EAAAxlF,OAAA,CACA,IAAA0lF,EAAAF,GACAA,EAAA,IAAA10C,WAAA8lC,KAAA7nB,IAAA,MAAAy2B,EAAAxlF,OAAAg0B,EAAA,EAAAwxD,EAAAxlF,UACA7C,IAAAuoF,GAGA,IAAAh+C,EAAA+9C,EAIA,OAHA,GAAAA,GAAAzxD,KACAyxD,EAAA,KAAAA,IAEA/9C,GAGA69C,EAAA,qBAAA79C,KAIA69C,EAAA,qBAAAT,EAAAC,EAAA/wD,GACAwxD,EAAAG,WAAAb,EAAAC,IAAA/wD,IAGAuxD,EAAA,eAAA79C,EAAAhtC,EAAAypC,GACAqhD,EAAA99C,GAAA,EAAAvD,IAAAzpC,GAGA6qF,EAAA,cAAA79C,EAAAvD,GACA,OAAAqhD,EAAA99C,GAAA,EAAAvD,yBCjCA,SAAAwsB,GAEA,IAAA40B,EAAA,oBAAA7rC,qBAAA,IAAAiX,MAAAx3D,KA6IA,SAAAysF,IACAjrE,MAAAkrE,kBACAlrE,MAAAkrE,kBAAAzsF,KAAAwsF,GAEAxsF,KAAA0sF,MAAA1sF,KAAAY,KAAA,KAAAZ,KAAAw+B,QAAA,UAAAjd,OAAAmrE,MAWA,SAAAC,EAAAnuD,GACAx+B,KAAAw+B,WAAA,mBACAjd,MAAAkrE,kBACAlrE,MAAAkrE,kBAAAzsF,KAAA2sF,GAEA3sF,KAAA0sF,MAAA1sF,KAAAY,KAAA,KAAAZ,KAAAw+B,QAAA,UAAAjd,OAAAmrE,MA/JAP,EAAAS,WAAA,EAEA7rF,OAAA8rF,iBACAV,EAAA,YAAA7qF,GAA0C,OAAAA,GAAA,SAE1Cw6B,WAAgBx6B,OAAA,IAAAwrF,UAAA,GAChB/wD,WAAgBz6B,MAAA,IAAAwrF,UAAA,KAGhB/rF,OAAA8rF,iBACAV,EAAA,aAAA7qF,GAA4C,OAAAA,GAAA,SAE5Cw6B,WAAgBx6B,OAAA,MAAAwrF,UAAA,GAChB/wD,WAAgBz6B,MAAA,MAAAwrF,UAAA,KAGhB/rF,OAAA8rF,iBACAV,EAAA,IAAAA,EAAA,eAAA7qF,GAAmE,SAAAA,IAEnEw6B,WAAgBx6B,OAAA,WAAAwrF,UAAA,GAChB/wD,WAAgBz6B,MAAA,WAAAwrF,UAAA,KAGhB/rF,OAAA8rF,iBACAV,EAAA,YAAA7qF,GAA0C,WAAAA,IAE1Cw6B,WAAgBx6B,MAAA,EAAAwrF,UAAA,GAChB/wD,WAAgBz6B,MAAA,IAAAwrF,UAAA,KAGhB/rF,OAAA8rF,iBACAV,EAAA,aAAA7qF,GAA4C,aAAAA,IAE5Cw6B,WAAgBx6B,MAAA,EAAAwrF,UAAA,GAChB/wD,WAAgBz6B,MAAA,MAAAwrF,UAAA,KAGhB/rF,OAAA8rF,iBACAV,EAAA,IAAAA,EAAA,eAAA7qF,GAAmE,OAAAA,IAAA,IAEnEw6B,WAAgBx6B,MAAA,EAAAwrF,UAAA,GAChB/wD,WAAgBz6B,MAAA,WAAAwrF,UAAA,KAGhB/rF,OAAA8rF,iBACAV,EAAA,cAAA7qF,GAA8C,QAAAA,IAE9Cw6B,WAAgBx6B,MAAA,EAAAwrF,UAAA,GAChB/wD,WAAgBz6B,MAAA,EAAAwrF,UAAA,KAGhB/rF,OAAA8rF,iBACAV,EAAA,aAAA7qF,GAA4C,OAAAk8E,KAAA8H,OAAAhkF,KAE5Cw6B,WAAgBx6B,MAAAk8E,KAAA8H,QAAA,eAAAwH,UAAA,GAChB/wD,WAAgBz6B,MAAAk8E,KAAA8H,OAAA,eAAAwH,UAAA,GAChBC,oBAAyBzrF,MAAAk8E,KAAA8H,OAAA,iBAAAwH,UAAA,GACzB7H,kBAAuB3jF,OAAA,SAAAwrF,UAAA,GACvB3H,kBAAuB7jF,MAAA,SAAAwrF,UAAA,GACvBE,SAAc1rF,MAAAk8E,KAAA8H,OAAA,cAAAwH,UAAA,KAGd/rF,OAAA8rF,iBACAV,EAAA,aAAA7qF,GAA4C,OAAAA,IAE5Cw6B,WAAgBx6B,OAAA,uBAAAwrF,UAAA,GAChB/wD,WAAgBz6B,MAAA,uBAAAwrF,UAAA,GAChBC,oBAAyBzrF,MAAA,wBAAAwrF,UAAA,GACzB7H,kBAAuB3jF,OAAA,iBAAAwrF,UAAA,GACvB3H,kBAAuB7jF,MAAA,iBAAAwrF,UAAA,GACvBE,SAAc1rF,MAAA,sBAAAwrF,UAAA,KAGdX,EAAA,IAAA3O,KAAAyP,MAEAd,EAAA,aAAA7qF,GACA,IAAAZ,EAAA88E,KAAAyP,MAAA3rF,MACA,OAAAA,EAAA,GAAAZ,KAGAyrF,EAAA,gBAAA7qF,GAGA,kBADAA,GAAA,WADAA,OAAA,gBACAA,IAAA,eACAA,IAAA,oBAGA6qF,EAAA,cAAA7qF,EAAAq5B,GAEA,OAAAr5B,IADAq5B,GAAA,IACAr5B,IAAA,GAAAq5B,GAGAwxD,EAAA,cAAA7qF,EAAAq5B,GAEA,OAAAr5B,KADAq5B,GAAA,IACAr5B,GAAA,GAAAq5B,GAGAwxD,EAAA,IAAA3O,KAAA0P,IAEAf,EAAA,IAAA3O,KAAA7nB,IAEAw2B,EAAA,IAAA3O,KAAAnmD,IAEA80D,EAAA,KAAA3O,KAAA98B,KAEAyrC,EAAA,MAAA3O,KAAAsF,MAGAqJ,EAAA,iBAAA7qF,GACA,WAAAk8E,KAAA0P,IAAA5rF,EAAAk8E,KAAA2P,MAAA7rF,IACA,EAAAk8E,KAAA4P,MAAA,GAAA9rF,GAEAk8E,KAAA4P,MAAA9rF,IAGA6qF,EAAA,gBAAAz+E,EAAAC,EAAA7D,GACA,OAAAA,EAAA4D,EAAAC,GAGAw+E,EAAA,KAAA3O,KAAA6P,KAEAlB,EAAA,MAAA3O,KAAA2P,MAEAhB,EAAA,kBAAAH,EAAAsB,GACA,OAAA9P,KAAA0P,IAAAlB,GAAAxO,KAAA+P,KAAAD,IAGAnB,EAAA,eAAA7qF,GACA,IAAA8lD,EAAA9lD,GAAA,WACA+lD,GAAA,SAAA/lD,IAAA,EAIA,OAFA8lD,GADA9lD,EAAA8lD,EAAAC,IACA,WACAA,GAAA,MAAA/lD,IAAA,KAIA6qF,EAAA,iBAAA7qF,GACA,OAAAA,GAAA,QAAAA,GAAA,iBAAAA,GAUAkrF,EAAAvqF,UAAAlB,OAAAY,OAAA4f,MAAAtf,WACAuqF,EAAAvqF,UAAArB,KAAA,mBACA4rF,EAAAvqF,UAAAu8B,QAAA,cAEA2tD,EAAA,uBACA,UAAAK,GAWAG,EAAA1qF,UAAAlB,OAAAY,OAAA4f,MAAAtf,WACA0qF,EAAA1qF,UAAArB,KAAA,iBAEAurF,EAAA,gBAAAqB,EAAAhvD,GACA,GAAAgvD,EAAA,OAAAA,EACA,UAAAb,EAAAnuD,IAGA2tD,EAAA,oBAAA7qF,GACA,OAAAA,GAGA6qF,EAAA,kBAAAlgE,EAAA0xD,GACA,SAAAG,SAAA7xD,OAAAqkC,IAGArQ,OAAA,uBAAAD,GACA,OAAAC,OAAAmL,aAAAl6C,MAAA+uC,OAAAD,IAGAC,OAAA,wBAAAD,GACA,OAAAC,OAAAwtC,cAAAv8E,MAAA+uC,OAAAD,IAGAmsC,EAAA,UAAAuB,OAAAC,UAEAxB,EAAA,iBAAApzE,GACA,uBAAAA,GAGAozE,EAAA,qBAAApzE,GACA,uBAAAA,GAAA,iBAAAA,GAGAozE,EAAA,kBAAApzE,GACA,uBAAAA,gBAAAknC,QAGAksC,EAAA,QAAA72E,MAAAi9C,QAEA45B,EAAA,mBAAAhmF,GACA,OAAAA,GAGAgmF,EAAA,cAAAH,EAAAsB,GACA,OAAAtB,EAAAsB,GAGAnB,EAAA,eAAAH,EAAAsB,GACA,OAAA9P,KAAA8H,OAAA0G,EAAAsB,IAGAnB,EAAA,OAAA3O,KAEAr9E,EAAA,GAAAA,CAAAgsF,oGCpNAhsF,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__25__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 30);\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  EXTERNAL\n}\n\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a:{\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.d:{\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeNode,\n  TypeParameterNode,\n  ParameterKind,\n  SignatureNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  AssertionExpression,\n  ElementAccessExpression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  StringLiteralExpression,\n  CallExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Abi\n} from \"./abi\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,Element> = new Map();\n\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n\n  /** Target expression of the previously resolved property or element access. */\n  resolvedThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  resolvedElementExpression : Expression | null = null;\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.sources = [];\n  }\n\n\n  toAbi(): Abi {\n    let abi = new Abi(this);\n    abi.resolve();\n    return abi;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryResolveImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryResolveImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = this.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    var globalAliases = options.globalAliases;\n    if (globalAliases) {\n      for (let [alias, name] of globalAliases) {\n        if (!name.length) continue; // explicitly disabled\n        let element = this.elementsLookup.get(name);\n        if (element) this.elementsLookup.set(alias, element);\n        else throw new Error(\"element not found: \" + name);\n      }\n    }\n\n    // register 'Array'\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\n    if (arrayPrototype) {\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\n    }\n\n    // register 'String'\n    var stringPrototype = this.elementsLookup.get(\"String\");\n    if (stringPrototype) {\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\n      if (stringInstance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = stringInstance;\n          this.typesLookup.set(\"string\", stringInstance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = <Element>assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = <Element>this.moduleLevelExports.get(\"main\");\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to resolve an import by traversing exports and queued exports. */\n  private tryResolveImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  private filterDecorators(decorators: DecoratorNode[], acceptedFlags: DecoratorFlags): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Processes global options, if present. */\n  private checkGlobalOptions(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (declaration.range.source.is(CommonFlags.BUILTIN)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n        if (element.is(CommonFlags.BUILTIN)) element.internalName = globalName;\n      }\n    }\n  }\n\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.filterDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, prototype);\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"class member expected\");\n        }\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.filterDecorators(decorators, DecoratorFlags.NONE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.filterDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n      // TBD: no need to mark as MODULE_EXPORT\n    }\n  }\n\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.filterDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.filterDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, element);\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobalOptions(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    identifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = identifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = identifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if from a library file\n    if (identifier.range.source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          identifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.filterDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, prototype);\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.filterDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, prototype);\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobalOptions(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          if (this.moduleLevelExports.get(simpleName) !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, namespace);\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.filterDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, global);\n        }\n      }\n      this.checkGlobalOptions(global, declaration);\n    }\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(\n        returnTypeNode,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Type | null {\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\n      if (!signature) return null;\n      return node.isNullable\n        ? signature.type.asNullable()\n        : signature.type;\n    }\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\n\n    var element: Element | null;\n    if (\n      (element = this.elementsLookup.get(localName)) || // file-global\n      (element = this.elementsLookup.get(globalName))   // program-global\n    ) {\n      switch (element.kind) {\n        case ElementKind.ENUM: return Type.i32;\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\n            typeNode.typeArguments,\n            contextualTypeArguments,\n            null\n          ); // reports\n          if (!instance) return null;\n          return node.isNullable\n            ? instance.type.asNullable()\n            : instance.type;\n        }\n      }\n    }\n\n    // check (global) type alias\n    var alias = this.typeAliases.get(simpleName);\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\n\n    // resolve parameters\n    if (typeNode.typeArguments) {\n      let k = typeNode.typeArguments.length;\n      let paramTypes = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let paramType = this.resolveType( // reports\n          typeNode.typeArguments[i],\n          contextualTypeArguments,\n          reportNotFound\n        );\n        if (!paramType) return null;\n        paramTypes[i] = paramType;\n      }\n\n      if (k) { // can't be a placeholder if it has parameters\n        let instanceKey = typesToString(paramTypes);\n        if (instanceKey.length) {\n          localName += \"<\" + instanceKey + \">\";\n          globalName += \"<\" + instanceKey + \">\";\n        }\n      } else if (contextualTypeArguments) {\n        let placeholderType = contextualTypeArguments.get(globalName);\n        if (placeholderType) return placeholderType;\n      }\n    }\n\n    var type: Type | null;\n\n    // check file-global / program-global type\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\n      return type;\n    }\n\n    if (reportNotFound) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        true\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n      let parent: Element | null;\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return element;\n          }\n          parent = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: {\n          parent = (<Class>context).prototype.parent;\n          break;\n        }\n        default: {\n          parent = context;\n          break;\n        }\n      }\n\n      // search parent\n      while (parent) {\n        let members = parent.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return element;\n          }\n        }\n        parent = parent.parent;\n      }\n    }\n\n    // search current file\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.resolvedThisExpression = null;\n      this.resolvedElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = this.elementsLookup.get(name)) {\n      this.resolvedThisExpression = null;\n      this.resolvedElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    this.error(\n      DiagnosticCode.Cannot_find_name_0,\n      identifier.range, name\n    );\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let classReference = (<VariableLikeElement>target).type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolvedElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.resolvedThisExpression = targetExpression;\n            this.resolvedElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.resolvedThisExpression = targetExpression;\n            this.resolvedElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            elementAccess.range, (<Class>target).internalName\n          );\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      targetExpression.range\n    );\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.resolvedThisExpression = null;\n          this.resolvedElementExpression = null;\n          return parent;\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.resolvedThisExpression = null;\n          this.resolvedElementExpression = null;\n          return parent;\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.resolvedThisExpression = expression;\n            this.resolvedElementExpression = null;\n            return this.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            targetExpression.range, target.internalName\n          );\n          return null;\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return null;\n  }\n\n  // resolveExpressionType(\n  //   expression: Expression,\n  //   contextualFunction: Function\n  // ): Type {\n  //   var element = this.resolveExpression(expression, contextualFunction);\n  //   switch (element.kind) {\n\n  //   }\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  _internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this._internalName = internalName;\n  }\n\n  static replaceComma(str: string):string{\n    if(!str) return str;\n    let result  = \"\";\n    for(let ch of str){\n      result +=  ch == \",\" ? \"_\" : ch;\n    }\n    return result;\n  }\n\n  get internalName():string{\n    return Element.replaceComma(this._internalName);\n  }\n\n  set internalName(internalName:string) {\n    this._internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    functionTypeArguments: Type[] | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = this.declaration;\n    var isInstance = this.is(CommonFlags.INSTANCE);\n    var classPrototype = this.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = this.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(this.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          functionTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (this.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = this.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      this,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    this.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\n    assert(this.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(this.classPrototype);\n\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\n\n    var simpleName = this.simpleName;\n    var partialKey = typesToString(classTypeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      this.declaration,\n      classPrototype,\n      this.decoratorFlags\n    );\n    partialPrototype.flags = this.flags;\n    partialPrototype.operatorKind = this.operatorKind;\n    partialPrototype.classTypeArguments = classTypeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments( // reports\n        assert(this.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\n  resolveBuiltinTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null\n  ): Type[] | null {\n    assert(this.is(CommonFlags.BUILTIN));\n    var resolvedTypeArguments: Type[] | null = null;\n    if (typeArgumentNodes) {\n      let k = typeArgumentNodes.length;\n      resolvedTypeArguments = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let resolvedType = this.program.resolveType( // reports\n          typeArgumentNodes[i],\n          contextualTypeArguments,\n          true\n        );\n        if (!resolvedType) return null;\n        resolvedTypeArguments[i] = resolvedType;\n      }\n    }\n    return resolvedTypeArguments;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // inherit contextual type arguments\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    var declaration = this.declaration;\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        this.program.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          declaration.extendsType.range\n        );\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        this.program.error(\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n          declaration.extendsType.range, baseClass.internalName\n        );\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        this.program.error(\n          DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n          Range.join(declaration.name.range, declaration.extendsType.range)\n        );\n        return null;\n      }\n    }\n\n    // override call specific contextual type arguments if provided\n    var i: i32, k: i32;\n    if (typeArguments) {\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      for (i = 0; i < k; ++i) {\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else if (declaration.typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n\n    var simpleName = this.simpleName;\n    var internalName = this.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    this.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      memoryOffset = baseClass.currentMemoryOffset;\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n    }\n\n    // Resolve constructor\n    if (this.constructorPrototype) {\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\n    }\n\n    // Resolve instance members\n    if (this.instanceMembers) {\n      for (let member of this.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            if (!fieldDeclaration.type) {\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\n            }\n            let fieldType = this.program.resolveType( // reports\n              fieldDeclaration.type,\n              instance.contextualTypeArguments\n            );\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: {\n                if (memoryOffset & 1) ++memoryOffset;\n                break;\n              }\n              case 4: {\n                if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\n                break;\n              }\n              case 8: {\n                if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\n                break;\n              }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\n            if (partialPrototype) {\n              partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n              instance.members.set(member.simpleName, partialPrototype);\n            }\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype);\n            let setterPrototype = (<Property>member).setterPrototype;\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              this\n            );\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype.internalName = (\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\n            );\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype.internalName = (\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\n              );\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, prototype] of this.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = prototype.resolvePartial(typeArguments); // reports\n        if (!operatorPartial) continue;\n        operatorInstance = operatorPartial.resolve(); // reports\n      } else {\n        operatorInstance = prototype.resolve(); // reports\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\n    return instance;\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    alternativeReportNode: Node | null\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments(\n        this.declaration.typeParameters,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        alternativeReportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    } else {\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is a builtin. */\n  BUILTIN = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32 = _BinaryenTypeInt32(),\n  I64 = _BinaryenTypeInt64(),\n  F32 = _BinaryenTypeFloat32(),\n  F64 =  _BinaryenTypeFloat64(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = allocate_memory(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      free_memory(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      free_memory(cArr3);\n      free_memory(cArr2);\n      free_memory(cArr1);\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\n      free_memory(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocPtrArray(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      free_memory(cArr);\n      for (let i = numNames; i >= 0; --i) {\n        free_memory(names[i]);\n      }\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0;\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeFunction(func: FunctionRef): void {\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) free_memory(cStr);\n      if (binaryPtr) free_memory(binaryPtr);\n      if (sourceMapPtr) free_memory(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    free_memory(this.cachedByValue);\n    free_memory(this.cachedTemporaryName);\n    free_memory(this.cachedPrecomputeName);\n    free_memory(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = allocate_memory(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = allocate_memory(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          ) {\n            ++this.pos;\n          }\n          break;\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        while (--this.tokenPos > posBefore) {\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","import {\n  SerializeHelper,\n  SerializePoint,\n  VariableDeclaration,\n  VarialbeKind,\n  NodeUtil\n} from \"./serialize\";\n\nimport {\n  Type,\n  TypeKind,\n  Signature\n} from \"./types\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement,\n  Class\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  DecoratorNode,\n  SignatureNode,\n  ClassDeclaration,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  TypeNode,\n  NodeKind,\n  Source,\n  ParameterNode,\n  Expression,\n  Node,\n  VariableLikeDeclarationStatement,\n  LiteralKind,\n  StringLiteralExpression,\n  CommonTypeNode\n} from \"./ast\";\n\nclass Struct {\n\n  name: string;\n  base: string;\n  fields: Array<Object> = new Array<Object>();\n}\n\nclass AbiTypeAlias {\n  new_type_name: string;\n  type: string\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\nclass Action {\n\n  name: string;\n  type: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string) {\n    this.name = name;\n    this.type = type;\n  }\n}\n\n\nexport class AbiHelper {\n\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"bool\", \"uint8\"], // eos not support the bool\n    [\"f32\", \"f32\"],\n    [\"f64\", \"f64\"],\n    [\"boolean\", \"uint8\"], // eos not suppot the bool\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass Table {\n  name: string;\n  type: string;\n  index_type: string = \"int64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string) {\n    this.name = name;\n    this.type = type;\n  }\n}\n\n\nexport class Abi {\n\n  abiInfo: {\n    version: string,\n    types: Array<AbiTypeAlias>,\n    structs: Array<Struct>,\n    actions: Array<Action>,\n    tables: Array<Table>\n  };\n\n  dispatch: string;\n\n  program: Program;\n\n  abiTypeLookup: Map<string, string> = new Map();\n\n  typeAliasSet: Set<string> = new Set<string>();\n\n  structsLookup: Map<string, Struct> = new Map();\n\n  elementLookup: Map<string, Element> = new Map();\n\n  fileSerializeLookup: Map<string, Array<SerializePoint>> = new Map<string, Array<SerializePoint>>();\n\n  constructor(program: Program) {\n\n    this.program = program;\n\n    this.abiInfo = {\n      version: \"ultraio:1.0\",\n      types: new Array<AbiTypeAlias>(),\n      structs: new Array<Struct>(),\n      actions: new Array<Action>(),\n      tables: new Array<Table>()\n    };\n\n    this.abiTypeLookup = AbiHelper.abiTypeLookup;\n  }\n\n  /**\n  *  Add abi struct for abi info.\n  */\n  toAbiStruct(methodName: string, signature: SignatureNode): Struct {\n\n    let struct = new Struct();\n    struct.name = methodName;\n    struct.base = \"\";\n\n    let types = signature.parameters;\n    if (types) {\n      for (let type of types) {\n        let typeKind = type.type.range.toString();\n        this.addAbiTypeAlias(typeKind);\n        struct.fields.push({ name: type.name.range.toString(), type: type.type.range.toString() });\n      }\n    }\n    return struct;\n  }\n\n\n  addAbiTypeAlias(typeKindName: string): void {\n\n    if (!this.typeAliasSet.has(typeKindName)) {\n      // It's the assemblyscript internal type \n      let originalTypeName = this.findContractOriginalType(typeKindName);\n      let wasmType = this.abiTypeLookup.get(originalTypeName);\n      if (wasmType) {\n        this.abiInfo.types.push(new AbiTypeAlias(typeKindName, wasmType));\n      }\n      this.typeAliasSet.add(typeKindName);\n    }\n  }\n\n  /**\n  * Find the original type name, \n  * eg: declare type account_name = u64;\n        declare type account_name_alias = account_name;\n\n    findContractOriginalType(\"account_name_alias\") return \"account_name\";\n  */\n  findContractOriginalType(typeKindName: string): string {\n\n    let abiType: string | null = this.abiTypeLookup.get(typeKindName);\n    if (abiType) {\n      return typeKindName;\n    }\n    let typeAlias = this.program.typeAliases.get(typeKindName);\n    if (typeAlias) {\n      let commonaTypeName = typeAlias.type.range.toString()\n      return this.findContractOriginalType(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find the script original type name\n  * @param typeKindName\n  */\n  findScriptOriginalTypeName(typeKindName: string): string {\n    let typeAlias = this.program.typeAliases.get(typeKindName);\n    if (typeAlias) {\n      let commonaTypeName = typeAlias.type.range.toString()\n      return this.findScriptOriginalTypeName(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find assemblyscript original type name \n  * eg: account_name return 'u64'\n  * \n  * @param typeKindName\n  */\n  findScriptOriginalType(typeKindName: string): Type | null {\n    let originalName = this.findScriptOriginalTypeName(typeKindName);\n    //Get the AssemblyScript original type \n    let scriptType: Type | null = this.program.typesLookup.get(originalName);\n    return scriptType;\n  }\n\n\n  // Check the FunctionPrototype weather has decoratorKind\n  checkFuncPrototypeDecorator(funcPrototype: FunctionPrototype, decoratorKind: DecoratorKind): bool {\n    let decorators = funcPrototype.declaration.decorators;\n    let isActionDecorator = false;\n    if (decorators) {\n      for (let decorator of decorators) {\n        if (decorator.decoratorKind == decoratorKind) {\n          isActionDecorator = true;\n        }\n      }\n    }\n    return isActionDecorator;\n  }\n\n  isWrapWithQutation(str: string): bool {\n\n    if (str == undefined || str == null) {\n      return false;\n    }\n    return str.charAt(0) == \"\\\"\" && str.charAt(str.length - 1) == \"\\\"\"\n      ? true : false;\n  }\n\n\n  /**\n  *  Check that element whether is functionPrototype  \n  *\n  */\n  isActionFuncPrototype(element: Element): bool {\n\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return this.checkFuncPrototypeDecorator(funcType, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  /**\n  * Resolve the class database decoreator \n  */\n  resolveClassDecorator(decorators: DecoratorNode[]): void {\n    for (let decorator of decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments \n        if (decorator.arguments.length < 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n\n        let type = decorator.arguments[0].range.toString();\n        let name = this.retrieveArgumentText(decorator.arguments[1]);\n\n        this.abiInfo.tables.push(new Table(name, type));\n\n        this.resolveExpressionToStruct(decorator.arguments[0]);\n      }\n    }\n  }\n\n\n  retrieveArgumentText(expr: Expression): string {\n    let argu: string = expr.range.toString();\n\n    if (this.isWrapWithQutation(argu)) {\n      return argu.substring(1, argu.length - 2);\n    }\n\n    let internelName = NodeUtil.getInternalName(expr);\n    let element: Element | null = this.program.elementsLookup.get(internelName);\n\n    if (element) {\n      let declaration: VariableLikeDeclarationStatement | null = (<VariableLikeElement>element).declaration;\n      if (declaration && declaration.initializer) {\n        let literal: StringLiteralExpression = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Cann't find constant ${internelName}`);\n  }\n\n\n\n\n\n  /**\n  *  Get struct from expression. \n  */\n  resolveExpressionToStruct(expr: Expression): void {\n\n    let internalPath = expr.range.source.internalPath;\n    let name = expr.range.toString();\n    let internalName = `${internalPath}/${name}`;\n    this.retrieveStructByInternalName(internalName);\n  }\n\n  retrieveStructByInternalName(internalName: string): void {\n\n    let element = this.program.elementsLookup.get(internalName);\n    if (!element || element.kind != ElementKind.CLASS_PROTOTYPE) {\n      throw new Error(`Element ${internalName} not found, pleasure make sure that class ${internalName} was existed.`);\n    }\n    let classPrototype = <ClassPrototype>element;\n    this.resolveClassPrototypeToStruct(classPrototype);\n  }\n\n\n  resolveClassPrototypeToStruct(classPrototype: ClassPrototype): void {\n\n    let members: DeclarationStatement[] = classPrototype.declaration.members;\n    let struct = new Struct();\n    struct.name = classPrototype.simpleName;\n\n    if (this.abiTypeLookup.get(struct.name)) {\n      return;\n    }\n\n    struct.base = \"\";\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let filedDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let filedName = member.name.range.toString();\n        let filedType = filedDeclare.type;\n\n        if (filedType) {\n          struct.fields.push({ name: filedName, type: filedType.range.toString() });\n        }\n      }\n    }\n    this.addStruct(struct);\n  }\n\n\n  addStruct(struct: Struct): void {\n\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n\n  static nameMap = \".12345abcdefghijklmnopqrstuvwxyz\";\n\n\n  checkName(str: string): void {\n\n    if (str.length > 13) {\n      throw new Error(`Action Name:${str} should be less than 13 characters.`);\n    }\n\n    for (let ch of str) {\n      if (Abi.nameMap.indexOf(ch) == -1) {\n        throw new Error(`Action Name:${str} should only contains the following symbol .12345abcdefghijklmnopqrstuvwxyz`);\n      }\n    }\n  }\n\n\n  /**\n  *  Resolve ClassPrototype to dispatcher  \n  */\n  resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n\n    let body = new Array<string>();\n    let hasActionDecorator = false;\n    if (clzPrototype.instanceMembers) {\n\n      let contractName = clzPrototype.simpleName; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  if (receiver == code) {`);\n      body.push(`    let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let instance of clzPrototype.instanceMembers.values()) {\n        if (this.isActionFuncPrototype(instance)) {\n\n          this.resolveFunctionPrototype(<FunctionPrototype>instance);\n          hasActionDecorator = true;\n          let declaration: FunctionDeclaration = (<FunctionPrototype>instance).declaration; // FunctionDeclaration\n\n          let funcName = declaration.name.range.toString();\n          let types = declaration.signature.parameters; // FunctionDeclaration parameter types\n\n          // this.checkName(funcName);\n\n          body.push(`    if (action == N(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (var index = 0; index < types.length; index++) {\n            let type: ParameterNode = types[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n\n\n            let variableDeclaration: VariableDeclaration = new VariableDeclaration(this.program, type.type);\n            let abiType = variableDeclaration.resolveAbiParameterType();\n\n            if (abiType.isArray) {\n              if (abiType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${abiType.factType}>();`);\n              } else if (abiType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${parameterName} = ds.readVector<u8>();`);\n              } else if (abiType.kind == VarialbeKind.STRING) {\n\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${abiType.baseType}>();`);\n              }\n            } else {\n              if (abiType.kind == VarialbeKind.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${parameterName} = ds.read<u8>() != 0;`);\n              } else if (abiType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${abiType.factType}>();`);\n              } else {\n                let internalName = NodeUtil.getInternalName(type.type);\n                this.retrieveStructByInternalName(internalName);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds)`);\n              }\n            }\n            fields.push(parameterName);\n          }\n          body.push(`      ${contractVarName}.${funcName}(${fields.join(',')});`);\n          body.push(\"    }\");\n        }\n      }\n      body.push(\"  }\");\n\n      if (hasActionDecorator) {\n        let clzName = clzPrototype.simpleName;\n        let sourcePath = clzPrototype.declaration.range.source.internalPath;\n        if (clzPrototype.declaration.decorators) {\n          this.resolveClassDecorator(clzPrototype.declaration.decorators);\n        }\n      }\n    }\n    return hasActionDecorator ? body : new Array();\n  }\n\n  resolveFunctionPrototype(funcPrototype: FunctionPrototype): void {\n\n    let declaration: FunctionDeclaration = funcPrototype.declaration;\n    let funcName = declaration.name.range.toString();\n    let signature = funcPrototype.declaration.signature;\n    let struct = this.toAbiStruct(funcName, signature);\n\n    this.addStruct(struct)\n    this.abiInfo.actions.push(new Action(funcName, funcName));\n  }\n\n\n  printTypeAliasInfo(): void {\n\n    let typesLookupKeys = this.program.typesLookup.keys();\n    for (let key of typesLookupKeys) {\n      let value = this.program.typesLookup.get(key);\n      if (value) {\n        console.log(`type look up key: ${key}. value: ${value.kind}`);\n      }\n    }\n\n    let typesAliasKeys = this.program.typeAliases.keys();\n    for (let key of typesAliasKeys) {\n      let value = this.program.typeAliases.get(key);\n      if (value) {\n        console.log(`type alias key: ${key}. Value: ${value.type.range.toString()}`);\n      }\n    }\n  }\n\n  printElementLookUpInfo(): void {\n    let keys = this.program.elementsLookup.keys();\n    for (let key of keys) {\n      let value = this.program.elementsLookup.get(key);\n      if (value)\n        console.log(`Element lookup key:${key}.Kind:${value.kind}`);\n    }\n  }\n\n  private printClassProtoTypeInfo(): void {\n    let keys = this.program.elementsLookup.keys();\n    for (let key of keys) {\n      let value: Element | null = this.program.elementsLookup.get(key);\n      if (value && value.kind == ElementKind.CLASS_PROTOTYPE) {\n        // console.log(`Element lookup key:${key}.Kind:${value.kind}`);\n        let classPrototype: ClassPrototype = <ClassPrototype>value;\n        if (classPrototype.basePrototype)\n          console.log(`Element lookup key:${key}. Base prototype:${classPrototype.basePrototype.simpleName}`);\n      }\n\n    }\n  }\n\n  resolve(): void {\n\n    // this.printTypeAliasInfo();\n    // this.printElementLookUpInfo();\n    // this.findDBManager();\n    // this.printClassProtoTypeInfo();\n\n    let serializeHelper: SerializeHelper = new SerializeHelper(this.program);\n    serializeHelper.resolve();\n    this.fileSerializeLookup = serializeHelper.fileSerializeLookup;\n\n    let dispatchBuffer = new Array<string>();\n\n    for (let element of this.program.elementsLookup.values()) {\n      // The element is ClassPrototype\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(clzPrototype.internalName)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          classDispatch.forEach((value: string, index: number): void => {\n            dispatchBuffer.push(value);\n          });\n          this.elementLookup.set(clzPrototype.internalName, element);\n        }\n      }\n    }\n\n    if (dispatchBuffer.length == 0) {\n      // throw new Error(`The smart contract must specify one action.`);\n    }\n\n    this.dispatch = this.assemblyDispatch(dispatchBuffer);\n  }\n\n\n  // Concat the dispatch message\n  assemblyDispatch(body: Array<string>): string {\n\n    let sb = new Array<string>();\n    sb.push(\"export function apply(receiver: u64, code: u64, action: u64): void {\");\n\n    body.forEach((value: string, index: number): void => {\n      sb.push(value);\n    });\n    sb.push(\"}\");\n\n    return sb.join(\"\\n\");\n  }\n}\n\n\n\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate as compileBuiltinAllocate,\n  compileAbort as compileBuiltinAbort\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getFunctionBody,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: Function[] = [];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      this.options.isWasm64\n        ? Module.MAX_MEMORY_WASM64\n        : Module.MAX_MEMORY_WASM32,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    var functionTableExported = false;\n    if (functionTableSize) {\n      let entries = new Array<FunctionRef>(functionTableSize);\n      for (let i = 0; i < functionTableSize; ++i) {\n        entries[i] = functionTable[i].ref;\n      }\n      module.setFunctionTable(entries);\n      module.addTableExport(\"0\", \"table\");\n      functionTableExported = true;\n    }\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\n    }\n\n    return module;\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.program.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration, global.parent);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // inlined constant can be compiled as-is\n    if (global.is(CommonFlags.INLINED)) {\n      initExpr = this.compileInlineConstant(global, global.type, true);\n\n    } else {\n\n      // evaluate initializer if present\n      if (declaration && declaration.initializer) {\n        if (!initExpr) {\n          initExpr = this.compileExpression(\n            declaration.initializer,\n            global.type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          );\n        }\n\n        // check if the initializer is constant\n        if (getExpressionId(initExpr) != ExpressionId.Const) {\n\n          // if a constant global, check if the initializer becomes constant after precompute\n          if (isConstant) {\n            initExpr = this.precomputeExpressionRef(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                declaration.range\n              );\n              initializeInStart = true;\n            }\n          } else {\n            initializeInStart = true;\n          }\n        }\n\n      // initialize to zero if there's no initializer\n      } else {\n        initExpr = global.type.toNativeZero(module);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile as-is\n\n      if (isConstant) {\n        let exprType = getExpressionType(initExpr);\n        switch (exprType) {\n          case NativeType.I32: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n            break;\n          }\n          case NativeType.I64: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(\n              getConstValueI64Low(initExpr),\n              getConstValueI64High(initExpr)\n            );\n            break;\n          }\n          case NativeType.F32: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = getConstValueF32(initExpr);\n            break;\n          }\n          case NativeType.F64: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = getConstValueF64(initExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            return false;\n          }\n        }\n        global.set(CommonFlags.INLINED); // inline the value from now on\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\n          module.addGlobal(internalName, nativeType, false, initExpr);\n          module.addGlobalExport(internalName, mangleExportName(global));\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\n          module.addGlobal(internalName, nativeType, false, initExpr);\n        }\n\n      } else /* mutable */ {\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\n      }\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        if (val.is(CommonFlags.INLINED)) {\n          if (element.declaration.isTopLevelExport) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              false, // constant\n              module.createI32(val.constantValue)\n            );\n          }\n        } else {\n          let initExpr: ExpressionRef;\n          if (valueDeclaration.value) {\n            initExpr = this.compileExpression(\n              <Expression>valueDeclaration.value,\n              Type.i32,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            );\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              initExpr = this.precomputeExpressionRef(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                if (element.is(CommonFlags.CONST)) {\n                  this.warning(\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                    valueDeclaration.range\n                  );\n                }\n                initInStart = true;\n              }\n            }\n          } else if (previousValue == null) {\n            initExpr = module.createI32(0);\n          } else if (previousValue.is(CommonFlags.INLINED)) {\n            initExpr = module.createI32(previousValue.constantValue + 1);\n          } else {\n            // in TypeScript this errors with TS1061, but actually we can do:\n            initExpr = module.createBinary(BinaryOp.AddI32,\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\n              module.createI32(1)\n            );\n            if (element.is(CommonFlags.CONST)) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n          if (initInStart) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              true, // mutable\n              module.createI32(0)\n            );\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            if (getExpressionType(initExpr) == NativeType.I32) {\n              val.constantValue = getConstValueI32(initExpr);\n              val.set(CommonFlags.INLINED);\n            } else {\n              assert(false);\n              val.constantValue = 0;\n            }\n          }\n        }\n        previousValue = <EnumValue>val;\n\n        // export values if the enum is exported\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\n          if (member.is(CommonFlags.INLINED) || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n            module.addGlobalExport(member.internalName, mangleExportName(member));\n          } else if (valueDeclaration) {\n            this.warning(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              valueDeclaration.range\n            );\n          }\n        }\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  private ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration, instance.prototype.parent); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    // check module-level export\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\n      if (signature.requiredParameters < signature.parameterTypes.length) {\n        // export the trampoline if the function takes optional parameters\n        instance = this.ensureTrampoline(instance);\n        this.ensureArgcSet();\n      }\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var module = this.module;\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let internalExportName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        member.externalName.text\n      );\n      let element = fileLevelExports.get(internalExportName);\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            let functionInstance = this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n            if (functionInstance) {\n              let functionDeclaration = functionInstance.prototype.declaration;\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\n            let globalDeclaration = (<Global>element).declaration;\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\n              if ((<Global>element).is(CommonFlags.INLINED)) {\n                module.addGlobalExport(element.internalName, member.externalName.text);\n              } else {\n                this.warning(\n                  DiagnosticCode.Cannot_export_a_mutable_global,\n                  member.range\n                );\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\n            let module = this.module;\n            let name = (<Field>element).simpleName;\n            let type = (<Field>element).type;\n            let nativeType = type.toNativeType();\n            let offset = (<Field>element).memoryOffset;\n            let usizeType = this.options.usizeType;\n            let nativeSizeType = this.options.nativeSizeType;\n\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\n            module.addFunction(\n              getterName,\n              this.ensureFunctionType(null, type, usizeType),\n              null,\n              module.createLoad(\n                type.byteSize,\n                type.is(TypeFlags.SIGNED),\n                module.createGetLocal(0, nativeSizeType),\n                nativeType,\n                offset\n              )\n            );\n            module.addFunctionExport(getterName, getterName);\n\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\n            if (element.is(CommonFlags.READONLY)) break;\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\n            module.addFunction(\n              setterName,\n              this.ensureFunctionType([ type ], Type.void, usizeType),\n              null,\n              module.createStore(\n                type.byteSize,\n                module.createGetLocal(0, nativeSizeType),\n                module.createGetLocal(1, nativeType),\n                nativeType,\n                offset\n              )\n            );\n            module.addFunctionExport(setterName, setterName);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ], terminated ? NativeType.Unreachable : NativeType.None);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = this.precomputeExpressionRef(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyExpr = this.compileStatement(statement.statement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    var terminated = alwaysTrue && flow.isAny(FlowFlags.ANY_TERMINATING);\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel,\n        module.createBlock(null, repeatBlock, NativeType.None)\n      )\n    );\n\n    return module.createBlock(\n      breakLabel,\n      breakBlock,\n      terminated\n        ? NativeType.Unreachable\n        : NativeType.None\n      );\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileBuiltinAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = program.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.precomputeExpressionRef(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var alwaysReturns = alwaysTrue && flow.is(FlowFlags.RETURNS);\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var expr = module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ], alwaysReturns ? NativeType.Unreachable : NativeType.None);\n    return expr;\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        if (!(element.is(CommonFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    try{\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    } catch(exception){\n      console.log(`Compile expression failed.The normalizePath:${expression.range.source.normalizedPath},at line:${expression.range.line}.` \n      + `The expression:${expression.range.toString()}`);\n      throw exception;\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.precomputeExpressionRef(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\n    var module = this.module;\n    var type = this.currentType;\n    var nativeType = type.toNativeType();\n    var funcRef = module.addTemporaryFunction(nativeType, null, expr);\n    module.runPasses([ \"precompute\" ], funcRef);\n    var ret = getFunctionBody(funcRef);\n    module.removeTemporaryFunction();\n    return ret;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.program.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var target = program.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prototype = (<Property>target).setterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(); // reports\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (program.resolvedElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.program.resolvedThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = setterPrototype.resolve(); // reports\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.program.resolvedThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.program.resolvedElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.program.resolvedThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = prototype.resolveUsingTypeArguments( // reports\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.program.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments,\n                true\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = prototype.resolve(\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = prototype.resolve(\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.program.resolvedThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.program.resolvedThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n      case ElementKind.PROPERTY: // TODO\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var expr = compileBuiltinCall( // reports\n      this,\n      prototype,\n      prototype.resolveBuiltinTypeArguments(\n        expression.typeArguments,\n        this.currentFunction.flow.contextualTypeArguments\n      ),\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      return this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"oob\", [\n        module.createSwitch(names, \"oob\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\n    return ret;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.program.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localType = (<Local>target).type;\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = (<FunctionPrototype>target).resolve(\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.program.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\n      }\n      // case LiteralKind.OBJECT:\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  compileStaticString(stringValue: string): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var stringSegments = this.stringSegments;\n\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\n    if (!stringSegment) {\n      let stringLength = stringValue.length;\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\n      stringBuffer[0] =  stringLength         & 0xff;\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\n      for (let i = 0; i < stringLength; ++i) {\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\n      }\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\n      stringSegments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    var stringType = this.program.typesLookup.get(\"string\");\n    this.currentType = stringType ? stringType : options.usizeType;\n    if (options.isWasm64) {\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    }\n    assert(i64_is_i32(stringOffset));\n    return module.createI32(i64_low(stringOffset));\n  }\n\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\n    var isStatic = true;\n    var module = this.module;\n\n    // obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    var elementCount = expressions.length;\n    if (elementCount) { // non-empty static or dynamic\n      let nativeElementType = elementType.toNativeType();\n      let values: usize;\n      let byteLength: usize;\n      switch (nativeElementType) {\n        case NativeType.I32: {\n          values = changetype<usize>(new Int32Array(elementCount));\n          byteLength = elementCount * 4;\n          break;\n        }\n        case NativeType.I64: {\n          values = changetype<usize>(new Array<I64>(elementCount));\n          byteLength = elementCount * 8;\n          break;\n        }\n        case NativeType.F32: {\n          values = changetype<usize>(new Float32Array(elementCount));\n          byteLength = elementCount * 4;\n          break;\n        }\n        case NativeType.F64: {\n          values = changetype<usize>(new Float64Array(elementCount));\n          byteLength = elementCount * 8;\n          break;\n        }\n        default: {\n          assert(false);\n          return module.createUnreachable();\n        }\n      }\n\n      // precompute value expressions\n      let exprs = new Array<ExpressionRef>(elementCount);\n      let expr: BinaryenExpressionRef;\n      for (let i = 0; i < elementCount; ++i) {\n        exprs[i] = expressions[i]\n          ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n          : elementType.toNativeZero(module);\n        if (isStatic) {\n          expr = this.precomputeExpressionRef(exprs[i]);\n          if (getExpressionId(expr) == ExpressionId.Const) {\n            assert(getExpressionType(expr) == nativeElementType);\n            switch (nativeElementType) {\n              case NativeType.I32: {\n                changetype<i32[]>(values)[i] = getConstValueI32(expr);\n                break;\n              }\n              case NativeType.I64: {\n                changetype<I64[]>(values)[i] = i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                );\n                break;\n              }\n              case NativeType.F32: {\n                changetype<f32[]>(values)[i] = getConstValueF32(expr);\n                break;\n              }\n              case NativeType.F64: {\n                changetype<f64[]>(values)[i] = getConstValueF64(expr);\n                break;\n              }\n              default: assert(false); // checked above\n            }\n          } else {\n            // TODO: emit a warning if declared 'const'\n            // if (isConst) {\n            //   this.warn(\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n            //     reportNode.range\n            //   );\n            // }\n            isStatic = false;\n          }\n        }\n      }\n\n      let usizeTypeSize = this.options.usizeType.byteSize;\n      if (isStatic) { // non-empty, all elements can be precomputed\n\n        // Create a combined static memory segment composed of:\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\n\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\n        let data = new Uint8Array(arraySize + bufferTotalSize);\n        let segment = this.addMemorySegment(data);\n        let offset = 0;\n\n        // write Array struct\n        if (usizeTypeSize == 8) {\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\n          offset += 8;\n        } else {\n          assert(i64_high(segment.offset) == 0);\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\n          offset += 4;\n        }\n        writeI32(elementCount, data, offset); // length_\n        offset += 4;\n        assert(offset == arraySize);\n\n        // write ArrayBuffer struct\n        writeI32(byteLength, data, offset);\n        offset += bufferHeaderSize; // incl. alignment\n\n        // write ArrayBuffer data\n        switch (nativeElementType) {\n          case NativeType.I32: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        assert(offset <= arraySize + bufferTotalSize);\n\n        this.currentType = arrayType;\n        return usizeTypeSize == 8\n          ? module.createI64(\n              i64_low(segment.offset),\n              i64_high(segment.offset)\n            )\n          : module.createI32(\n              i64_low(segment.offset)\n            );\n\n      } else { // non-empty, some elements can't be precomputed\n\n        this.currentType = arrayType;\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n        if (!setter) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            reportNode.range, arrayInstance.internalName\n          );\n          return module.createUnreachable();\n        }\n        let nativeArrayType = arrayType.toNativeType();\n        let currentFunction = this.currentFunction;\n        let tempLocal = currentFunction.getTempLocal(arrayType, false);\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\n        let index = 0;\n        stmts[index++] = module.createSetLocal(tempLocal.index,\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n            module.createI32(0), // this\n            module.createI32(elementCount)\n          ])\n        );\n        for (let i = 0; i < elementCount; ++i) {\n          stmts[index++] = this.makeCallDirect(setter, [\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\n            module.createI32(i),\n            exprs[i]\n          ]);\n        }\n        assert(index + 1 == stmts.length);\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n        currentFunction.freeTempLocal(tempLocal);\n        this.currentType = arrayType;\n        return module.createBlock(null, stmts, nativeArrayType);\n      }\n\n    } else { // empty, TBD: cache this somehow?\n      this.currentType = arrayType;\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(0)\n      ]);\n    }\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.program.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = classPrototype.resolve(\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = classPrototype.resolveUsingTypeArguments( // reports\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the first matching constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance = classInstance.constructorInstance;\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\n      constructorInstance = currentClassInstance.constructorInstance;\n    }\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(program.resolvedThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>target).getterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(null); // reports\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.parent);\n            assert(parent.kind == ElementKind.CLASS);\n            let thisExpression = assert(program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr, inline);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, 0, inline);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileBuiltinAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleExportName(element: Element, simpleName: string = element.simpleName): string {\n  switch (element.kind) {\n    case ElementKind.FUNCTION: {\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\n      return parent\n        ? mangleExportName(parent)\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n        + simpleName\n        : simpleName;\n    }\n    case ElementKind.FIELD: {\n      let parent = assert((<Field>element).parent);\n      return mangleExportName(parent)\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n          + simpleName;\n    }\n    case ElementKind.ENUMVALUE: {\n      let parent = assert((<EnumValue>element).parent);\n      return mangleExportName(parent)\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n          + simpleName;\n    }\n    case ElementKind.CLASS: {\n      let parent = (<Class>element).prototype.parent;\n      return parent\n        ? mangleExportName(parent)\n        + STATIC_DELIMITER\n        + simpleName\n        : simpleName;\n    }\n    default: {\n      let parent = element.parent;\n      return parent\n        ? mangleExportName(parent)\n        + STATIC_DELIMITER\n        + simpleName\n        : simpleName;\n    }\n  }\n}\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement,\n  parentElement: Element | null = null\n): void {\n  mangleImportName_moduleName = parentElement ? parentElement.simpleName : declaration.range.source.simplePath;\n  mangleImportName_elementName = element.simpleName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionExpression,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // mark the special builtins library file\n    if (source.normalizedPath == builtinsFile) {\n      source.set(CommonFlags.BUILTIN);\n    }\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // mark builtins\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    // return backlog.length ? backlog.shift() : null;\n    let fileName = backlog.length ? backlog.shift() : null;\n\n    return fileName;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\n\n    if (tn.skip(Token.PUBLIC)) {\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      if (tn.skip(Token.ABSTRACT)) {\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      } else {\n        flags |= CommonFlags.INSTANCE;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (tn.skip(Token.GET)) {\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.GET;\n        isGetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.SET)) {\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.SET | CommonFlags.SET;\n        isSetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\n      flags |= CommonFlags.CONSTRUCTOR;\n      isConstructor = true;\n      if (flags & CommonFlags.STATIC) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(staticStart, staticEnd), \"static\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.READONLY) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\n        ); // recoverable\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n\n    if (token == Token.NULL) {\n      return Node.createNullExpression(tn.range());\n    }\n    if (token == Token.TRUE) {\n      return Node.createTrueExpression(tn.range());\n    }\n    if (token == Token.FALSE) {\n      return Node.createFalseExpression(tn.range());\n    }\n\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.INVALID) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    switch (token) {\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Expression_expected,\n          tn.range()\n        );\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = 0\n  ): Expression | null {\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression?\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) return null;\n        expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos)); // is again callable\n      }\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA ? Precedence.COMMA + 1 : 0);\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  // skipBlock(tn: Tokenizer): void {\n  //   var depth = 0;\n  //   var token: Token;\n  //   do {\n  //     token = tn.next();\n  //     if (token == Token.OPENBRACE) {\n  //       ++depth;\n  //     } else if (token == Token.CLOSEBRACE) {\n  //       if (depth) --depth;\n  //       if (!depth) break; // done\n  //     }\n  //   } while (token != Token.ENDOFFILE);\n  // }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING,\n  INVALID = -1\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"current_memory()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"grow_memory(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","import {\n    Type,\n    TypeKind,\n    Signature,\n    typesToString\n} from \"./types\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    ElementKind,\n    Element,\n    ClassPrototype,\n    FunctionPrototype,\n    Program,\n    VariableLikeElement,\n    Class,\n    Field,\n    FieldPrototype\n} from \"./program\";\n\nimport {\n    DecoratorKind,\n    DecoratorNode,\n    SignatureNode,\n    ClassDeclaration,\n    FunctionDeclaration,\n    DeclarationStatement,\n    FieldDeclaration,\n    TypeNode,\n    NodeKind,\n    Source,\n    ParameterNode,\n    Expression,\n    Node,\n    VariableLikeDeclarationStatement,\n    LiteralKind,\n    StringLiteralExpression,\n    CommonTypeNode,\n    IdentifierExpression\n} from \"./ast\";\nimport { AbiHelper } from \"./abi\";\n\nexport enum VarialbeKind {\n    BOOL, // boolean and bool\n    NUMBER, // original type except boolean and bool\n    STRING, // string kind\n    ARRAY, // array kind\n    CLASS // class kind\n}\n\n\n\nexport class NodeUtil {\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        let internalPath = node.range.source.internalPath;\n        let name = node.range.toString();\n        let internalName = `${internalPath}/${name}`;\n        return internalName;\n    }\n}\n\n\n\nexport class VariableDeclaration {\n\n    program: Program;\n\n    abiTypeLookup: Map<string, string> = new Map();\n\n    commonTypeNode: CommonTypeNode;\n\n    kind: VarialbeKind;\n    /** Parameter name, u64 */\n    declareType: string;\n    /** Base Parameter type */\n    baseType:string;\n    /** The abi field type, eg:account_name */\n    abiType: string; \n    /** The field fact type, eg: u64, u32 */\n    factType: string;\n    // /** Whether parameter or field is array  */\n\n    constructor(program: Program, commonTypeNode: CommonTypeNode) {\n        this.program = program;\n        this.commonTypeNode = commonTypeNode;\n        this.abiTypeLookup = AbiHelper.abiTypeLookup;\n  \n    }\n\n    /**\n     * string TypeKind is 9, and usize TypeKind is also 9.\n     * @param type \n     */\n    resolveAbiParameterType(): VariableDeclaration {\n\n        let variableType = this.commonTypeNode.range.toString();\n        let typeAlias = this.program.typeAliases.get(variableType);\n        if (typeAlias) {\n            variableType = typeAlias.type.range.toString();\n        }\n        this.declareType = variableType;\n        let baseTypeName: string = this.getBaseTypeName(variableType);\n        this.baseType = baseTypeName;\n        if (baseTypeName == \"string\") {\n            this.kind = VarialbeKind.STRING;\n            this.factType = \"string\";\n        }\n        this.abiType = this.findAbiType(baseTypeName);\n        let factType: Type | null = this.findFactType(this.abiType);\n\n        if (!factType) {\n            this.kind = VarialbeKind.CLASS;\n        } else if (factType.kind == TypeKind.BOOL) {\n            this.kind = VarialbeKind.BOOL;\n            this.factType = factType.toString();\n        } else {\n            this.kind = VarialbeKind.NUMBER\n            this.factType = factType.toString();\n        }\n        return this;\n    }\n\n    /**\n     * Find the original type name, \n     * eg: declare type account_name = u64;\n     *     declare type account_name_alias = account_name;\n     *     findAbiType(\"account_name_alias\") return \"account_name\";\n     * \n     * eg: findAbiType(\"u64\") return \"u64\";\n     * @param typeKindName\n     * */\n    findAbiType(typeKindName: string): string {\n\n        /**Watch the type whether was the root type */\n        let abiType: string | null = this.abiTypeLookup.get(typeKindName);\n        if (abiType) {\n            return typeKindName;\n        }\n        let typeAlias = this.program.typeAliases.get(typeKindName);\n        if (typeAlias) {\n            let typeName = typeAlias.type.range.toString()\n            return this.findAbiType(typeName);\n        } else {\n            return typeKindName;\n        }\n    }\n\n    get isArray(): bool {\n        return this.declareType.includes(\"[\");\n    }\n\n    /**\n     * Get the base type name, \n     * If the type name is string[], so the base type name is string\n     * @param typeName \n     */\n    getBaseTypeName(typeName: string): string {\n\n        let bracketIndex = typeName.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = typeName.indexOf(\" \") == -1 ? bracketIndex : typeName.indexOf(\" \");\n            let baseTypeName = typeName.substring(0, index);\n            return baseTypeName;\n        }\n        return typeName;\n    }\n\n    /**\n     *  Find the script original type name\n     *  @param typeKindName\n     * \n     */\n    private findFactTypeName(typeKindName: string): string {\n        let typeAlias = this.program.typeAliases.get(typeKindName);\n        if (typeAlias) {\n            let commonaTypeName = typeAlias.type.range.toString()\n            return this.findFactTypeName(commonaTypeName);\n        } else {\n            return typeKindName;\n        }\n    }\n\n    /**\n    * Find assemblyscript original type name \n    * eg: account_name return 'u64'\n    * \n    * @param typeKindName\n    */\n    private findFactType(typeKindName: string): Type | null {\n        let originalName = this.findFactTypeName(typeKindName);\n        //Get the AssemblyScript original type \n        let scriptType: Type | null = this.program.typesLookup.get(originalName);\n        return scriptType;\n    }\n}\n\n/**\n * \n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needImplSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needImplDeSerialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needImplPrimary: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.generatorSerializeFlag();\n    }\n\n    getInternalName(node: Node): string {\n        let internalPath = node.range.source.internalPath;\n        let name = node.range.toString();\n        let internalName = `${internalPath}/${name}`;\n        return internalName;\n    }\n\n    generatorSerializeFlag(): void {\n\n        if (!this.classPrototype.instanceMembers) {\n            return;\n        }\n\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                let functionPrototype = <FunctionPrototype>element;\n                if (functionPrototype.declaration.name.range.toString() == this.SERIALIZE_METHOD_NAME) {\n                    this.needImplSerialize = false;\n                }\n                if (functionPrototype.declaration.name.range.toString() == this.DESERIALIZE_METHOD_NAME) {\n                    this.needImplDeSerialize = false;\n                }\n                if (functionPrototype.declaration.name.range.toString() == this.PRIMARY_METHOD_NAME) {\n                    this.needImplPrimary = false;\n                }\n            }\n        }\n    }\n\n\n    checkFieldImplSerialize(typeNode: CommonTypeNode): void {\n\n        let internalName = NodeUtil.getInternalName(typeNode);\n        let element: Element | null = this.classPrototype.program.elementsLookup.get(internalName)\n\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = SerializeHelper.hasImplSerialize((<ClassPrototype>element).declaration);\n            if (!hasImpl) {\n                throw new Error(`Class ${internalName} not implements the interface ${SerializeHelper.SERIALIZE_INTERFANCE}`);\n            }\n        }\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoints(): SerializePoint {\n\n        let serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.needDeserialize = this.needImplDeSerialize;\n        serializePoint.needSerialize = this.needImplSerialize;\n        serializePoint.needPrimaryKey = this.needImplPrimary;\n\n        if (!this.classPrototype.instanceMembers)\n            return serializePoint;\n\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = fieldPrototype.declaration;\n                let commonType: CommonTypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.TYPE) {\n\n                    let typeNode = <TypeNode>commonType;\n                    if (this.needImplDeSerialize && this.checkFieldImplSerialize(commonType))\n                        serializePoint.addSerializeExpr(this.serializeField(fieldName, typeNode));\n\n                    if (this.needImplSerialize && this.checkFieldImplSerialize(commonType))\n                        serializePoint.addDeserializeExpr(this.deserializeField(fieldName, typeNode));\n                }\n            }\n        }\n        serializePoint.addDeserializeExpr(`   }`);\n        serializePoint.addSerializeExpr(`   }`);\n\n        return serializePoint;\n    }\n\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: TypeNode): string {\n\n        let typeNodeHelper: VariableDeclaration = new VariableDeclaration(this.classPrototype.program, typeNode);\n        let body: Array<string> = new Array<string>();\n        let paramDeclaration: VariableDeclaration = typeNodeHelper.resolveAbiParameterType();\n\n        if (paramDeclaration.isArray) {\n            if (paramDeclaration.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${fieldName} = ds.readVector<${paramDeclaration.abiType}>();`);\n            } else if (paramDeclaration.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${fieldName} = ds.readVector<u8>();`);\n            } else if (paramDeclaration.kind == VarialbeKind.STRING) {\n\n            } else {\n                body.push(`      let ${fieldName} = ds.readComplexVector<${paramDeclaration.declareType}>();`);\n            }\n        } else {\n            if (paramDeclaration.kind == VarialbeKind.STRING) {\n                body.push(`      ds.writeString(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.BOOL) {\n                body.push(`      ds.write<u8>(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.NUMBER) {\n                body.push(`      ds.write<${paramDeclaration.declareType}>(this.${fieldName});`);\n            } else {\n                body.push(`      this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return body.join(\"\\n\");\n    }\n\n    deserializeField(fieldName: string, type: TypeNode): string {\n\n        let typeNodeHelper: VariableDeclaration = new VariableDeclaration(this.classPrototype.program, type);\n\n        let body: Array<string> = new Array<string>();\n        let variableType:VariableDeclaration = typeNodeHelper.resolveAbiParameterType();\n\n        if (variableType.isArray) {\n            if (variableType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${fieldName} = ds.readVector<${variableType.factType}>();`);\n            } else if (variableType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${fieldName} = ds.readVector<u8>();`);\n            } else if (variableType.kind == VarialbeKind.STRING) {\n\n            } else {\n                body.push(`      let ${fieldName} = ds.readComplexVector<${variableType.baseType}>();`);\n            }\n        } else {\n            if (variableType.kind == VarialbeKind.STRING) {\n                body.push(`      this.${fieldName} = ds.readString();`);\n            } else if (variableType.kind == VarialbeKind.BOOL) {\n                body.push(`      this.${fieldName} = ds.read<u8>() != 0;`);\n            } else if (variableType.kind == VarialbeKind.NUMBER) {\n                body.push(`      this.${fieldName} = ds.read<${variableType.factType}>();`);\n            } else {\n                body.push(`      this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return body.join(\"\\n\");\n    }\n}\n\nexport class SerializePoint {\n\n    private serialize: Array<string> = new Array<string>();\n\n    private deserialize: Array<string> = new Array<string>();\n\n    private primaryKey: Array<string> = new Array<string>();\n\n    needSerialize: bool;\n\n    needDeserialize: bool;\n\n    needPrimaryKey: bool;\n\n    range: Range;\n\n    get line(): i32 {\n        return this.range.line;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get classpath(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    constructor(range: Range) {\n        this.range = range;\n        this.serialize.push(`    serialize(ds: DataStream): void {`);\n        this.deserialize.push(`    deserialize(ds: DataStream): void {`);\n        \n        this.primaryKey.push(`     primaryKey(): id_type {`);\n        this.primaryKey.push(`       return 0;`)\n        this.primaryKey.push(`    }`)\n    }\n\n    addSerializeExpr(expr: string): void {\n        this.serialize.push(expr);\n    }\n\n    addDeserializeExpr(expr: string): void {\n        this.deserialize.push(expr);\n    }\n\n    toSerialize(): string {\n        if (!this.needSerialize) {\n            return \"\";\n        }\n        return this.serialize.join(\"\\n\");\n    }\n\n    toDeserialize(): string {\n        if (!this.needDeserialize) {\n            return \"\";\n        }\n        return this.deserialize.join(\"\\n\");\n    }\n\n    toPrimarykey(): string {\n        return  this.needPrimaryKey ? this.primaryKey.join(\"\\n\") : \"\";\n    }\n}\n\n\nexport class SerializeHelper {\n\n    static SERIALIZE_INTERFANCE: string = \"ISerializable\";\n    /**Program  */\n    program: Program;\n\n    serializeClassname: Set<string> = new Set<string>();\n\n    fileSerializeLookup: Map<string, Array<SerializePoint>> = new Map<string, Array<SerializePoint>>();\n\n    constructor(program: Program) {\n        this.program = program;\n    }\n\n    static hasImplSerialize(classDeclaration: ClassDeclaration): bool {\n        let classDeclareStr = classDeclaration.range.toString();\n        return classDeclareStr.includes(this.SERIALIZE_INTERFANCE)\n    }\n\n    resolve(): void {\n\n        for (let [key, element] of this.program.elementsLookup) {\n\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let classDeclaration: ClassDeclaration = (<ClassPrototype>element).declaration;\n                if (SerializeHelper.hasImplSerialize(classDeclaration)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n                    let serializePoint: SerializePoint = generator.getSerializePoints();\n\n                    if (!this.serializeClassname.has(serializePoint.classpath)) {\n                        this.addSerializePoint(serializePoint);\n                        this.serializeClassname.add(serializePoint.classpath);\n                    }\n                }\n            }\n        }\n        this.sortSerializePoints();\n    }\n\n    /**\n     * Add the serialize point\n     * @param serialize The serialize point\n     */\n    addSerializePoint(serialize: SerializePoint): void {\n\n        let normalizedPath = serialize.normalizedPath;\n        let fileSerialize: Array<SerializePoint> | null = this.fileSerializeLookup.get(normalizedPath);\n\n        if (fileSerialize) {\n            fileSerialize.push(serialize);\n        } else {\n            fileSerialize = new Array<SerializePoint>();\n            fileSerialize.push(serialize);\n            this.fileSerializeLookup.set(normalizedPath, fileSerialize);\n        }\n    }\n\n    /**\n     * Sorting the serialize points by the line number, \n     * the max line number is in front of.\n     */\n    sortSerializePoints(): void {\n        for (let [key, array] of this.fileSerializeLookup) {\n            let compartor = (a: SerializePoint, b: SerializePoint): i32 => {\n                return (b.line - a.line);\n            }\n            array.sort(compartor);\n        }\n    }\n}","/** @module util *//***/\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags\n} from \"./program\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"current_memory\": { // current_memory() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"set_memory\": { // set_memory(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\nconst allocateInternalName = \"allocate_memory\";\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\n  if (!allocatePrototype) {\n    program.error(\n      DiagnosticCode.Cannot_find_name_0,\n      reportNode.range, allocateInternalName\n    );\n    program.info(\n      DiagnosticCode.An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf,\n      reportNode.range\n    );\n    return module.createUnreachable();\n  }\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\n    program.error(\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n      reportNode.range, allocatePrototype.internalName\n    );\n    return module.createUnreachable();\n  }\n\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\n\n  compiler.currentType = classInstance.type;\n  return module.createCall(\n    allocateInstance.internalName, [\n      options.isWasm64\n        ? module.createI64(classInstance.currentMemoryOffset)\n        : module.createI32(classInstance.currentMemoryOffset)\n    ],\n    options.nativeSizeType\n  );\n}\n\nconst abortInternalName = \"abort\";\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\n  if (!stringType) return module.createUnreachable();\n\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\n\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__25__;","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\n\nfor (var key in binaryen)\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\n    global[key] = binaryen[key];\n\n// Utilize Binaryen's heap\n\nglobal.allocate_memory = function(size) {\n  if (!size) return 0; // should be safe in our case\n  return binaryen._malloc(size);\n};\n\nglobal.free_memory = function(ptr) {\n  if (ptr) binaryen._free(ptr);\n};\n\nglobal.move_memory = function(dest, src, n) {\n  return binaryen._memmove(dest, src, n);\n};\n\nglobal.store = function(ptr, val) {\n  binaryen.HEAPU8[ptr] = val;\n};\n\nglobal.load = function(ptr) {\n  return binaryen.HEAPU8[ptr];\n};\n\n// Implement module stubs\n\nconst Module = require(\"../../module\").Module;\n\nModule.prototype.toText = function toText() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrint(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrintAsmjs(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n","module.exports = globalScope => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\n    if (!(size >>>= 0)) return 0;\n\n    if (HEAP_OFFSET + size > HEAP.length) {\n      var oldHeap = HEAP;\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n      HEAP.set(oldHeap);\n    }\n\n    var ptr = HEAP_OFFSET;\n    if ((HEAP_OFFSET += size) & 7)\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n\n    return ptr;\n  };\n\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\n    // TODO\n  };\n\n  globalScope[\"move_memory\"] = function move_memory(dest, src, size) {\n    HEAP.copyWithin(dest, src, src + size);\n  };\n\n  globalScope[\"store\"] = function store(ptr, value, offset) {\n    HEAP[ptr + (offset | 0)] = value;\n  };\n\n  globalScope[\"load\"] = function load(ptr, offset) {\n    return HEAP[ptr + (offset | 0)];\n  };\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nrequire(\"./memory\")(globalScope);\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"../../../std/portable/index\";\nimport \"./binaryen\";\nimport \"./float\";\nimport \"./i64\";\n"],"sourceRoot":""}