{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/util/astutil.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/inserter.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__17__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","common_1","tokenizer_1","Token","Range","NodeKind","util_1","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","SUPER","ELEMENTACCESS","PROPERTYACCESS","nodeIsGenericCallable","Node","parent","flags","CommonFlags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","range","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","text","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","length","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizedPath","normalizePath","startsWith","resolvePath","source","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","LIBRARY_PREFIX","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","assert","charCodeAt","ACTION","BUILTIN","DATABASE","EXTERNAL","GLOBAL","INLINE","IGNORE","OPERATOR","PRIMARYID","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","PATH_DELIMITER","simplePath","substring","Array","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","STATIC_DELIMITER","INSTANCE_DELIMITER","endsWith","findDecorator","decorator","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INNER_DELIMITER","LIBRARY_SUBST","FILESPACE_PREFIX","OperatorKind","diagnostics_1","types_1","ast_1","module_1","abi_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnostics","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","toAbi","abi","Abi","resolve","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","globalName","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","toString","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","join","push","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","DiagnosticEmitter","Element","program","_internalName","replaceComma","str","result","str_1","str_1_1","ch","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","line","column","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticMessage","useColors","showContext","sb","formatDiagnosticContext","len","start","end","isLineBreak","emitDiagnostic","console","log","stack","info","warning","__export","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","g","eval","e","window","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","functionTableExported","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_e","_f","_g","_h","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_j","_k","fullName","_l","_m","ctor","compileSourceByPath","reportNode","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","resolveFunctionInclTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileNopExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","exception","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","retainConstantType","scopedThis","_this_cannot_be_referenced_in_current_location","superType","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","classInstance","currentClassInstance","makeAllocate","propertyAccess","resolvePropertyAccess","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","fieldType","nativeFieldType","fieldDeclaration","parentElement","inserter_1","astutil_1","Struct","fields","AbiTypeAlias","newTypeName","wasmType","new_type_name","Action","ricardian_contract","AbiHelper","abiTypeLookup","Table","indexType","index_type","keys_names","keys_types","typeAliasSet","structsLookup","elementLookup","insertPointsLookup","abiInfo","version","structs","actions","tables","resolveSignatureToAbiStruct","methodName","struct","parameters_1","parameters_1_1","parameter","typeInfo","TypeNodeInfo","abiType","isArray","ascBasicType","declareType","addAbiTypeAlias","typeNodeInfo","typeKindName","basicElement","getAscBasicElement","parseClassPrototypeToStruct","originalTypeName","findContractOriginalType","typeAlias","commonaTypeName","findScriptOriginalTypeName","findScriptOriginalType","isWrapWithQutation","undefined","charAt","isActionFuncPrototype","funcType","AstUtil","haveSpecifyDecorator","resolveDatabaseDecorator","getExprValue","checkDatabaseName","resolveExpressionToStruct","argu","getInternalName","resolveExpressionToElement","retrieveStructByInternalName","members_1","members_1_1","fieldDeclare","fieldTypeName","isIgnore","getBasicTypeName","addStruct","checkName","chars","name_1","name_1_1","aChar","resolveClassDispatcher","clzPrototype","extendedContract","hasActionDecorators","contractName","contractVarName","resolveFunctionPrototype","funcName","VarialbeKind","NUMBER","ascFactType","BOOL","funcPrototype","printTypeAliasInfo","typesLookupKeys","keys","typesLookupKeys_1","typesLookupKeys_1_1","typesAliasKeys","typesAliasKeys_1","typesAliasKeys_1_1","printElementLookUpInfo","keys_1","keys_1_1","printClassProtoTypeInfo","keys_2","keys_2_1","serializeInserter","SerializeInserter","superInserter","SuperInserter","serializePoints","getInsertPoints","superPoints","superPoints_1","superPoints_1_1","_points","InsertPoint","toSortedMap","dispatchBuffer","forEach","dispatch","assemblyDispatch","hasElement","decorators_1","decorators_1_1","bracketIndex","indexOf","endIndex","trim","impledSerializable","classDeclaration","implementsTypes_1","implementsTypes_1_1","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","contextualFunction","targetExpression","propertyName","elementAccess","explicitLocal","functionTarget","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","typeParameterNodes","binaryen","emitText","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","ASC_TARGET","defineProperties","writable","Math","fround","MIN_POSITIVE_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","EPSILON","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","fromCodePoint","Number","isInteger","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","F64","Float64Array","F32","Float32Array","I32","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","gte","lte","minSafeF64","maxSafeF64","toNumber","i64_to_string","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","ClzI64","CtzI64","PopcntI64","RotlI32","RotlI64","RotrI32","RotrI64","AbsF32","AbsF64","tempLocal0","tempLocal1","MaxF32","MaxF64","MinF32","MinF64","CeilF32","CeilF64","FloorF32","FloorF64","CopysignF32","CopysignF64","NearestF32","NearestF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","SqrtF32","SqrtF64","TruncF32","TruncF64","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","CurrentMemory","GrowMemory","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","valueType","stringType","existingIndex","gcPrototype","gcInstance","VIRTUAL","nativeSizeSize","baseInstance","allocateInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","indent","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","insertCode","insertPoints","insertPoints_1","insertPoints_1_1","insertPoint","insertPointArr","map_1","map_1_1","sort","descComparator","addInsertCode","getInsertCode","commonTypeNode","basicTypeName","_ascFactType","findOriginalAscType","basicTypePath","basicType","substr","libEle","findOriginalAscTypeName","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needImplSerialize","needImplDeSerialize","needImplPrimary","toGenerateFlag","functionPrototype","checkFieldImplSerialize","getSerializePoints","serializePoint","SerializePoint","needDeserialize","needSerialize","needPrimaryKey","hasPrimaryidDecorator","addSerializeExpr","serializeField","addDeserializeExpr","deserializeField","addPrimaryKeyExpr","paramDeclaration","variableType","serialize","deserialize","primaryKey","insertData","serializeClassname","generator","indentity","classNames","baseClassNames","identity","processSuper","baseConstructorPrototype","insertCallSuper","checkAndGetSuperCallExpr","baseFunctionDeclaration","method","createSuperCall","concreteFunctionDeclaration","className","location","blockStmt","superStmt","_stmt","superExpr","callexpr","_superCall","baseClassname","content","decompiler_1","definitions_1","formatDiagnostic","parser_1","parseFile","parser","Parser","nextFile","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","decompiler","Decompiler","decompile","buildIDL","IDLBuilder","build","buildTSD","TSDBuilder","functionId","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallImport","CallIndirect","SetGlobal","Store","Drop","Host","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","indentLevel","typeToString","visitInterface","numMembers","members_2","members_2_1","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","skipBlock","depth","Precedence"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,mBAAAC,eAAAC,IACAD,QAAA,YAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,UARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAZ,YAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA0DA,OArDAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,cAAiD4B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAnC,GACA,IAAAkB,EAAAlB,KAAA8B,WACA,WAA2B,OAAA9B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,ybC7EA,IAAAC,EAAAlC,EAAA,GAQAmC,EAAAnC,EAAA,GAYST,EAAA6C,MAXPD,EAAAC,MAWc7C,EAAA8C,MATdF,EAAAE,MAGF,IASYC,EATZC,EAAAvC,EAAA,IASA,SAAYsC,GAEVA,IAAA,mBAGAA,IAAA,eACAA,IAAA,iCACAA,IAAA,yBACAA,IAAA,yBAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,kBACAA,IAAA,kCACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,gBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,sBAvEF,CAAYA,EAAA/C,EAAA+C,WAAA/C,EAAA+C,cA2EZ/C,EAAAiD,oBAAA,SAAoCC,GAClC,OAAQA,GACN,KAAKH,EAASI,QACd,KAAKJ,EAASK,KACd,KAAKL,EAASM,KACd,KAAKN,EAASO,MAAO,OAAO,EAE9B,OAAO,GAITtD,EAAAuD,eAAA,SAA+BL,GAC7B,OAAQA,GACN,KAAKH,EAASS,WACd,KAAKT,EAASU,KACd,KAAKV,EAASW,MACd,KAAKX,EAASY,cACd,KAAKZ,EAASa,eAAgB,OAAO,EAEvC,OAAO,GAIT5D,EAAA6D,sBAAA,SAAsCX,GACpC,OAAQA,GACN,KAAKH,EAASS,WACd,KAAKT,EAASa,eAAgB,OAAO,EAEvC,OAAO,GAIT,IAAAE,EAAA,oBAAAA,IAOExD,KAAAyD,OAAsB,KAEtBzD,KAAA0D,MAAqBrB,EAAAsB,YAAYC,KAm4BnC,OAh4BEJ,EAAAvB,UAAA4B,GAAA,SAAGC,GAA2B,OAAQ9D,KAAK0D,MAAQI,IAASA,GAE5DN,EAAAvB,UAAA8B,MAAA,SAAMD,GAA2B,OAA8B,IAAtB9D,KAAK0D,MAAQI,IAEtDN,EAAAvB,UAAA+B,IAAA,SAAIF,GAA2B9D,KAAK0D,OAASI,GAItCN,EAAAS,WAAP,SACErD,EACAsD,EACAC,EACAC,GAEA,IAAIC,EAAO,IAAIC,EAKf,OAJAD,EAAKD,MAAQA,EACbC,EAAKzD,KAAOA,EAAMA,EAAK6C,OAASY,EAChCA,EAAKH,cAAgBA,EAAmBA,GAAeK,GAAUL,EAAeG,GAChFA,EAAKF,WAAaA,EACXE,GAGFb,EAAAgB,kBAAP,SACEJ,GAEA,OAAOZ,EAAKS,WACVT,EAAKiB,2BAA2B,GAAIL,GACpC,MACA,EACAA,IAIGZ,EAAAkB,oBAAP,SACE9D,EACA+D,EACAP,GAEA,IAAIQ,EAAO,IAAIC,EAIf,OAHAD,EAAKR,MAAQA,EACbQ,EAAKhE,KAAOA,EAAMA,EAAK6C,OAASmB,EAChCA,EAAKD,YAAcA,EAAiBA,IAAaA,EAAYlB,OAASmB,GAC/DA,GAGFpB,EAAAsB,gBAAP,SACElE,EACAyD,EACAU,EACAnC,EACAwB,GAEA,IAAIQ,EAAO,IAAII,EAMf,OALAJ,EAAKR,MAAQA,EACbQ,EAAKhE,KAAOA,EAAMA,EAAK6C,OAASmB,EAChCA,EAAKP,KAAOA,EAAUA,IAAMA,EAAKZ,OAASmB,GAC1CA,EAAKG,YAAcA,EAAiBA,IAAaA,EAAYtB,OAASmB,GACtEA,EAAKK,cAAgBrC,EACdgC,GAGFpB,EAAA0B,gBAAP,SACEC,EACAC,EACAC,EACAlB,EACAC,GAEA,IAAIkB,EAAM,IAAIC,EAMd,OALAD,EAAIlB,MAAQA,EACZkB,EAAIH,WAAaA,EAAYZ,GAAUY,EAAYG,GACnDA,EAAIF,WAAaA,EAAYA,EAAW3B,OAAS6B,EACjDA,EAAID,iBAAmBA,EAAsBA,IAAkBA,EAAiB5B,OAAS6B,GACzFA,EAAInB,WAAaA,EACVmB,GAKF9B,EAAAgC,gBAAP,SACE5E,EACA6E,EACArB,GAEA,IAAIsB,EAAO,IAAIC,EAKf,OAJAD,EAAKtB,MAAQA,EACbsB,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKE,UAAYH,EAAUA,GAAMlB,GAAUkB,EAAMC,GACjDA,EAAKG,cAAgBC,EAAoBlF,GAClC8E,GAGFlC,EAAAuC,cAAP,SACEC,EACApD,EACAwB,GAEA,IAAI6B,EAAO,IAAIC,EAIf,OAHAD,EAAK7B,MAAQA,EACb6B,EAAKE,YAAcvD,EACnBqD,EAAKD,KAAOA,EACLC,GAKFzC,EAAAiB,2BAAP,SACE7D,EACAwD,GAEA,IAAIgC,EAAO,IAAIC,EAGf,OAFAD,EAAKhC,MAAQA,EACbgC,EAAKJ,KAAOpF,EACLwF,GAGF5C,EAAA8C,gCAAP,SACElC,GAEA,IAAIgC,EAAO,IAAIC,EAGf,OAFAD,EAAKhC,MAAQA,EACbgC,EAAKJ,KAAO,GACLI,GAGF5C,EAAA+C,6BAAP,SACEC,EACApC,GAEA,IAAIgC,EAAO,IAAIK,EAGf,OAFAL,EAAKhC,MAAQA,EACbgC,EAAKM,mBAAqBF,EA4sD9B,SAA4BG,EAAwBlD,GAClD,IAAK,IAAIpD,EAAI,EAAGuG,EAAID,EAAME,OAAQxG,EAAIuG,IAAKvG,EAAG,CAC5C,IAAI4F,EAAOU,EAAMtG,GACb4F,IAAMA,EAAKxC,OAASA,IA/sDYqD,CAAmBN,EAAUJ,GAC1DA,GAGF5C,EAAAuD,0BAAP,SACEC,EACAC,EACAC,EACA9C,GAEA,IAAIgC,EAAO,IAAIe,EAKf,OAJAf,EAAKhC,MAAQA,EACbgC,EAAKY,cAAgBA,EACrBZ,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKc,OAASA,EAAQA,EAAOzD,OAAS2C,EAC/BA,GAGF5C,EAAA4D,uBAAP,SACEC,EACAC,EACAC,EACAnD,GAEA,IAAIgC,EAAO,IAAIoB,EAKf,OAJApB,EAAKhC,MAAQA,EACbgC,EAAKiB,SAAWA,EAChBjB,EAAKkB,KAAOA,EAAMA,EAAK7D,OAAS2C,EAChCA,EAAKmB,MAAQA,EAAOA,EAAM9D,OAAS2C,EAC5BA,GAGF5C,EAAAiE,qBAAP,SACER,EACAS,EACAjC,EACArB,GAEA,IAAIgC,EAAO,IAAIuB,EAKf,OAJAvB,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKlC,cAAgBwD,EAAcA,GAAUnD,GAAUmD,EAAUtB,GACjEA,EAAKR,UAAYH,EAAMlB,GAAUkB,EAAMW,GAChCA,GAGF5C,EAAAoE,sBAAP,SACEC,GAEA,IAAIzB,EAAO,IAAI0B,EAGf,OAFA1B,EAAKhC,MAAQyD,EAAYzD,MACzBgC,EAAKyB,YAAcA,EACZzB,GAGF5C,EAAAuE,sBAAP,SACEC,EACA5D,GAEA,IAAIgC,EAAO,IAAI6B,EAGf,OAFA7B,EAAKhC,MAAQA,EACbgC,EAAK4B,YAAcA,EAAazD,GAAUyD,EAAa5B,GAChDA,GAGF5C,EAAA0E,4BAAP,SACE9D,GAEA,IAAIgC,EAAO,IAAI+B,EAEf,OADA/B,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAA4E,8BAAP,SACEnB,EACAoB,EACAjE,GAEA,IAAIgC,EAAO,IAAIkC,EAIf,OAHAlC,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKmC,kBAAoBF,EAASA,EAAQ5E,OAAS2C,EAC5CA,GAGF5C,EAAAgF,sBAAP,SACEpE,GAEA,IAAIgC,EAAO,IAAIqC,EAEf,OADArC,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAkF,6BAAP,SACEpH,EACA8C,GAEA,IAAIgC,EAAO,IAAIuC,EAGf,OAFAvC,EAAKhC,MAAQA,EACbgC,EAAK9E,MAAQA,EACN8E,GAGF5C,EAAAoF,yBAAP,SACEf,GAEA,IAAIzB,EAAO,IAAIyC,EAIf,OAHAzC,EAAK1C,MAAQmE,EAAYnE,MAAQrB,EAAAsB,YAAYmF,MAC7C1C,EAAKhC,MAAQyD,EAAYzD,MACzBgC,EAAKyB,YAAcA,EACZzB,GAGF5C,EAAAuF,2BAAP,SACE9B,EACA+B,EACA5E,GAEA,IAAIgC,EAAO,IAAI6C,EAIf,OAHA7C,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAK4C,OAASA,EAAQA,EAAOvF,OAAS2C,EAC/BA,GAGF5C,EAAA0F,+BAAP,SACE5H,EACA8C,GAEA,IAAIgC,EAAO,IAAI+C,EAGf,OAFA/C,EAAKhC,MAAQA,EACbgC,EAAK9E,MAAQA,EACN8E,GAGF5C,EAAA4F,oBAAP,SACEnC,EACAS,EACAjC,EACArB,GAEA,IAAIgC,EAAO,IAAIiD,EAKf,OAJAjD,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKlC,cAAgBwD,EAAcA,GAAUnD,GAAUmD,EAAUtB,GACjEA,EAAKR,UAAYH,EAAMlB,GAAUkB,EAAMW,GAChCA,GAGF5C,EAAA8F,qBAAP,SACElF,GAEA,IAAIgC,EAAO,IAAImD,EAEf,OADAnD,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAgG,8BAAP,SACEC,EACAC,EACAtF,GAEA,IAAIgC,EAAO,IAAIuD,EAIf,OAHAvD,EAAKhC,MAAQA,EACbgC,EAAKqD,MAAQA,EACbrD,EAAKsD,OAASA,EACPtD,GAGF5C,EAAAoG,8BAAP,SACE3C,EACA7C,GAEA,IAAIgC,EAAO,IAAIyD,EAGf,OAFAzD,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAC3CA,GAGF5C,EAAAsG,+BAAP,SACE7C,EACAjF,EACAoC,GAEA,IAAIgC,EAAO,IAAI2D,EAIf,OAHA3D,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKpE,SAAWA,EAAUA,EAASyB,OAAS2C,EACrCA,GAGF5C,EAAAwG,8BAAP,SACEC,EACAvG,EACAU,GAEA,IAAIgC,EAAO,IAAI8D,EAIf,OAHA9D,EAAKhC,MAAQA,EACbgC,EAAK6D,QAAUA,EACf7D,EAAK+D,aAAezG,EACb0C,GAGF5C,EAAA4G,wBAAP,SACEC,EACAC,EACAC,EACAnG,GAEA,IAAIgC,EAAO,IAAIoE,EAKf,OAJApE,EAAKhC,MAAQA,EACbgC,EAAKiE,UAAYA,EAAWA,EAAU5G,OAAS2C,EAC/CA,EAAKkE,OAASA,EAAQA,EAAO7G,OAAS2C,EACtCA,EAAKmE,OAASA,EAAQA,EAAO9G,OAAS2C,EAC/BA,GAGF5C,EAAAiH,8BAAP,SACEnJ,EACA8C,GAEA,IAAIgC,EAAO,IAAIsE,EAGf,OAFAtE,EAAKhC,MAAQA,EACbgC,EAAK9E,MAAQA,EACN8E,GAGF5C,EAAAmH,sBAAP,SACEvG,GAEA,IAAIgC,EAAO,IAAIwE,EAEf,OADAxE,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAqH,qBAAP,SACEzG,GAEA,IAAIgC,EAAO,IAAI0E,EAEf,OADA1E,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAuH,qBAAP,SACE3G,GAEA,IAAIgC,EAAO,IAAI4E,EAEf,OADA5E,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAyH,6BAAP,SACE5D,EACA6D,EACA9G,GAEA,IAAIgC,EAAO,IAAI+E,EAIf,OAHA/E,EAAKhC,MAAQA,EACbgC,EAAKiB,SAAWA,EAChBjB,EAAK8E,QAAUA,EAASA,EAAQzH,OAAS2C,EAClCA,GAGF5C,EAAA4H,4BAAP,SACE/D,EACA6D,EACA9G,GAEA,IAAIgC,EAAO,IAAIiF,EAIf,OAHAjF,EAAKhC,MAAQA,EACbgC,EAAKiB,SAAWA,EAChBjB,EAAK8E,QAAUA,EAASA,EAAQzH,OAAS2C,EAClCA,GAKF5C,EAAA8H,qBAAP,SACEC,EACAnH,GAEA,IAAIsB,EAAO,IAAI8F,GAGf,OAFA9F,EAAKtB,MAAQA,EACbsB,EAAK6F,WAAaA,EAAYhH,GAAUgH,EAAY7F,GAC7CA,GAGFlC,EAAAiI,qBAAP,SACEC,EACAtH,GAEA,IAAIsB,EAAO,IAAIiG,GAGf,OAFAjG,EAAKtB,MAAQA,EACbsB,EAAKgG,MAAQA,EAAWA,IAAOA,EAAMjI,OAASiC,GACvCA,GAGFlC,EAAAoI,uBAAP,SACEC,EACAC,EACAnH,EACAoH,EACAC,EACAC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIwG,GASf,OARAxG,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOiL,EAAYA,EAAWpI,OAASiC,EAC5CA,EAAKoG,eAAiBA,EAAgBvH,GAAUuH,EAAgBpG,GAChEA,EAAKf,YAAcA,EAAiBA,IAAaA,EAAYlB,OAASiC,GACtEA,EAAKqG,gBAAkBA,EAAqBA,GAAiBxH,GAAUwH,EAAiBrG,GACxFA,EAAKsG,QAAUA,EAASzH,GAAUyH,EAAStG,GAC3CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAA2I,wBAAP,SACET,EACAtH,GAEA,IAAIsB,EAAO,IAAI0G,GAGf,OAFA1G,EAAKtB,MAAQA,EACbsB,EAAKgG,MAAQA,EAAWA,IAAOA,EAAMjI,OAASiC,GACvCA,GAGFlC,EAAA6I,kBAAP,SACEC,EACAjC,EACAjG,GAEA,IAAIsB,EAAO,IAAI6G,GAIf,OAHA7G,EAAKtB,MAAQA,EACbsB,EAAK4G,UAAYA,EAAWA,EAAU7I,OAASiC,EAC/CA,EAAK2E,UAAYA,EAAWA,EAAU5G,OAASiC,EACxCA,GAGFlC,EAAAgJ,qBAAP,SACEpI,GAEA,IAAIsB,EAAO,IAAI+G,GAEf,OADA/G,EAAKtB,MAAQA,EACNsB,GAGFlC,EAAAkJ,sBAAP,SACE9L,EACAoL,EACAC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIiH,GAMf,OALAjH,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKgE,OAASsC,EAASzH,GAAUyH,EAAStG,GAC1CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAoJ,2BAAP,SACEhM,EACAU,EACAoC,EACAU,GAEA,IAAIsB,EAAO,IAAImH,GAKf,OAJAnH,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKpE,MAAQA,EAAWA,IAAOA,EAAMmC,OAASiC,GACvCA,GAGFlC,EAAAsJ,sBAAP,SACEd,EACAe,EACArJ,EACAU,GAEA,IAAIsB,EAAO,IAAIsH,GAKf,GAJAtH,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAKsG,QAAUA,EAAaA,GAASzH,GAAUyH,EAAStG,GACxDA,EAAKqH,KAAOA,EACRA,EAAM,CACR,IAAIE,EAAiBvK,EAAAwK,cAAcH,EAAKzL,OACpCyL,EAAKzL,MAAM6L,WAAW,KACxBzH,EAAKuH,eAAiBvK,EAAA0K,YACpBH,EACA7I,EAAMiJ,OAAOJ,gBAGfvH,EAAKuH,eAAiBA,EAExBvH,EAAK4H,aAAeC,GAAmB7H,EAAKuH,qBAE5CvH,EAAKuH,eAAiB,KACtBvH,EAAK4H,aAAe,KAEtB,OAAO5H,GAGFlC,EAAAgK,4BAAP,SACE5M,EACA6M,EACArJ,GAEA,IAAIsB,EAAO,IAAIgI,GAIf,OAHAhI,EAAKtB,MAAQA,EACbsB,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAK+H,aAAeA,EAAcA,EAAahK,OAASiC,EACjDA,GAGFlC,EAAAmK,mBAAP,SACE/M,EACA6M,EACArJ,GAEA,IAAIQ,EAAO,IAAIgJ,GASf,OARAhJ,EAAKR,MAAQA,EACbQ,EAAKhE,KAAOA,EAAMA,EAAK6C,OAASmB,EAC3B6I,EAGHA,EAAahK,OAASmB,EAFtB6I,EAAe7M,EAIjBgE,EAAK6I,aAAeA,EACb7I,GAGFpB,EAAAqK,0BAAP,SACE5G,GAEA,IAAIvB,EAAO,IAAIoI,GAGf,OAFApI,EAAKtB,MAAQ6C,EAAW7C,MACxBsB,EAAKuB,WAAaA,EAAYA,EAAWxD,OAASiC,EAC3CA,GAGFlC,EAAAuK,kBAAP,SACE1D,EACA2D,EACAC,EACA7J,GAEA,IAAIsB,EAAO,IAAIwI,GAKf,OAJAxI,EAAKtB,MAAQA,EACbsB,EAAK2E,UAAYA,EAAWA,EAAU5G,OAASiC,EAC/CA,EAAKsI,OAASA,EAAQA,EAAOvK,OAASiC,EACtCA,EAAKuI,QAAUA,EAAaA,IAASA,EAAQxK,OAASiC,GAC/CA,GAGFlC,EAAA2K,sBAAP,SACEC,EACArB,EACA3I,GAEA,IAAIsB,EAAO,IAAI2I,GACf3I,EAAKtB,MAAQA,EACbsB,EAAK4I,aAAeF,EAAWA,GAAO7J,GAAU6J,EAAO1I,GACvDA,EAAK6I,cAAgB,KACrB7I,EAAKqH,KAAOA,EACZ,IAAIE,EAAiBvK,EAAAwK,cAAcH,EAAKzL,OAaxC,OAZIyL,EAAKzL,MAAM6L,WAAW,KACxBzH,EAAKuH,eAAiBvK,EAAA0K,YACpBH,EACA7I,EAAMiJ,OAAOJ,iBAGVA,EAAeE,WAAW9K,EAAAmM,kBAC7BvB,EAAiB5K,EAAAmM,eAAiBvB,GAEpCvH,EAAKuH,eAAiBA,GAExBvH,EAAK4H,aAAeC,GAAmB7H,EAAKuH,gBACrCvH,GAGFlC,EAAAiL,kCAAP,SACE5C,EACAkB,EACA3I,GAEA,IAAIsB,EAAO,IAAI2I,GAUf,OATA3I,EAAKtB,MAAQA,EACbsB,EAAK4I,aAAe,KACpB5I,EAAK6I,cAAgB1C,EACrBnG,EAAKqH,KAAOA,EACZrH,EAAKuH,eAAiBvK,EAAA0K,YACpB1K,EAAAwK,cAAcH,EAAKzL,OACnB8C,EAAMiJ,OAAOJ,gBAEfvH,EAAK4H,aAAeC,GAAmB7H,EAAKuH,gBACrCvH,GAGFlC,EAAAkL,wBAAP,SACEjB,EACA7M,EACAwD,GAEA,IAAIQ,EAAO,IAAI+J,GASf,OARA/J,EAAKR,MAAQA,EACbQ,EAAK6I,aAAeA,EAAcA,EAAahK,OAASmB,EACnDhE,EAGHA,EAAK6C,OAASmB,EAFdhE,EAAO6M,EAIT7I,EAAKhE,KAAOA,EACLgE,GAGFpB,EAAAoL,2BAAP,SACEhO,EACAkL,EACAnH,EACAqH,EACAC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAImJ,GAQf,OAPAnJ,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKoG,eAAiBA,EAAoBA,GAAgBvH,GAAUuH,EAAgBpG,GACpFA,EAAKf,YAAcA,EAAiBA,IAAaA,EAAYlB,OAASiC,GACtEA,EAAKsG,QAAUA,EAASzH,GAAUyH,EAAStG,GAC3CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAsL,uBAAP,SACElO,EACAyD,EACAU,EACAkH,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIqJ,GAOf,OANArJ,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKrB,KAAOA,EAAUA,IAAMA,EAAKZ,OAASiC,GAC1CA,EAAKX,YAAcA,EAAiBA,IAAaA,EAAYtB,OAASiC,GACtEA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAwL,mBAAP,SACEjK,EACAsF,EACA4E,EACA3C,EACAlI,GAEA,IAAIsB,EAAO,IAAIwJ,GAMf,OALAxJ,EAAKtB,MAAQA,EACbsB,EAAKX,YAAcA,EAAiBA,IAAaA,EAAYtB,OAASiC,GACtEA,EAAK2E,UAAYA,EAAeA,IAAWA,EAAU5G,OAASiC,GAC9DA,EAAKuJ,YAAcA,EAAiBA,IAAaA,EAAYxL,OAASiC,GACtEA,EAAK4G,UAAYA,EAAWA,EAAU7I,OAASiC,EACxCA,GAGFlC,EAAA2L,0BAAP,SACEvO,EACAkL,EACAsD,EACAC,EACApD,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAI4J,GAQf,OAPA5J,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKoG,eAAiBA,EAAoBA,GAAgBvH,GAAUuH,EAAgBpG,GACpFA,EAAK0J,UAAYA,EAAWA,EAAU3L,OAASiC,EAC/CA,EAAK2J,KAAOA,EAAUA,IAAMA,EAAK5L,OAASiC,GAC1CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAA+L,wBAAP,SACE3O,EACAkL,EACAsD,EACAC,EACApD,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAI8J,GAQf,OAPA9J,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKoG,eAAiBA,EAAoBA,GAAgBvH,GAAUuH,EAAgBpG,GACpFA,EAAK0J,UAAYA,EAAWA,EAAU3L,OAASiC,EAC/CA,EAAK2J,KAAOA,EAAUA,IAAMA,EAAK5L,OAASiC,GAC1CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAiM,2BAAP,SACE7O,EACAoL,EACAC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIgK,GAMf,OALAhK,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKsG,QAAUA,EAASzH,GAAUyH,EAAStG,GAC3CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAmM,sBAAP,SACErO,EACA8C,GAEA,IAAIsB,EAAO,IAAIkK,GAGf,OAFAlK,EAAKtB,MAAQA,EACbsB,EAAKpE,MAAQA,EAAWA,IAAOA,EAAMmC,OAASiC,GACvCA,GAGFlC,EAAAqM,sBAAP,SACExF,EACAyF,EACA1L,GAEA,IAAIsB,EAAO,IAAIqK,GAIf,OAHArK,EAAKtB,MAAQA,EACbsB,EAAK2E,UAAYA,EAAWA,EAAU5G,OAASiC,EAC/CA,EAAKoK,MAAQA,EAAOvL,GAAUuL,EAAOpK,GAC9BA,GAGFlC,EAAAwM,iBAAP,SACEtE,EACAH,EACAnH,GAEA,IAAIQ,EAAO,IAAIqL,GAIf,OAHArL,EAAKR,MAAQA,EACbQ,EAAK8G,MAAQA,EAAWA,IAAOA,EAAMjI,OAASmB,GAC9CA,EAAK2G,WAAaA,EAAYhH,GAAUgH,EAAY3G,GAC7CA,GAGFpB,EAAA0M,qBAAP,SACE5O,EACA8C,GAEA,IAAIsB,EAAO,IAAIyK,GAGf,OAFAzK,EAAKtB,MAAQA,EACbsB,EAAKpE,MAAQA,EAAOA,EAAMmC,OAASiC,EAC5BA,GAGFlC,EAAA4M,mBAAP,SACE7E,EACA8E,EACAC,EACAC,EACAnM,GAEA,IAAIsB,EAAO,IAAI8K,GASf,OARA9K,EAAKtB,MAAQA,EACbsB,EAAK6F,WAAaA,EAAYhH,GAAUgH,EAAY7F,GACpDA,EAAK2K,cAAgBA,EACjBA,IAAeA,EAAc5M,OAASiC,GAC1CA,EAAK4K,gBAAkBA,EACnBA,GAAiB/L,GAAU+L,EAAiB5K,GAChDA,EAAK6K,kBAAoBA,EACrBA,GAAmBhM,GAAUgM,EAAmB7K,GAC7CA,GAGFlC,EAAAiN,sBAAP,SACE7P,EACAkL,EACA4E,EACAzE,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIiL,GAOf,OANAjL,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKoG,eAAiBA,EAAoBA,GAAgBvH,GAAUuH,EAAgBpG,GACpFA,EAAKrB,KAAOqM,EAAOA,EAAMjN,OAASiC,EAClCA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAoN,wBAAP,SACEtC,EACArC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAImL,GAKf,OAJAnL,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK4I,aAAeA,EAAc/J,GAAU+J,EAAc5I,GAC1DA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAsN,0BAAP,SACElQ,EACAyD,EACAU,EACAkH,EACAvI,EACAU,GAEA,IAAIQ,EAAO,IAAImM,GAOf,OANAnM,EAAKR,MAAQA,EACbQ,EAAKlB,MAAQA,EACbkB,EAAKhE,KAAOA,EAAMA,EAAK6C,OAASmB,EAChCA,EAAKP,KAAOA,EAAUA,IAAMA,EAAKZ,OAASmB,GAC1CA,EAAKG,YAAcA,EAAiBA,IAAaA,EAAYtB,OAASmB,GACtEA,EAAKqH,WAAaA,EACXrH,GAGFpB,EAAAwN,oBAAP,SACE/J,EACA7C,GAEA,IAAIsB,EAAO,IAAIuL,GAGf,OAFAvL,EAAKtB,MAAQA,EACbsB,EAAKuB,WAAaA,EACXvB,GAGFlC,EAAA0N,qBAAP,SACE7G,EACAiC,EACAlI,GAEA,IAAIsB,EAAO,IAAIyL,GAIf,OAHAzL,EAAKtB,MAAQA,EACbsB,EAAK2E,UAAYA,EAAWA,EAAU5G,OAASiC,EAC/CA,EAAK4G,UAAYA,EAAWA,EAAU7I,OAASiC,EACxCA,GAEXlC,EA54BA,GAAsB9D,EAAA8D,OAg5BtB,IAAA4N,EAAA,SAAAC,GAAA,SAAAD,mDAKA,OAL6CE,EAAAF,EAAAC,GAK7CD,EALA,CAA6C5N,GAAvB9D,EAAA0R,iBAQtB,IAAA9M,EAAA,SAAA+M,GAAA,SAAA/M,IAAA,IAAAiN,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASgP,OAMlB,OAP8BH,EAAAhN,EAAA+M,GAO9B/M,EAPA,CAA8B8M,GAAjB1R,EAAA4E,WAUb,IAAAO,EAAA,SAAAwM,GAAA,SAAAxM,IAAA,IAAA0M,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASiP,gBAMlB,OAPuCJ,EAAAzM,EAAAwM,GAOvCxM,EAPA,CAAuCrB,GAA1B9D,EAAAmF,oBAUb,SAAY8M,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,eANF,CAAYjS,EAAAiS,gBAAAjS,EAAAiS,mBAUZ,IAAA3M,EAAA,SAAAqM,GAAA,SAAArM,IAAA,IAAAuM,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASmP,UAWhBL,EAAAM,yBAAoD,OACtD,OAbmCP,EAAAtM,EAAAqM,GAanCrM,EAbA,CAAmCxB,GAAtB9D,EAAAsF,gBAgBb,IAcY8M,EAdZvM,EAAA,SAAA8L,GAAA,SAAA9L,IAAA,IAAAgM,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASsP,YAQlB,OATmCT,EAAA/L,EAAA8L,GASnC9L,EATA,CAAmC6L,GAiCnC,SAAgBtL,EAAoBlF,GAElC,GAAIA,EAAKgC,MAAQH,EAASS,WAAY,CACpC,IAAI8O,EAAiCpR,EAAMoF,KAE3C,OADAiM,OAAOD,EAAQnL,QACPmL,EAAQE,WAAW,IACzB,QACE,GAAe,UAAXF,EAAqB,OAAOF,EAAcK,OAC9C,MAEF,QACE,GAAe,WAAXH,EAAsB,OAAOF,EAAcM,QAC/C,MAEF,SACE,GAAe,YAAXJ,EAAuB,OAAOF,EAAcO,SAElD,SACE,GAAe,YAAXL,EAAuB,OAAOF,EAAcQ,SAChD,MAEF,SACE,GAAe,UAAXN,EAAqB,OAAOF,EAAcS,OAC9C,MAEF,SACE,GAAe,UAAXP,EAAqB,OAAOF,EAAcU,OAC9C,GAAe,UAAXR,EAAqB,OAAOF,EAAcW,OAC9C,MAEF,SACE,GAAe,YAAXT,EAAuB,OAAOF,EAAcY,SAChD,MAEF,SACE,GAAe,aAAXV,EAAwB,OAAOF,EAAca,UACjD,MAEF,SACE,GAAe,UAAXX,EAAqB,OAAOF,EAAcc,OAC9C,MAEF,SACE,GAAe,aAAXZ,EAAwB,OAAOF,EAAce,gBAIhD,GACLjS,EAAKgC,MAAQH,EAASa,gBACK1C,EAAMqG,WAAWrE,MAAQH,EAASS,WAC7D,CACI8O,EAA4DpR,EAAMqG,WAAYjB,KAClFiM,OAAOD,EAAQnL,QACf,IAAIiM,EAAqClS,EAAMoB,SAASgE,KAGxD,GAFAiM,OAAOa,EAAQjM,QAEA,YAAXmL,EACF,OAAQc,EAAQZ,WAAW,IACzB,QACE,GAAe,UAAXY,EAAqB,OAAOhB,EAAciB,gBAC9C,MAEF,SACE,OAAQD,GACN,IAAK,SAAU,OAAOhB,EAAckB,gBACpC,IAAK,UAAW,OAAOlB,EAAcmB,mBAO/C,OAAOnB,EAAcoB,OAzGVxT,EAAA6F,gBAcb,SAAYuM,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,uCACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,sBAfF,CAAYA,EAAApS,EAAAoS,gBAAApS,EAAAoS,mBAmBZpS,EAAAoG,sBA4EA,IAAAH,EAAA,SAAA0L,GAAA,SAAA1L,IAAA,IAAA4L,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS0Q,YAQlB,OATmC7B,EAAA3L,EAAA0L,GASnC1L,EATA,CAAmCnC,GAAtB9D,EAAAiG,gBAYb,SAAYyN,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,iBANF,CAAY1T,EAAA0T,cAAA1T,EAAA0T,iBAUZ,IAAAlN,EAAA,SAAAmL,GAAA,SAAAnL,IAAA,IAAAqL,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS4Q,UAMlB,OAPiC/B,EAAApL,EAAAmL,GAOjCnL,EAPA,CAAiC1C,GAApB9D,EAAAwG,cAYb,IAAAoN,EAAA,SAAAjC,GAAA,SAAAiC,mDAAgD,OAAPhC,EAAAgC,EAAAjC,GAAOiC,EAAhD,CAAyC9P,GAAnB9D,EAAA4T,aAGtB,IAQYC,EARZlN,EAAA,SAAAgL,GAAA,SAAAhL,IAAA,IAAAkL,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASS,aAIlB,OAL0CoO,EAAAjL,EAAAgL,GAK1ChL,EALA,CAA0CiN,GAA7B5T,EAAA2G,uBAQb,SAAYkN,GACVA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,mBANF,CAAYA,EAAA7T,EAAA6T,cAAA7T,EAAA6T,iBAUZ,IAAAC,EAAA,SAAAnC,GAAA,SAAAmC,IAAA,IAAAjC,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASI,UAIlB,OALgDyO,EAAAkC,EAAAnC,GAKhDmC,EALA,CAAgDF,GAA1B5T,EAAA8T,oBAQtB,IAAA/M,EAAA,SAAA4K,GAAA,SAAA5K,IAAA,IAAA8K,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAAkC,YAAcF,EAAYG,QAI5B,OAL4CpC,EAAA7K,EAAA4K,GAK5C5K,EALA,CAA4C+M,GAA/B9T,EAAA+G,yBAQb,SAAYkN,GACVA,IAAA,mBACAA,IAAA,WAFF,CAAYjU,EAAAiU,gBAAAjU,EAAAiU,mBAMZ,IAAAxM,EAAA,SAAAkK,GAAA,SAAAlK,IAAA,IAAAoK,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASmR,YAQlB,OATyCtC,EAAAnK,EAAAkK,GASzClK,EATA,CAAyCmM,GAA5B5T,EAAAyH,sBAYb,IAAAK,EAAA,SAAA6J,GAAA,SAAA7J,IAAA,IAAA+J,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASoR,SAQlB,OATsCvC,EAAA9J,EAAA6J,GAStC7J,EATA,CAAsC8L,GAAzB5T,EAAA8H,mBAYb,IAAAG,EAAA,SAAA0J,GAAA,SAAA1J,IAAA,IAAA4J,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASU,OAQlB,OAToCmO,EAAA3J,EAAA0J,GASpC1J,EATA,CAAoC2L,GAAvB5T,EAAAiI,iBAYb,IAAAG,EAAA,SAAAuJ,GAAA,SAAAvJ,IAAA,IAAAyJ,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASqR,QAIlB,OALqCxC,EAAAxJ,EAAAuJ,GAKrCvJ,EALA,CAAqCwL,GAAxB5T,EAAAoI,kBAQb,IAAAG,EAAA,SAAAoJ,GAAA,SAAApJ,IAAA,IAAAsJ,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASsR,QAIlB,OALqCzC,EAAArJ,EAAAoJ,GAKrCpJ,EALA,CAAqCqL,GAAxB5T,EAAAuI,kBAQb,IAAAE,EAAA,SAAAkJ,GAAA,SAAAlJ,IAAA,IAAAoJ,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASuR,YAChBzC,EAAAvL,KAAO,gBACT,OAH2CsL,EAAAnJ,EAAAkJ,GAG3ClJ,EAHA,CAA2C9B,GAA9B3G,EAAAyI,wBAMb,IAAAG,EAAA,SAAA+I,GAAA,SAAA/I,IAAA,IAAAiJ,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASY,gBAMlB,OAP6CiO,EAAAhJ,EAAA+I,GAO7C/I,EAPA,CAA6CgL,GAAhC5T,EAAA4I,0BAUb,IAAAK,EAAA,SAAA0I,GAAA,SAAA1I,IAAA,IAAA4I,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAAkC,YAAcF,EAAYU,QAI5B,OAL4C3C,EAAA3I,EAAA0I,GAK5C1I,EALA,CAA4C6K,GAA/B9T,EAAAiJ,yBAQb,IAAAE,EAAA,SAAAwI,GAAA,SAAAxI,IAAA,IAAA0I,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASyR,WAIlB,OALwC5C,EAAAzI,EAAAwI,GAKxCxI,EALA,CAAwCyK,GAA3B5T,EAAAmJ,qBAQb,IAAAI,EAAA,SAAAoI,GAAA,SAAApI,IAAA,IAAAsI,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS0R,aAMlB,OAP0C7C,EAAArI,EAAAoI,GAO1CpI,EAPA,CAA0CqK,GAA7B5T,EAAAuJ,uBAUb,IAAAE,EAAA,SAAAkI,GAAA,SAAAlI,IAAA,IAAAoI,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAAkC,YAAcF,EAAYa,UAI5B,OAL8C9C,EAAAnI,EAAAkI,GAK9ClI,EALA,CAA8CqK,GAAjC9T,EAAAyJ,2BAQb,IAAAE,EAAA,SAAAgI,GAAA,SAAAhI,IAAA,IAAAkI,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS4R,MAClB,OAFmC/C,EAAAjI,EAAAgI,GAEnChI,EAFA,CAAmC1B,GAAtBjI,EAAA2J,gBAKb,IAAAE,EAAA,SAAA8H,GAAA,SAAA9H,IAAA,IAAAgI,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASK,KAChByO,EAAAvL,KAAO,SACT,OAHoCsL,EAAA/H,EAAA8H,GAGpC9H,EAHA,CAAoClD,GAAvB3G,EAAA6J,iBAMb,IAAAI,EAAA,SAAA0H,GAAA,SAAA1H,IAAA,IAAA4H,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAAkC,YAAcF,EAAYe,SAM5B,OAP6ChD,EAAA3H,EAAA0H,GAO7C1H,EAPA,CAA6C6J,GAAhC9T,EAAAiK,0BAUb,IAAAE,EAAA,SAAAwH,GAAA,SAAAxH,IAAA,IAAA0H,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS8R,gBAIlB,OAL6CjD,EAAAzH,EAAAwH,GAK7CxH,EALA,CAA6CyJ,GAAhC5T,EAAAmK,0BAQb,IAAAE,EAAA,SAAAsH,GAAA,SAAAtH,IAAA,IAAAwH,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASa,iBAMlB,OAP8CgO,EAAAvH,EAAAsH,GAO9CtH,EAPA,CAA8CuJ,GAAjC5T,EAAAqK,2BAUb,IAAAG,EAAA,SAAAmH,GAAA,SAAAnH,IAAA,IAAAqH,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAAkC,YAAcF,EAAYiB,SAM5B,OAP6ClD,EAAApH,EAAAmH,GAO7CnH,EAPA,CAA6CsJ,GAAhC9T,EAAAwK,0BAUb,IAAAM,EAAA,SAAA6G,GAAA,SAAA7G,IAAA,IAAA+G,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASgS,UAQlB,OATuCnD,EAAA9G,EAAA6G,GASvC7G,EATA,CAAuC8I,GAA1B5T,EAAA8K,oBAYb,IAAAE,EAAA,SAAA2G,GAAA,SAAA3G,IAAA,IAAA6G,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAAkC,YAAcF,EAAYmB,SAI5B,OAL6CpD,EAAA5G,EAAA2G,GAK7C3G,EALA,CAA6C8I,GAAhC9T,EAAAgL,0BAQb,IAAAE,EAAA,SAAAyG,GAAA,SAAAzG,IAAA,IAAA2G,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASW,MAChBmO,EAAAvL,KAAO,UAOT,OATqCsL,EAAA1G,EAAAyG,GASrCzG,EATA,CAAqCvE,GAAxB3G,EAAAkL,kBAYb,IAAAE,EAAA,SAAAuG,GAAA,SAAAvG,IAAA,IAAAyG,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASkS,KAChBpD,EAAAvL,KAAO,SACT,OAHoCsL,EAAAxG,EAAAuG,GAGpCvG,EAHA,CAAoCzE,GAAvB3G,EAAAoL,iBAMb,IAAAE,EAAA,SAAAqG,GAAA,SAAArG,IAAA,IAAAuG,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASM,KAChBwO,EAAAvL,KAAO,SACT,OAHoCsL,EAAAtG,EAAAqG,GAGpCrG,EAHA,CAAoC3E,GAAvB3G,EAAAsL,iBAMb,IAAAvC,EAAA,SAAA4I,GAAA,SAAA5I,IAAA,IAAA8I,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASO,MAChBuO,EAAAvL,KAAO,UACT,OAHqCsL,EAAA7I,EAAA4I,GAGrC5I,EAHA,CAAqCpC,GAAxB3G,EAAA+I,kBAMb,IAAAmM,EAAA,SAAAvD,GAAA,SAAAuD,mDAMA,OAN8CtD,EAAAsD,EAAAvD,GAM9CuD,EANA,CAA8CtB,GAAxB5T,EAAAkV,kBAStB,IAAAzJ,EAAA,SAAAkG,GAAA,SAAAlG,IAAA,IAAAoG,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASoS,eAClB,OAF4CvD,EAAAnG,EAAAkG,GAE5ClG,EAFA,CAA4CyJ,GAA/BlV,EAAAyL,yBAKb,IAAAE,EAAA,SAAAgG,GAAA,SAAAhG,IAAA,IAAAkG,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASqS,cAClB,OAF2CxD,EAAAjG,EAAAgG,GAE3ChG,EAFA,CAA2CuJ,GAA9BlV,EAAA2L,wBAMb3L,EAAAqV,gBAAA,SAAgCzI,GAC9B,IAAI7I,EAASwO,OAAO3F,EAAU7I,QAC9B,GAAIA,EAAOb,MAAQH,EAASuS,MAAO,CACjC,IAAIzJ,EAA8B9H,EAAQ8H,WAC1C,GAAIA,EAAWA,EAAW1E,OAAS,KAAOyF,EACxC,OAAQ2F,OAAOxO,EAAOA,QAAQb,MAC5B,KAAKH,EAASwS,oBACd,KAAKxS,EAASyS,kBAAmB,OAAO,GAI9C,OAAO,GAIT,IAGYC,EAHZC,EAAA,SAAA/D,GAAA,SAAA+D,mDAA+C,OAAP9D,EAAA8D,EAAA/D,GAAO+D,EAA/C,CAAwC5R,GAAlB9D,EAAA0V,YAGtB,SAAYD,GAEVA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,qBANF,CAAYA,EAAAzV,EAAAyV,aAAAzV,EAAAyV,gBAUZ,IAAAE,EAAA,SAAAhE,GAwBE,SAAAgE,EAAYpI,EAAwBjH,EAAcpD,GAAlD,IAAA2O,EACEF,EAAA7Q,KAAAR,OAAOA,KAxBTuR,EAAA3O,KAAOH,EAAS6S,OAChB/D,EAAA9N,OAAS,KAeT8N,EAAAgE,UAA8B,KAE9BhE,EAAAiE,gBAAuB,EAEvBjE,EAAAkE,YAAkC,KAKhClE,EAAKmE,WAAa9S,EAClB2O,EAAKtE,eAAiBA,EACtB,IAAIK,EAAeC,GAAmBgE,EAAKtE,gBAC3CsE,EAAKjE,aAAeA,EACpB,IAAIqI,EAAMrI,EAAasI,YAAYvT,EAAAwT,uBACnCtE,EAAKuE,WAAaH,GAAO,EAAIrI,EAAayI,UAAUJ,EAAM,GAAKrI,EAC/DiE,EAAKhG,WAAa,IAAIyK,MACtBzE,EAAKnN,MAAQ,IAAI9B,EAAAE,MAAM+O,EAAM,EAAGvL,EAAKa,QACrC0K,EAAKvL,KAAOA,IAOhB,OAzC4BsL,EAAA+D,EAAAhE,GAsC1BtQ,OAAAC,eAAIqU,EAAApT,UAAA,eAAJ,WAAsB,OAAOjC,KAAK0V,YAAcP,EAAWc,uCAE3DlV,OAAAC,eAAIqU,EAAApT,UAAA,iBAAJ,WAAwB,OAAOjC,KAAK0V,YAAcP,EAAWe,yCAC/Db,EAzCA,CAA4B7R,GAAf9D,EAAA2V,SA4Cb,IAAAc,EAAA,SAAA9E,GAAA,SAAA8E,IAAA,IAAA5E,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YAKEuR,EAAAtF,WAAqC,KAE3BsF,EAAA6E,+BAAgD,KAChD7E,EAAA8E,4BAA6C,OAwDzD,OAhEmD/E,EAAA6E,EAAA9E,GAWjDtQ,OAAAC,eAAImV,EAAAlU,UAAA,gCAAJ,WAIE,OAHKjC,KAAKoW,iCACRpW,KAAKoW,+BAAiCE,GAAmBtW,MAAM,IAE1DA,KAAKoW,gEAIdrV,OAAAC,eAAImV,EAAAlU,UAAA,6BAAJ,WAIE,OAHKjC,KAAKqW,8BACRrW,KAAKqW,4BAA8BC,GAAmBtW,MAAM,IAEvDA,KAAKqW,6DAIdtV,OAAAC,eAAImV,EAAAlU,UAAA,kBAAJ,WACE,IAAIwB,EAASzD,KAAKyD,OAClB,QAAKA,MAGDA,EAAOb,MAAQH,EAAS8T,YAAc9S,EAASA,EAAOA,UAGnDA,EAAOb,MAAQH,EAAS6S,yCAIjCvU,OAAAC,eAAImV,EAAAlU,UAAA,wBAAJ,WACE,IAAIwB,EAASzD,KAAKyD,OAClB,SAAKA,GAAWA,EAAOb,MAAQH,EAAS8T,YAAc9S,EAASA,EAAOA,WAGlEA,EAAOb,MAAQH,EAAS+T,qBACnBxW,KAAK6D,GAAGxB,EAAAsB,YAAY8S,SAAkChT,EAAQiT,iBAEnEjT,EAAOb,MAAQH,EAASkU,iBACnB3W,KAAK6D,GAAGxB,EAAAsB,YAAYiT,SAA8BnT,EAAQiT,iBAE5DjT,EAAOb,MAAQH,EAAS6S,QAAUtV,KAAK6D,GAAGxB,EAAAsB,YAAY8S,0CAI/DN,EAAAlU,UAAA4U,oBAAA,SAAoBC,GAIlB,OACEA,EAAOlW,KAAKoF,MAAQ8Q,EAAOrJ,aAAazH,MACxChG,KAAKoE,MAAMiJ,QAAUyJ,EAAO1S,MAAMiJ,SACjCrN,KAAK0W,kBAGZP,EAhEA,CAAmDf,GAA7B1V,EAAAyW,uBAmEtB,IAAAY,EAAA,SAAA1F,GAAA,SAAA0F,mDAMA,OAN+DzF,EAAAyF,EAAA1F,GAM/D0F,EANA,CAA+DZ,GAAzCzW,EAAAqX,mCAStB,IAAAvL,GAAA,SAAA6F,GAAA,SAAA7F,IAAA,IAAA+F,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASuS,QAIlB,OALoC1D,EAAA9F,EAAA6F,GAKpC7F,EALA,CAAoC4J,GAAvB1V,EAAA8L,kBAQb,IAAAG,GAAA,SAAA0F,GAAA,SAAA1F,IAAA,IAAA4F,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASuU,QAIlB,OALoC1F,EAAA3F,EAAA0F,GAKpC1F,EALA,CAAoCyJ,GAAvB1V,EAAAiM,kBAQb,IAAAO,GAAA,SAAAmF,GAAA,SAAAnF,IAAA,IAAAqF,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASkU,mBAelB,OAhBsCrF,EAAApF,EAAAmF,GAYpCtQ,OAAAC,eAAIkL,EAAAjK,UAAA,iBAAJ,WACE,IAAI6J,EAAiB9L,KAAK8L,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAejF,OAAS,mCAE7DqF,EAhBA,CAAsCiK,GAAzBzW,EAAAwM,oBAmBb,IAAAE,GAAA,SAAAiF,GAAA,SAAAjF,IAAA,IAAAmF,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASwU,WAIlB,OALuC3F,EAAAlF,EAAAiF,GAKvCjF,EALA,CAAuCgJ,GAA1B1V,EAAA0M,qBAQb,IAAAG,GAAA,SAAA8E,GAAA,SAAA9E,IAAA,IAAAgF,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASyU,KAMlB,OAPiC5F,EAAA/E,EAAA8E,GAOjC9E,EAPA,CAAiC6I,GAApB1V,EAAA6M,eAUb,IAAAE,GAAA,SAAA4E,GAAA,SAAA5E,IAAA,IAAA8E,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS0U,QAClB,OAFoC7F,EAAA7E,EAAA4E,GAEpC5E,EAFA,CAAoC2I,GAAvB1V,EAAA+M,kBAKb,IAAAE,GAAA,SAAA0E,GAAA,SAAA1E,IAAA,IAAA4E,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS2U,kBAIlB,OALqC9F,EAAA3E,EAAA0E,GAKrC1E,EALA,CAAqCwJ,GAAxBzW,EAAAiN,mBAQb,IAAAE,GAAA,SAAAwE,GAAA,SAAAxE,IAAA,IAAA0E,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS4U,uBAKlB,OAN0C/F,EAAAzE,EAAAwE,GAM1CxE,EANA,CAA0CsJ,GAA7BzW,EAAAmN,wBASb,IAAAa,GAAA,SAAA2D,GAAA,SAAA3D,IAAA,IAAA6D,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS6U,eAMlB,OAP2ChG,EAAA5D,EAAA2D,GAO3C3D,EAPA,CAA2ClK,GAA9B9D,EAAAgO,yBAUb,IAAAE,GAAA,SAAAyD,GAAA,SAAAzD,IAAA,IAAA2D,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS8U,eAMlB,OAPkCjG,EAAA1D,EAAAyD,GAOlCzD,EAPA,CAAkCpK,GAArB9D,EAAAkO,gBAUb,IAAAZ,GAAA,SAAAqE,GAAA,SAAArE,IAAA,IAAAuE,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASgU,SAUlB,OAXqCnF,EAAAtE,EAAAqE,GAWrCrE,EAXA,CAAqCoI,GAAxB1V,EAAAsN,mBAcb,IAAAc,GAAA,SAAAuD,GAAA,SAAAvD,IAAA,IAAAyD,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS+U,aAIlB,OALyClG,EAAAxD,EAAAuD,GAKzCvD,EALA,CAAyCsH,GAA5B1V,EAAAoO,uBAQb,IAAAiB,GAAA,SAAAsC,GAAA,SAAAtC,IAAA,IAAAwC,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASgV,iBAGhBlG,EAAAmG,gBAAuB,IACzB,OALsCpG,EAAAvC,EAAAsC,GAKtCtC,EALA,CAAsCgI,GAAzBrX,EAAAqP,oBAQb,IAAAG,GAAA,SAAAmC,GAAA,SAAAnC,IAAA,IAAAqC,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASkV,MAalB,OAdkCrG,EAAApC,EAAAmC,GAclCnC,EAdA,CAAkCkG,GAArB1V,EAAAwP,gBAiBb,IAAAI,GAAA,SAAA+B,GAAA,SAAA/B,IAAA,IAAAiC,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASwS,sBAalB,OAdyC3D,EAAAhC,EAAA+B,GAUvCtQ,OAAAC,eAAIsO,EAAArN,UAAA,iBAAJ,WACE,IAAI6J,EAAiB9L,KAAK8L,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAejF,OAAS,mCAE7DyI,EAdA,CAAyC6G,GAA5BzW,EAAA4P,uBAiBb,IAAApB,GAAA,SAAAmD,GAAA,SAAAnD,IAAA,IAAAqD,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASmV,KAQlB,OATiCtG,EAAApD,EAAAmD,GASjCnD,EATA,CAAiCkH,GAApB1V,EAAAwO,eAYb,IAAAS,GAAA,SAAA0C,GAAA,SAAA1C,IAAA,IAAA4C,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASoV,oBAIlB,OALuCvG,EAAA3C,EAAA0C,GAKvC1C,EALA,CAAuCwH,GAA1BzW,EAAAiP,qBAQb,IAAAN,GAAA,SAAAgD,GAAA,SAAAhD,IAAA,IAAAkD,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASqV,SAYlB,OAbqCxG,EAAAjD,EAAAgD,GAarChD,EAbA,CAAqC+G,GAAxB1V,EAAA2O,mBAgBb,IAAAQ,GAAA,SAAAwC,GAAA,SAAAxC,IAAA,IAAA0C,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASsV,uBAClB,OAF0CzG,EAAAzC,EAAAwC,GAE1CxC,EAFA,CAA0C3C,IAA7BxM,EAAAmP,wBAKb,IAAAW,GAAA,SAAA6B,GAAA,SAAA7B,IAAA,IAAA+B,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASyS,oBAClB,OAFuC5D,EAAA9B,EAAA6B,GAEvC7B,EAFA,CAAuCF,IAA1B5P,EAAA8P,qBAKb,IAAAE,GAAA,SAAA2B,GAAA,SAAA3B,IAAA,IAAA6B,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS+T,uBAIlB,OAL0ClF,EAAA5B,EAAA2B,GAK1C3B,EALA,CAA0CyG,GAA7BzW,EAAAgQ,wBAQb,IAAAE,GAAA,SAAAyB,GAAA,SAAAzB,IAAA,IAAA2B,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASuV,SAIlB,OALqC1G,EAAA1B,EAAAyB,GAKrCzB,EALA,CAAqCwF,GAAxB1V,EAAAkQ,mBAQb,IAAAK,GAAA,SAAAoB,GAAA,SAAApB,IAAA,IAAAsB,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASwV,aAMlB,OAPgC3G,EAAArB,EAAAoB,GAOhCpB,EAPA,CAAgCzM,GAAnB9D,EAAAuQ,cAUb,IAAAF,GAAA,SAAAsB,GAAA,SAAAtB,IAAA,IAAAwB,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASyV,SAMlB,OAPqC5G,EAAAvB,EAAAsB,GAOrCtB,EAPA,CAAqCqF,GAAxB1V,EAAAqQ,mBAUb,IAAAI,GAAA,SAAAkB,GAAA,SAAAlB,IAAA,IAAAoB,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS0V,QAIlB,OALoC7G,EAAAnB,EAAAkB,GAKpClB,EALA,CAAoCiF,GAAvB1V,EAAAyQ,kBAQb,IAAAK,GAAA,SAAAa,GAAA,SAAAb,IAAA,IAAAe,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS2V,MAUlB,OAXkC9G,EAAAd,EAAAa,GAWlCb,EAXA,CAAkC4E,GAArB1V,EAAA8Q,gBAcb,IAAAG,GAAA,SAAAU,GAAA,SAAAV,IAAA,IAAAY,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS4V,kBAMlB,OAPqC/G,EAAAX,EAAAU,GAOrCV,EAPA,CAAqCwF,GAAxBzW,EAAAiR,mBAUb,IAAAI,GAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAQ,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS6V,sBAClB,OAFyChH,EAAAP,EAAAM,GAEzCN,EAFA,CAAyCgG,GAA5BrX,EAAAqR,uBAKb,IAAAF,GAAA,SAAAQ,GAAA,SAAAR,IAAA,IAAAU,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS8T,WAMlB,OAPuCjF,EAAAT,EAAAQ,GAOvCR,EAPA,CAAuCuE,GAA1B1V,EAAAmR,qBAUb,IAAAI,GAAA,SAAAI,GAAA,SAAAJ,IAAA,IAAAM,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS8V,OAIlB,OALmCjH,EAAAL,EAAAI,GAKnCJ,EALA,CAAmCmE,GAAtB1V,EAAAuR,iBAQb,IAAAE,GAAA,SAAAE,GAAA,SAAAF,IAAA,IAAAI,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS+V,QAMlB,OAPoClH,EAAAH,EAAAE,GAOpCF,EAPA,CAAoCiE,GAqBpC,SAAgBkB,GAAmBzO,EAAmC4Q,QAAA,IAAAA,OAAA,GACpE,IAAI7X,EAAOiH,EAAYjH,KAAKoF,KACxBvC,EAASoE,EAAYpE,OACzB,OAAKA,IAEHoE,EAAYjF,MAAQH,EAAS6V,qBAC7B7U,EAAOb,MAAQH,EAAS8T,WAElB9S,EAASA,EAAOA,SAEpBA,EAAOb,MAAQH,EAASkU,iBACnBL,GAAqC7S,EAAQgV,IAClD5Q,EAAYhE,GAAGxB,EAAAsB,YAAYiT,QACvBvU,EAAAqW,iBACArW,EAAAsW,oBACF/X,EAGJ6C,EAAOb,MAAQH,EAAS+T,sBACxB/S,EAAOb,MAAQH,EAAS2U,gBAEjBd,GAAyC7S,EAAQgV,GACjDpW,EAAAqW,iBAAmB9X,EAErB6X,EACH7X,EACAiH,EAAYzD,MAAMiJ,OAAOC,aAAejL,EAAAwT,eAAiBjV,EAvBzCA,EA2BtB,SAAgB2M,GAAmBR,GAEjC,OADIA,EAAK6L,SAAS,SAAQ7L,EAAOA,EAAKgJ,UAAU,EAAGhJ,EAAKlG,OAAS,IAC1DkG,EAMT,SAASxI,GAAUoC,EAAelD,GAChC,IAAK,IAAIpD,EAAI,EAAGuG,EAAID,EAAME,OAAQxG,EAAIuG,IAAKvG,EACzCsG,EAAMtG,GAAGoD,OAASA,EA7DT/D,EAAAyR,kBAUbzR,EAAAmZ,cAAA,SAA8BjW,EAAqBqJ,GACjD,GAAIA,EACF,IAAK,IAAI5L,EAAI,EAAGuG,EAAIqF,EAAWpF,OAAQxG,EAAIuG,IAAKvG,EAAG,CACjD,IAAIyY,EAAY7M,EAAW5L,GAC3B,GAAIyY,EAAUjT,eAAiBjD,EAAM,OAAOkW,EAGhD,OAAO,MAITpZ,EAAA4W,sBA8BA5W,EAAA6N,qGC78DA,SAAY5J,GAEVA,IAAA,eAKAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,cAEAA,IAAA,oBAEAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,4BAEAA,IAAA,gBAEAA,IAAA,gBAKAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,yCAEAA,IAAA,2BAEAA,IAAA,kCAEAA,IAAA,sBAEAA,IAAA,sCAEAA,IAAA,uCAKAA,IAAA,6BAEAA,IAAA,2BAEAA,IAAA,yBAEAA,IAAA,kCAEAA,IAAA,4BAEAA,IAAA,sBAIAA,IAAA,2BArEF,CAAYjE,EAAAiE,cAAAjE,EAAAiE,iBAyECjE,EAAAmW,eAAiB,IAEjBnW,EAAAqZ,aAAe,KAEfrZ,EAAAsZ,cAAgB,OAEhBtZ,EAAAuZ,cAAgB,OAEhBvZ,EAAAiZ,mBAAqB,IAErBjZ,EAAAgZ,iBAAmB,IAEnBhZ,EAAAwZ,gBAAkB,IAElBxZ,EAAAyZ,cAAgB,OAEhBzZ,EAAA8O,eAAiB9O,EAAAyZ,cAAgBzZ,EAAAmW,eAEjCnW,EAAA0Z,iBAAmB,u6BC5FhC,IA4IYC,EA5IZhX,EAAAlC,EAAA,GAgBAmZ,EAAAnZ,EAAA,GAMAoZ,EAAApZ,EAAA,GAOAqZ,EAAArZ,EAAA,GAsCAsZ,EAAAtZ,EAAA,GAsCAuZ,EAAAvZ,EAAA,IAGAwZ,EAAAxZ,EAAA,IAKAyZ,EAAA,WAKA,OALA,gBAQAC,EAAA,WAIA,OAJA,gBAOAC,EAAA,WAGA,OAHA,gBA4DA,SAASC,EAA0BlU,EAA8BmU,GAE/D,OADA/H,OAAO+H,EAAInT,QACHhB,GACN,KAAK2T,EAAA1H,cAAcY,SACnB,KAAK8G,EAAA1H,cAAciB,gBACjB,OAAQiH,EAAI9H,WAAW,IACrB,QACE,GAAW,MAAP8H,EAAa,OAAOX,EAAaY,YACrC,GAAW,OAAPD,EAAc,OAAOX,EAAaa,YACtC,MAEF,SACE,GAAW,MAAPF,EAAa,OAAOX,EAAac,sBACrC,GAAW,OAAPH,EAAc,OAAOX,EAAae,sBACtC,MAEF,QACE,GAAW,KAAPJ,EAAY,OAAOX,EAAagB,IACpC,MAEF,QACE,GAAW,KAAPL,EAAY,OAAOX,EAAaiB,IACpC,MAEF,QACE,GAAW,KAAPN,EAAY,OAAOX,EAAakB,IACpC,GAAW,MAAPP,EAAa,OAAOX,EAAamB,IACrC,MAEF,QACE,GAAW,KAAPR,EAAY,OAAOX,EAAaoB,IACpC,MAEF,QACE,GAAW,KAAPT,EAAY,OAAOX,EAAaqB,IACpC,MAEF,QACE,GAAW,KAAPV,EAAY,OAAOX,EAAasB,YACpC,MAEF,SACE,GAAW,KAAPX,EAAY,OAAOX,EAAauB,WACpC,MAEF,QACE,GAAW,KAAPZ,EAAY,OAAOX,EAAawB,YACpC,MAEF,QACE,GAAW,MAAPb,EAAa,OAAOX,EAAayB,GACrC,MAEF,QACE,GAAW,MAAPd,EAAa,OAAOX,EAAa0B,GACrC,MAEF,QACE,GAAW,KAAPf,EAAY,OAAOX,EAAa2B,GACpC,GAAW,MAAPhB,EAAa,OAAOX,EAAa4B,GACrC,GAAW,MAAPjB,EAAa,OAAOX,EAAa6B,YACrC,GAAW,OAAPlB,EAAc,OAAOX,EAAa8B,cACtC,MAEF,QACE,GAAW,KAAPnB,EAAY,OAAOX,EAAa+B,GACpC,GAAW,MAAPpB,EAAa,OAAOX,EAAagC,GACrC,GAAW,MAAPrB,EAAa,OAAOX,EAAaiC,YAIzC,MAEF,KAAK9B,EAAA1H,cAAckB,gBACjB,OAAQgH,EAAI9H,WAAW,IACrB,QACE,GAAW,KAAP8H,EAAY,OAAOX,EAAakC,KACpC,GAAW,MAAPvB,EAAa,OAAOX,EAAamC,WACrC,MAEF,QACE,GAAW,KAAPxB,EAAY,OAAOX,EAAaoC,MACpC,GAAW,MAAPzB,EAAa,OAAOX,EAAaqC,WACrC,MAEF,QACE,GAAW,KAAP1B,EAAY,OAAOX,EAAasC,IACpC,MAEF,SACE,GAAW,KAAP3B,EAAY,OAAOX,EAAauC,YAIxC,MAEF,KAAKpC,EAAA1H,cAAcmB,iBACjB,OAAQ+G,EAAI9H,WAAW,IACrB,QACE,GAAW,MAAP8H,EAAa,OAAOX,EAAawC,YACrC,MAEF,QACE,GAAW,MAAP7B,EAAa,OAAOX,EAAayC,aAO7C,OAAOzC,EAAa0C,SA9JtB,SAAY1C,GACVA,IAAA,qBAGAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,iDACAA,IAAA,iDAGAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,kCACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAGAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,4BAGAA,IAAA,8BACAA,IAAA,8BAvCF,CAAYA,EAAA3Z,EAAA2Z,eAAA3Z,EAAA2Z,kBAiKZ,IAqvDY2C,EAmCAC,EAxxDNC,EAAa,IAAIC,IAGvBC,EAAA,SAAA/K,GAwDE,SAAA+K,EAAYC,QAAA,IAAAA,MAAA,MAAZ,IAAA9K,EACEF,EAAA7Q,KAAAR,KAAMqc,IAAYrc,YAlDpBuR,EAAA+K,kBAAyB,EAKzB/K,EAAAgL,eAAsC,IAAIJ,IAE1C5K,EAAAiL,gBAAuC,IAAIL,IAE3C5K,EAAAkL,YAAgCP,EAEhC3K,EAAAmL,YAAqC,IAAIP,IAEzC5K,EAAAoL,iBAAwC,IAAIR,IAE5C5K,EAAAqL,mBAA+C,IAAIT,IAGnD5K,EAAAsL,oBAAoC,KAEpCtL,EAAAuL,eAAwC,KAExCvL,EAAAwL,eAA+B,KAI/BxL,EAAAyL,aAAyC,KAEzCzL,EAAA0L,cAAiC,KAEjC1L,EAAA2L,uBAA0C,KAG1C3L,EAAA4L,OAAc,EAEd5L,EAAA6L,mBAAsC,KAEtC7L,EAAA8L,eAAkC,KAElC9L,EAAA+L,eAAkC,KAElC/L,EAAAgM,aAAoB,EAEpBhM,EAAAiM,aAAoB,EAQlBjM,EAAKkM,SAAW,IAAI9D,EAAA+D,SAASnM,GAC7BA,EAAKoM,aAorDT,OA/uD6BrM,EAAA8K,EAAA/K,GA8D3B+K,EAAAna,UAAA2b,MAAA,WACE,IAAIC,EAAM,IAAInE,EAAAoE,IAAI9d,MAElB,OADA6d,EAAIE,UACGF,GAITzB,EAAAna,UAAA+b,UAAA,SAAU/Q,GAER,IADA,IAAI0Q,EAAU3d,KAAK2d,QACVtd,EAAI,EAAGuG,EAAI+W,EAAQ9W,OAAQxG,EAAIuG,IAAKvG,EAAG,CAC9C,IAAIgN,EAASsQ,EAAQtd,GACrB,GAAIgN,EAAOJ,gBAAkBA,EAAgB,OAAOI,EAEtD,OAAO,MAIT+O,EAAAna,UAAAgc,mBAAA,SAAmBC,GACjB,IAAIC,EACJ,OACEne,KAAKge,UAAUE,EAAiC,QAChDle,KAAKge,UAAUE,EAAiC,cAChDle,KAAKge,WAAWG,EAAM9b,EAAAmM,eAAiB0P,GAAkC,QACzEle,KAAKge,UAAWG,EAAyD,cAK7E/B,EAAAna,UAAAmc,WAAA,SAAWC,eACTre,KAAKqe,QAAUA,EAGfre,KAAKyc,YAAc,IAAIN,MACpB,KAAM5C,EAAA+E,KAAKC,KACX,MAAOhF,EAAA+E,KAAKE,MACZ,MAAOjF,EAAA+E,KAAKG,MACZ,MAAOlF,EAAA+E,KAAKI,MACZ,QAASL,EAAQM,YACjB,KAAMpF,EAAA+E,KAAKM,KACX,MAAOrF,EAAA+E,KAAKO,MACZ,MAAOtF,EAAA+E,KAAKQ,MACZ,MAAOvF,EAAA+E,KAAKS,MACZ,QAASV,EAAQW,YACjB,OAAQzF,EAAA+E,KAAKW,OACb,MAAO1F,EAAA+E,KAAKY,MACZ,MAAO3F,EAAA+E,KAAKa,MACZ,OAAQ5F,EAAA+E,KAAKc,OACb,SAAU7F,EAAA+E,KAAKa,MACf,UAAW5F,EAAA+E,KAAKW,QAInBjf,KAAKqf,mBAAmB,aAAc9F,EAAA+E,KAAKG,IACzCa,QAAQjB,EAAQkB,SAAW,EAAI,IACjCvf,KAAKqf,mBAAmB,qBAAsB9F,EAAA+E,KAAKW,KACjDK,QAAQjB,EAAQmB,cAAgB,EAAI,EAAG,IACzCxf,KAAKqf,mBAAmB,gBAAiB9F,EAAA+E,KAAKW,KAC5CK,QAAQjB,EAAQoB,SAAW,EAAI,EAAG,IACpCzf,KAAKqf,mBAAmB,kBAAmB9F,EAAA+E,KAAKG,IAC9Ca,QAAQjB,EAAQqB,WAAY,IAC9B1f,KAAKqf,mBAAmB,qBAAsB9F,EAAA+E,KAAKG,IACjDa,QAAQjB,EAAQsB,kBAAmB,IACrC3f,KAAKqf,mBAAmB,mBAAoB9F,EAAA+E,KAAKG,IAC/Ca,QAAQjB,EAAQuB,gBAAiB,IACnC5f,KAAKqf,mBAAmB,6BAA8B9F,EAAA+E,KAAKW,KACzDK,QAAQjB,EAAQwB,WAAU,GAA2B,EAAI,EAAG,IAC9D7f,KAAKqf,mBAAmB,6BAA8B9F,EAAA+E,KAAKW,KACzDK,QAAQjB,EAAQwB,WAAU,GAA2B,EAAI,EAAG,IAS9D,IANA,IAAIC,EAAgB,IAAI9J,MACpB+J,EAAgB,IAAI5D,IACpB6D,EAAgB,IAAIhK,MACpBiK,EAAmB,IAAIjK,MAGlB3V,EAAI,EAAGuG,EAAI5G,KAAK2d,QAAQ9W,OAAQxG,EAAIuG,IAAKvG,EAAG,CACnD,IAAIgN,EAASrN,KAAK2d,QAAQtd,GAGtB6f,EAAY,IAAIC,EAAUngB,KAAMqN,GACpCrN,KAAKuc,eAAevY,IAAIkc,EAAUE,aAAcF,GAChDlgB,KAAKqgB,iBAAmBH,EAIxB,IADA,IAAI3U,EAAa8B,EAAO9B,WACf+U,EAAI,EAAGhgB,EAAIiL,EAAW1E,OAAQyZ,EAAIhgB,IAAKggB,EAAG,CACjD,IAAIhU,EAAYf,EAAW+U,GAC3B,OAAQhU,EAAU1J,MAChB,KAAK4W,EAAA/W,SAASkU,iBACZ3W,KAAKugB,gBAAkCjU,EAAW0T,EAAeC,GACjE,MAEF,KAAKzG,EAAA/W,SAAS2U,gBACZpX,KAAKwgB,eAAgClU,GACrC,MAEF,KAAKkN,EAAA/W,SAASgU,OACZzW,KAAKygB,kBAAmCnU,EAAWyT,GACnD,MAEF,KAAKvG,EAAA/W,SAASwS,oBACZjV,KAAK0gB,mBAAwCpU,GAC7C,MAEF,KAAKkN,EAAA/W,SAASqV,OACZ9X,KAAK2gB,kBAAmCrU,EAAWyT,EAAeD,GAClE,MAEF,KAAKtG,EAAA/W,SAASsV,qBACZ/X,KAAK4gB,oBAA0CtU,GAC/C,MAEF,KAAKkN,EAAA/W,SAAS+T,qBACZxW,KAAK6gB,oBAA0CvU,EAAW0T,EAAeC,GACzE,MAEF,KAAKzG,EAAA/W,SAAS4V,gBACZrY,KAAK8gB,oBAAqCxU,GAC1C,MAEF,KAAKkN,EAAA/W,SAAS8T,SACZvW,KAAK+gB,oBAAuCzU,KAQpD,IAASjM,EAAI,EAAGA,EAAIyf,EAAcjZ,QAAS,CACzC,IAAIma,EAAelB,EAAczf,GAEjC,GADIwH,EAAcmZ,EAAanZ,aAEzBQ,EAAUrI,KAAKihB,gBAAgBD,EAAavT,aAAcsS,KAE5D/f,KAAKuc,eAAevY,IAAIgd,EAAaE,UAAW7Y,GAChDyX,EAAcqB,OAAO9gB,EAAG,KAEpBgI,EAAUrI,KAAKihB,gBAAgBD,EAAaI,gBAAiBrB,KAC/D/f,KAAKuc,eAAevY,IAAIgd,EAAaE,UAAW7Y,GAChDyX,EAAcqB,OAAO9gB,EAAG,KAExBL,KAAKqhB,MACH/H,EAAAgI,eAAeC,kCACf1Z,EAAYzD,MACMyD,EAAYpE,OAAQsJ,KAAKzL,MAC3CuG,EAAY4F,aAAazH,QAEzB3F,QAIFgI,EAAUrI,KAAKuc,eAAerb,IAAI8f,EAAavT,gBAEjDzN,KAAKuc,eAAevY,IAAIgd,EAAaE,UAAW7Y,GAChDyX,EAAcqB,OAAO9gB,EAAG,KAEpBgI,EAAUrI,KAAKuc,eAAerb,IAAI8f,EAAaI,mBACjDphB,KAAKuc,eAAevY,IAAIgd,EAAaE,UAAW7Y,GAChDyX,EAAcqB,OAAO9gB,EAAG,KAExB4R,QAAO,KACL5R,OAOV,IAAuC,IAAAmhB,EAAAC,EAAA1B,GAAa2B,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAE,CAA7C,IAAAE,EAAAC,EAAAJ,EAAApgB,MAAA,GAACygB,EAAAF,EAAA,GAAYG,EAAAH,EAAA,GAChBI,EAAqCD,EACrC3Z,OAAO,EACX,EAAG,CACD,IAAI4Z,EAAcC,WAkBX,EAGF7Z,EAAUrI,KAAKuc,eAAerb,IAAI+gB,EAAcxU,iBAEhDpF,EAAUrI,KAAKuc,eAAerb,IAAI+gB,EAAcnL,OAAOlW,KAAKoF,OAE7DhG,KAAKmiB,yBACHJ,EACA1Z,EACA4Z,EAAcnL,OAAOrJ,cAGvBzN,KAAKqhB,MACH/H,EAAAgI,eAAec,mBACfJ,EAAalL,OAAO1S,MAAO4d,EAAalL,OAAOlW,KAAKoF,MAGxD,MAnCA,GAAIqC,EAAUrI,KAAK2c,iBAAiBzb,IAAI+gB,EAAcxU,cAAe,CACnEzN,KAAKmiB,yBACHJ,EACA1Z,EACA4Z,EAAcnL,OAAOrJ,cAEvB,OAEFwU,EAAgBlC,EAAc7e,IAAI+gB,EAAcxU,gBAE9CzN,KAAKqhB,MACH/H,EAAAgI,eAAeC,kCACfS,EAAalL,OAAOrJ,aAAarJ,MACW4d,EAAalL,OAAOrT,OAAQsJ,KAAMzL,MAC9E0gB,EAAalL,OAAOrJ,aAAazH,YAuBhCic,qGAIX,IAAIxE,EAAWzd,KAAKyd,SACpB,IAASpd,EAAI,EAAGuG,EAAIoZ,EAAcnZ,OAAQxG,EAAIuG,IAAKvG,EAAG,CACpD,IAAIgiB,EAAmBrC,EAAc3f,GACjCiiB,EAAqBD,EAAiBxa,YACtC0a,EAActQ,OAAOqQ,EAAmB3d,aACxC6d,EAAc/E,EAASgF,kBAAkBF,EAAY3hB,KAAM,MAC/D,GAAK4hB,EACL,GAAIA,EAAY5f,MAAQoZ,EAAY0G,gBAAiB,CACnD,IAAIC,EAAgCH,EACpCH,EAAiBM,cAAgBA,OAEjC3iB,KAAKqhB,MACH/H,EAAAgI,eAAesB,sCACfL,EAAYne,OAOhB,IAAIye,EAAgBxE,EAAQwE,cAC5B,GAAIA,MACF,IAA0B,IAAAC,EAAArB,EAAAoB,GAAaE,EAAAD,EAAAnB,QAAAoB,EAAAnB,KAAAmB,EAAAD,EAAAnB,OAAE,CAAhC,IAAAqB,EAAAlB,EAAAiB,EAAAzhB,MAAA,GAACoP,EAAAsS,EAAA,GAAOpiB,EAAAoiB,EAAA,GACf,GAAKpiB,EAAKiG,OAAV,CAEA,KADIwB,EAAUrI,KAAKuc,eAAerb,IAAIN,IAEjC,MAAM,IAAIqiB,MAAM,sBAAwBriB,GADhCZ,KAAKuc,eAAevY,IAAI0M,EAAOrI,sGAOlD,GAAIrI,KAAKuc,eAAe2G,IAAI,eAAgB,CACtC7a,EAAU4J,OAAOjS,KAAKuc,eAAerb,IAAI,gBAC7C+Q,OAAO5J,EAAQzF,MAAQoZ,EAAY0G,iBACnC1iB,KAAK6c,oBAAsBY,EAAS0F,aAA6B9a,EAAS,MAI5E,GAAIrI,KAAKuc,eAAe2G,IAAI,SAAU,CAChC7a,EAAU4J,OAAOjS,KAAKuc,eAAerb,IAAI,UAC7C+Q,OAAO5J,EAAQzF,MAAQoZ,EAAY0G,iBACnC1iB,KAAK8c,eAAiCzU,EAIxC,GAAIrI,KAAKuc,eAAe2G,IAAI,UAAW,CACjC7a,EAAU4J,OAAOjS,KAAKuc,eAAerb,IAAI,WAG7C,GAFA+Q,OAAO5J,EAAQzF,MAAQoZ,EAAY0G,iBAC/BU,EAAW3F,EAAS0F,aAA6B9a,EAAS,MAE5D,GAAIrI,KAAKyc,YAAYyG,IAAI,UAAW,CAClC,IAAIrb,EAA+BQ,EAASR,YAC5C7H,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOyD,EAAYyb,+BAGtCtjB,KAAK+c,eAAiBqG,EACtBpjB,KAAKyc,YAAYzY,IAAI,SAAUof,EAAS/e,MAOxCgE,EAAU4J,OAAOjS,KAAKuc,eAAerb,IAAI,WAC7C+Q,OAAO5J,EAAQzF,MAAQoZ,EAAYuH,oBACnCvjB,KAAKwjB,cAAmCnb,EAItCrI,KAAK4c,mBAAmBsG,IAAI,YAC1B7a,EAAyBrI,KAAK4c,mBAAmB1b,IAAI,QAASmH,SAExDzF,MAAQoZ,EAAYuH,oBACPlb,EAAStE,MAAM1B,EAAAsB,YAAY8f,QAAUphB,EAAAsB,YAAY+f,WAElDrb,EAASrE,IAAI3B,EAAAsB,YAAYggB,MAC7C3jB,KAAKgd,aAAkC3U,IAK3C,GAAIrI,KAAKuc,eAAe2G,IAAI,SAAU,CAChC7a,EAAmBrI,KAAKuc,eAAerb,IAAI,SAC/C+Q,OAAO5J,EAAQzF,MAAQoZ,EAAYuH,qBAC/BH,EAAWpjB,KAAKyd,SAASmG,gBAAmCvb,EAAS,SAC3DrI,KAAKid,cAAgBmG,GAIrC,GAAIpjB,KAAKuc,eAAe2G,IAAI,UAAW,CACrC,IAMQE,EALJpX,GADA3D,EAAmBrI,KAAKuc,eAAerb,IAAI,WACzB8K,QACtB,GAAIA,EACF,GAAIA,EAAQkX,IAAI,YACd7a,EAAU4J,OAAOjG,EAAQ9K,IAAI,aAC7B+Q,OAAO5J,EAAQzF,MAAQoZ,EAAYuH,qBAC/BH,EAAWpjB,KAAKyd,SAASmG,gBAAmCvb,EAAS,SAC3DrI,KAAKkd,uBAAyBkG,GAMlD,GACEpjB,KAAKuc,eAAe2G,IAAI,kBACxBljB,KAAKuc,eAAe2G,IAAI,cACxBljB,KAAKuc,eAAe2G,IAAI,aACxB,CAEI7a,EAAmBrI,KAAKuc,eAAerb,IAAI,iBAC/C+Q,OAAO5J,EAAQzF,MAAQoZ,EAAYuH,oBACnC,IAAInG,EAAqBnL,OAAOjS,KAAKyd,SAASmG,gBAAmCvb,EAAS,OACtF+G,EAAYgO,EAAmBhO,UACnC6C,OAA0C,GAAnC7C,EAAUyU,eAAehd,QAChCoL,OAAO7C,EAAUyU,eAAe,IAAM7jB,KAAKqe,QAAQW,WACnD/M,OAAO7C,EAAUyU,eAAe,GAAGC,oBACnC7R,OAAO7C,EAAUhK,YAAcpF,KAAKqe,QAAQW,WAG5C3W,EAAmBrI,KAAKuc,eAAerb,IAAI,aAC3C+Q,OAAO5J,EAAQzF,MAAQoZ,EAAYuH,oBACnC,IAAIlG,EAAiBpL,OAAOjS,KAAKyd,SAASmG,gBAAmCvb,EAAS,OACtF+G,EAAYiO,EAAejO,UAC3B6C,OAA0C,GAAnC7C,EAAUyU,eAAehd,QAChCoL,OAAO7C,EAAUyU,eAAe,IAAM7jB,KAAKqe,QAAQW,WACnD/M,OAAO7C,EAAUyU,eAAe,IAAM7jB,KAAKqe,QAAQW,WACnD/M,OAAO7C,EAAUhK,YAAcmU,EAAA+E,KAAKc,MAGpC/W,EAAmBrI,KAAKuc,eAAerb,IAAI,aAC3C+Q,OAAO5J,EAAQzF,MAAQoZ,EAAYuH,oBACnC,IAAIjG,EAAiBrL,OAAOjS,KAAKyd,SAASmG,gBAAmCvb,EAAS,OACtF+G,EAAYkO,EAAelO,UAC3B6C,OAA0C,GAAnC7C,EAAUyU,eAAehd,QAChCoL,OAAO7C,EAAUyU,eAAe,IAAM7jB,KAAKqe,QAAQW,WACnD/M,OAAO7C,EAAUhK,YAAcmU,EAAA+E,KAAKc,MAEpCpf,KAAKod,mBAAqBA,EAC1Bpd,KAAKqd,eAAiBA,EACtBrd,KAAKsd,eAAiBA,EACtB,IAAIE,EAAe,EAAIa,EAAQW,UAAU+E,SACzC/jB,KAAKwd,aAAgBA,EACrBxd,KAAKud,aAAgBC,EAAe,EAAI,GAAK,EAC7Cxd,KAAKmd,OAAQ,IAKjBf,EAAAna,UAAAod,mBAAA,SAAmB2E,EAAoB3f,EAAY/C,GACjD2Q,OAAO5N,EAAKR,GAAE,IACd7D,KAAKuc,eAAevY,IAAIggB,EACtB,IAAIC,EAAOjkB,KAAMgkB,EAAYA,EAAY3f,EAAM,KAAM4X,EAAerY,MACjEsgB,yBAAyB5iB,KAKhC8a,EAAAna,UAAAkiB,iBAAA,SAAiBH,EAAoB3f,EAAY/C,GAC/C2Q,OAAO5N,EAAKR,GAAE,IACd7D,KAAKuc,eAAevY,IAAIggB,EACtB,IAAIC,EAAOjkB,KAAMgkB,EAAYA,EAAY3f,EAAM,KAAM4X,EAAerY,MACjEwgB,uBAAuB9iB,KAKtB8a,EAAAna,UAAAgf,gBAAR,SACExT,EACA4W,GAIA,IAFA,IAAIhc,EACAsU,EAAmB3c,KAAK2c,mBACzB,CACD,GAAItU,EAAUsU,EAAiBzb,IAAIuM,GAAe,OAAOpF,EACzD,IAAI2Z,EAAeqC,EAAmBnjB,IAAIuM,GAC1C,IAAKuU,EAAc,MACnB,IAAIA,EAAaE,WAIjB,OAAOliB,KAAKuc,eAAerb,IAAI8gB,EAAavU,cAH1CA,EAAeuU,EAAavU,aAKhC,OAAO,MAID2O,EAAAna,UAAAqiB,gBAAR,SACErY,EACAsY,GAGA,IADA,IAAIC,EAAevI,EAAerY,KACzBvD,EAAI,EAAGuG,EAAIqF,EAAWpF,OAAQxG,EAAIuG,IAAKvG,EAAG,CACjD,IAAIyY,EAAY7M,EAAW5L,GAEvByD,EAAO2gB,EADAjL,EAAA1T,oBAAoBgT,EAAUlY,OAErCkD,IACEA,GAAQmY,EAAe7J,QACrB0G,EAAU1U,MAAMiJ,OAAOqX,UACzBF,GAAgB1gB,EAEhB9D,KAAKqhB,MACH/H,EAAAgI,eAAeqD,8BACf7L,EAAU1U,MAAO0U,EAAUlY,KAAKwD,MAAMwgB,YAG/BL,EAAgBzgB,EAKlB0gB,EAAe1gB,EACxB9D,KAAKqhB,MACH/H,EAAAgI,eAAeuD,oBACf/L,EAAU1U,MAAO0U,EAAUlY,KAAKwD,MAAMwgB,YAGxCJ,GAAgB1gB,EAVhB9D,KAAKqhB,MACH/H,EAAAgI,eAAeqD,8BACf7L,EAAU1U,MAAO0U,EAAUlY,KAAKwD,MAAMwgB,aAY9C,OAAOJ,GAIDpI,EAAAna,UAAA6iB,YAAR,SACEzc,EACAR,GAEA,IAAIkd,EAAald,EAAYpE,OAE7B,GACG4E,EAAQ2c,aAAa/I,EAAe1J,SAEnC1K,EAAYzD,MAAMiJ,OAAOqX,WACzBrc,EAAQxE,GAAGxB,EAAAsB,YAAY8S,UAErBxE,OAAO8S,GAAYniB,MAAQ4W,EAAA/W,SAAS6S,QAE5ByP,EAAYniB,MAAQ4W,EAAA/W,SAAS8T,UACnCtE,OAAc8S,EAAYthB,QAAQb,MAAQ4W,EAAA/W,SAAS6S,QAGzD,CACA,IAAI0O,EAAanc,EAAYyb,yBACzBtjB,KAAKuc,eAAe2G,IAAIc,GAC1BhkB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOiE,EAAQ+X,cAGlCpgB,KAAKuc,eAAevY,IAAIggB,EAAY3b,GAIpCA,EAAQ2c,aAAa/I,EAAe7J,WACtC/J,EAAQ+X,aAAevY,EAAYyb,2BAK/BlH,EAAAna,UAAAse,gBAAR,SACE1Y,EACAmY,EACAC,EACAgF,QAAA,IAAAA,MAAA,MAEA,IAAI7E,EAAevY,EAAYqd,sBAC/B,GAAIllB,KAAKuc,eAAe2G,IAAI9C,GAC1BpgB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,OAH5B,CAQA,IAAInU,EAAapE,EAAYoE,WACzBkZ,EAAatd,EAAYjH,KAAKoF,KAC9B/D,EAAY,IAAImjB,EAClBplB,KACAmlB,EACA/E,EACAvY,EACAoE,EACIjM,KAAKskB,gBAAgBrY,EACnBgQ,EAAe1J,OACf0J,EAAerJ,OACfqJ,EAAepJ,WAEjBoJ,EAAerY,MAErB3B,EAAUwB,OAASwhB,EACnBjlB,KAAKuc,eAAevY,IAAIoc,EAAcne,GAEtC,IAAI8J,EAAkBlE,EAAYkE,gBAClC,GAAIA,EAAiB,CACnB,IAAIsZ,EAAqBtZ,EAAgBlF,OACzC,GAAI5E,EAAU+iB,aAAa/I,EAAepJ,WACpCwS,GACFrlB,KAAKqhB,MACH/H,EAAAgI,eAAegE,8CACf9L,EAAAhX,MAAM+iB,KACJ1d,EAAYjH,KAAKwD,MACjB2H,EAAgBsZ,EAAqB,GAAGjhB,aAMzC,GAAIihB,EAAoB,CAC7B,IAAK,IAAIhlB,EAAI,EAAGA,EAAIglB,IAAsBhlB,GAM1C4f,EAAiBuF,KAAKvjB,IAQ1B,GAHI4F,EAAYlD,aAAaqb,EAAcwF,KAAKvjB,GAG5CgjB,EAAW,CACb,GAAIA,EAAUjZ,SACZ,GAAIiZ,EAAUjZ,QAAQkX,IAAIiC,GAKxB,YAJAnlB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,QAK5B6E,EAAUjZ,QAAU,IAAImQ,IAE1B8I,EAAUjZ,QAAQhI,IAAImhB,EAAYljB,GAC9BgjB,EAAUphB,GAAGxB,EAAAsB,YAAY8hB,gBAAkBxjB,EAAU4B,GAAGxB,EAAAsB,YAAY8S,SACtExU,EAAU+B,IAAI3B,EAAAsB,YAAY8hB,oBAIvB,GAAIxjB,EAAU4B,GAAGxB,EAAAsB,YAAY8S,QAAS,CAC3C,GAAIzW,KAAK2c,iBAAiBuG,IAAI9C,GAK5B,YAJApgB,KAAKqhB,MACH/H,EAAAgI,eAAeoE,4DACf7d,EAAYjH,KAAKwD,MAAOgc,GAM5B,GAFApgB,KAAK2c,iBAAiB3Y,IAAIoc,EAAcne,GACxCjC,KAAKqgB,iBAAiBrU,QAAQhI,IAAImhB,EAAYljB,GAC1CA,EAAU4B,GAAGxB,EAAAsB,YAAY8S,SAAW5O,EAAYzD,MAAMiJ,OAAOsY,QAAS,CACxE,GAAI3lB,KAAK4c,mBAAmBsG,IAAIiC,GAAa,CAC3C,IAAIS,EAA+B5lB,KAAK4c,mBAAmB1b,IAAIikB,GAK/D,YAJAnlB,KAAKqhB,MACH/H,EAAAgI,eAAeoE,4DACf7d,EAAYjH,KAAKwD,MAAOwhB,EAAevd,QAAQ+X,cAInDne,EAAU+B,IAAI3B,EAAAsB,YAAY8hB,eAC1BzlB,KAAK4c,mBAAmB5Y,IAAImhB,GAC1B9c,QAASpG,EACT4J,WAAYhE,EAAYjH,QAO9B,IADA,IAAIilB,EAAqBhe,EAAYmE,QACrBpF,GAAPvG,EAAI,EAAOwlB,EAAmBhf,QAAQxG,EAAIuG,IAAKvG,EAAG,CACzD,IAAIylB,EAAoBD,EAAmBxlB,GAC3C,OAAQylB,EAAkBljB,MACxB,KAAK4W,EAAA/W,SAASgV,iBACZzX,KAAK+lB,gBAAkCD,EAAmB7jB,GAC1D,MAEF,KAAKuX,EAAA/W,SAASyS,kBACR4Q,EAAkB/hB,MAAM1B,EAAAsB,YAAYqiB,IAAM3jB,EAAAsB,YAAYsiB,KACxDjmB,KAAKkmB,mBAAsCJ,EAAmB7jB,GAE9DjC,KAAKmmB,iBAAoCL,EAAmB7jB,GAE9D,MAEF,QAEE,YADAgQ,QAAO,IAMbjS,KAAK8kB,YAAY7iB,EAAW4F,KAItBuU,EAAAna,UAAA8jB,gBAAR,SACEle,EACAue,GAEA,IAAIxlB,EAAOiH,EAAYjH,KAAKoF,KACxBoa,EAAevY,EAAYqd,sBAC3BjZ,EAAapE,EAAYoE,WACzBoa,EAAcD,EAAexjB,MAAQoZ,EAAYsK,oBAGrD,GAAIze,EAAYhE,GAAGxB,EAAAsB,YAAYiT,QAAS,CAKtC,GAJIyP,GAEFpU,QAAO,GAELjS,KAAKuc,eAAe2G,IAAI9C,GAK1B,YAJApgB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,GAI5B,GAAIgG,EAAepa,SACjB,GAAIoa,EAAepa,QAAQkX,IAAItiB,GAK7B,YAJAZ,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,QAK5BgG,EAAepa,QAAU,IAAImQ,IAE/B,IAAIoK,EAAc,IAAItC,EACpBjkB,KACAY,EACAwf,EACA7G,EAAA+E,KAAKc,KACLvX,EACAoE,EACIjM,KAAKskB,gBAAgBrY,EAAYgQ,EAAezJ,QAChDyJ,EAAerY,MAErB2iB,EAAY9iB,OAAS2iB,EACrBA,EAAepa,QAAQhI,IAAIpD,EAAM2lB,GACjCvmB,KAAKuc,eAAevY,IAAIoc,EAAcmG,GAClCH,EAAeviB,GAAGxB,EAAAsB,YAAY8hB,gBAChCc,EAAYviB,IAAI3B,EAAAsB,YAAY8hB,eAG1Bc,EAAYvB,aAAa/I,EAAezJ,UAAY+T,EAAY1iB,GAAGxB,EAAAsB,YAAY6iB,WACjFxmB,KAAKqhB,MACH/H,EAAAgI,eAAeqD,8BACf1S,OAAOuH,EAAAX,cAAcW,EAAA1H,cAAcU,OAAQvG,IAAa7H,MAAO,cAK9D,CAKL,GAJIiiB,GAEFpU,QAAQpK,EAAY9D,MAAM1B,EAAAsB,YAAY8iB,SAAWpkB,EAAAsB,YAAYqiB,IAAM3jB,EAAAsB,YAAYsiB,MAE7EG,EAAeM,iBACjB,GAAIN,EAAeM,gBAAgBxD,IAAItiB,GAKrC,YAJAZ,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,QAK5BgG,EAAeM,gBAAkB,IAAIvK,IAEvC,IAAIwK,EAAgB,IAAIC,EACtBR,EACAxlB,EACAwf,EACAvY,GAEEoE,GAAYjM,KAAKskB,gBAAgBrY,EAAYgQ,EAAerY,MAChEwiB,EAAeM,gBAAgB1iB,IAAIpD,EAAM+lB,KAKrCvK,EAAAna,UAAAkkB,iBAAR,SACEte,EACAue,GAEA,IAAIjB,EAAatd,EAAYjH,KAAKoF,KAC9Boa,EAAevY,EAAYqd,sBAC3BjjB,EAAsC,KAEtCgK,EAAapE,EAAYoE,WACzB4a,EAAiB5K,EAAerY,KAWpC,GAVIqI,IACF4a,EAAiB7mB,KAAKskB,gBAAgBrY,EACpCgQ,EAAelJ,gBACfkJ,EAAejJ,gBACfiJ,EAAehJ,iBACfgJ,EAAezJ,SAKf3K,EAAYhE,GAAGxB,EAAAsB,YAAYiT,QAAS,CAGtC,GAFA3E,OAAOpK,EAAYjH,KAAKgC,MAAQ4W,EAAA/W,SAASuR,aAErChU,KAAKuc,eAAe2G,IAAI9C,GAK1B,YAJApgB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBAAwBxb,EAAYjH,KAAKwD,MACxDgc,GAIJ,GAAIgG,EAAepa,SACjB,GAAIoa,EAAepa,QAAQkX,IAAIiC,GAK7B,YAJAnlB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,QAK5BgG,EAAepa,QAAU,IAAImQ,IAE/Bla,EAAY,IAAI6kB,EACd9mB,KACAmlB,EACA/E,EACAvY,EACAue,EACAS,GAEFT,EAAepa,QAAQhI,IAAImhB,EAAYljB,GACvCjC,KAAKuc,eAAevY,IAAIoc,EAAcne,GAClCmkB,EAAeviB,GAAGxB,EAAAsB,YAAY8hB,gBAChCxjB,EAAU+B,IAAI3B,EAAAsB,YAAY8hB,mBAIvB,CACL,GAAIW,EAAeM,iBACjB,GAAIN,EAAeM,gBAAgBxD,IAAIiC,GAKrC,YAJAnlB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,QAK5BgG,EAAeM,gBAAkB,IAAIvK,IAEvCla,EAAY,IAAI6kB,EACd9mB,KACAmlB,EACA/E,EACAvY,EACAue,EACAS,GAKEhf,EAAYjH,KAAKgC,MAAQ4W,EAAA/W,SAASuR,YAChCoS,EAAeW,qBACjB/mB,KAAKqhB,MACH/H,EAAAgI,eAAe0F,qDACfnf,EAAYjH,KAAKwD,QAGnBnC,EAAU+B,IAAI3B,EAAAsB,YAAYqQ,aAC1BoS,EAAeW,qBAAuB9kB,GAGxCmkB,EAAeM,gBAAgB1iB,IAAImhB,EAAYljB,GAE7CmkB,EAAeviB,GAAGxB,EAAAsB,YAAY8hB,gBAChCxjB,EAAU+B,IAAI3B,EAAAsB,YAAY8hB,eAI9BzlB,KAAKinB,uBAAuBpf,EAAYoE,WAAYhK,EAAWmkB,IAGzDhK,EAAAna,UAAAglB,uBAAR,SACEhb,EACAhK,EACAmkB,GAEA,GAAIna,EACF,IAAK,IAAI5L,EAAI,EAAGuG,EAAIqF,EAAWpF,OAAQxG,EAAIuG,IAAKvG,EAAG,CACjD,IAAIyY,EAAY7M,EAAW5L,GAC3B,OAAQyY,EAAUjT,eAChB,KAAK2T,EAAA1H,cAAcY,SACnB,KAAK8G,EAAA1H,cAAciB,gBACnB,KAAKyG,EAAA1H,cAAckB,gBACnB,KAAKwG,EAAA1H,cAAcmB,iBACjB,IAAIiU,EAAUpO,EAAUlT,WAAakT,EAAUlT,UAAUiB,QAAU,EACnE,GAAe,GAAXqgB,EAAc,CAChB,IAAIC,EAA0BrO,EAAUlT,UAAW,GACnD,GACEuhB,EAASvkB,MAAQ4W,EAAA/W,SAASI,SACNskB,EAAU1T,aAAe+F,EAAAjG,YAAYmB,OACzD,CACA,IAAI9R,EAAOmX,EACTjB,EAAUjT,cACgBshB,EAAU7lB,OAEtC,GAAIsB,GAAQyW,EAAa0C,QACvB/b,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfD,EAAS/iB,WAEN,CACL,IAAIijB,EAAYjB,EAAekB,mBAC3BD,EAAUnE,IAAItgB,GAChB5C,KAAKqhB,MACH/H,EAAAgI,eAAeiG,kCACfJ,EAAS/iB,QAGXnC,EAAUulB,aAAe5kB,EACzBykB,EAAUrjB,IAAIpB,EAAMX,UAIxBjC,KAAKqhB,MACH/H,EAAAgI,eAAemG,wBACfN,EAAS/iB,YAIbpE,KAAKqhB,MACH/H,EAAAgI,eAAeoG,+BACf5O,EAAU1U,MAAO,IAAK8iB,EAAQtC,SAAS,OAS7CxI,EAAAna,UAAAikB,mBAAR,SACEre,EACAue,GAEA,IAAIjB,EAAatd,EAAYjH,KAAKoF,KAC9B2hB,EAAuB9f,EAAYqd,sBACnC0C,EAAkB5nB,KAAKuc,eAAerb,IAAIymB,GAC1CE,EAAWhgB,EAAYhE,GAAGxB,EAAAsB,YAAYqiB,KACtC8B,GAAQ,EACZ,GAAIF,GACF,GACEA,EAAgBhlB,MAAQoZ,EAAY+L,UAI/B,OAHJF,EACcD,EAAiBI,gBACjBJ,EAAiBK,iBAOhC,YAJAjoB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOujB,QAK5BC,EAAkB,IAAIM,EACpBloB,KACAmlB,EACAwC,EACAvB,GAEF0B,GAAQ,EAGV,IAAI7b,EAAapE,EAAYoE,WACzB4a,EAAiB5K,EAAerY,KAChCqI,IACF4a,EAAiB7mB,KAAKskB,gBAAgBrY,EACpCgQ,EAAezJ,SAInB,IAAI2V,GAAYN,EAAWxlB,EAAA2W,cAAgB3W,EAAA4W,eAAiBkM,EAG5D,GAAItd,EAAYhE,GAAGxB,EAAAsB,YAAYiT,QAAS,CACtC,IAAIwR,EAAahC,EAAehG,aAAe/d,EAAAqW,iBAAmByP,EAClE,GAAInoB,KAAKuc,eAAe2G,IAAIkF,GAK1B,YAJApoB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgkB,GAI5B,IAAIC,EAAkB,IAAIvB,EACxB9mB,KACAmoB,EACAC,EACAvgB,EACA,KACAgf,GAOF,GALIgB,EACSD,EAAiBI,gBAAkBK,EAEnCT,EAAiBK,gBAAkBI,EAE5CP,EAAO,CACT,GAAI1B,EAAepa,SACjB,GAAIoa,EAAepa,QAAQkX,IAAIiC,GAK7B,YAJAnlB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgkB,QAK5BhC,EAAepa,QAAU,IAAImQ,IAE/BiK,EAAepa,QAAQhI,IAAImhB,EAAYyC,QAEvC3V,OAAOmU,EAAepa,SAAWoa,EAAepa,QAAQkX,IAAIiC,IAE9DnlB,KAAKuc,eAAevY,IAAI2jB,EAAsBC,GAC1CxB,EAAeviB,GAAGxB,EAAAsB,YAAY8hB,gBAChCmC,EAAgB5jB,IAAI3B,EAAAsB,YAAY8hB,mBAI7B,CACL,IAAI6C,EAAelC,EAAehG,aAAe/d,EAAAsW,mBAAqBwP,EACtE,GAAI/B,EAAeM,iBACjB,GAAIN,EAAeM,gBAAgBxD,IAAIiF,GAKrC,YAJAnoB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOujB,QAK5BvB,EAAeM,gBAAkB,IAAIvK,IAEvC,IAAIoM,EAAoB,IAAIzB,EAC1B9mB,KACAmoB,EACAG,EACAzgB,EACAue,EACAS,GAEEgB,EACSD,EAAiBI,gBAAkBO,EAEnCX,EAAiBK,gBAAkBM,EAEhDnC,EAAeM,gBAAgB1iB,IAAImkB,EAAUP,GAC7C5nB,KAAKuc,eAAevY,IAAI2jB,EAAsBC,GAC1CxB,EAAeviB,GAAGxB,EAAAsB,YAAY8hB,iBAChCmC,EAAgB5jB,IAAI3B,EAAAsB,YAAY8hB,eAChC8C,EAAkBvkB,IAAI3B,EAAAsB,YAAY8hB,kBAKhCrJ,EAAAna,UAAAue,eAAR,SACE3Y,EACAod,QAAA,IAAAA,MAAA,MAEA,IAAI7E,EAAevY,EAAYqd,sBAC/B,GAAIllB,KAAKuc,eAAe2G,IAAI9C,GAC1BpgB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,OAH5B,CAOA,IAAI+E,EAAatd,EAAYjH,KAAKoF,KAC9BqC,EAAU,IAAImgB,EAAKxoB,KAAMmlB,EAAY/E,EAAcvY,GAIvD,GAHAQ,EAAQ5E,OAASwhB,EACjBjlB,KAAKuc,eAAevY,IAAIoc,EAAc/X,GAElC4c,EAAW,CACb,GAAIA,EAAUjZ,SACZ,GAAIiZ,EAAUjZ,QAAQkX,IAAIiC,GAKxB,YAJAnlB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,QAK5B6E,EAAUjZ,QAAU,IAAImQ,IAE1B8I,EAAUjZ,QAAQhI,IAAImhB,EAAY9c,GAC9B4c,EAAUphB,GAAGxB,EAAAsB,YAAY8hB,gBAAkBpd,EAAQxE,GAAGxB,EAAAsB,YAAY8S,SACpEpO,EAAQrE,IAAI3B,EAAAsB,YAAY8hB,oBAErB,GAAIpd,EAAQxE,GAAGxB,EAAAsB,YAAY8S,QAAS,CACzC,GAAIzW,KAAK2c,iBAAiBuG,IAAI9C,GAK5B,YAJApgB,KAAKqhB,MACH/H,EAAAgI,eAAeoE,4DACf7d,EAAYjH,KAAKwD,MAAOgc,GAM5B,GAFApgB,KAAK2c,iBAAiB3Y,IAAIoc,EAAc/X,GACxCrI,KAAKqgB,iBAAiBrU,QAAQhI,IAAImhB,EAAY9c,GAC1CR,EAAYzD,MAAMiJ,OAAOsY,QAAS,CACpC,GAAI3lB,KAAK4c,mBAAmBsG,IAAIiC,GAAa,CAC3C,IAAIS,EAA+B5lB,KAAK4c,mBAAmB1b,IAAIikB,GAK/D,YAJAnlB,KAAKqhB,MACH/H,EAAAgI,eAAeoE,4DACf7d,EAAYjH,KAAKwD,MAAOwhB,EAAevd,QAAQ+X,cAInD/X,EAAQrE,IAAI3B,EAAAsB,YAAY8hB,eACxBzlB,KAAK4c,mBAAmB5Y,IAAImhB,GAC1B9c,QAAOA,EACPwD,WAAYhE,EAAYjH,QAM9B,IADA,IAAI8I,EAAS7B,EAAY6B,OAChBrJ,EAAI,EAAGuG,EAAI8C,EAAO7C,OAAQxG,EAAIuG,IAAKvG,EAC1CL,KAAKyoB,oBAAoB/e,EAAOrJ,GAAIgI,GAGtCrI,KAAK8kB,YAAYzc,EAASR,KAGpBuU,EAAAna,UAAAwmB,oBAAR,SACE5gB,EACA6gB,GAEA,IAAI9nB,EAAOiH,EAAYjH,KAAKoF,KACxBoa,EAAevY,EAAYqd,sBAC/B,GAAIwD,EAAI1c,SACN,GAAI0c,EAAI1c,QAAQkX,IAAItiB,GAKlB,YAJAZ,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,QAK5BsI,EAAI1c,QAAU,IAAImQ,IAEpB,IAAI7a,EAAQ,IAAIqnB,EAAUD,EAAK1oB,KAAMY,EAAMwf,EAAcvY,GACzD6gB,EAAI1c,QAAQhI,IAAIpD,EAAMU,GAClBonB,EAAI7kB,GAAGxB,EAAAsB,YAAY8hB,gBACrBnkB,EAAM0C,IAAI3B,EAAAsB,YAAY8hB,gBAIlBrJ,EAAAna,UAAAwe,kBAAR,SACEnU,EACAyT,GAEA,IAAI/T,EAAUM,EAAUN,QACxB,GAAIA,EACF,IAAK,IAAI3L,EAAI,EAAGuG,EAAIoF,EAAQnF,OAAQxG,EAAIuG,IAAKvG,EAC3CL,KAAK4oB,iBAAiB5c,EAAQ3L,GAAIiM,EAAUgB,aAAcyS,QAG5D/f,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACf9a,EAAUlI,QAKRgY,EAAAna,UAAAkgB,yBAAR,SACE/B,EACA/X,EACAwgB,GAGA7oB,KAAK2c,iBAAiB3Y,IAAIoc,EAAc/X,GAGxC,IAAIiF,EAAeub,EAAmBzkB,MAAMiJ,OAAOC,aAC/Cwb,EAASzmB,EAAA+W,iBAAmB9L,EAC5B4S,EAAYlgB,KAAKuc,eAAerb,IAAI4nB,GACnC5I,IAAWA,EAAYjO,OAAOjS,KAAKuc,eAAerb,IAAI4nB,EAASzmB,EAAAwT,eAAiB,WACrF5D,OAAOiO,EAAUtd,MAAQoZ,EAAY+M,WACrC,IAAI5D,EAAa0D,EAAmB7iB,KACxBka,EAAWlU,QAAQhI,IAAImhB,EAAY9c,GAG/C,IAAIgF,EAASwb,EAAmBzkB,MAAMiJ,OAClCA,EAAOqX,UACL1kB,KAAKuc,eAAe2G,IAAIiC,GAC1BnlB,KAAKqhB,MACH/H,EAAAgI,eAAeoE,4DACfmD,EAAmBzkB,MAAO+gB,IAG5B9c,EAAQ+X,aAAe+E,EACvBnlB,KAAKuc,eAAevY,IAAImhB,EAAY9c,IAI7BgF,EAAOsY,SAChB3lB,KAAK4c,mBAAmB5Y,IAAI6kB,EAAmB7iB,MAC7CqC,QAAOA,EACPwD,WAAYgd,KAKVzM,EAAAna,UAAA2mB,iBAAR,SACE9R,EACAxJ,EACAyS,GAEA,IAQIiJ,EACAC,EACAjH,EAVAvU,EAAeqJ,EAAO1S,MAAMiJ,OAAOC,aAAejL,EAAAwT,eAAiBiB,EAAOrJ,aAAazH,KAC3F,GAAIhG,KAAK2c,iBAAiBuG,IAAIzV,GAC5BzN,KAAKqhB,MACH/H,EAAAgI,eAAeoE,4DACf5O,EAAOrJ,aAAarJ,MAAOqJ,QAS/B,GAAoB,MAAhBH,EAAsB,CAIxB,GAHA0b,EAAiBlS,EAAO1S,MAAMiJ,OAAOC,aAAejL,EAAAwT,eAAiBiB,EAAOlW,KAAKoF,KAG7EhG,KAAKuc,eAAe2G,IAAI8F,GAM1B,YALAhpB,KAAKmiB,yBACH1U,EACSzN,KAAKuc,eAAerb,IAAI8nB,GACjClS,EAAOrJ,cAMX,GAAIsS,EAAcmD,IAAIzV,GAKpB,YAJAzN,KAAKqhB,MACH/H,EAAAgI,eAAeoE,4DACf5O,EAAOrJ,aAAarJ,MAAOqJ,IAI/BuU,EAAe,IAAInI,GACNqI,YAAa,EAC1BF,EAAavU,aAAeub,EAC5BhH,EAAalL,OAASA,EACtBiJ,EAAc/b,IAAIyJ,EAAcuU,OAG3B,CAKL,GAJAgH,EAAiB1b,EAAejL,EAAAwT,eAAiBiB,EAAOlW,KAAKoF,KAG7DijB,EAAoBjpB,KAAKuc,eAAerb,IAAI8nB,GAO1C,YALAhpB,KAAKmiB,yBACH1U,EACAwb,EACAnS,EAAOrJ,cAOX,IADA,IAAIyb,EAAO,IAAIC,IACRnH,EAAejC,EAAc7e,IAAI8nB,IAAiB,CACvD,IAAIhH,EAAaE,WAaV,CAEL,GADA+G,EAAoBjpB,KAAKuc,eAAerb,IAAI8gB,EAAavU,cAOvD,YALAzN,KAAKmiB,yBACH1U,EACAwb,EACAnS,EAAOrJ,cAIX,MArBA,GADAwb,EAAoBjpB,KAAK2c,iBAAiBzb,IAAI8gB,EAAavU,cAOzD,YALAzN,KAAKmiB,yBACH1U,EACAwb,EACAnS,EAAOrJ,cAKX,GADAub,EAAiBhH,EAAavU,aAC1Byb,EAAKhG,IAAIlB,GAAe,MAC5BkH,EAAKE,IAAIpH,GAgBb,GAAIjC,EAAcmD,IAAIzV,GAKpB,YAJAzN,KAAKqhB,MACH/H,EAAAgI,eAAeoE,4DACf5O,EAAOrJ,aAAarJ,MAAOqJ,IAI/BuU,EAAe,IAAInI,GACNqI,YAAa,EAC1BF,EAAavU,aAAeub,EAC5BhH,EAAalL,OAASA,EACtBiJ,EAAc/b,IAAIyJ,EAAcuU,KAI5B5F,EAAAna,UAAAye,mBAAR,SACE7Y,EACAod,QAAA,IAAAA,MAAA,MAEA,IAAI7E,EAAevY,EAAYqd,sBAC/B,GAAIllB,KAAKuc,eAAe2G,IAAI9C,GAC1BpgB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,OAH5B,CAOA,IAAI+E,EAAatd,EAAYjH,KAAKoF,KAC9BiG,EAAapE,EAAYoE,WACzBhK,EAAY,IAAI6kB,EAClB9mB,KACAmlB,EACA/E,EACAvY,EACA,KACAoE,EACIjM,KAAKskB,gBAAgBrY,EACnBgQ,EAAe1J,OACf0J,EAAezJ,OACfyJ,EAAe3J,UAEjB2J,EAAerY,MAKrB,GAHA3B,EAAUwB,OAASwhB,EACnBjlB,KAAKuc,eAAevY,IAAIoc,EAAcne,GAElCgjB,EAAW,CACb,GAAIA,EAAUjZ,SACZ,GAAIiZ,EAAUjZ,QAAQkX,IAAIiC,GAKxB,YAJAnlB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,QAK5B6E,EAAUjZ,QAAU,IAAImQ,IAE1B8I,EAAUjZ,QAAQhI,IAAImhB,EAAYljB,GAC9BgjB,EAAUphB,GAAGxB,EAAAsB,YAAY8hB,gBAAkBxjB,EAAU4B,GAAGxB,EAAAsB,YAAY8S,UACtExU,EAAUwB,OAASwhB,EACnBhjB,EAAU+B,IAAI3B,EAAAsB,YAAY8hB,qBAEvB,GAAIxjB,EAAU4B,GAAGxB,EAAAsB,YAAY8S,QAAS,CAC3C,GAAIzW,KAAK2c,iBAAiBuG,IAAI9C,GAK5B,YAJApgB,KAAKqhB,MACH/H,EAAAgI,eAAeoE,4DACf7d,EAAYjH,KAAKwD,MAAOgc,GAM5B,GAFApgB,KAAK2c,iBAAiB3Y,IAAIoc,EAAcne,GACxCjC,KAAKqgB,iBAAiBrU,QAAQhI,IAAImhB,EAAYljB,GAC1C4F,EAAYzD,MAAMiJ,OAAOsY,QAAS,CACpC,GAAI3lB,KAAK4c,mBAAmBsG,IAAIiC,GAAa,CAC3C,IAAIS,EAA+B5lB,KAAK4c,mBAAmB1b,IAAIikB,GAK/D,YAJAnlB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOwhB,EAAevd,QAAQ+X,cAInDne,EAAU+B,IAAI3B,EAAAsB,YAAY8hB,eAC1BzlB,KAAK4c,mBAAmB5Y,IAAImhB,GAC1B9c,QAASpG,EACT4J,WAAYhE,EAAYjH,QAK9BZ,KAAK8kB,YAAY7iB,EAAW4F,KAGtBuU,EAAAna,UAAA0e,kBAAR,SACErU,EACAyT,EACAD,GAEA,IAAIxR,EAAehC,EAAUgC,aAC7B,GAAIA,EACF,IAAK,IAAIjO,EAAI,EAAGuG,EAAI0H,EAAazH,OAAQxG,EAAIuG,IAAKvG,EAChDL,KAAKqpB,iBACH/a,EAAajO,GACbiM,EAAUgB,aACVyS,EAAeD,QAGd,GAAIxT,EAAUiC,cAAe,CAClC,IAAI4W,EAAa7Y,EAAUiC,cAAcvI,KACrCoa,EACF9T,EAAUlI,MAAMiJ,OAAOC,aACvBjL,EAAAwT,eACAsP,EAEF,GAAInlB,KAAKuc,eAAe2G,IAAI9C,GAM1B,YALApgB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACf/W,EAAUiC,cAAcnK,MACxBgc,GAMJ,IAAIF,EAAYlgB,KAAKuc,eAAerb,IAAIoL,EAAUgB,cAClD,GAAI4S,EAEF,YADAlgB,KAAKuc,eAAevY,IAAIoc,EAAcF,GAKxC,IAAIc,EAAe,IAAIpH,EACvBoH,EAAaE,UAAYd,EACzB,IAAI3S,EAAepL,EAAA+W,iBAAmB9M,EAAUgB,aAChD0T,EAAavT,aAAeA,EAC5BuT,EAAaI,gBAAkB3T,EAAepL,EAAAwT,eAAiB,QAC/DmL,EAAanZ,YAAc,KAC3BiY,EAAc0F,KAAKxE,KAIf5E,EAAAna,UAAAonB,iBAAR,SACExhB,EACAyF,EACA+W,EACAvE,GAEA,IAAIoB,EAAYrZ,EAAYqd,sBAC5B,GAAIllB,KAAKuc,eAAe2G,IAAIhC,GAC1BlhB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAO8c,OAH5B,CAQA,IAGI7Y,EAHAoF,EAAeH,EAAejL,EAAAwT,eAAiBhO,EAAY4F,aAAazH,KAI5E,GAAIqC,EAAUrI,KAAK2c,iBAAiBzb,IAAIuM,GACtCzN,KAAKuc,eAAevY,IAAIkd,EAAW7Y,OADrC,CAMA,IAAMihB,EAAYjnB,EAAAwT,eAAiB,QAC/BmL,EAAe,IAAIpH,EACvBoH,EAAaE,UAAYA,EACrB5T,EAAasL,SAAS0Q,IACxBtI,EAAavT,aAAeA,EAC5BuT,EAAaI,gBACX9T,EAAayI,UAAU,EAAGzI,EAAazG,OAASyiB,EAAUziB,OAAS,GACnEgB,EAAY4F,aAAazH,OAG3Bgb,EAAavT,aAAeA,EAC5BuT,EAAaI,gBACX9T,EACAgc,EACAjnB,EAAAwT,eACAhO,EAAY4F,aAAazH,MAG7Bgb,EAAanZ,YAAcA,EAC3BiY,EAAc0F,KAAKxE,MAGb5E,EAAAna,UAAA2e,oBAAR,SAA4B/Y,EAAmCod,QAAA,IAAAA,MAAA,MAC7D,IAAI7E,EAAevY,EAAYqd,sBAC/B,GAAIllB,KAAKuc,eAAe2G,IAAI9C,GAC1BpgB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,OAH5B,CAQA,IAAInU,EAAapE,EAAYoE,WACzBkZ,EAAatd,EAAYjH,KAAKoF,KAC9B/D,EAAY,IAAIsnB,EAClBvpB,KACAmlB,EACA/E,EACAvY,EACAoE,EACIjM,KAAKskB,gBAAgBrY,EAAYgQ,EAAe1J,QAChD0J,EAAerY,MAKrB,GAHA3B,EAAUwB,OAASwhB,EACnBjlB,KAAKuc,eAAevY,IAAIoc,EAAcne,GAElCgjB,EAAW,CACb,GAAIA,EAAUjZ,SACZ,GAAIiZ,EAAUjZ,QAAQkX,IAAIjhB,EAAUme,cAKlC,YAJApgB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,QAK5B6E,EAAUjZ,QAAU,IAAImQ,IAE1B8I,EAAUjZ,QAAQhI,IAAI/B,EAAUme,aAAcne,GAC1CgjB,EAAUphB,GAAGxB,EAAAsB,YAAY8hB,gBAAkBxjB,EAAU4B,GAAGxB,EAAAsB,YAAY8S,SACtExU,EAAU+B,IAAI3B,EAAAsB,YAAY8hB,oBAEvB,GAAIxjB,EAAU4B,GAAGxB,EAAAsB,YAAY8S,QAAS,CAC3C,GAAIzW,KAAK2c,iBAAiBuG,IAAI9C,GAK5B,YAJApgB,KAAKqhB,MACH/H,EAAAgI,eAAeoE,4DACf7d,EAAYjH,KAAKwD,MAAOgc,GAM5B,GAFApgB,KAAK2c,iBAAiB3Y,IAAIoc,EAAcne,GACxCjC,KAAKqgB,iBAAiBrU,QAAQhI,IAAImhB,EAAYljB,GAC1C4F,EAAYzD,MAAMiJ,OAAOsY,QAAS,CACpC,GAAI3lB,KAAK4c,mBAAmBsG,IAAIiC,GAAa,CAC3C,IAAIS,EAA+B5lB,KAAK4c,mBAAmB1b,IAAIikB,GAK/D,YAJAnlB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOwhB,EAAevd,QAAQ+X,cAInDne,EAAU+B,IAAI3B,EAAAsB,YAAY8hB,eAC1BzlB,KAAK4c,mBAAmB5Y,IAAImhB,GAC1B9c,QAASpG,EACT4J,WAAYhE,EAAYjH,QAM9B,IADA,IAAIilB,EAAqBhe,EAAYmE,QAC5B3L,EAAI,EAAGuG,EAAIif,EAAmBhf,OAAQxG,EAAIuG,IAAKvG,EAAG,CACzD,IAAIylB,EAAoBD,EAAmBxlB,GAC3C,OAAQylB,EAAkBljB,MAExB,KAAK4W,EAAA/W,SAASgV,iBACZzX,KAAK+lB,gBAAkCD,EAAmB7jB,GAC1D,MAEF,KAAKuX,EAAA/W,SAASyS,kBACR4Q,EAAkB/hB,MAAM1B,EAAAsB,YAAYqiB,IAAM3jB,EAAAsB,YAAYsiB,KACxDjmB,KAAKkmB,mBAAsCJ,EAAmB7jB,GAE9DjC,KAAKmmB,iBAAoCL,EAAmB7jB,GAE9D,MAEF,QACE,MAAM,IAAIghB,MAAM,8BAKtBjjB,KAAK8kB,YAAY7iB,EAAW4F,KAGtBuU,EAAAna,UAAA4e,oBAAR,SACEhZ,EACAmY,EACAC,EACAuJ,QAAA,IAAAA,MAAA,MAEA,IAAIpJ,EAAevY,EAAYqd,sBAC3BC,EAAatd,EAAYjH,KAAKoF,KAC9Bif,EAAYjlB,KAAKuc,eAAerb,IAAIkf,GAQxC,GAPK6E,KACHA,EAAY,IAAIwE,EAAUzpB,KAAMmlB,EAAY/E,EAAcvY,IAChDpE,OAAS+lB,EACnBxpB,KAAKuc,eAAevY,IAAIoc,EAAc6E,GACtCjlB,KAAK8kB,YAAYG,EAAWpd,IAG1B2hB,EAAiB,CACnB,GAAIA,EAAgBxd,SAClB,GAAIwd,EAAgBxd,QAAQkX,IAAIiC,GAK9B,YAJAnlB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,QAK5BoJ,EAAgBxd,QAAU,IAAImQ,IAEhCqN,EAAgBxd,QAAQhI,IAAImhB,EAAYF,GACpCuE,EAAgB3lB,GAAGxB,EAAAsB,YAAY8hB,gBAAkBR,EAAUphB,GAAGxB,EAAAsB,YAAY8S,SAC5EwO,EAAUjhB,IAAI3B,EAAAsB,YAAY8hB,oBAEvB,GAAIR,EAAUphB,GAAGxB,EAAAsB,YAAY8S,QAAS,CAC3C,IAAImP,EAAiB5lB,KAAK2c,iBAAiBzb,IAAIkf,GAa/C,GAZIwF,GACGA,EAAe/hB,GAAGxB,EAAAsB,YAAY8S,SACjCzW,KAAKqhB,MACH/H,EAAAgI,eAAeoI,kFACf7hB,EAAYjH,KAAKwD,MAAO6gB,EAAU7E,cAGtC6E,EAAYW,GAEZ5lB,KAAK2c,iBAAiB3Y,IAAIoc,EAAc6E,GAE1CjlB,KAAKqgB,iBAAiBrU,QAAQhI,IAAImhB,EAAYF,GAC1Cpd,EAAYzD,MAAMiJ,OAAOsY,QAAS,CACpC,GAAI3lB,KAAK4c,mBAAmBsG,IAAIiC,GAAa,CAC3C,IAAIwE,EAA+B3pB,KAAK4c,mBAAmB1b,IAAIikB,GAC/D,GAAIwE,EAAethB,UAAY4c,EAK7B,YAJAjlB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOulB,EAAethB,QAAQ+X,mBAKnDpgB,KAAK4c,mBAAmB5Y,IAAImhB,GAC1B9c,QAAS4c,EACTpZ,WAAYhE,EAAYjH,OAG5BqkB,EAAUjhB,IAAI3B,EAAAsB,YAAY8hB,gBAK9B,IADA,IAAIzZ,EAAUnE,EAAYmE,QACjB3L,EAAI,EAAGuG,EAAIoF,EAAQnF,OAAQxG,EAAIuG,IAAKvG,EAC3C,OAAQ2L,EAAQ3L,GAAGuC,MACjB,KAAK4W,EAAA/W,SAASkU,iBACZ3W,KAAKugB,gBAAkCvU,EAAQ3L,GAAI2f,EAAeC,EAAkBgF,GACpF,MAEF,KAAKzL,EAAA/W,SAAS2U,gBACZpX,KAAKwgB,eAAgCxU,EAAQ3L,GAAI4kB,GACjD,MAEF,KAAKzL,EAAA/W,SAASwS,oBACZjV,KAAK0gB,mBAAwC1U,EAAQ3L,GAAI4kB,GACzD,MAEF,KAAKzL,EAAA/W,SAASsV,qBACZ/X,KAAK4gB,oBAA0C5U,EAAQ3L,GAAI4kB,GAC3D,MAEF,KAAKzL,EAAA/W,SAAS+T,qBACZxW,KAAK6gB,oBAA0C7U,EAAQ3L,GAAI2f,EAAeC,EAAkBgF,GAC5F,MAEF,KAAKzL,EAAA/W,SAAS4V,gBAGZrY,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfpb,EAAQ3L,GAAG+D,OAEb,MAEF,KAAKoV,EAAA/W,SAAS8T,SACZvW,KAAK+gB,oBAAuC/U,EAAQ3L,GAAI4kB,GACxD,MAEF,QACE,MAAM,IAAIhC,MAAM,+BAMhB7G,EAAAna,UAAA6e,oBAAR,SAA4BjZ,EAA8Bod,QAAA,IAAAA,MAAA,MAGxD,IAAIrkB,EAAOiH,EAAYjH,KAAKoF,KAC5B,GAAIhG,KAAKyc,YAAYyG,IAAItiB,IAASZ,KAAK0c,YAAYwG,IAAItiB,GACrDZ,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOxD,OAH5B,CAOA,IAAI8P,EAAQ,IAAIoJ,EAChBpJ,EAAM5E,eAAiBjE,EAAYiE,eACnC4E,EAAMrM,KAAOwD,EAAYxD,KAEzBrE,KAAK0c,YAAY1Y,IAAIpD,EAAM8P,KAGrB0L,EAAAna,UAAA8e,oBAAR,SAA4BzU,EAA8B2Y,QAAA,IAAAA,MAAA,MAExD,IADA,IAAI3W,EAAehC,EAAUgC,aACpBjO,EAAI,EAAGuG,EAAI0H,EAAazH,OAAQxG,EAAIuG,IAAKvG,EAAG,CACnD,IAAIwH,EAAcyG,EAAajO,GAC3B4L,EAAapE,EAAYoE,WACzBmU,EAAevY,EAAYqd,sBAC/B,GAAIllB,KAAKuc,eAAe2G,IAAI9C,GAC1BpgB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,OAH5B,CAOA,IAAI+E,EAAatd,EAAYjH,KAAKoF,KAC9B4jB,EAAS,IAAI3F,EACfjkB,KACAmlB,EACA/E,EACA7G,EAAA+E,KAAKc,KACLvX,EACAoE,EACIjM,KAAKskB,gBAAgBrY,EACnBgQ,EAAe1J,OACf0J,EAAezJ,OACfyJ,EAAe3J,UAEjB2J,EAAerY,MAYrB,GAVAgmB,EAAOnmB,OAASwhB,EAChBjlB,KAAKuc,eAAevY,IAAIoc,EAAcwJ,GAElCA,EAAO5E,aAAa/I,EAAezJ,UAAYoX,EAAO/lB,GAAGxB,EAAAsB,YAAYkmB,QACvE7pB,KAAKqhB,MACH/H,EAAAgI,eAAeqD,8BACf1S,OAAOuH,EAAAX,cAAcW,EAAA1H,cAAcU,OAAQvG,IAAa7H,MAAO,UAI/D6gB,EAAW,CACb,GAAIA,EAAUjZ,SACZ,GAAIiZ,EAAUjZ,QAAQkX,IAAIiC,GAAa,CACrCnlB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,GAE1B,eAGF6E,EAAUjZ,QAAU,IAAImQ,IAE1B8I,EAAUjZ,QAAQhI,IAAImhB,EAAYyE,GAC9B3E,EAAUphB,GAAGxB,EAAAsB,YAAY8hB,gBAAkBmE,EAAO/lB,GAAGxB,EAAAsB,YAAY8S,SACnEmT,EAAO5lB,IAAI3B,EAAAsB,YAAY8hB,oBAEpB,GAAImE,EAAO/lB,GAAGxB,EAAAsB,YAAY8S,UAC3BzW,KAAK2c,iBAAiBuG,IAAI9C,GAC5BpgB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOgc,GAG1BpgB,KAAK2c,iBAAiB3Y,IAAIoc,EAAcwJ,GAE1C5pB,KAAKqgB,iBAAiBrU,QAAQhI,IAAImhB,EAAYyE,GAC1C/hB,EAAYzD,MAAMiJ,OAAOsY,SAAS,CACpC,GAAI3lB,KAAK4c,mBAAmBsG,IAAIiC,GAAa,CAC3C,IAAIS,EAA+B5lB,KAAK4c,mBAAmB1b,IAAIikB,GAC/DnlB,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOwhB,EAAevd,QAAQ+X,cAEjD,SAEFwJ,EAAO5lB,IAAI3B,EAAAsB,YAAY8hB,eACvBzlB,KAAK4c,mBAAmB5Y,IAAImhB,GAC1B9c,QAASuhB,EACT/d,WAAYhE,EAAYjH,OAI9BZ,KAAK8kB,YAAY8E,EAAQ/hB,MAG/BuU,EA/uDA,CAA6B9C,EAAAwQ,mBAkzD7B,SAAgBrF,EAAoB7hB,GAClC,OAAQA,GACN,KAAK4W,EAAA1H,cAAcS,OAAQ,OAAO0J,EAAe1J,OACjD,KAAKiH,EAAA1H,cAAcY,SACnB,KAAK8G,EAAA1H,cAAciB,gBAAiB,OAAOkJ,EAAelJ,gBAC1D,KAAKyG,EAAA1H,cAAckB,gBAAiB,OAAOiJ,EAAejJ,gBAC1D,KAAKwG,EAAA1H,cAAcmB,iBAAkB,OAAOgJ,EAAehJ,iBAC3D,KAAKuG,EAAA1H,cAAce,UAAW,OAAOoJ,EAAepJ,UACpD,KAAK2G,EAAA1H,cAAcc,OAAQ,OAAOqJ,EAAerJ,OACjD,KAAK4G,EAAA1H,cAAcU,OAAQ,OAAOyJ,EAAezJ,OACjD,KAAKgH,EAAA1H,cAAcQ,SAAU,OAAO2J,EAAe3J,SACnD,KAAKkH,EAAA1H,cAAcM,QAAS,OAAO6J,EAAe7J,QAIlD,QAAS,OAAO6J,EAAerY,MAj0DtBlE,EAAA0c,UAkvDb,SAAYJ,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,0BAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,wBAEAA,IAAA,0BAEAA,IAAA,0BAhCF,CAAYA,EAAAtc,EAAAsc,cAAAtc,EAAAsc,iBAmCZ,SAAYC,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,uCAEAA,IAAA,0BAEAA,IAAA,oBAEAA,IAAA,oBAEAA,IAAA,yBAEAA,IAAA,uBAEAA,IAAA,yBAEAA,IAAA,sBAEAA,IAAA,sBA1BF,CAAYA,EAAAvc,EAAAuc,iBAAAvc,EAAAuc,oBA6BZvc,EAAA+kB,sBAoBA,IAAAsF,EAAA,WAoBE,SAAAA,EAAsBC,EAAkB7E,EAAoB/E,GAT5DpgB,KAAA0D,MAAqBrB,EAAAsB,YAAYC,KAEjC5D,KAAA6mB,eAAiC5K,EAAerY,KAEhD5D,KAAAgM,QAAsC,KAEtChM,KAAAyD,OAAyB,KAIvBzD,KAAKgqB,QAAUA,EACfhqB,KAAKmlB,WAAaA,EAClBnlB,KAAKiqB,cAAgB7J,EA4BzB,OAzBS2J,EAAAG,aAAP,SAAoBC,WAClB,IAAKA,EAAK,OAAOA,EACjB,IAAIC,EAAW,OACf,IAAe,IAAAC,EAAA5I,EAAA0I,GAAGG,EAAAD,EAAA1I,QAAA2I,EAAA1I,KAAA0I,EAAAD,EAAA1I,OAAE,CAAf,IAAI4I,EAAED,EAAAhpB,MACT8oB,GAAiB,KAANG,EAAY,IAAMA,oGAE/B,OAAOH,GAGTrpB,OAAAC,eAAI+oB,EAAA9nB,UAAA,oBAAJ,WACE,OAAO8nB,EAAQG,aAAalqB,KAAKiqB,oBAGnC,SAAiB7J,GACfpgB,KAAKiqB,cAAgB7J,mCAIvB2J,EAAA9nB,UAAA4B,GAAA,SAAGC,GAA2B,OAAQ9D,KAAK0D,MAAQI,IAASA,GAE5DimB,EAAA9nB,UAAA8B,MAAA,SAAML,GAA4B,OAA+B,IAAvB1D,KAAK0D,MAAQA,IAEvDqmB,EAAA9nB,UAAA+B,IAAA,SAAIF,GAA2B9D,KAAK0D,OAASI,GAE7CimB,EAAA9nB,UAAA+iB,aAAA,SAAalhB,GAA8B,OAAQ9D,KAAK6mB,eAAiB/iB,IAASA,GACpFimB,EAnDA,GAAsBrqB,EAAAqqB,UAsDtB,IAAA5J,EAAA,SAAA9O,GAQE,SAAA8O,EACE6J,EACA3c,GAFF,IAAAkE,EAIEF,EAAA7Q,KAAAR,KAAMgqB,EAAS3c,EAAOC,aAAcjL,EAAA+W,iBAAmB/L,EAAOC,eAAatN,YAV7EuR,EAAA3O,KAAOoZ,EAAY+M,UAWjBxX,EAAKvF,QAAU,IAAImQ,MAEvB,OAf+B7K,EAAA6O,EAAA9O,GAe/B8O,EAfA,CAA+B4J,GAAlBrqB,EAAAygB,YAkBb,IAAAsJ,EAAA,SAAApY,GASE,SAAAoY,EACEO,EACA7E,EACA/E,EACAvY,GAJF,IAAA0J,EAMEF,EAAA7Q,KAAAR,KAAMgqB,EAAS7E,EAAY/E,IAAapgB,YAZ1CuR,EAAA3O,KAAOoZ,EAAYwO,UAajBjZ,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,QAE7B,OAnB+B4N,EAAAmY,EAAApY,GAmB/BoY,EAnBA,CAA+BM,GAAlBrqB,EAAA+pB,YAsBb,IAAAjB,EAAA,SAAAnX,GAQE,SAAAmX,EACEwB,EACA7E,EACA/E,EACAvY,GAJF,IAAA0J,EAMEF,EAAA7Q,KAAAR,KAAMgqB,EAAS7E,EAAY/E,IAAapgB,YAZ1CuR,EAAA3O,KAAOoZ,EAAYyO,KAajBlZ,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,QAE7B,OAlB0B4N,EAAAkX,EAAAnX,GAkB1BmX,EAlBA,CAA0BuB,GAAbrqB,EAAA8oB,OAqBb,IAAAG,EAAA,SAAAtX,GASE,SAAAsX,EACED,EACAsB,EACA7E,EACA/E,EACAvY,GALF,IAAA0J,EAOEF,EAAA7Q,KAAAR,KAAMgqB,EAAS7E,EAAY/E,IAAapgB,YAd1CuR,EAAA3O,KAAOoZ,EAAY0O,UAKnBnZ,EAAAoZ,cAAqB,EAUnBpZ,EAAK9N,OAASilB,EACdnX,EAAK1J,YAAcA,IAEvB,OApB+ByJ,EAAAqX,EAAAtX,GAoB/BsX,EApBA,CAA+BoB,GAAlBrqB,EAAAipB,YAsBb,SAAkBiC,GAChBA,IAAA,eACAA,IAAA,qBACAA,IAAA,iBAHF,CAAkBlrB,EAAAkrB,oBAAAlrB,EAAAkrB,uBAMlB,IAAAC,EAAA,SAAAxZ,GAeE,SAAAwZ,EACEb,EACA7E,EACA/E,EACA/b,EACAwD,GALF,IAAA0J,EAOEF,EAAA7Q,KAAAR,KAAMgqB,EAAS7E,EAAY/E,IAAapgB,YAb1CuR,EAAAuZ,kBAAiB,EAcfvZ,EAAKlN,KAAOA,EACZkN,EAAK1J,YAAcA,IAgBvB,OAxCyCyJ,EAAAuZ,EAAAxZ,GA2BvCwZ,EAAA5oB,UAAAiiB,yBAAA,SAAyB5iB,GAIvB,OAHAtB,KAAK8qB,kBAAiB,EACtB9qB,KAAK+qB,qBAAuBzpB,EAC5BtB,KAAKgE,IAAI3B,EAAAsB,YAAYkmB,MAAQxnB,EAAAsB,YAAYqnB,SAClChrB,MAGT6qB,EAAA5oB,UAAAmiB,uBAAA,SAAuB9iB,GAIrB,OAHAtB,KAAK8qB,kBAAiB,EACtB9qB,KAAKirB,mBAAqB3pB,EAC1BtB,KAAKgE,IAAI3B,EAAAsB,YAAYkmB,MAAQxnB,EAAAsB,YAAYqnB,SAClChrB,MAEX6qB,EAxCA,CAAyCd,GAA5BrqB,EAAAmrB,sBA2Cb,IAAA5G,EAAA,SAAA5S,GAIE,SAAA4S,EACE+F,EACA7E,EACA/E,EACA/b,EACAwD,EACAgf,GANF,IAAAtV,EAQEF,EAAA7Q,KAAAR,KAAMgqB,EAAS7E,EAAY/E,EAAc/b,EAAMwD,IAAY7H,YAV7DuR,EAAA3O,KAAOoZ,EAAYzJ,OAWjBhB,EAAK7N,MAAQmE,EAAcA,EAAYnE,MAAQrB,EAAAsB,YAAYC,KAC3D2N,EAAKsV,eAAiBA,EACtBtV,EAAKlN,KAAOA,IAEhB,OAjB4BiN,EAAA2S,EAAA5S,GAiB5B4S,EAjBA,CAA4B4G,GAAfnrB,EAAAukB,SAoBb,IAAAiH,EAAA,WAiBA,OALE,SAAYtqB,EAAcyD,EAAYU,QAAA,IAAAA,MAAA,MACpC/E,KAAKY,KAAOA,EACZZ,KAAKqE,KAAOA,EACZrE,KAAK+E,YAAcA,GAfvB,GAAarF,EAAAwrB,YAoBb,IAAAC,EAAA,SAAA9Z,GASE,SAAA8Z,EACEnB,EACA7E,EACAiG,EACA/mB,EACAwD,QAAA,IAAAA,MAAA,MALF,IAAA0J,EAOEF,EAAA7Q,KAAAR,KAAMgqB,EAAS7E,EAAYA,EAAY9gB,EAAMwD,IAAY7H,YAd3DuR,EAAA3O,KAAOoZ,EAAYqP,MAKnB9Z,EAAA+Z,aAA8B,KAU5B/Z,EAAK6Z,MAAQA,IAEjB,OAnB2B9Z,EAAA6Z,EAAA9Z,GAmB3B8Z,EAnBA,CAA2BN,GAAdnrB,EAAAyrB,QAsBb,IAAArE,EAAA,SAAAzV,GAgBE,SAAAyV,EACEkD,EACA7E,EACA/E,EACAvY,EACAue,EACAS,QADA,IAAAT,MAAA,WACA,IAAAS,MAAiC5K,EAAerY,MANlD,IAAA2N,EAQEF,EAAA7Q,KAAAR,KAAMgqB,EAAS7E,EAAY/E,IAAapgB,YAtB1CuR,EAAA3O,KAAOoZ,EAAYuH,mBAOnBhS,EAAAga,UAAkC,IAAIpP,IAEtC5K,EAAAia,mBAAoC,KAEpCja,EAAAiW,aAA6BnO,EAAa0C,QAYxCxK,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,MACzB6N,EAAK6U,eAAiBA,EACtB7U,EAAKsV,eAAiBA,IAI1B,OAhCuCvV,EAAAwV,EAAAzV,GA+BrCyV,EAAA7kB,UAAA2iB,SAAA,WAAqB,OAAO5kB,KAAKmlB,YACnC2B,EAhCA,CAAuCiD,GAA1BrqB,EAAAonB,oBAmCb,IAAA2E,EAAA,SAAApa,GAoCE,SAAAoa,EACExpB,EACAme,EACAhR,EACA3L,EACAioB,gBADA,IAAAjoB,MAAA,WACA,IAAAioB,MAAA,MALF,IAAAna,EAOEF,EAAA7Q,KAAAR,KAAMiC,EAAU+nB,QAAS/nB,EAAUkjB,WAAY/E,IAAapgB,KAO5D,GAhDFuR,EAAA3O,KAAOoZ,EAAY9H,SAOnB3C,EAAAoa,aAAkC,IAAIxP,IAEtC5K,EAAAqa,iBAEAra,EAAAsa,oBAEAta,EAAAua,aAA8B,KAM9Bva,EAAAwa,kBAEAxa,EAAAya,IAAmB,EAEnBza,EAAA0a,oBAA2B,EAE3B1a,EAAA2a,WAA8B,KAE9B3a,EAAA4a,WAA0B,KAElB5a,EAAA6a,YAAmB,EACnB7a,EAAA8a,WAA2B,KACnC9a,EAAA+a,aAAoB,EAkFZ/a,EAAAgb,SAA2B,KAC3Bhb,EAAAib,SAA2B,KAC3Bjb,EAAAkb,SAA2B,KAC3Blb,EAAAmb,SAA2B,KA1EjCnb,EAAKtP,UAAYA,EACjBsP,EAAKnC,UAAYA,EACjBmC,EAAK9N,OAASA,EACd8N,EAAK7N,MAAQzB,EAAUyB,MACvB6N,EAAKsV,eAAiB5kB,EAAU4kB,eAChCtV,EAAKma,wBAA0BA,GACzBzpB,EAAU4B,GAAGxB,EAAAsB,YAAY+f,SAAW,CACxC,IAAIiJ,EAAa,EACjB,GAAIlpB,GAAUA,EAAOb,MAAQoZ,EAAYlI,MAAO,CAC9C7B,OAAOV,EAAK1N,GAAGxB,EAAAsB,YAAYipB,WAC3B,IAAIC,EAAQ,IAAI1B,EACdlpB,EAAU+nB,QACV,OACA2C,IACA1a,OAAO7C,EAAU0d,WAEnBvb,EAAKoa,aAAa3nB,IAAI,OAAQ6oB,GAC9Btb,EAAKqa,cAAciB,EAAMzB,OAASyB,EAClC,IAAIE,EAAiCtpB,EAAQioB,wBAC7C,GAAIqB,EAAwB,CACrBxb,EAAKma,0BAAyBna,EAAKma,wBAA0B,IAAIvP,SACtE,IAA2C,IAAA6Q,EAAAvL,EAAAsL,GAAsBE,EAAAD,EAAArL,QAAAsL,EAAArL,KAAAqL,EAAAD,EAAArL,OAAE,CAA1D,IAAAuL,EAAApL,EAAAmL,EAAA3rB,MAAA,GAAC6rB,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GAClB3b,EAAKma,wBAAwBxI,IAAIiK,IACpC5b,EAAKma,wBAAwB1nB,IAAImpB,EAAeC,4GAKtDnb,QAAQV,EAAK1N,GAAGxB,EAAAsB,YAAYipB,WAG9B,IADA,IAAI/I,EAAiBzU,EAAUyU,eACtBxjB,EAAI,EAAGuG,EAAIid,EAAehd,OAAQxG,EAAIuG,IAAKvG,EAAG,CACrD,IAAIgtB,EAAgBxJ,EAAexjB,GAC/BitB,EAAgBle,EAAUme,iBAAiBltB,GAC3CwsB,EAAQ,IAAI1B,EACdlpB,EAAU+nB,QACVsD,EACAX,IACAU,GAGF9b,EAAKoa,aAAa3nB,IAAIspB,EAAeT,GACrCtb,EAAKqa,cAAciB,EAAMzB,OAASyB,UAGtCtb,EAAKic,KAAOC,EAAK9rB,OAAO4P,KAkL5B,OA3Q8BD,EAAAma,EAAApa,GA6F5Boa,EAAAxpB,UAAAyrB,SAAA,SAASrpB,EAAYzD,EAA4BiH,QAA5B,IAAAjH,MAAA,WAA4B,IAAAiH,MAAA,MAE/C,IAAI8kB,EAAa3sB,KAAKoP,UAAUyU,eAAehd,OAAS7G,KAAK6rB,iBAAiBhlB,OAC1E7G,KAAK6D,GAAGxB,EAAAsB,YAAYipB,aAAaD,EACrC,IAAIE,EAAQ,IAAI1B,EACdnrB,KAAKiC,UAAU+nB,QACfppB,GAEI,OAAS+rB,EAAW/H,SAAS,IACjC+H,EACAtoB,EACAwD,GAEF,GAAIjH,EAAM,CACR,GAAIZ,KAAK2rB,aAAazI,IAAItiB,GAAO,MAAM,IAAIqiB,MAAM,yBAAyBriB,GAC1EZ,KAAK2rB,aAAa3nB,IAAIpD,EAAMisB,GAI9B,OAFA7sB,KAAK4rB,cAAciB,EAAMzB,OAASyB,EAClC7sB,KAAK6rB,iBAAiBrG,KAAKnhB,GACpBwoB,GASTpB,EAAAxpB,UAAA0rB,aAAA,SAAatpB,EAAYupB,GACvB,IAAIC,EAoBAhB,EAnBJ,YAFuB,IAAAe,OAAA,GAEfvpB,EAAKypB,gBACX,OACED,EAAQ7tB,KAAKusB,SACb,MAEF,OACEsB,EAAQ7tB,KAAKwsB,SACb,MAEF,OACEqB,EAAQ7tB,KAAKysB,SACb,MAEF,OACEoB,EAAQ7tB,KAAK0sB,SACb,MAEF,QAAS,MAAM,IAAIzJ,MAAM,0BAa3B,OAVI4K,GAASA,EAAMhnB,SACjBgmB,EAAQgB,EAAME,OACR1pB,KAAOA,EACbwoB,EAAMnpB,MAAQrB,EAAAsB,YAAYC,MAE1BipB,EAAQ7sB,KAAK0tB,SAASrpB,GAEpBA,EAAKR,GAAG,KACV7D,KAAKwtB,KAAKQ,gBAAgBnB,EAAMzB,MAAOwC,GAElCf,GAITpB,EAAAxpB,UAAAgsB,cAAA,SAAcpB,GACZ,IAAIA,EAAMhpB,GAAGxB,EAAAsB,YAAYqnB,SAAzB,CAEA,IAAI6C,EAEJ,OAHA5b,OAAO4a,EAAMzB,OAAS,GAEtBnZ,OAAqB,MAAd4a,EAAMxoB,MACEwoB,EAAMxoB,KAAMypB,gBACzB,OACED,EAAQ7tB,KAAKusB,WAAavsB,KAAKusB,aAC/B,MAEF,OACEsB,EAAQ7tB,KAAKwsB,WAAaxsB,KAAKwsB,aAC/B,MAEF,OACEqB,EAAQ7tB,KAAKysB,WAAazsB,KAAKysB,aAC/B,MAEF,OACEoB,EAAQ7tB,KAAK0sB,WAAa1sB,KAAK0sB,aAC/B,MAEF,QAAS,MAAM,IAAIzJ,MAAM,0BAE3BhR,OAAO4a,EAAMzB,OAAS,GACtByC,EAAMrI,KAAKqH,KAIbpB,EAAAxpB,UAAAisB,oBAAA,SAAoB7pB,EAAYupB,GAC9B,IAAIC,EAoBAhB,EAnBJ,OAAQxoB,EAAKypB,gBACX,OACED,EAAQ7tB,KAAKusB,WAAavsB,KAAKusB,aAC/B,MAEF,OACEsB,EAAQ7tB,KAAKwsB,WAAaxsB,KAAKwsB,aAC/B,MAEF,OACEqB,EAAQ7tB,KAAKysB,WAAazsB,KAAKysB,aAC/B,MAEF,OACEoB,EAAQ7tB,KAAK0sB,WAAa1sB,KAAK0sB,aAC/B,MAEF,QAAS,MAAM,IAAIzJ,MAAM,0BAa3B,OAVI4K,EAAMhnB,QACRgmB,EAAQgB,EAAMA,EAAMhnB,OAAS,IACvBxC,KAAOA,GAEbwoB,EAAQ7sB,KAAK0tB,SAASrpB,GACtBwpB,EAAMrI,KAAKqH,IAETxoB,EAAKR,GAAG,KACV7D,KAAKwtB,KAAKQ,gBAAgBnB,EAAMzB,MAAOwC,GAElCf,GAITpB,EAAAxpB,UAAAksB,kBAAA,WACE,IAAIC,EAAKpuB,KAAKosB,cAGd,OAFKpsB,KAAKqsB,WACLrsB,KAAKqsB,WAAW7G,KAAK4I,GADJpuB,KAAKqsB,YAAe+B,GAEnCpuB,KAAK8rB,aAAesC,EAAGxJ,SAAS,KAIzC6G,EAAAxpB,UAAAosB,kBAAA,WACEpc,OAA0B,MAAnBjS,KAAKqsB,YACZ,IAAIxlB,EAAiB7G,KAAKqsB,WAAYxlB,OACtCoL,OAAOpL,EAAS,GACR7G,KAAKqsB,WAAY0B,MACrBlnB,EAAS,EACX7G,KAAK8rB,aAAuB9rB,KAAKqsB,WAAYxlB,EAAS,GAAG+d,SAAS,KAElE5kB,KAAK8rB,aAAe,KACpB9rB,KAAKqsB,WAAa,OAKtBZ,EAAAxpB,UAAAqsB,SAAA,SAAS3uB,EAAgBqsB,GAMvB,GALAhsB,KAAKgsB,IAAMA,EACX/Z,QAAQjS,KAAKqsB,aAAersB,KAAKqsB,WAAWxlB,QAC5C7G,KAAKqsB,WAAa,KAClBrsB,KAAK8rB,aAAe,KACpB9rB,KAAKusB,SAAWvsB,KAAKwsB,SAAWxsB,KAAKysB,SAAWzsB,KAAK0sB,SAAW,KAC5D1sB,KAAKgqB,QAAQ3L,QAAQkQ,UAEvB,IADA,IAAIxC,EAAiB/rB,KAAK+rB,eACjB1rB,EAAI,EAAGuG,EAAImlB,EAAellB,OAAQxG,EAAIuG,IAAKvG,EAAG,CACrD,IAAImuB,EAAgBzC,EAAe1rB,GACnCV,EAAO8uB,iBACLzC,EACAwC,EAAcE,aACdF,EAAcnhB,OAAOmI,eACrBgZ,EAAcG,KACdH,EAAcI,UAOtBnD,EAAAxpB,UAAA2iB,SAAA,WAAqB,OAAO5kB,KAAKiC,UAAUkjB,YAC7CsG,EA3QA,CAA8B1B,GAAjBrqB,EAAA+rB,WA8Qb,IAAAoD,EAAA,SAAAxd,GAUE,SAAAwd,EAAY7E,EAAkB5a,GAA9B,IAAAmC,EACEF,EAAA7Q,KAAAR,KAAMgqB,EAAS,GAAI,KAAGhqB,KATxBuR,EAAA3O,KAAOoZ,EAAY8S,gBAUjB,IAAI3J,EAAa/V,EAAU2f,2BAC3Bxd,EAAK4T,WAAaA,EAClB5T,EAAK6O,aAAe+E,EACpB5T,EAAKnC,UAAYA,EACjBmC,EAAKlN,KAAOkV,EAAA+E,KAAKQ,IAAIkQ,WAAW5f,KAEpC,OAlBoCkC,EAAAud,EAAAxd,GAkBpCwd,EAlBA,CAAoC9E,GAAvBrqB,EAAAmvB,iBAqBb,IAAAjI,EAAA,SAAAvV,GAUE,SAAAuV,EACER,EACAjB,EACA/E,EACAvY,GAJF,IAAA0J,EAMEF,EAAA7Q,KAAAR,KAAMomB,EAAe4D,QAAS7E,EAAY/E,IAAapgB,YAdzDuR,EAAA3O,KAAOoZ,EAAYiT,gBAejB1d,EAAK6U,eAAiBA,EACtB7U,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,QAE7B,OArBoC4N,EAAAsV,EAAAvV,GAqBpCuV,EArBA,CAAoCmD,GAAvBrqB,EAAAknB,iBAwBb,IAAAsI,EAAA,SAAA7d,GAUE,SAAA6d,EACEjtB,EACAme,EACA/b,EACAwD,EACApE,GALF,IAAA8N,EAOEF,EAAA7Q,KAAAR,KAAMiC,EAAU+nB,QAAS/nB,EAAUkjB,WAAY/E,EAAc/b,EAAMwD,IAAY7H,YAfjFuR,EAAA3O,KAAOoZ,EAAYmT,MAKnB5d,EAAA6d,cAAqB,EAWnB7d,EAAKtP,UAAYA,EACjBsP,EAAK7N,MAAQzB,EAAUyB,MACvB6N,EAAKlN,KAAOA,EACZkN,EAAK9N,OAASA,IAElB,OAvB2B6N,EAAA4d,EAAA7d,GAuB3B6d,EAvBA,CAA2BrE,GAAdnrB,EAAAwvB,QA0Bb,IAAAhH,EAAA,SAAA7W,GAYE,SAAA6W,EACE8B,EACA7E,EACA/E,EACA3c,GAJF,IAAA8N,EAMEF,EAAA7Q,KAAAR,KAAMgqB,EAAS7E,EAAY/E,IAAapgB,YAhB1CuR,EAAA3O,KAAOoZ,EAAY+L,SAKnBxW,EAAAyW,gBAA4C,KAE5CzW,EAAA0W,gBAA4C,KAU1C1W,EAAK9N,OAASA,IAElB,OArB8B6N,EAAA4W,EAAA7W,GAqB9B6W,EArBA,CAA8B6B,GAAjBrqB,EAAAwoB,WAwBb,IAAA9C,EAAA,SAAA/T,GAiBE,SAAA+T,EACE4E,EACA7E,EACA/E,EACAvY,EACAgf,GALF,IAAAtV,EAOEF,EAAA7Q,KAAAR,KAAMgqB,EAAS7E,EAAY/E,IAAapgB,YAtB1CuR,EAAA3O,KAAOoZ,EAAY0G,gBAKnBnR,EAAAga,UAA+B,IAAIpP,IAEnC5K,EAAAmV,gBAA8C,KAE9CnV,EAAAoR,cAAuC,KAEvCpR,EAAAwV,qBAAiD,KAEjDxV,EAAA+V,mBAA2D,IAAInL,IAU7D5K,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,MACzB6N,EAAKsV,eAAiBA,IAM1B,OAjCoCvV,EAAA8T,EAAA/T,GA8BlC+T,EAAAnjB,UAAA2iB,SAAA,WACE,OAAO5kB,KAAKmlB,YAEhBC,EAjCA,CAAoC2E,GAAvBrqB,EAAA0lB,iBAoCb,IAAAiK,EAAA,SAAAhe,GAwBE,SAAAge,EACEptB,EACAkjB,EACA/E,EACAlc,EACAorB,gBADA,IAAAprB,MAAA,WACA,IAAAorB,MAAA,MALF,IAAA/d,EAOEF,EAAA7Q,KAAAR,KAAMiC,EAAU+nB,QAAS7E,EAAY/E,IAAapgB,KASlD,GAtCFuR,EAAA3O,KAAOoZ,EAAYlI,MAWnBvC,EAAAma,wBAAmD,KAEnDna,EAAAge,oBAA2B,EAE3Bhe,EAAAie,oBAAuC,KAEvCje,EAAA8V,UAA+C,KAE/C9V,EAAAke,aAAyB,EAWvBle,EAAKtP,UAAYA,EACjBsP,EAAK7N,MAAQzB,EAAUyB,MACvB6N,EAAKsV,eAAiB5kB,EAAU4kB,eAChCtV,EAAKrN,cAAgBA,EACrBqN,EAAKlN,KAAOpC,EAAU+nB,QAAQ3L,QAAQW,UAAU0Q,QAAQne,GACxDA,EAAK+d,KAAOA,EAGRA,EAAM,CACR,IAAIvC,EAAyBuC,EAAK5D,wBAClC,GAAIqB,EAAwB,CACrBxb,EAAKma,0BAAyBna,EAAKma,wBAA0B,IAAIvP,SACtE,IAAiC,IAAAwT,EAAAlO,EAAAsL,GAAsB6C,EAAAD,EAAAhO,QAAAiO,EAAAhO,KAAAgO,EAAAD,EAAAhO,OAAE,CAAhD,IAAAuL,EAAApL,EAAA8N,EAAAtuB,MAAA,GAAC6mB,EAAA+E,EAAA,GAAU2C,EAAA3C,EAAA,GAClB3b,EAAKma,wBAAwB1nB,IAAImkB,EAAU0H,uGAMjD,IACIxvB,EAAQuG,EADRiB,EAAc0J,EAAKtP,UAAU4F,YAEjC,GAAIA,EAAa,CACf,IAAIiE,EAAiBjE,EAAYiE,eACjC,GAAI5H,EAAe,CACjB,IAAK0C,EAAI1C,EAAc2C,SAAWiF,EAAejF,OAC/C,MAAM,IAAIoc,MAAM,gCAElB,GAAIrc,EAEF,IADK2K,EAAKma,0BAAyBna,EAAKma,wBAA0B,IAAIvP,KACjE9b,EAAI,EAAGA,EAAIuG,IAAKvG,EACnBkR,EAAKma,wBAAwB1nB,IAAI8H,EAAezL,GAAGO,KAAKoF,KAAM9B,EAAc7D,SAG3E,GAAIyL,EAAejF,OACxB,MAAM,IAAIoc,MAAM,yCAoDxB,OAtH2B3R,EAAA+d,EAAAhe,GAwEzBge,EAAAptB,UAAA6tB,eAAA,SAAeC,GACb,IAAIC,EAAwBhwB,KAC5B,GAAG,GAAIgwB,GAAWD,EAAQ,OAAO,QAC1BC,EAAUA,EAAQV,MACzB,OAAO,GAITD,EAAAptB,UAAAguB,eAAA,SAAertB,EAAoBstB,GACjC,QADiC,IAAAA,OAAA,GAC7BA,EACF,OAAQttB,GACN,KAAKyW,EAAaY,YAEhB,GADIkW,EAAoBnwB,KAAKiwB,eAAe5W,EAAac,uBAClC,OAAOgW,EAC9B,MAEF,KAAK9W,EAAaa,YAChB,IAAIiW,EACJ,GADIA,EAAoBnwB,KAAKiwB,eAAe5W,EAAae,uBAClC,OAAO+V,EAC9B,MAEF,QAASle,QAAO,GAGpB,IAAImR,EAAyBpjB,KAC7B,EAAG,CACD,IAAIqnB,EAAYjE,EAASiE,UACzB,GAAIA,EAAW,CACb,IAAI+I,EAAW/I,EAAUnmB,IAAI0B,GAC7B,GAAIwtB,EAAU,OAAOA,SAEhBhN,EAAWA,EAASkM,MAC7B,OAAO,MAGTD,EAAAptB,UAAAouB,SAAA,SAASC,GACP,IAAItkB,EAAUiG,OAAOjS,KAAKgM,SAC1BiG,OAAOjG,EAAQkX,IAAIoN,IACnB,IAAIC,EAAiBvkB,EAAQ9K,IAAIovB,GAEjC,OADAre,OAAOse,EAAM3tB,MAAQoZ,EAAYmT,OAClBoB,EAAOnB,cAGxBC,EAAAptB,UAAA2iB,SAAA,WACE,OAAO5kB,KAAKmlB,YAEhBkK,EAtHA,CAA2BtF,GAAdrqB,EAAA2vB,QAyHb,IAAA9F,EAAA,SAAAlY,GAQE,SAAAkY,EACES,EACA7E,EACA/E,EACAvY,EACAgf,GALF,IAAAtV,EAOEF,EAAA7Q,KAAAR,KAAMgqB,EAAS7E,EAAY/E,EAAcvY,EAAagf,IAAe7mB,YAbvEuR,EAAA3O,KAAOoZ,EAAYsK,sBAerB,OAjBwChV,EAAAiY,EAAAlY,GAiBxCkY,EAjBA,CAAwCnE,GAA3B1lB,EAAA6pB,qBAoBb,IAAAiH,EAAA,SAAAnf,GAUE,SAAAmf,EACEvuB,EACAkjB,EACA/E,EACAlc,EACAorB,QADA,IAAAprB,eACA,IAAAorB,MAAA,MALF,IAAA/d,EAOEF,EAAA7Q,KAAAR,KAAMiC,EAAWkjB,EAAY/E,EAAclc,EAAeorB,IAAKtvB,YAfjEuR,EAAA3O,KAAOoZ,EAAYyU,YAiBrB,OAnB+Bnf,EAAAkf,EAAAnf,GAmB/Bmf,EAnBA,CAA+BnB,GAAlB3vB,EAAA8wB,YAsBb,SAAkBE,GAEhBA,IAAA,eAKAA,IAAA,qBAEAA,IAAA,qCAEAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,0BAEAA,IAAA,0BAKAA,IAAA,kDAEAA,IAAA,iDAEAA,IAAA,iDAEAA,IAAA,uDAEAA,IAAA,wDAKAA,IAAA,sCAEAA,IAAA,4CAKAA,IAAA,sCAMAA,IAAA,sCAQAA,IAAA,wCAxDF,CAAkBhxB,EAAAgxB,YAAAhxB,EAAAgxB,eAgElB,IAAAjD,EAAA,WAyCE,SAAAA,IAtBAztB,KAAA2wB,aAAyC,KAof3C,OA7eSlD,EAAA9rB,OAAP,SAAcivB,GACZ,IAAIC,EAAa,IAAIpD,EAWrB,OAVAoD,EAAWptB,OAAS,KACpBotB,EAAWntB,MAAK,EAChBmtB,EAAWD,gBAAkBA,EAC7BC,EAAWC,cAAgB,KAC3BD,EAAWE,WAAa,KACxBF,EAAWG,YAAc,KACzBH,EAAWzrB,WAAawrB,EAAgBxhB,UAAUhK,WAClDyrB,EAAWnF,wBAA0BkF,EAAgBlF,wBACrDmF,EAAWI,cAAgB3R,QAAQ,GACnCuR,EAAWK,iBAAmB,KACvBL,GAMTpD,EAAAxrB,UAAA4B,GAAA,SAAGC,GAAyB,OAAQ9D,KAAK0D,MAAQI,IAASA,GAE1D2pB,EAAAxrB,UAAA8B,MAAA,SAAMD,GAAyB,OAA8B,IAAtB9D,KAAK0D,MAAQI,IAEpD2pB,EAAAxrB,UAAA+B,IAAA,SAAIF,GAAyB9D,KAAK0D,OAASI,GAE3C2pB,EAAAxrB,UAAAkvB,MAAA,SAAMrtB,GAAyB9D,KAAK0D,QAAUI,GAG9C2pB,EAAAxrB,UAAAmvB,KAAA,WACE,IAAIC,EAAS,IAAI5D,EAWjB,OAVA4D,EAAO5tB,OAASzD,KAChBqxB,EAAO3tB,MAAQ1D,KAAK0D,MACpB2tB,EAAOT,gBAAkB5wB,KAAK4wB,gBAC9BS,EAAOP,cAAgB9wB,KAAK8wB,cAC5BO,EAAON,WAAa/wB,KAAK+wB,WACzBM,EAAOL,YAAchxB,KAAKgxB,YAC1BK,EAAOjsB,WAAapF,KAAKoF,WACzBisB,EAAO3F,wBAA0B1rB,KAAK0rB,wBACtC2F,EAAOJ,cAAgBjxB,KAAKixB,cAC5BI,EAAOH,iBAAmBlxB,KAAKkxB,iBAAmBlxB,KAAKkxB,iBAAiBI,QAAU,KAC3ED,GAIT5D,EAAAxrB,UAAAsvB,KAAA,mBACM9tB,EAASwO,OAAOjS,KAAKyD,QACzB,GAAIzD,KAAK2wB,aAAc,KACrB,IAAwB,IAAAzD,EAAAzL,EAAAzhB,KAAK2wB,aAAajnB,UAAQmY,EAAAqL,EAAAvL,QAAAE,EAAAD,KAAAC,EAAAqL,EAAAvL,OAAE,CAA/C,IAAI6P,EAAW3P,EAAAvgB,MACdkwB,EAAY3tB,GAAGxB,EAAAsB,YAAY8tB,SAC7BzxB,KAAK4wB,gBAAgB3C,cAAcuD,qGAGvCxxB,KAAK2wB,aAAe,KAEtB,OAAOltB,GAITgqB,EAAAxrB,UAAAyvB,eAAA,SAAertB,EAAYzD,EAAcgtB,EAAe/lB,GACtD,IAAI2pB,EAAcxxB,KAAK4wB,gBAAgBjD,aAAatpB,GAAM,GAC1D,GAAKrE,KAAK2wB,aACL,CACH,IAAIgB,EAAgB3xB,KAAK2wB,aAAazvB,IAAIN,GAC1C,GAAI+wB,EAOF,OANI9pB,EACF7H,KAAK4wB,gBAAgB5G,QAAQ3I,MAC3B/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,OAEd6N,QAAO,GACP0f,OAVa3xB,KAAK2wB,aAAe,IAAIxU,IAkBhD,OALAqV,EAAYxtB,IAAI3B,EAAAsB,YAAY8tB,QAC5BzxB,KAAK2wB,aAAa3sB,IAAIpD,EAAM4wB,GACxBntB,EAAKR,GAAG,KACV7D,KAAKguB,gBAAgBwD,EAAYpG,MAAOwC,GAEnC4D,GAIT/D,EAAAxrB,UAAA2vB,oBAAA,SAAoBxG,EAAY/mB,EAAYzD,GAC1C,GAAKZ,KAAK2wB,aACL,CACH,IAAIgB,EAAgB3xB,KAAK2wB,aAAazvB,IAAIN,GAC1C,GAAI+wB,EAAe,CACjB,IAAI9pB,EAAc8pB,EAAc9pB,YAOhC,OANIA,EACF7H,KAAK4wB,gBAAgB5G,QAAQ3I,MAC3B/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,OAEd6N,QAAO,GACP0f,QAXa3xB,KAAK2wB,aAAe,IAAIxU,IAchDlK,OAAOmZ,EAAQprB,KAAK4wB,gBAAgBhF,cAAc/kB,QAClD,IAAIgrB,EAAc,IAAI1G,EACpBnrB,KAAK4wB,gBAAgB5G,QACrBppB,EACAwqB,EACA/mB,EACA,MAGF,OADArE,KAAK2wB,aAAa3sB,IAAIpD,EAAMixB,GACrBA,GAITpE,EAAAxrB,UAAA6vB,eAAA,SAAelxB,GACb,IAAIisB,EACAmD,EAAuBhwB,KAC3B,GACE,GAAIgwB,EAAQW,eAAiB9D,EAAQmD,EAAQW,aAAazvB,IAAIN,IAC5D,OAAOisB,QAEFmD,EAAUA,EAAQvsB,QAC3B,OAAOzD,KAAK4wB,gBAAgBjF,aAAazqB,IAAIN,IAI/C6sB,EAAAxrB,UAAA8vB,eAAA,SAAe3G,GACb,IAAI4G,EACAC,EACJ,GAAI7G,EAAQ,GAAI,CACd,GAAIA,EAAQ,EAAG,OAAO,EACtB4G,EAAMhyB,KAAKixB,kBACN,MAAIgB,EAAMjyB,KAAKkxB,kBAMpB,OAAO,EALP,IAAI7wB,GAAM+qB,EAAQ,IAAM,GAAM,EAC9B,GAAI/qB,GAAK4xB,EAAIprB,OAAQ,OAAO,EAC5BmrB,EAAMC,EAAI5xB,GACV+qB,GAAmB,IAAT/qB,EAAI,GAIhB,OAAO6xB,OACLC,QACEH,EACAI,QACEC,QACA/S,QAAQ8L,KAGZkH,WAKJ7E,EAAAxrB,UAAA+rB,gBAAA,SAAgB5C,EAAYwC,GAC1B,IAAIoE,EACAO,GAAY,EAChB,GAAInH,EAAQ,GAAI,CACd,GAAIA,EAAQ,EAAG,OACf4G,EAAMhyB,KAAKixB,kBACN,CACL,IAAIgB,EAAMjyB,KAAKkxB,iBAMf,IALAqB,GAAQnH,EAAQ,IAAM,GAAM,EACvB6G,IACHjyB,KAAKkxB,iBAAmBe,EAAM,IAAIjc,MAAMuc,EAAM,GAC9CN,EAAIprB,OAAS,GAERorB,EAAIprB,QAAU0rB,GAAKN,EAAIzM,KAAKlG,QAAQ,IAC3C0S,EAAMC,EAAIM,GACVnH,GAAqB,IAAXmH,EAAM,GAElBP,EAAMpE,EACF4E,OACER,EACAI,QACEC,QACA/S,QAAQ8L,KAGZ+G,QACEH,EACAS,QACEL,QACEC,QACA/S,QAAQ8L,MAIdmH,GAAO,EAAWvyB,KAAKkxB,iBAAkBqB,GAAOP,EAC/ChyB,KAAKixB,cAAgBe,GAI5BvE,EAAAxrB,UAAAywB,QAAA,SAAQC,GACN3yB,KAAK0D,OAAuB,KAAdivB,EAAMjvB,MACpB1D,KAAKixB,cAAgB0B,EAAM1B,cAC3BjxB,KAAKkxB,iBAAmByB,EAAMzB,kBAIhCzD,EAAAxrB,UAAA2wB,mBAAA,SAAmBD,GACbA,EAAM9uB,GAAE,IACV7D,KAAKgE,IAAG,IAEN2uB,EAAM9uB,GAAE,IACV7D,KAAKgE,IAAG,KAEN2uB,EAAM9uB,GAAE,IAAsB8uB,EAAM5B,YAAc/wB,KAAK+wB,YACzD/wB,KAAKgE,IAAG,KAEN2uB,EAAM9uB,GAAE,KAAyB8uB,EAAM7B,eAAiB9wB,KAAK8wB,eAC/D9wB,KAAKgE,IAAG,KAEN2uB,EAAM9uB,GAAE,KACV7D,KAAKgE,IAAG,OAKZypB,EAAAxrB,UAAA4wB,cAAA,SAAcvrB,EAAYC,GAExBvH,KAAK0D,OAAS4D,EAAK5D,MAAQ6D,EAAM7D,MAAK,GAGtC1D,KAAK0D,OAAmB,KAAV4D,EAAK5D,MACnB1D,KAAK0D,OAAoB,KAAX6D,EAAM7D,MAGpB1D,KAAKixB,cAAgBkB,QAAQ7qB,EAAK2pB,cAAe1pB,EAAM0pB,eACvD,IAAI6B,EAAUxrB,EAAK4pB,iBACf6B,EAAWxrB,EAAM2pB,iBACrB,GAAe,MAAX4B,GAA+B,MAAZC,EAAkB,CACvC,IAAIC,EAAUhzB,KAAKkxB,iBACf+B,EAAYC,IAAIJ,EAAQjsB,OAAQksB,EAASlsB,QAC7C,GAAIosB,EAAW,CACb,GAAKD,EACA,KAAOA,EAAQnsB,OAASosB,GAAWD,EAAQxN,KAAKlG,QAAQ,SAD/C0T,EAAU,IAAIhd,MAAMid,GAElC,IAAK,IAAI5yB,EAAI,EAAGA,EAAI4yB,IAAa5yB,EAC/B2yB,EAAQ3yB,GAAK8xB,QACXW,EAAQzyB,GACR0yB,EAAS1yB,OAYnBotB,EAAAxrB,UAAAkxB,YAAA,SAAY/sB,EAAqB/B,GAM/B,GAHA4N,OAAO5N,GAAQkV,EAAA+E,KAAKc,OAGf/a,EAAKR,GAAG,IAAsC,OAAO,EAE1D,IAAIqH,EACJ,OAAQuO,EAAA2Z,gBAAgBhtB,IAGtB,KAAKqT,EAAA4Z,aAAaC,SAChB,IAAI1C,EAAkB5wB,KAAK4wB,gBACvB/D,EAAQ+D,EAAgBhF,cAAcnS,EAAA8Z,iBAAiBntB,IAC3D,OAAQwqB,EAAgBpD,KAAKuE,eAAelF,EAAMzB,QAC3CoI,EAAsB3G,EAAMxoB,KAAMA,GAI3C,KAAKoV,EAAA4Z,aAAaI,SAEhB,OADAxhB,OAAOwH,EAAAia,WAAWttB,IACXpG,KAAKmzB,YAAY1Z,EAAAka,iBAAiBvtB,GAAO/B,GAIlD,KAAKoV,EAAA4Z,aAAaO,UAAW,OAAO,EAEpC,KAAKna,EAAA4Z,aAAaQ,OAChB,OAAQpa,EAAAqa,YAAY1tB,IAGlB,KAAKqT,EAAAsa,SAASC,MACd,KAAKva,EAAAsa,SAASE,MACd,KAAKxa,EAAAsa,SAASG,MACd,KAAKza,EAAAsa,SAASI,MACd,KAAK1a,EAAAsa,SAASK,MACd,KAAK3a,EAAAsa,SAASM,MACd,KAAK5a,EAAAsa,SAASO,MACd,KAAK7a,EAAAsa,SAASQ,MACd,KAAK9a,EAAAsa,SAASS,MACd,KAAK/a,EAAAsa,SAASU,MACd,KAAKhb,EAAAsa,SAASW,MACd,KAAKjb,EAAAsa,SAASY,MACd,KAAKlb,EAAAsa,SAASa,MACd,KAAKnb,EAAAsa,SAASc,MACd,KAAKpb,EAAAsa,SAASe,MACd,KAAKrb,EAAAsa,SAASgB,MACd,KAAKtb,EAAAsa,SAASiB,MACd,KAAKvb,EAAAsa,SAASkB,MACd,KAAKxb,EAAAsa,SAASmB,MACd,KAAKzb,EAAAsa,SAASoB,MACd,KAAK1b,EAAAsa,SAASqB,MACd,KAAK3b,EAAAsa,SAASsB,MACd,KAAK5b,EAAAsa,SAASuB,MACd,KAAK7b,EAAAsa,SAASwB,MACd,KAAK9b,EAAAsa,SAASyB,MACd,KAAK/b,EAAAsa,SAAS0B,MACd,KAAKhc,EAAAsa,SAAS2B,MACd,KAAKjc,EAAAsa,SAAS4B,MACd,KAAKlc,EAAAsa,SAAS6B,MACd,KAAKnc,EAAAsa,SAAS8B,MACd,KAAKpc,EAAAsa,SAAS+B,MACd,KAAKrc,EAAAsa,SAASgC,MAAO,OAAO,EAG5B,KAAKtc,EAAAsa,SAASiC,OACZ,QAEIvc,EAAA2Z,gBAAgBloB,EAAUuO,EAAAwc,cAAc7vB,KAAUqT,EAAA4Z,aAAa6C,QAEhC,GAA7Bzc,EAAA0c,iBAAiBjrB,IAEc,GAA7BuO,EAAA0c,iBAAiBjrB,KAChBlL,KAAKmzB,YAAY1Z,EAAA2c,eAAehwB,GAAO/B,KAI5CoV,EAAA2Z,gBAAgBloB,EAAUuO,EAAA2c,eAAehwB,KAAUqT,EAAA4Z,aAAa6C,QAEjC,GAA7Bzc,EAAA0c,iBAAiBjrB,IAEc,GAA7BuO,EAAA0c,iBAAiBjrB,KAChBlL,KAAKmzB,YAAY1Z,EAAAwc,cAAc7vB,GAAO/B,KASjD,KAAKoV,EAAAsa,SAASsC,OAGZ,QAGM5c,EAAA2Z,gBAAgBloB,EAAUuO,EAAAwc,cAAc7vB,KAAUqT,EAAA4Z,aAAa6C,OAC/Dzc,EAAA0c,iBAAiBjrB,IAAY7G,EAAKiyB,wBAAwB/c,EAAA+E,KAAKG,OAC3Dze,KAAKmzB,YAAYjoB,EAAS7G,IAG9BoV,EAAA2Z,gBAAgBloB,EAAUuO,EAAA2c,eAAehwB,KAAUqT,EAAA4Z,aAAa6C,OAChEzc,EAAA0c,iBAAiBjrB,IAAY7G,EAAKiyB,wBAAwB/c,EAAA+E,KAAKG,OAC3Dze,KAAKmzB,YAAYjoB,EAAS7G,IAMtC,KAAKoV,EAAAsa,SAASwC,OACZ,IAAIC,EAAQ,GAAKnyB,EAAKoyB,KACtB,OAAOhd,EAAA2Z,gBAAgBloB,EAAUuO,EAAA2c,eAAehwB,KAAUqT,EAAA4Z,aAAa6C,OAChEzc,EAAA0c,iBAAiBjrB,GAAWsrB,EAIrC,KAAK/c,EAAAsa,SAAS2C,OACRF,EAAQ,GAAKnyB,EAAKoyB,KACtB,OAAOz2B,KAAKmzB,YAAY1Z,EAAAwc,cAAc7vB,GAAO/B,KAC3CoV,EAAA2Z,gBAAgBloB,EAAUuO,EAAA2c,eAAehwB,KAAUqT,EAAA4Z,aAAa6C,OAChEzc,EAAA0c,iBAAiBjrB,GAAWsrB,GAMhC,KAAK/c,EAAAsa,SAAS4C,OACRH,EAAQ,GAAKnyB,EAAKoyB,KACtB,OAAOpyB,EAAKR,GAAE,KAER4V,EAAA2Z,gBAAgBloB,EAAUuO,EAAA2c,eAAehwB,KAAUqT,EAAA4Z,aAAa6C,OAChEzc,EAAA0c,iBAAiBjrB,GAAWsrB,GAE9Bx2B,KAAKmzB,YAAY1Z,EAAAwc,cAAc7vB,GAAO/B,MACpCoV,EAAA2Z,gBAAgBloB,EAAUuO,EAAA2c,eAAehwB,KAAUqT,EAAA4Z,aAAa6C,OAChEzc,EAAA0c,iBAAiBjrB,IAAYsrB,GAKrC,KAAK/c,EAAAsa,SAAS6C,OACd,KAAKnd,EAAAsa,SAAS8C,OACd,KAAKpd,EAAAsa,SAAS+C,OACZ,OAAO92B,KAAKmzB,YAAY1Z,EAAAwc,cAAc7vB,GAAO/B,IACtCrE,KAAKmzB,YAAY1Z,EAAA2c,eAAehwB,GAAO/B,GAGlD,MAGF,KAAKoV,EAAA4Z,aAAa0D,MAChB,OAAQtd,EAAAud,WAAW5wB,IAGjB,KAAKqT,EAAAwd,QAAQC,OACb,KAAKzd,EAAAwd,QAAQE,OAAQ,OAAO,EAG5B,KAAK1d,EAAAwd,QAAQG,OACb,KAAK3d,EAAAwd,QAAQI,OACb,KAAK5d,EAAAwd,QAAQK,UAAW,OAAOjzB,EAAKoyB,KAAO,EAE7C,MAIF,KAAKhd,EAAA4Z,aAAa6C,MAChB,IAAI50B,EAAa,EACjB,OAAQmY,EAAA8d,kBAAkBnxB,IACxB,OAAuB9E,EAAQmY,EAAA0c,iBAAiB/vB,GAAO,MACvD,OAAuB9E,EAAQmY,EAAA+d,oBAAoBpxB,GAAO,MAC1D,OAAuB9E,EAAQmd,IAAIhF,EAAAge,iBAAiBrxB,IAAQ,MAC5D,OAAuB9E,EAAQmd,IAAIhF,EAAAie,iBAAiBtxB,IAAQ,MAC5D,QAAS6L,QAAO,GAElB,OAAQ5N,EAAKzB,MACX,OAAkB,OAAOtB,EAAQid,GAAGoZ,WAAar2B,EAAQid,GAAGqZ,UAC5D,OAAmB,OAAOt2B,EAAQkd,IAAImZ,WAAar2B,EAAQkd,IAAIoZ,UAC/D,OAAkB,OAAOt2B,EAAQ,GAAKA,EAAQsd,GAAGgZ,UACjD,OAAmB,OAAOt2B,EAAQ,GAAKA,EAAQud,IAAI+Y,UACnD,QAAoB,OAAuB,KAAP,EAARt2B,GAE9B,MAIF,KAAKmY,EAAA4Z,aAAawE,KAChB,IAAIC,OAAQ,EACZ,OAAQre,EAAAse,aAAa3xB,IACnB,KAAK,EAAM0xB,EAAWre,EAAAue,aAAa5xB,GAAQmT,EAAA+E,KAAKC,GAAKhF,EAAA+E,KAAKM,GAAI,MAC9D,KAAK,EAAMkZ,EAAWre,EAAAue,aAAa5xB,GAAQmT,EAAA+E,KAAKE,IAAMjF,EAAA+E,KAAKO,IAAK,MAChE,QAAWiZ,EAAWre,EAAAue,aAAa5xB,GAAQmT,EAAA+E,KAAKG,IAAMlF,EAAA+E,KAAKQ,IAE7D,OAAO0U,EAAsBsE,EAAUzzB,GAMzC,KAAKoV,EAAA4Z,aAAa4E,MAChB,IAAKxe,EAAAye,aAAa9xB,GAAO,CACvB,IAAIqwB,EAAOxkB,OAAOwH,EAAA0e,mBAAmB/xB,IACjCgyB,EAAO3e,EAAA4e,cAAcjyB,EAAMqwB,EAAO,GACtC,OAAOz2B,KAAKmzB,YAAYiF,EAAM/zB,GAGhC,MAIF,KAAKoV,EAAA4Z,aAAaiF,GAChB,OAAOt4B,KAAKmzB,YAAY1Z,EAAA8e,UAAUnyB,GAAO/B,IAClCrE,KAAKmzB,YAAYlhB,OAAOwH,EAAA+e,WAAWpyB,IAAQ/B,GAIpD,KAAKoV,EAAA4Z,aAAaoF,OAChB,OAAOz4B,KAAKmzB,YAAY1Z,EAAAif,cAActyB,GAAO/B,IACtCrE,KAAKmzB,YAAY1Z,EAAAkf,cAAcvyB,GAAO/B,GAI/C,KAAKoV,EAAA4Z,aAAauF,KAChB,IAAI5O,EAAUhqB,KAAK4wB,gBAAgB5G,QAC/B5G,EAAWnR,OAAO+X,EAAQxN,gBAAgBtb,IAAI+Q,OAAOwH,EAAAof,cAAczyB,MACvE6L,OAAOmR,EAASxgB,MAAQoZ,EAAY9H,UACpC,IAAI9O,EAAwBge,EAAUhU,UAAUhK,WAChD,OAAmBge,EAAUoK,KAAK3pB,GAAE,IAC7B2vB,EAAsBpuB,EAAYf,GAI3C,KAAKoV,EAAA4Z,aAAayF,YAAa,OAAO,EAExC,OAAO,GAITrL,EAAAxrB,UAAAqsB,SAAA,WACErc,OAAsB,MAAfjS,KAAKyD,QACZzD,KAAK8wB,cAAgB,KACrB9wB,KAAK+wB,WAAa,KAClB/wB,KAAKgxB,YAAc,KACnBhxB,KAAK0rB,wBAA0B,MAEnC+B,EAvgBA,GA0gBA,SAAS+F,EAAsBsE,EAAgB5wB,GAC7C,IAAI6xB,EAAWjB,EAAS/T,SACpBiV,EAAS9xB,EAAO6c,SACpB,OAAQ+T,EAASj0B,GAAE,IACZk1B,EAAWC,GACXlB,EAASj0B,GAAE,IAAsBqD,EAAOrD,GAAE,GA/gBtCnE,EAAA+tB,sFChgGb,IAeYwL,EAfZC,EAAA/4B,EAAA,IAKAuC,EAAAvC,EAAA,GAIAg5B,EAAAh5B,EAAA,IAgBA,SAAgBi5B,EAA2BC,GACzC,OAAQA,GACN,KAAKJ,EAAmBK,KAAM,MAAO,OACrC,KAAKL,EAAmBM,QAAS,MAAO,UACxC,KAAKN,EAAmBO,MAAO,MAAO,QACtC,QAEE,OADAvnB,QAAO,GACA,IAeb,SAAgBwnB,EAA0BJ,GACxC,OAAQA,GACN,KAAKJ,EAAmBK,KAAM,OAAO55B,EAAAg6B,WACrC,KAAKT,EAAmBM,QAAS,OAAO75B,EAAAi6B,aACxC,KAAKV,EAAmBO,MAAO,OAAO95B,EAAAk6B,UACtC,QAEE,OADA3nB,QAAO,GACA,IA5CXvS,EAAA4hB,eAAA6X,EAAA7X,eACA5hB,EAAAm6B,uBAAAV,EAAAU,uBAIF,SAAYZ,GAEVA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAYA,EAAAv5B,EAAAu5B,qBAAAv5B,EAAAu5B,wBAUZv5B,EAAA05B,6BAaa15B,EAAAg6B,WAAqB,QAErBh6B,EAAAi6B,aAAuB,QAEvBj6B,EAAAk6B,UAAoB,QAEpBl6B,EAAAo6B,YAAsB,OAGnCp6B,EAAA+5B,4BAaA,IAAAM,EAAA,WAYE,SAAAA,EAAoBC,EAAWX,EAA8BY,GAH7Dj6B,KAAAoE,MAAsB,KAIpBpE,KAAKg6B,KAAOA,EACZh6B,KAAKq5B,SAAWA,EAChBr5B,KAAKi6B,QAAUA,EA4EnB,OAxESF,EAAAp4B,OAAP,SACEq4B,EACAX,EACAa,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIH,EAAUf,EAAAW,uBAAuBG,GAIrC,OAHY,MAARE,IAAcD,EAAUA,EAAQI,QAAQ,MAAOH,IACvC,MAARC,IAAcF,EAAUA,EAAQI,QAAQ,MAAOF,IACvC,MAARC,IAAcH,EAAUA,EAAQI,QAAQ,MAAOD,IAC5C,IAAIL,EAAkBC,EAAMX,EAAUY,IAIxCF,EAAAO,WAAP,SACEN,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkBp4B,OAAOq4B,EAAMf,EAAmBK,KAAMY,EAAMC,IAIhEJ,EAAAQ,cAAP,SACEP,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkBp4B,OAAOq4B,EAAMf,EAAmBM,QAASW,EAAMC,IAInEJ,EAAAS,YAAP,SACER,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkBp4B,OAAOq4B,EAAMf,EAAmBO,MAAOU,EAAMC,IAIxEJ,EAAA93B,UAAAw4B,UAAA,SAAUr2B,GAER,OADApE,KAAKoE,MAAQA,EACNpE,MAIT+5B,EAAA93B,UAAA2iB,SAAA,WACE,OAAI5kB,KAAKoE,MAELg1B,EAA2Bp5B,KAAKq5B,UAChC,IACAr5B,KAAKg6B,KAAKpV,SAAS,IACnB,MACA5kB,KAAKi6B,QACL,QACAj6B,KAAKoE,MAAMiJ,OAAOJ,eAClB,IACAjN,KAAKoE,MAAMuqB,KAAK/J,SAAS,IACzB,IACA5kB,KAAKoE,MAAMwqB,OAAOhK,SAAS,IAI7BwU,EAA2Bp5B,KAAKq5B,UAChC,IACAr5B,KAAKg6B,KAAKpV,SAAS,IACnB,KACA5kB,KAAKi6B,SAGXF,EA3FA,GA8FA,SAAgBW,EACdT,EACAU,EACAC,QADA,IAAAD,OAAA,QACA,IAAAC,OAAA,GAIA,IAAIC,KAUJ,GATIF,GAAWE,EAAGrV,KAAKiU,EAA0BQ,EAAQZ,WACzDwB,EAAGrV,KAAK4T,EAA2Ba,EAAQZ,WACvCsB,GAAWE,EAAGrV,KAAK9lB,EAAAo6B,aACvBe,EAAGrV,KAAKyU,EAAQD,KAAO,IAAO,MAAQ,OACtCa,EAAGrV,KAAKyU,EAAQD,KAAKpV,SAAS,KAC9BiW,EAAGrV,KAAK,MACRqV,EAAGrV,KAAKyU,EAAQA,SAGZA,EAAQ71B,MAAO,CAGjB,IAAIA,EAAQ61B,EAAQ71B,MAChBw2B,IACFC,EAAGrV,KAAK,MACRqV,EAAGrV,KAAKsV,EAAwBb,EAAQ71B,MAAOu2B,KAGjDE,EAAGrV,KAAK,MACRqV,EAAGrV,KAAK,QACRqV,EAAGrV,KAAKphB,EAAMiJ,OAAOJ,gBACrB4tB,EAAGrV,KAAK,KACRqV,EAAGrV,KAAKphB,EAAMuqB,KAAK/J,SAAS,KAC5BiW,EAAGrV,KAAK,KACRqV,EAAGrV,KAAKphB,EAAMwqB,OAAOhK,SAAS,KAC9BiW,EAAGrV,KAAK,KAEV,OAAOqV,EAAGtV,KAAK,IAIjB,SAAgBuV,EAAwB12B,EAAcu2B,QAAA,IAAAA,OAAA,GAKpD,IAJA,IAAI30B,EAAO5B,EAAMiJ,OAAOrH,KACpB+0B,EAAM/0B,EAAKa,OACXm0B,EAAQ52B,EAAM42B,MACdC,EAAM72B,EAAM62B,IACTD,EAAQ,IAAMt4B,EAAAw4B,YAAYl1B,EAAKkM,WAAW8oB,EAAQ,KAAKA,IAC9D,KAAOC,EAAMF,IAAQr4B,EAAAw4B,YAAYl1B,EAAKkM,WAAW+oB,KAAOA,IAMxD,IALA,IAAIJ,GACF,MACA70B,EAAK+P,UAAUilB,EAAOC,GACtB,OAEKD,EAAQ52B,EAAM42B,OACnBH,EAAGrV,KAAK,KACRwV,IAGF,GADIL,GAAWE,EAAGrV,KAAK9lB,EAAAk6B,WACnBx1B,EAAM42B,OAAS52B,EAAM62B,IACvBJ,EAAGrV,KAAK,UAER,KAAOwV,IAAU52B,EAAM62B,KAAKJ,EAAGrV,KAAK,KAGtC,OADImV,GAAWE,EAAGrV,KAAK9lB,EAAAo6B,aAChBe,EAAGtV,KAAK,IA5JJ7lB,EAAAq6B,oBA8Fbr6B,EAAAg7B,0BAuCAh7B,EAAAo7B,0BA2BA,IAAAhR,EAAA,WAME,SAAAA,EAAsBzN,QAAA,IAAAA,MAAA,MACpBrc,KAAKqc,YAAcA,GAAiD,IAAIrG,MAqD5E,OAjDE8T,EAAA7nB,UAAAk5B,eAAA,SACEnB,EACAX,EACAj1B,EACA81B,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIH,EAAUF,EAAkBp4B,OAAOq4B,EAAMX,EAAUa,EAAMC,EAAMC,GAAMK,UAAUr2B,GAEnF,GADApE,KAAKqc,YAAYmJ,KAAKyU,GAClBZ,GAAYJ,EAAmBO,MAGjC,MAFA4B,QAAQC,IAAIX,EAAwBT,GAAS,GAAM,GAAQ,MAC3DmB,QAAQC,IAAY,IAAIpY,MAAM,SAASqY,OACzB,IAAIrY,MAAM,SAASqY,OAKrCxR,EAAA7nB,UAAAs5B,KAAA,SACEvB,EACA51B,EACA81B,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAp6B,KAAKm7B,eAAenB,EAAMf,EAAmBK,KAAMl1B,EAAO81B,EAAMC,EAAMC,IAIxEtQ,EAAA7nB,UAAAu5B,QAAA,SACExB,EACA51B,EACA81B,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAp6B,KAAKm7B,eAAenB,EAAMf,EAAmBM,QAASn1B,EAAO81B,EAAMC,EAAMC,IAI3EtQ,EAAA7nB,UAAAof,MAAA,SACE2Y,EACA51B,EACA81B,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAp6B,KAAKm7B,eAAenB,EAAMf,EAAmBO,MAAOp1B,EAAO81B,EAAMC,EAAMC,IAE3EtQ,EA5DA,GAAsBpqB,EAAAoqB,iKChOtB2R,EAAAt7B,EAAA,KACAs7B,EAAAt7B,EAAA,KACAs7B,EAAAt7B,EAAA,KACAs7B,EAAAt7B,EAAA,oFCJA,IAqBYkzB,EArBZqI,EAAAv7B,EAAA,IAWA,SAAkBw7B,GAChBA,IAAA,eACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,6BACAA,IAAA,gBAPF,CAAkBj8B,EAAAi8B,aAAAj8B,EAAAi8B,gBAUlB,SAAYtI,GACVA,IAAA,QAAUuI,sBAAoB,UAC9BvI,IAAA,MAAQwI,oBAAkB,QAC1BxI,IAAA,GAAKyI,iBAAe,KACpBzI,IAAA,KAAO0I,mBAAiB,OACxB1I,IAAA,MAAQ2I,oBAAkB,QAC1B3I,IAAA,OAAS4I,qBAAmB,SAC5B5I,IAAA,KAAO6I,mBAAiB,OACxB7I,IAAA,WAAa8I,yBAAuB,aACpC9I,IAAA,aAAe+I,2BAAyB,eACxC/I,IAAA,SAAWgJ,uBAAqB,WAChChJ,IAAA,SAAWiJ,uBAAqB,WAChCjJ,IAAA,UAAYkJ,wBAAsB,YAClClJ,IAAA,UAAYmJ,wBAAsB,YAClCnJ,IAAA,KAAOoJ,mBAAiB,OACxBpJ,IAAA,MAAQqJ,oBAAkB,QAC1BrJ,IAAA,MAAQsJ,oBAAkB,QAC1BtJ,IAAA,MAAQuJ,oBAAkB,QAC1BvJ,IAAA,OAASwJ,qBAAmB,SAC5BxJ,IAAA,OAASyJ,qBAAmB,SAC5BzJ,IAAA,KAAO0J,mBAAiB,OACxB1J,IAAA,OAAS2J,qBAAmB,SAC5B3J,IAAA,KAAO4J,mBAAiB,OACxB5J,IAAA,IAAM6J,kBAAgB,MACtB7J,IAAA,YAAc8J,0BAAwB,cACtC9J,IAAA,cAAgB+J,4BAA0B,gBAC1C/J,IAAA,UAAYgK,wBAAsB,YAClChK,IAAA,WAAaiK,yBAAuB,aACpCjK,IAAA,WAAakK,yBAAuB,aA5BtC,CAAYlK,EAAA3zB,EAAA2zB,eAAA3zB,EAAA2zB,kBA+BZ,SAAY4D,GACVA,IAAA,OAASuG,qBAAmB,SAC5BvG,IAAA,OAASwG,qBAAmB,SAC5BxG,IAAA,UAAYyG,wBAAsB,YAClCzG,IAAA,OAAS0G,uBAAqB,SAC9B1G,IAAA,OAAS2G,uBAAqB,SAC9B3G,IAAA,QAAU4G,wBAAsB,UAChC5G,IAAA,SAAW6G,yBAAuB,WAClC7G,IAAA,SAAW8G,yBAAuB,WAClC9G,IAAA,WAAa+G,2BAAyB,aACtC/G,IAAA,QAAUgH,wBAAsB,UAChChH,IAAA,OAASiH,qBAAmB,SAC5BjH,IAAA,OAASkH,qBAAmB,SAC5BlH,IAAA,OAASmH,qBAAmB,SAC5BnH,IAAA,UAAYoH,wBAAsB,YAClCpH,IAAA,OAASqH,uBAAqB,SAC9BrH,IAAA,OAASsH,uBAAqB,SAC9BtH,IAAA,QAAUuH,wBAAsB,UAChCvH,IAAA,SAAWwH,yBAAuB,WAClCxH,IAAA,SAAWyH,yBAAuB,WAClCzH,IAAA,WAAa0H,2BAAyB,aACtC1H,IAAA,QAAU2H,wBAAsB,UAChC3H,IAAA,OAAS4H,qBAAmB,SAC5B5H,IAAA,UAAY6H,yBAAuB,YACnC7H,IAAA,UAAY8H,yBAAuB,YACnC9H,IAAA,QAAU+H,sBAAoB,UAC9B/H,IAAA,cAAgBgI,iCAA+B,gBAC/ChI,IAAA,cAAgBiI,iCAA+B,gBAC/CjI,IAAA,cAAgBkI,iCAA+B,gBAC/ClI,IAAA,cAAgBmI,iCAA+B,gBAC/CnI,IAAA,cAAgBoI,iCAA+B,gBAC/CpI,IAAA,cAAgBqI,iCAA+B,gBAC/CrI,IAAA,cAAgBsI,iCAA+B,gBAC/CtI,IAAA,cAAgBuI,iCAA+B,gBAC/CvI,IAAA,eAAiBwI,+BAA6B,iBAC9CxI,IAAA,eAAiByI,+BAA6B,iBAC9CzI,IAAA,gBAAkB0I,mCAAiC,kBACnD1I,IAAA,gBAAkB2I,mCAAiC,kBACnD3I,IAAA,gBAAkB4I,mCAAiC,kBACnD5I,IAAA,gBAAkB6I,mCAAiC,kBACnD7I,IAAA,gBAAkB8I,mCAAiC,kBACnD9I,IAAA,gBAAkB+I,mCAAiC,kBACnD/I,IAAA,gBAAkBgJ,mCAAiC,kBACnDhJ,IAAA,gBAAkBiJ,mCAAiC,kBACnDjJ,IAAA,WAAakJ,2BAAyB,aACtClJ,IAAA,UAAYmJ,0BAAwB,YACpCnJ,IAAA,eAAiBoJ,6BAA2B,iBAC5CpJ,IAAA,eAAiBqJ,6BAA2B,iBAG5CrJ,IAAA,cAAgBsJ,0BAAwB,gBACxCtJ,IAAA,eAAiBuJ,2BAAyB,iBAC1CvJ,IAAA,cAAgBwJ,0BAAwB,gBACxCxJ,IAAA,eAAiByJ,2BAAyB,iBAC1CzJ,IAAA,eAAiB0J,2BAAyB,iBAtD5C,CAAYjhC,EAAAu3B,UAAAv3B,EAAAu3B,aAmEZ,SAAYlD,GACVA,IAAA,OAAS6M,qBAAmB,SAC5B7M,IAAA,OAAS8M,qBAAmB,SAC5B9M,IAAA,OAAS+M,qBAAmB,SAC5B/M,IAAA,OAASgN,sBAAoB,SAC7BhN,IAAA,OAASiN,sBAAoB,SAC7BjN,IAAA,OAASkN,sBAAoB,SAC7BlN,IAAA,OAASmN,sBAAoB,SAC7BnN,IAAA,OAASoN,qBAAmB,SAC5BpN,IAAA,MAAQqN,oBAAkB,QAC1BrN,IAAA,OAASsN,qBAAmB,SAC5BtN,IAAA,OAASuN,qBAAmB,SAC5BvN,IAAA,OAASwN,sBAAoB,SAC7BxN,IAAA,OAASyN,sBAAoB,SAC7BzN,IAAA,QAAU0N,sBAAoB,UAC9B1N,IAAA,QAAU2N,sBAAoB,UAC9B3N,IAAA,MAAQ4N,oBAAkB,QAC1B5N,IAAA,MAAQ6N,oBAAkB,QAC1B7N,IAAA,MAAQ8N,qBAAmB,QAC3B9N,IAAA,MAAQ+N,qBAAmB,QAC3B/N,IAAA,MAAQgO,qBAAmB,QAC3BhO,IAAA,MAAQiO,qBAAmB,QAC3BjO,IAAA,MAAQkO,qBAAmB,QAC3BlO,IAAA,MAAQmO,qBAAmB,QAC3BnO,IAAA,MAAQoO,qBAAmB,QAC3BpO,IAAA,MAAQqO,qBAAmB,QAC3BrO,IAAA,OAASsO,qBAAmB,SAC5BtO,IAAA,OAASuO,qBAAmB,SAC5BvO,IAAA,OAASwO,qBAAmB,SAC5BxO,IAAA,OAASyO,sBAAoB,SAC7BzO,IAAA,OAAS0O,sBAAoB,SAC7B1O,IAAA,OAAS2O,sBAAoB,SAC7B3O,IAAA,OAAS4O,sBAAoB,SAC7B5O,IAAA,OAAS6O,qBAAmB,SAC5B7O,IAAA,MAAQ8O,oBAAkB,QAC1B9O,IAAA,OAAS+O,qBAAmB,SAC5B/O,IAAA,OAASgP,qBAAmB,SAC5BhP,IAAA,OAASiP,sBAAoB,SAC7BjP,IAAA,OAASkP,sBAAoB,SAC7BlP,IAAA,QAAUmP,sBAAoB,UAC9BnP,IAAA,QAAUoP,sBAAoB,UAC9BpP,IAAA,MAAQqP,oBAAkB,QAC1BrP,IAAA,MAAQsP,oBAAkB,QAC1BtP,IAAA,MAAQuP,qBAAmB,QAC3BvP,IAAA,MAAQwP,qBAAmB,QAC3BxP,IAAA,MAAQyP,qBAAmB,QAC3BzP,IAAA,MAAQ0P,qBAAmB,QAC3B1P,IAAA,MAAQ2P,qBAAmB,QAC3B3P,IAAA,MAAQ4P,qBAAmB,QAC3B5P,IAAA,MAAQ6P,qBAAmB,QAC3B7P,IAAA,MAAQ8P,qBAAmB,QAC3B9P,IAAA,OAAS+P,uBAAqB,SAC9B/P,IAAA,OAASgQ,uBAAqB,SAC9BhQ,IAAA,OAASiQ,uBAAqB,SAC9BjQ,IAAA,OAASkQ,uBAAqB,SAC9BlQ,IAAA,YAAcmQ,4BAA0B,cACxCnQ,IAAA,OAASoQ,uBAAqB,SAC9BpQ,IAAA,OAASqQ,uBAAqB,SAC9BrQ,IAAA,MAAQsQ,sBAAoB,QAC5BtQ,IAAA,MAAQuQ,sBAAoB,QAC5BvQ,IAAA,MAAQwQ,sBAAoB,QAC5BxQ,IAAA,MAAQyQ,sBAAoB,QAC5BzQ,IAAA,MAAQ0Q,sBAAoB,QAC5B1Q,IAAA,MAAQ2Q,sBAAoB,QAC5B3Q,IAAA,OAAS4Q,uBAAqB,SAC9B5Q,IAAA,OAAS6Q,uBAAqB,SAC9B7Q,IAAA,OAAS8Q,uBAAqB,SAC9B9Q,IAAA,OAAS+Q,uBAAqB,SAC9B/Q,IAAA,YAAcgR,4BAA0B,cACxChR,IAAA,OAASiR,uBAAqB,SAC9BjR,IAAA,OAASkR,uBAAqB,SAC9BlR,IAAA,MAAQmR,sBAAoB,QAC5BnR,IAAA,MAAQoR,sBAAoB,QAC5BpR,IAAA,MAAQqR,sBAAoB,QAC5BrR,IAAA,MAAQsR,sBAAoB,QAC5BtR,IAAA,MAAQuR,sBAAoB,QAC5BvR,IAAA,MAAQwR,sBAAoB,QA5E9B,CAAY7lC,EAAAq0B,WAAAr0B,EAAAq0B,cA+EZ,SAAYyR,GACVA,IAAA,SAAWC,qBAAmB,WAC9BD,IAAA,cAAgBE,0BAAwB,gBACxCF,IAAA,WAAaG,uBAAqB,aAClCH,IAAA,WAAaI,uBAAqB,aAJpC,CAAYlmC,EAAA8lC,SAAA9lC,EAAA8lC,YAWZ,SAAYK,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,OANjC,CAAYzmC,EAAAmmC,cAAAnmC,EAAAmmC,iBASZ,IAAAO,EAAA,oBAAAA,KAWA,OANSA,EAAAzkC,OAAP,SAAc0kC,EAAoBC,GAChC,IAAIC,EAAU,IAAIH,EAGlB,OAFAG,EAAQF,OAASA,EACjBE,EAAQD,OAASA,EACVC,GAEXH,EAXA,GAAa1mC,EAAA0mC,gBAab,IAAAI,EAAA,WA+BE,SAAAA,IAsZQxmC,KAAAymC,oBAA6B,EAC7BzmC,KAAA0mC,sBAA6B,EAqQ7B1mC,KAAA2mC,qBAA8B,EAC9B3mC,KAAA4mC,sBAA+B,EAgMzC,OAh3BSJ,EAAA7kC,OAAP,WACE,IAAIhC,EAAS,IAAI6mC,EAGjB,OAFA7mC,EAAOqsB,IAAM6a,wBACblnC,EAAOmnC,cAAgBC,OAAOC,SAAS,IAChCrnC,GAGF6mC,EAAAS,WAAP,SAAkBZ,GAChB,IAAIa,EAAOC,EAAad,GACxB,IACE,IAAI1mC,EAAS,IAAI6mC,EAGjB,OAFA7mC,EAAOqsB,IAAMob,oBAAoBF,EAAMb,EAAOx/B,QAC9ClH,EAAOmnC,cAAgBC,OAAOC,SAAS,IAChCrnC,UAEPonC,OAAOxV,KAAK8V,WAAkBH,MAQlCV,EAAAvkC,UAAAqlC,gBAAA,SACE1mC,EACAwpB,EACAmd,GAEA,IAAIC,EAAOC,EAAY7mC,GACnBsmC,EAAOQ,EAAcH,GACzB,IACE,OAAOI,yBAAyB3nC,KAAKgsB,IAAKwb,EAAMpd,EAAQ8c,EAAMK,EAAaA,EAAW1gC,OAAS,WAE/FkgC,OAAOxV,KAAK2V,GACZH,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAA2lC,2BAAA,SACExd,EACAmd,GAEA,IAAIL,EAAOQ,EAAcH,GACzB,IACE,OAAOM,oCAAoC7nC,KAAKgsB,IAAK5B,EAAQ8c,EAAMK,EAAaA,EAAW1gC,OAAS,WAEpGkgC,OAAOxV,KAAK2V,KAIhBV,EAAAvkC,UAAA6lC,mBAAA,SAAmBlnC,GACjB,IAAI4mC,EAAOC,EAAY7mC,GACvB,IACEmnC,4BAA4B/nC,KAAKgsB,IAAKwb,WAEtCT,OAAOxV,KAAKiW,KAMhBhB,EAAAvkC,UAAA+lC,UAAA,SAAU1mC,GACR,IAAI2mC,EAAMjoC,KAAK8mC,cAEf,OADAoB,sBAAsBD,EAAK3mC,GACpB6mC,eAAenoC,KAAKgsB,IAAKic,IAGlCzB,EAAAvkC,UAAAmmC,UAAA,SAAUC,EAAeC,QAAA,IAAAA,MAAA,GACvB,IAAIL,EAAMjoC,KAAK8mC,cAEf,OADAyB,sBAAsBN,EAAKI,EAAUC,GAC9BH,eAAenoC,KAAKgsB,IAAKic,IAGlCzB,EAAAvkC,UAAAumC,UAAA,SAAUlnC,GACR,IAAI2mC,EAAMjoC,KAAK8mC,cAEf,OADA2B,wBAAwBR,EAAK3mC,GACtB6mC,eAAenoC,KAAKgsB,IAAKic,IAGlCzB,EAAAvkC,UAAAymC,UAAA,SAAUpnC,GACR,IAAI2mC,EAAMjoC,KAAK8mC,cAEf,OADA6B,wBAAwBV,EAAK3mC,GACtB6mC,eAAenoC,KAAKgsB,IAAKic,IAKlCzB,EAAAvkC,UAAA2mC,YAAA,SACEC,EACAziC,GAEA,OAAO0iC,eAAe9oC,KAAKgsB,IAAK6c,EAAIziC,IAGtCogC,EAAAvkC,UAAA8mC,aAAA,SACEF,EACAvhC,EACAC,GAEA,OAAOyhC,gBAAgBhpC,KAAKgsB,IAAK6c,EAAIvhC,EAAMC,IAG7Ci/B,EAAAvkC,UAAAgnC,WAAA,SACEJ,EACAjoC,EACAsoC,QADA,IAAAtoC,MAAA,WACA,IAAAsoC,MAAA,MAEA,IAAI1B,EAAOC,EAAY7mC,GACnBsmC,EAAOiC,EAAcD,GACzB,IACE,OAAOE,cAAcppC,KAAKgsB,IAAK6c,EAAIrB,EAAMN,EAAMgC,EAA6BA,EAAUriC,OAAS,WAE/FkgC,OAAOxV,KAAK2V,GACZH,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAAonC,eAAA,SACEje,EACA/mB,GAEA,OAAOilC,kBAAkBtpC,KAAKgsB,IAAKZ,EAAO/mB,IAG5CmiC,EAAAvkC,UAAAsnC,eAAA,SACEne,EACA9pB,GAEA,OAAOkoC,kBAAkBxpC,KAAKgsB,IAAKZ,EAAO9pB,IAG5CklC,EAAAvkC,UAAAwnC,gBAAA,SACE7oC,EACAyD,GAEA,IAAImjC,EAAOC,EAAY7mC,GACvB,IACE,OAAO8oC,mBAAmB1pC,KAAKgsB,IAAKwb,EAAMnjC,WAE1C0iC,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAA0nC,WAAA,SACEC,EACAC,EACAC,EACAzlC,EACAiiC,GAEA,YAFA,IAAAA,MAAA,GAEOyD,cAAc/pC,KAAKgsB,IAAK4d,EAAOC,EAAS,EAAI,EAAGvD,EAA6BsD,EAAOvlC,EAAMylC,IAGlGtD,EAAAvkC,UAAA+nC,YAAA,SACEJ,EACAE,EACAxoC,EACA+C,EACAiiC,GAEA,YAFA,IAAAA,MAAA,GAEO2D,eAAejqC,KAAKgsB,IAAK4d,EAAOtD,EAA6BsD,EAAOE,EAAKxoC,EAAO+C,IAGzFmiC,EAAAvkC,UAAAioC,iBAAA,SACEN,EACAE,EACAzlC,EACAiiC,GAEA,YAFA,IAAAA,MAAA,GAEO6D,oBAAoBnqC,KAAKgsB,IAAK4d,EAAOtD,EAAQjiC,EAAMylC,IAG5DtD,EAAAvkC,UAAAmoC,kBAAA,SACER,EACAE,EACAxoC,EACA+C,EACAiiC,GAEA,YAFA,IAAAA,MAAA,GAEO+D,qBAAqBrqC,KAAKgsB,IAAK4d,EAAOtD,EAAQwD,EAAKxoC,EAAO+C,IAGnEmiC,EAAAvkC,UAAAqoC,gBAAA,SACEzB,EACAe,EACAtD,EACAwD,EACAxoC,EACA+C,GAEA,OAAOkmC,mBAAmBvqC,KAAKgsB,IAAK6c,EAAIe,EAAOtD,EAAQwD,EAAKxoC,EAAO+C,IAGrEmiC,EAAAvkC,UAAAuoC,oBAAA,SACEZ,EACAtD,EACAwD,EACAW,EACAC,EACArmC,GAEA,OAAOsmC,uBAAuB3qC,KAAKgsB,IAAK4d,EAAOtD,EAAQwD,EAAKW,EAAUC,EAAarmC,IAGrFmiC,EAAAvkC,UAAA2oC,iBAAA,SACEd,EACAW,EACAI,EACAC,GAEA,OAAOC,oBAAoB/qC,KAAKgsB,IAAK8d,EAAKW,EAAUI,EAASC,IAG/DtE,EAAAvkC,UAAA+oC,iBAAA,SACElB,EACAmB,GAEA,OAAOC,oBAAoBlrC,KAAKgsB,IAAK8d,EAAKmB,IAK5CzE,EAAAvkC,UAAAkpC,eAAA,SACE/f,EACA9pB,GAEA,OAAO8pC,kBAAkBprC,KAAKgsB,IAAKZ,EAAO9pB,IAG5CklC,EAAAvkC,UAAAopC,gBAAA,SACEzqC,EACAU,GAEA,IAAIkmC,EAAOC,EAAY7mC,GACvB,IACE,OAAO0qC,mBAAmBtrC,KAAKgsB,IAAKwb,EAAMlmC,WAE1CylC,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAAspC,YAAA,SACE7/B,EACA8/B,EACAnnC,QAAA,IAAAA,MAAA,GAEA,IAAImjC,EAAOC,EAAY/7B,GACnBw7B,EAAOiC,EAAcqC,GACzB,IACE,OAAOC,eAAezrC,KAAKgsB,IAAKwb,EAAMN,EAAMsE,EAAS3kC,OAAQxC,WAE7D0iC,OAAOxV,KAAK2V,GACZH,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAAypC,YAAA,SACEhgC,EACArB,EACA/I,QADA,IAAA+I,MAAA,QACA,IAAA/I,MAAA,GAEA,IAAIkmC,EAAOC,EAAY/7B,GACvB,IACE,OAAOigC,eAAe3rC,KAAKgsB,IAAKwb,EAAMn9B,EAAW/I,WAEjDylC,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAA2pC,WAAA,SACE3kC,GAEA,OAAO4kC,cAAc7rC,KAAKgsB,IAAK/kB,IAGjCu/B,EAAAvkC,UAAA6pC,WAAA,SACEpgC,EACA2D,GAEA,IAAIm4B,EAAOC,EAAY/7B,GACvB,IACE,OAAOqgC,cAAc/rC,KAAKgsB,IAAKwb,EAAMn4B,WAErC03B,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAA+pC,SAAA,SACE3hC,EACA2D,EACAC,GAEA,YAFA,IAAAA,MAAA,GAEOg+B,YAAYjsC,KAAKgsB,IAAK3hB,EAAW2D,EAAQC,IAGlDu4B,EAAAvkC,UAAAiqC,UAAA,WACE,OAAOC,aAAansC,KAAKgsB,MAG3Bwa,EAAAvkC,UAAAmqC,aAAA,SACEnlC,GAEA,YAFA,IAAAA,MAAA,GAEOolC,gBAAgBrsC,KAAKgsB,IAAK/kB,IAGnCu/B,EAAAvkC,UAAAqqC,aAAA,SACEt+B,EACAC,EACA5D,GAEA,OAAOkiC,gBAAgBvsC,KAAKgsB,IAAK3hB,EAAW2D,EAAQC,IAGtDu4B,EAAAvkC,UAAAuqC,aAAA,SACE/iC,EACAgjC,EACApiC,EACA/I,QAAA,IAAAA,MAAA,GAIA,IAFA,IAAIorC,EAAWjjC,EAAM5C,OACjB8lC,EAAO,IAAI32B,MAAa02B,GACnBrsC,EAAI,EAAGA,EAAIqsC,IAAYrsC,EAC9BssC,EAAKtsC,GAAKonC,EAAYh+B,EAAMpJ,IAE9B,IAAI6mC,EAAOQ,EAAciF,GACrBnF,EAAOC,EAAYgF,GACvB,IACE,OAAOG,gBAAgB5sC,KAAKgsB,IAAKkb,EAAMwF,EAAUlF,EAAMn9B,EAAW/I,WAElEylC,OAAOxV,KAAKiW,GACZT,OAAOxV,KAAK2V,GACZ,IAAS7mC,EAAIqsC,EAAW,EAAGrsC,GAAK,IAAKA,EAAG0mC,OAAOxV,KAAKob,EAAKtsC,MAI7DmmC,EAAAvkC,UAAA4qC,WAAA,SACE9c,EACAmZ,EACA9jC,GAEA,IAAIoiC,EAAOC,EAAY1X,GACnBmX,EAAOiC,EAAcD,GACzB,IACE,OAAO4D,cAAc9sC,KAAKgsB,IAAKwb,EAAMN,EAAMgC,GAAYA,EAASriC,QAAU,EAAGzB,WAE7E2hC,OAAOxV,KAAK2V,GACZH,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAA8qC,iBAAA,SACEhd,EACAmZ,EACA9jC,GAEA,IAAIoiC,EAAOC,EAAY1X,GACnBmX,EAAOiC,EAAcD,GACzB,IACE,OAAO8D,oBAAoBhtC,KAAKgsB,IAAKwb,EAAMN,EAAMgC,GAAYA,EAASriC,QAAU,EAAGzB,WAEnF2hC,OAAOxV,KAAK2V,GACZH,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAAgrC,mBAAA,SACE7hB,EACA8d,EACAgE,GAEA,IAAIhG,EAAOiC,EAAcD,GACrB1B,EAAOC,EAAYyF,GACvB,IACE,OAAOC,sBAAsBntC,KAAKgsB,IAAKZ,EAAO8b,EAAMgC,GAAYA,EAASriC,QAAU,EAAG2gC,WAEtFT,OAAOxV,KAAKiW,GACZT,OAAOxV,KAAK2V,KAIhBV,EAAAvkC,UAAAmrC,kBAAA,WACE,OAAOC,qBAAqBrtC,KAAKgsB,MAKnCwa,EAAAvkC,UAAAqrC,UAAA,SACE1sC,EACAyD,EACAkpC,EACAxoC,GAEA,IAAIyiC,EAAOC,EAAY7mC,GACvB,IACE,OAAO4sC,mBAAmBxtC,KAAKgsB,IAAKwb,EAAMnjC,EAAMkpC,EAAU,EAAI,EAAGxoC,WAEjEgiC,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAAwrC,YAAA,SACE7sC,EACAyD,EACAqpC,EACAr+B,GAEA,IAAIm4B,EAAOC,EAAY7mC,GACnBsmC,EAAOQ,EAAcgG,GACzB,IACE,OAAOC,qBAAqB3tC,KAAKgsB,IAAKwb,EAAMnjC,EAAM6iC,EAAMwG,EAAWA,EAAS7mC,OAAS,EAAGwI,WAExF03B,OAAOxV,KAAK2V,GACZH,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAA2rC,eAAA,SAAehtC,GACb,IAAI4mC,EAAOC,EAAY7mC,GACvB,IACEitC,wBAAwB7tC,KAAKgsB,IAAKwb,WAElCT,OAAOxV,KAAKiW,KAOhBhB,EAAAvkC,UAAA6rC,qBAAA,SAAqB1jB,EAAoBmd,EAAiCl4B,GACxErP,KAAK0mC,qBAAuBz0B,QAAQjS,KAAK0mC,sBACzC,IAAIqH,EAAW/tC,KAAKymC,oBACfsH,IAAU/tC,KAAKymC,oBAAsBsH,EAAWtG,EAAY,KACjE,IAAIP,EAAOQ,EAAcH,GACzB,IACE,IAAIyG,EAAUrG,yBAAyB3nC,KAAKgsB,IAAK+hB,EAAU3jB,EAAQ8c,EAAMK,EAAaA,EAAW1gC,OAAS,GAC1G,OAAO8mC,qBAAqB3tC,KAAKgsB,IAAK+hB,EAAUC,EAAS,EAAG,EAAG3+B,WAE/D03B,OAAOxV,KAAK2V,KAIhBV,EAAAvkC,UAAAgsC,wBAAA,WACEjuC,KAAK0mC,sBAAwBz0B,OAAOjS,KAAK0mC,sBACzC,IAAIqH,EAAW97B,OAAOjS,KAAKymC,qBAC3BoH,wBAAwB7tC,KAAKgsB,IAAK+hB,GAClChG,4BAA4B/nC,KAAKgsB,IAAK+hB,IAGxCvH,EAAAvkC,UAAAisC,kBAAA,SACE9tB,EACA3S,GAEA,IAAI0gC,EAAQ1G,EAAYrnB,GACpBguB,EAAQ3G,EAAYh6B,GACxB,IACE,OAAO4gC,2BAA2BruC,KAAKgsB,IAAKmiB,EAAOC,WAEnDrH,OAAOxV,KAAK6c,GACZrH,OAAOxV,KAAK4c,KAIhB3H,EAAAvkC,UAAAqsC,eAAA,SACEluB,EACA3S,GAEA,IAAI0gC,EAAQ1G,EAAYrnB,GACpBguB,EAAQ3G,EAAYh6B,GACxB,IACE,OAAO8gC,wBAAwBvuC,KAAKgsB,IAAKmiB,EAAOC,WAEhDrH,OAAOxV,KAAK6c,GACZrH,OAAOxV,KAAK4c,KAIhB3H,EAAAvkC,UAAAusC,gBAAA,SACEpuB,EACA3S,GAEA,IAAI0gC,EAAQ1G,EAAYrnB,GACpBguB,EAAQ3G,EAAYh6B,GACxB,IACE,OAAOghC,yBAAyBzuC,KAAKgsB,IAAKmiB,EAAOC,WAEjDrH,OAAOxV,KAAK6c,GACZrH,OAAOxV,KAAK4c,KAIhB3H,EAAAvkC,UAAAysC,gBAAA,SACEtuB,EACA3S,GAEA,IAAI0gC,EAAQ1G,EAAYrnB,GACpBguB,EAAQ3G,EAAYh6B,GACxB,IACE,OAAOkhC,yBAAyB3uC,KAAKgsB,IAAKmiB,EAAOC,WAEjDrH,OAAOxV,KAAK6c,GACZrH,OAAOxV,KAAK4c,KAIhB3H,EAAAvkC,UAAA2sC,aAAA,SAAanhC,GACX,IAAI+5B,EAAOC,EAAYh6B,GACvB,IACEohC,sBAAsB7uC,KAAKgsB,IAAKwb,WAEhCT,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAA6sC,kBAAA,SACE1uB,EACA2uB,EACAC,EACAC,GAEA,IAAId,EAAQ1G,EAAYrnB,GACpBguB,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOG,2BAA2BnvC,KAAKgsB,IAAKmiB,EAAOC,EAAOc,EAAOD,WAEjElI,OAAOxV,KAAK2d,GACZnI,OAAOxV,KAAK6c,GACZrH,OAAOxV,KAAK4c,KAIhB3H,EAAAvkC,UAAAmtC,eAAA,SACEhvB,EACA2uB,EACAC,GAEA,IAAIb,EAAQ1G,EAAYrnB,GACpBguB,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOK,wBAAwBrvC,KAAKgsB,IAAKmiB,EAAOC,EAAOc,WAEvDnI,OAAOxV,KAAK2d,GACZnI,OAAOxV,KAAK6c,GACZrH,OAAOxV,KAAK4c,KAIhB3H,EAAAvkC,UAAAqtC,gBAAA,SACElvB,EACA2uB,EACAC,GAEA,IAAIb,EAAQ1G,EAAYrnB,GACpBguB,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOO,yBAAyBvvC,KAAKgsB,IAAKmiB,EAAOC,EAAOc,WAExDnI,OAAOxV,KAAK2d,GACZnI,OAAOxV,KAAK6c,GACZrH,OAAOxV,KAAK4c,KAIhB3H,EAAAvkC,UAAAutC,gBAAA,SACEpvB,EACA2uB,EACAC,EACAS,GAEA,IAAItB,EAAQ1G,EAAYrnB,GACpBguB,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOU,yBAAyB1vC,KAAKgsB,IAAKmiB,EAAOC,EAAOc,EAAOO,WAE/D1I,OAAOxV,KAAK2d,GACZnI,OAAOxV,KAAK6c,GACZrH,OAAOxV,KAAK4c,KAIhB3H,EAAAvkC,UAAA0tC,aAAA,SAAavvB,GACX,IAAIonB,EAAOC,EAAYrnB,GACvB,IACEwvB,sBAAsB5vC,KAAKgsB,IAAKwb,WAEhCT,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAA4tC,UAAA,SACEC,EACAC,EACAC,EACAjgB,EACAhO,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIylB,EAAOC,EAAY1lB,GACnBnb,EAAIopC,EAASnpC,OACbopC,EAAO,IAAIj6B,MAAapP,GACxBspC,EAAO,IAAIl6B,MAAqBpP,GAChCupC,EAAO,IAAIn6B,MAAapP,GACnBvG,EAAI,EAAGA,EAAIuG,IAAKvG,EAAG,CAC1B,IAAIgmC,EAAS2J,EAAS3vC,GAAGgmC,OACrBC,EAAS0J,EAAS3vC,GAAGimC,OACzB2J,EAAK5vC,GAAK8mC,EAAad,GACvB6J,EAAK7vC,GAAK0vB,GAAU2L,EAAA0U,OAAOC,OACvBrwC,KAAKooC,UAAUkI,QAAQhK,GAASiK,SAASjK,IACzCtmC,KAAKgoC,UAAUsI,QAAQhK,IAC3B6J,EAAK9vC,GAAKgmC,EAAOx/B,OAEnB,IAAI2pC,EAAQ9I,EAAcuI,GACtBQ,EAAQ/I,EAAcwI,GACtBQ,EAAQhJ,EAAcyI,GAC1B,IACEQ,mBAAmB3wC,KAAKgsB,IAAK8jB,EAASC,EAASvI,EAAMgJ,EAAOC,EAAOC,EAAO9pC,WAE1EmgC,OAAOxV,KAAKmf,GACZ3J,OAAOxV,KAAKkf,GACZ1J,OAAOxV,KAAKif,GACZ,IAASnwC,EAAIuG,EAAI,EAAGvG,GAAK,IAAKA,EAAG0mC,OAAOxV,KAAK0e,EAAK5vC,IAClD0mC,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAA2uC,iBAAA,SAAiBC,GACf,IAAI3J,EAAOiC,EAAc0H,GACzB,IACEC,0BAA0B9wC,KAAKgsB,IAAKkb,EAAM2J,EAAMhqC,gBAEhDkgC,OAAOxV,KAAK2V,KAIhBV,EAAAvkC,UAAA8uC,SAAA,SAASC,GACPC,kBAAkBjxC,KAAKgsB,IAAKglB,IAG9BxK,EAAAvkC,UAAAivC,iBAAA,WACE,OAAOC,6BAGT3K,EAAAvkC,UAAAmvC,iBAAA,SAAiBC,QAAA,IAAAA,MAAA,GACfC,0BAA0BD,IAG5B7K,EAAAvkC,UAAAsvC,eAAA,WACE,OAAOC,2BAGThL,EAAAvkC,UAAAwvC,eAAA,SAAeJ,QAAA,IAAAA,MAAA,GACbK,wBAAwBL,IAG1B7K,EAAAvkC,UAAA0vC,aAAA,SAAaC,QAAA,IAAAA,OAAA,GACXC,sBAAsBD,IAGxBpL,EAAAvkC,UAAA6vC,SAAA,SAASd,QAAA,IAAAA,MAAA,GACHA,EACFe,0BAA0Bf,EAAMhxC,KAAKgsB,KAErCgmB,wBAAwBhyC,KAAKgsB,MAIjCwa,EAAAvkC,UAAAgwC,UAAA,SAAUC,EAAkBlB,QAAA,IAAAA,MAAA,GAG1B,IAFA,IAAItE,EAAWwF,EAAOrrC,OAClB4C,EAAQ,IAAIuM,MAAa02B,GACpBrsC,EAAI,EAAGA,EAAIqsC,IAAYrsC,EAC9BoJ,EAAMpJ,GAAKonC,EAAYyK,EAAO7xC,IAEhC,IAAI6mC,EAAOQ,EAAcj+B,GACzB,IACMunC,EACFmB,2BAA2BnB,EAAMhxC,KAAKgsB,IAAKkb,EAAMwF,GAEjD0F,yBAAyBpyC,KAAKgsB,IAAKkb,EAAMwF,WAG3C3F,OAAOxV,KAAK2V,GACZ,IAAS7mC,EAAIqsC,EAAUrsC,GAAK,IAAKA,EAAG0mC,OAAOxV,KAAK9nB,EAAMpJ,MAO1DmmC,EAAAvkC,UAAAowC,qBAAA,SAAqBjsC,GAEnB,IAAIksC,EAAwBnB,4BACxBoB,EAAsBf,0BACtBgB,EAAoBC,wBACxBnB,0BAA0B,GAC1BI,wBAAwB,GACxBG,uBAAsB,GAGtB,IAAIxtC,EAAOquC,2BAA2BtsC,GAClC4qC,EAAOhxC,KAAK8tC,qBAAqBzpC,EAAM,KAAM+B,GAC7CqD,EAAQzJ,KAAK4mC,sBACjB,IAAKn9B,EAAO,CACV,IAAI7I,EAAO6mC,EAAY,cACvBznC,KAAK2mC,qBAAuB/lC,EAC5BZ,KAAK4mC,sBAAwBn9B,EAAQi+B,GAAgB9mC,IAUvD,OARAuxC,2BAA2BnB,EAAMhxC,KAAKgsB,IAAKviB,EAAO,GAClDrD,EAAOusC,yBAAyB3B,GAChChxC,KAAKiuC,0BAGLqD,0BAA0BgB,GAC1BZ,wBAAwBa,GACxBV,sBAAsBW,GACfpsC,GAGTogC,EAAAvkC,UAAA2wC,SAAA,WACE,OAA4C,GAArCC,wBAAwB7yC,KAAKgsB,MAGtCwa,EAAAvkC,UAAA6wC,UAAA,WACEC,yBAAyB/yC,KAAKgsB,MAGhCwa,EAAAvkC,UAAA+wC,SAAA,SAASC,GACP,IAAIhL,EAAMjoC,KAAK8mC,cACXU,EAAOC,EAAYwL,GACnBC,EAAmB,EACnBC,EAAsB,EAC1B,IACEC,gCAAgCnL,EAAKjoC,KAAKgsB,IAAKwb,GAC/C0L,EAAYG,EAAQpL,GACpB,IAAIqL,EAAcD,EAAQpL,EAAM,GAChCkL,EAAeE,EAAQpL,EAAM,GAC7B,IAAIsL,EAAM,IAAIC,EAGd,OAFAD,EAAIE,OAqhBV,SAAoB3J,EAAYjjC,GAE9B,IADA,IAAI0sC,EAAM,IAAIG,WAAW7sC,GAChBxG,EAAW,EAAGA,EAAIwG,IAAUxG,EACnCkzC,EAAIlzC,GAAKszC,KAAS7J,EAAMzpC,GAE1B,OAAOkzC,EA1hBUK,CAAWV,EAAWI,GACnCC,EAAIhlB,UAAYslB,EAAWV,GACpBI,UAEH/L,GAAMT,OAAOxV,KAAKiW,GAClB0L,GAAWnM,OAAOxV,KAAK2hB,GACvBC,GAAcpM,OAAOxV,KAAK4hB,KAIlC3M,EAAAvkC,UAAA6xC,OAAA,WACE,MAAM,IAAI7wB,MAAM,oBAGlBujB,EAAAvkC,UAAA8xC,QAAA,WACE,MAAM,IAAI9wB,MAAM,oBAGlBujB,EAAAvkC,UAAA+xC,QAAA,WACE/hC,OAAOjS,KAAKgsB,KACZ+a,OAAOxV,KAAKvxB,KAAK8mC,eACjBC,OAAOxV,KAAKvxB,KAAKymC,qBACjBM,OAAOxV,KAAKvxB,KAAK2mC,sBACjBI,OAAOxV,KAAKvxB,KAAK4mC,uBACjBqN,uBAAuBj0C,KAAKgsB,KAC5BhsB,KAAKgsB,IAAM,GAGbwa,EAAAvkC,UAAAiyC,eAAA,WACE,OAAOC,EAASxyC,OAAO3B,OAGzBwmC,EAAAvkC,UAAAmyC,gBAAA,SACEhuC,EACAiuC,EACAC,GAEA,QAHA,IAAAD,OAAA,QACA,IAAAC,MAAgB71B,IAAImZ,WAEhB0c,EAAW,EAAG,OAAO,EAGzB,IAAIC,EACAC,EAEA,OALJF,GAAY,EAKAG,yBAAyBruC,IACnC,KAAKitB,EAAa6C,MAChB,OAAQwc,2BAA2BtsC,IACjC,OACE,OAAOpG,KAAKgoC,UAAU0M,0BAA0BtuC,IAElD,OACE,OAAOpG,KAAKooC,UACVuM,6BAA6BvuC,GAC7BwuC,8BAA8BxuC,IAGlC,OACE,OAAOpG,KAAKwoC,UAAUqM,0BAA0BzuC,IAElD,OACE,OAAOpG,KAAK0oC,UAAUoM,0BAA0B1uC,IAElD,QACE,MAAM,IAAI6c,MAAM,0BAItB,KAAKoQ,EAAaC,SAChB,OAAOgW,kBAAkBtpC,KAAKgsB,IAC5B+oB,0BAA0B3uC,GAC1BssC,2BAA2BtsC,IAG/B,KAAKitB,EAAaO,UAChB,IAAI5P,EAAagxB,0BAA0B5uC,GAC3C,IAAK4d,EAAY,MACjB,OAAO0lB,mBAAmB1pC,KAAKgsB,IAAKhI,EAAY0uB,2BAA2BtsC,IAE7E,KAAKitB,EAAawE,KAChB,KAAM0c,EAAUv0C,KAAKo0C,gBAAgBa,oBAAoB7uC,GAAOiuC,EAAeC,IAC7E,MAEF,OACEY,sBAAsB9uC,GAClB+jC,oBAAoBnqC,KAAKgsB,IACvBmpB,sBAAsB/uC,GACtBgvC,uBAAuBhvC,GACvBssC,2BAA2BtsC,GAC3BmuC,GAEFxK,cAAc/pC,KAAKgsB,IACjBmpB,sBAAsB/uC,GACtBivC,sBAAsBjvC,GAAQ,EAAI,EAClCgvC,uBAAuBhvC,GACvBkvC,sBAAsBlvC,GACtBssC,2BAA2BtsC,GAC3BmuC,GAIV,KAAKlhB,EAAa0D,MAChB,KAAMwd,EAAUv0C,KAAKo0C,gBAAgBmB,uBAAuBnvC,GAAOiuC,EAAeC,IAChF,MAEF,OAAOxL,eAAe9oC,KAAKgsB,IAAKwpB,oBAAoBpvC,GAAOmuC,GAE7D,KAAKlhB,EAAaQ,OAChB,KAAM0gB,EAAUv0C,KAAKo0C,gBAAgBqB,uBAAuBrvC,GAAOiuC,EAAeC,IAChF,MAEF,KAAME,EAAUx0C,KAAKo0C,gBAAgBsB,wBAAwBtvC,GAAOiuC,EAAeC,IACjF,MAEF,OAAOtL,gBAAgBhpC,KAAKgsB,IAAK2pB,qBAAqBvvC,GAAOmuC,EAASC,GAG1E,OAAO,GAKThO,EAAAvkC,UAAA2zC,iBAAA,SAAiBh1C,GACf,IAAI4mC,EAAOC,EAAY7mC,GACvB,IACE,OAAOi1C,oCAAoC71C,KAAKgsB,IAAKwb,WAErDT,OAAOxV,KAAKiW,KAIhBhB,EAAAvkC,UAAA6zC,iBAAA,SAAiB1qB,GACf,OAAOyoB,EAAWkC,oCAAoC/1C,KAAKgsB,IAAKZ,KAGlEob,EAAAvkC,UAAAwsB,iBAAA,SACEuiB,EACA5qC,EACA4vC,EACAC,EACAC,GAEAC,kCAAkCnF,EAAM5qC,EAAM4vC,EAAWC,EAAYC,IAn3BvD1P,EAAA4P,kBAA2B,MAG3B5P,EAAA6P,kBAA2B,MAk3B7C7P,EA53BA,GAAa9mC,EAAA8mC,SAg4Bb9mC,EAAA0zB,gBAAA,SAAgChtB,GAC9B,OAAOquC,yBAAyBruC,IAGlC1G,EAAA63B,kBAAA,SAAkCnxB,GAChC,OAAOssC,2BAA2BtsC,IAGpC1G,EAAAy2B,iBAAA,SAAiC/vB,GAC/B,OAAOsuC,0BAA0BtuC,IAGnC1G,EAAA83B,oBAAA,SAAoCpxB,GAClC,OAAOuuC,6BAA6BvuC,IAGtC1G,EAAA42C,qBAAA,SAAqClwC,GACnC,OAAOwuC,8BAA8BxuC,IAGvC1G,EAAA+3B,iBAAA,SAAiCrxB,GAC/B,OAAOyuC,0BAA0BzuC,IAGnC1G,EAAAg4B,iBAAA,SAAiCtxB,GAC/B,OAAO0uC,0BAA0B1uC,IAGnC1G,EAAA6zB,iBAAA,SAAiCntB,GAC/B,OAAO2uC,0BAA0B3uC,IAGnC1G,EAAA62C,iBAAA,SAAiCnwC,GAC/B,OAAOowC,0BAA0BpwC,IAGnC1G,EAAAi0B,iBAAA,SAAiCvtB,GAC/B,OAAOqwC,0BAA0BrwC,IAGnC1G,EAAAg0B,WAAA,SAA2BttB,GACzB,OAAOswC,uBAAuBtwC,IAGhC1G,EAAAo0B,YAAA,SAA4B1tB,GAC1B,OAAOuvC,qBAAqBvvC,IAG9B1G,EAAAu2B,cAAA,SAA8B7vB,GAC5B,OAAOqvC,uBAAuBrvC,IAGhC1G,EAAA02B,eAAA,SAA+BhwB,GAC7B,OAAOsvC,wBAAwBtvC,IAGjC1G,EAAAs3B,WAAA,SAA2B5wB,GACzB,OAAOovC,oBAAoBpvC,IAG7B1G,EAAAi3C,cAAA,SAA8BvwC,GAC5B,OAAOmvC,uBAAuBnvC,IAGhC1G,EAAAq4B,aAAA,SAA6B3xB,GAC3B,OAAO+uC,sBAAsB/uC,IAG/B1G,EAAAk3C,cAAA,SAA8BxwC,GAC5B,OAAOgvC,uBAAuBhvC,IAGhC1G,EAAAm3C,WAAA,SAA2BzwC,GACzB,OAAO6uC,oBAAoB7uC,IAG7B1G,EAAAs4B,aAAA,SAA6B5xB,GAC3B,OAAOivC,sBAAsBjvC,IAG/B1G,EAAAo3C,cAAA,SAA8B1wC,GAC5B,OAAO2wC,uBAAuB3wC,IAGhC1G,EAAAs3C,eAAA,SAA+B5wC,GAC7B,OAAO6wC,wBAAwB7wC,IAGjC1G,EAAAw3C,YAAA,SAA4B9wC,GAC1B,OAAO+wC,qBAAqB/wC,IAG9B1G,EAAA03C,cAAA,SAA8BhxC,GAC5B,OAAOixC,uBAAuBjxC,IAGhC1G,EAAAw4B,aAAA,SAA6B9xB,GAC3B,OAAOytC,EAAWyD,sBAAsBlxC,KAG1C1G,EAAAy4B,mBAAA,SAAmC/xB,GACjC,OAAOmxC,6BAA6BnxC,IAGtC1G,EAAA24B,cAAA,SAA8BjyB,EAAqBglB,GACjD,OAAOosB,uBAAuBpxC,EAAMglB,IAGtC1rB,EAAA+3C,eAAA,SAA+BrxC,GAC7B,OAAOsxC,wBAAwBtxC,IAGjC1G,EAAA64B,UAAA,SAA0BnyB,GACxB,OAAOuxC,qBAAqBvxC,IAG9B1G,EAAA84B,WAAA,SAA2BpyB,GACzB,OAAOwxC,sBAAsBxxC,IAG/B1G,EAAAm4C,YAAA,SAA4BzxC,GAC1B,OAAOytC,EAAWiE,qBAAqB1xC,KAGzC1G,EAAAq4C,YAAA,SAA4B3xC,GAC1B,OAAO4xC,qBAAqB5xC,IAG9B1G,EAAAu4C,aAAA,SAA6B7xC,GAC3B,OAAOytC,EAAWqE,sBAAsB9xC,KAG1C1G,EAAAy4C,kBAAA,SAAkC/xC,GAChC,OAAOgyC,2BAA2BhyC,IAGpC1G,EAAAg5B,cAAA,SAA8BtyB,GAC5B,OAAOiyC,yBAAyBjyC,IAGlC1G,EAAAi5B,cAAA,SAA8BvyB,GAC5B,OAAOkyC,0BAA0BlyC,IAGnC1G,EAAA64C,mBAAA,SAAmCnyC,GACjC,OAAOoyC,4BAA4BpyC,IAGrC1G,EAAA+4C,aAAA,SAA6BryC,GAC3B,OAAOsyC,sBAAsBtyC,IAG/B1G,EAAAi5C,eAAA,SAA+BvyC,GAC7B,OAAOwyC,wBAAwBxyC,IAGjC1G,EAAAm5B,cAAA,SAA8BzyB,GAC5B,OAAOytC,EAAWgF,uBAAuBzyC,KAG3C1G,EAAAo5C,UAAA,SAA0B1yC,GACxB,OAAO2yC,mBAAmB3yC,IAG5B1G,EAAAs5C,oBAAA,SAAoC5yC,GAClC,OAAO6yC,4BAA4B7yC,IAGrC1G,EAAAw5C,eAAA,SAA+B9yC,EAAqBglB,GAClD,OAAO+tB,wBAAwB/yC,EAAMglB,IAGvC1rB,EAAA05C,YAAA,SAA4BhzC,GAC1B,OAAOytC,EAAWwF,4BAA4BjzC,KAKhD1G,EAAA45C,gBAAA,SAAgCtI,GAC9B,OAAO2B,yBAAyB3B,IAGlCtxC,EAAA65C,gBAAA,SAAgCvI,GAC9B,OAAO6C,EAAW2F,yBAAyBxI,KAG7CtxC,EAAA+5C,sBAAA,SAAsCzI,GACpC,OAAO0I,8BAA8B1I,IAGvCtxC,EAAAi6C,qBAAA,SAAqC3I,EAAmB5lB,GACtD,OAAOwuB,0BAA0B5I,EAAM5lB,IAGzC1rB,EAAAm6C,sBAAA,SAAsC7I,GACpC,OAAO8I,2BAA2B9I,IAGpC,IAAAmD,EAAA,WAYE,SAAAA,KA0BF,OAjCSA,EAAAxyC,OAAP,SAAchC,GACZ,IAAIo6C,EAAW,IAAI5F,EAGnB,OAFA4F,EAASp6C,OAASA,EAClBo6C,EAAS/tB,IAAMguB,kBACRD,GAKT5F,EAAAlyC,UAAAg4C,SAAA,SAASjgB,GACP,OAAOkgB,kBAAkBl6C,KAAKgsB,IAAKgO,IAGrCma,EAAAlyC,UAAAk4C,UAAA,SAAUC,EAAwBC,EAAsBhwC,EAA8B2vB,QAA9B,IAAA3vB,MAAA,QAA8B,IAAA2vB,MAAA,GACpFsgB,mBAAmBF,EAAMC,EAAIhwC,EAAW2vB,IAG1Cma,EAAAlyC,UAAAs4C,mBAAA,SAAmBvgB,EAAqB3vB,GACtC,OAAOmwC,4BAA4Bx6C,KAAKgsB,IAAKgO,EAAM3vB,IAGrD8pC,EAAAlyC,UAAAw4C,mBAAA,SAAmBL,EAAwBC,EAAsBK,EAAgB1gB,QAAA,IAAAA,MAAA,GAC/E,IAAIkN,EAAOQ,EAAcgT,GACzB,IACEC,4BAA4BP,EAAMC,EAAInT,EAAMwT,EAAQ7zC,OAAQmzB,WAE5D+M,OAAOxV,KAAK2V,KAIhBiN,EAAAlyC,UAAA24C,iBAAA,SAAiBC,EAAyBC,GACxC,OAAOC,0BAA0B/6C,KAAKgsB,IAAK6uB,EAAOC,EAAa96C,KAAKL,OAAOqsB,MAE/EmoB,EAtCA,GAkFA,SAAShN,EAAa6T,GACpB,IAAKA,EAAK,OAAO,EAIjB,IAHA,IAAIC,EAAYD,EAAIn0C,OAChBijC,EAAM/C,OAAOC,SAASiU,GACtBC,EAAMpR,EACDzpC,EAAI,EAAGA,EAAI46C,IAAa56C,EAC/B86C,MAAUD,IAAOF,EAAI36C,IAEvB,OAAOypC,EAGT,SAASpC,EAAc0T,GACrB,IAAKA,EAAM,OAAO,EAGlB,IAFA,IAAItR,EAAM/C,OAAOC,SAASoU,EAAKv0C,QAAU,GACrCq0C,EAAMpR,EACDzpC,EAAI,EAAGuG,EAAIw0C,EAAKv0C,OAAQxG,EAAIuG,IAAKvG,EAAG,CAC3C,IAAIg7C,EAAMD,EAAK/6C,GAEf86C,MAAUD,EAAyB,IAAdG,GACrBF,MAAUD,EAAM,EAAKG,GAAS,EAAK,KACnCF,MAAUD,EAAM,EAAKG,GAAQ,GAAM,KACnCF,MAAUD,EAAM,EAAKG,IAAQ,IAC7BH,GAAO,EAET,OAAOpR,EAGT,SAASX,EAAcmS,GACrB,OAAO5T,EAAc4T,GA2BvB,SAAS7T,EAAYtd,GACnB,GAAW,MAAPA,EAAa,OAAO,EAIxB,IAHA,IAAI2f,EAAM/C,OAAOC,SA1BnB,SAA0B7c,GAExB,IADA,IAAI4Q,EAAM,EACD16B,EAAI,EAAGuG,EAAIujB,EAAItjB,OAAQxG,EAAIuG,IAAKvG,EAAG,CAC1C,IAAIk7C,EAAIpxB,EAAIjY,WAAW7R,GACnBk7C,GAAK,OAAUA,GAAK,OAAUl7C,EAAI,EAAIuG,IACxC20C,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBpxB,EAAIjY,aAAa7R,IAEpDk7C,GAAK,MACLxgB,EAEFA,GADSwgB,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAOxgB,EAKmBygB,CAAiBrxB,GAAO,GAE9C+wB,EAAMpR,EACDzpC,EAAI,EAAGuG,EAAIujB,EAAItjB,OAAQxG,EAAIuG,IAAKvG,EAAG,CAC1C,IAAIk7C,EAAIpxB,EAAIjY,WAAW7R,GACnBk7C,GAAK,OAAUA,GAAK,OAAUl7C,EAAI,EAAIuG,IACxC20C,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBpxB,EAAIjY,aAAa7R,IAEpDk7C,GAAK,IACPJ,MAAUD,IAAOK,GACRA,GAAK,MACdJ,MAAUD,IAAQ,IAASK,IAAM,GACjCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,OACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,SACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,UACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,KAE3BJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAI/B,OADAJ,MAAUD,EAAK,GACRpR,EAGT,SAASuJ,EAAQvJ,GACf,OACG6J,KAAS7J,GACT6J,KAAS7J,EAAM,IAAO,EACtB6J,KAAS7J,EAAM,IAAM,GACrB6J,KAAS7J,EAAM,IAAM,GAY1B,SAAgB+J,EAAW/J,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEI2R,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAI9lC,MAIPylC,EAAK9H,KAAS7J,MACR,IAAL2R,GAINC,EAAuB,GAAlB/H,KAAS7J,KACK,MAAT,IAAL2R,IAILE,EAAuB,GAAlBhI,KAAS7J,KACK,MAAT,IAAL2R,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlBjI,KAAS7J,KACK,MAAT,IAAL2R,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlBlI,KAAS7J,KAEZ2R,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAD/C,GAAlBlI,KAAS7J,OAKpBgS,EAAIt2B,KAAKi2B,IApBPK,EAAIt2B,MAAY,GAALi2B,IAAY,EAAKC,IAL5BI,EAAIt2B,KAAKi2B,GAmCb,OAAOM,OAAOC,eAAeF,GAhPlBp8C,EAAAy0C,WAqMbz0C,EAAAm0C,aA+CA,IAAAL,EAAA,WAKA,OALA,gBAAa9zC,EAAA8zC,eAQb9zC,EAAAu8C,yBAAA,SAAgBA,EAAyB71C,GAEvC,OAAQssC,2BAA2BtsC,IACjC,OACA,OACA,OACA,OAAqB,OAAO,EAE9B,OAAQquC,yBAAyBruC,IAC/B,KAAKitB,EAAayF,YAClB,KAAKzF,EAAa6oB,OAAQ,OAAO,EACjC,KAAK7oB,EAAa8oB,MAAO,OAA2C,GAApC/D,2BAA2BhyC,GAC3D,KAAKitB,EAAa4E,MAChB,IAAKqf,sBAAsBlxC,GAAO,CAChC,IAAIg2C,EAAc7E,6BAA6BnxC,GAC/C,OAAOg2C,EAAc,GAAKH,EAAyBzE,uBAAuBpxC,EAAMg2C,EAAc,KAIpG,OAAO,kBCjkDT,IAAAC,EAGAA,EAAA,WACA,OAAAr8C,KADA,GAIA,IAEAq8C,KAAA5wB,SAAA,cAAAA,KAAA,EAAA6wB,MAAA,QACC,MAAAC,GAED,iBAAAC,SAAAH,EAAAG,QAOA78C,EAAAD,QAAA28C,iFCdA,IAAAI,EAAAt8C,EAAA,IAcA,SAAkBu8C,GAKhBA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAKAA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAEAA,IAAA,gBAKAA,IAAA,cAEAA,IAAA,cAKAA,IAAA,gBAxCF,CAAkBh9C,EAAAg9C,WAAAh9C,EAAAg9C,cA4ClB,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,sBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,yBArBF,CAAkBj9C,EAAAi9C,YAAAj9C,EAAAi9C,eAyBlB,IAAAr+B,EAAA,WAoBE,SAAAA,EAAY1b,EAAgBc,EAAkB+yB,GAHtCz2B,KAAA48C,mBAAkC,KAIxC58C,KAAK4C,KAAOA,EACZ5C,KAAK0D,MAAQA,EACb1D,KAAKy2B,KAAOA,EACZz2B,KAAK+jB,SAAgB84B,KAAepmB,EAAO,GAC3Cz2B,KAAK88C,eAAiB,KACtB98C,KAAK8jB,mBAAqB,KAC1B9jB,KAAK+8C,gBAAkB/8C,KAmW3B,OA/VEe,OAAAC,eAAIsd,EAAArc,UAAA,eAAJ,WACE,OAAQjC,KAAK4C,MACX,OAAkB,OAAO0b,EAAKC,GAC9B,OAAmB,OAAOD,EAAKE,IAC/B,QACA,OAAmB,OAAOF,EAAKG,IAC/B,QACA,OAAmB,OAAOH,EAAKI,IAC/B,OAAqB,OAAoB,IAAb1e,KAAKy2B,KAAanY,EAAK0+B,QAAU1+B,EAAK2+B,QAClE,OAAkB,OAAO3+B,EAAKM,GAC9B,OAAmB,OAAON,EAAKO,IAC/B,OAAmB,OAAOP,EAAKQ,IAC/B,OAAmB,OAAOR,EAAKS,IAC/B,OAAqB,OAAoB,IAAb/e,KAAKy2B,KAAanY,EAAK4+B,QAAU5+B,EAAK6+B,QAClE,QACA,QAAS,OAAO7+B,EAAKG,sCAKzBH,EAAArc,UAAAm7C,UAAA,SAAUpzB,GACR,GAAIA,EAAQ7M,MAAO,CACjB,IAAI2/B,EAAiB98C,KAAK88C,eAC1B,OAA0B,OAAnBA,IAA4BA,EAAe93B,aAAay3B,EAAAxgC,eAAepJ,WAEhF,OAAO,GAITyL,EAAArc,UAAAo7C,yBAAA,SAAyBC,GACvB,OAAOA,EAAW7mB,KAAOz2B,KAAKy2B,MAIhCnY,EAAArc,UAAAq0B,wBAAA,SAAwBgnB,GACtB,IAAI7mB,EAAOz2B,KAAK6D,GAAE,GAAuB7D,KAAKy2B,KAAOz2B,KAAKy2B,KAAO,EACjE,OAAO,IAAQ6mB,EAAW7mB,KAAOA,GAInCnY,EAAArc,UAAA4B,GAAA,SAAGH,GAA0B,OAAQ1D,KAAK0D,MAAQA,IAAUA,GAE5D4a,EAAArc,UAAA8B,MAAA,SAAML,GAA0B,OAA+B,IAAvB1D,KAAK0D,MAAQA,IAGrD4a,EAAArc,UAAAytB,QAAA,SAAQ6tB,GACNtrC,OAAgB,GAATjS,KAAK4C,OAA2B5C,KAAK88C,gBAC5C,IAAIvJ,EAAM,IAAIj1B,EAAKte,KAAK4C,MAAmB,IAAb5C,KAAK0D,MAAwB,IAAwB1D,KAAKy2B,MAExF,OADA8c,EAAIuJ,eAAiBS,EACdhK,GAITj1B,EAAArc,UAAA+sB,WAAA,SAAW5f,GACT6C,OAAgB,GAATjS,KAAK4C,OAAyB5C,KAAK8jB,oBAC1C,IAAIyvB,EAAM,IAAIj1B,EAAKte,KAAK4C,MAAmB,IAAb5C,KAAK0D,MAAwB,IAAwB1D,KAAKy2B,MAExF,OADA8c,EAAIzvB,mBAAqB1U,EAClBmkC,GAITj1B,EAAArc,UAAAu7C,WAAA,WASE,OARAvrC,OAAOjS,KAAK6D,GAAE,MACT7D,KAAK48C,qBACR3qC,QAAQjS,KAAK6D,GAAE,MACf7D,KAAK48C,mBAAqB,IAAIt+B,EAAKte,KAAK4C,KAAgB,IAAV5C,KAAK0D,MAA4B1D,KAAKy2B,MACpFz2B,KAAK48C,mBAAmBG,gBAAkB/8C,KAC1CA,KAAK48C,mBAAmBE,eAAiB98C,KAAK88C,eAC9C98C,KAAK48C,mBAAmB94B,mBAAqB9jB,KAAK8jB,oBAE7C9jB,KAAK48C,oBAIdt+B,EAAArc,UAAA6tB,eAAA,SAAeC,EAAc0tB,GAC3B,IAAIC,EACAC,EACA/sB,EACAgtB,EACJ,QAL2B,IAAAH,OAAA,GAKvBz9C,KAAK6D,GAAE,MACT,GAAIksB,EAAOlsB,GAAE,QACN7D,KAAK6D,GAAE,MAAwBksB,EAAOlsB,GAAE,MAC3C,GAAI65C,EAAe19C,KAAK88C,gBACtB,GAAIa,EAAc5tB,EAAO+sB,eACvB,OAAOY,EAAa5tB,eAAe6tB,QAEhC,IAAI/sB,EAAkB5wB,KAAK8jB,sBAC5B85B,EAAiB7tB,EAAOjM,oBAC1B,OAAO8M,EAAgBd,eAAe8tB,QAKzC,IAAK7tB,EAAOlsB,GAAE,KACnB,GAAI7D,KAAK6D,GAAE,GACT,GAAIksB,EAAOlsB,GAAE,IACX,IAAK45C,GAAwBz9C,KAAK6D,GAAE,IAAsBksB,EAAOlsB,GAAE,GACjE,OAAO7D,KAAKy2B,MAAQ1G,EAAO0G,SAExB,IAAe,IAAX1G,EAAOntB,KAChB,OAAO5C,KAAKy2B,MAAQ,GACf,GAAe,IAAX1G,EAAOntB,KAChB,OAAO5C,KAAKy2B,MAAQ,QAEjB,GAAIz2B,KAAK6D,GAAE,IACZksB,EAAOlsB,GAAE,GACX,OAAO7D,KAAKy2B,MAAQ1G,EAAO0G,KAIjC,OAAO,GAIFnY,EAAAu/B,iBAAP,SAAwBv2C,EAAYC,EAAau2C,GAC/C,OAAIv2C,EAAMuoB,eAAexoB,EAAMw2C,GAA+Bx2C,EACrDA,EAAKwoB,eAAevoB,EAAOu2C,GAA+Bv2C,EAC5D,MAIT+W,EAAArc,UAAA2iB,SAAA,SAASm5B,GACP,QADO,IAAAA,OAAA,IACFA,GAAY/9C,KAAK6D,GAAE,KAAuB,CAC7C,IAAIi5C,EAAiB98C,KAAK88C,eAC1B,GAAIA,EACF,OAAO98C,KAAK6D,GAAE,KACVi5C,EAAel4B,WAAa,UAC5Bk4B,EAAel4B,WAErB,IAAId,EAAqB9jB,KAAK8jB,mBAC9B,GAAIA,EACF,OAAO9jB,KAAK6D,GAAE,KACV,IAAMigB,EAAmBc,UAAS,GAAQ,WAC1Cd,EAAmBc,UAAS,GAElC3S,QAAO,GAET,OAAQjS,KAAK4C,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAASqP,QAAO,GAChB,QAAoB,MAAO,SAO/BqM,EAAArc,UAAA6rB,aAAA,WACE,OAAQ9tB,KAAK4C,MACX,QAAS,SACT,OACA,OAAmB,SACnB,OACA,OAAqB,OAAoB,IAAb5C,KAAKy2B,KAAY,EAAiB,EAC9D,QAAmB,SACnB,QAAmB,SACnB,QAAqB,WAKzBnY,EAAArc,UAAA+7C,aAAA,SAAar+C,GACX,OAAQK,KAAK4C,MACX,QAAoBqP,QAAO,GAC3B,QAAS,OAAOtS,EAAOqoC,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAbhoC,KAAKy2B,KAAY,OAAO92B,EAAOqoC,UAAU,GAClE,OACA,OAAmB,OAAOroC,EAAOyoC,UAAU,GAC3C,QAAmB,OAAOzoC,EAAO6oC,UAAU,GAC3C,QAAmB,OAAO7oC,EAAO+oC,UAAU,KAK/CpqB,EAAArc,UAAAg8C,YAAA,SAAYt+C,GACV,OAAQK,KAAK4C,MACX,QAAoBqP,QAAO,GAC3B,QAAS,OAAOtS,EAAOqoC,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAbhoC,KAAKy2B,KAAY,OAAO92B,EAAOqoC,UAAU,GAClE,OACA,OAAmB,OAAOroC,EAAOyoC,UAAU,GAC3C,QAAmB,OAAOzoC,EAAO6oC,UAAU,GAC3C,QAAmB,OAAO7oC,EAAO+oC,UAAU,KAK/CpqB,EAAArc,UAAAi8C,eAAA,SAAev+C,GACb,OAAQK,KAAK4C,MACX,QAAoBqP,QAAO,GAC3B,QAAS,OAAOtS,EAAOqoC,WAAW,GAClC,OACA,OAAqB,GAAiB,IAAbhoC,KAAKy2B,KAAY,OAAO92B,EAAOqoC,WAAW,GACnE,OACA,OAAmB,OAAOroC,EAAOyoC,WAAW,GAAI,GAChD,QAAmB,OAAOzoC,EAAO6oC,WAAW,GAC5C,QAAmB,OAAO7oC,EAAO+oC,WAAW,KAKhDpqB,EAAArc,UAAA8sB,kBAAA,WACE,OAAQ/uB,KAAK4C,MACX,QAAS,MAAO,IAChB,OACA,OAAmB,MAAO,IAC1B,OACA,OAAqB,OAAoB,IAAb5C,KAAKy2B,KAAa,IAAM,IACpD,QAAmB,MAAO,IAC1B,QAAmB,MAAO,IAC1B,QAAoB,MAAO,MAOfnY,EAAAC,GAAY,IAAID,EAAI,EAClC,IAGmB,GAILA,EAAAE,IAAY,IAAIF,EAAI,EAClC,IAGkB,IAIJA,EAAAG,IAAY,IAAIH,EAAI,EAClC,IAEkB,IAIJA,EAAAI,IAAY,IAAIJ,EAAI,EAClC,IAGkB,IAIJA,EAAA2+B,QAAgB,IAAI3+B,EAAI,EACtC,IAGkB,IAIJA,EAAA0+B,QAAgB,IAAI1+B,EAAI,EACtC,IAIkB,IAIJA,EAAAM,GAAW,IAAIN,EAAI,EACjC,IAGmB,GAILA,EAAAO,IAAY,IAAIP,EAAI,EAClC,IAGkB,IAIJA,EAAAQ,IAAY,IAAIR,EAAI,EAClC,IAEkB,IAIJA,EAAAS,IAAY,IAAIT,EAAI,EAClC,IAGkB,IAIJA,EAAA6+B,QAAgB,IAAI7+B,EAAI,EACtC,IAGkB,IAIJA,EAAA4+B,QAAgB,IAAI5+B,EAAI,EACtC,IAIkB,IAIJA,EAAAW,KAAa,IAAIX,EAAI,GACnC,IAGmB,GAILA,EAAAY,IAAY,IAAIZ,EAAI,GAClC,IAEkB,IAIJA,EAAAa,IAAY,IAAIb,EAAI,GAClC,IAGkB,IAIJA,EAAAc,KAAa,IAAId,EAAI,KAAgC,GACvEA,EA9XA,GAAa5e,EAAA4e,OAiYb5e,EAAAy+C,mBAAA,SAAmCC,GAGjC,IAFA,IAAIC,EAAWD,EAAMv3C,OACjB0sC,EAAM,IAAIv9B,MAAkBqoC,GACvBh+C,EAAI,EAAGA,EAAIg+C,IAAYh+C,EAAGkzC,EAAIlzC,GAAK+9C,EAAM/9C,GAAGytB,eACrD,OAAOylB,GAIT7zC,EAAA4+C,cAAA,SAA8BF,GAC5B,IAAIC,EAAWD,EAAMv3C,OACrB,IAAKw3C,EAAU,MAAO,GAEtB,IADA,IAAIxjB,EAAK,IAAI7kB,MAAcqoC,GAClBh+C,EAAI,EAAGA,EAAIg+C,IAAYh+C,EAAGw6B,EAAGx6B,GAAK+9C,EAAM/9C,GAAGukB,WACpD,OAAOiW,EAAGtV,KAAK,MAIjB,IAAAg5B,EAAA,WAoBE,SAAAA,EACE16B,EACAze,EACA0nB,QAFA,IAAAjJ,MAAA,WACA,IAAAze,MAAA,WACA,IAAA0nB,MAAA,MARF9sB,KAAAw+C,qBAA8C,KAU5Cx+C,KAAK6jB,eAAiBA,MACtB7jB,KAAKy+C,eAAiB,KACtBz+C,KAAK0+C,mBAAqB,EAC1B1+C,KAAKoF,WAAaA,GAA0BkZ,EAAKc,KACjDpf,KAAK8sB,SAAWA,EAChB9sB,KAAK2+C,SAAU,EACf3+C,KAAKqE,KAAOia,EAAKQ,IAAIkQ,WAAWhvB,MA8FpC,OA1FEu+C,EAAAt8C,UAAAsrB,iBAAA,SAAiBnC,GACf,IAAIqzB,EAAiBz+C,KAAKy+C,eAC1B,OAAOA,GAAkBA,EAAe53C,OAASukB,EAC7CqzB,EAAerzB,GACfwzB,EAAwBxzB,IAI9BmzB,EAAAt8C,UAAA6tB,eAAA,SAAeC,GAIb,IAAI8uB,EAAe7+C,KAAK8sB,SACpBgyB,EAAiB/uB,EAAOjD,SAC5B,GAAI+xB,GACF,IAAMC,IAAkBD,EAAa/uB,eAAegvB,GAAkB,OAAO,OACxE,GAAIA,EACT,OAAO,EAIT,GAAI9+C,KAAK2+C,SAAW5uB,EAAO4uB,QAAS,OAAO,EAG3C,IAAII,EAAqB/+C,KAAK6jB,eAC1Bm7B,EAAuBjvB,EAAOlM,eAC9Bo7B,EAAgBF,EAAmBl4C,OACvC,GAAIo4C,GAAiBD,EAAqBn4C,OAAQ,OAAO,EACzD,IAAK,IAAIxG,EAAI,EAAGA,EAAI4+C,IAAiB5+C,EAAG,CACtC,IAAI6+C,EAAoBH,EAAmB1+C,GACvC8+C,EAAsBH,EAAqB3+C,GAC/C,IAAK6+C,EAAkBpvB,eAAeqvB,GAAsB,OAAO,EAIrE,IAAIC,EAAiBp/C,KAAKoF,WACtBi6C,EAAmBtvB,EAAO3qB,WAC9B,OAAOg6C,GAAkBC,GAAoBD,EAAetvB,eAAeuvB,IAItEd,EAAAe,oBAAP,SAA2Bz7B,EAA+Bze,EAAkB0nB,QAAA,IAAAA,MAAA,MAC1E,IAAI+N,KAEJ,GADI/N,GAAU+N,EAAGrV,KAAKsH,EAASiC,qBAC3BlL,EACF,IAAK,IAAIxjB,EAAI,EAAGuG,EAAIid,EAAehd,OAAQxG,EAAIuG,IAAKvG,EAAGw6B,EAAGrV,KAAK3B,EAAexjB,GAAG0uB,qBAGnF,OADA8L,EAAGrV,KAAKpgB,EAAW2pB,qBACZ8L,EAAGtV,KAAK,KAIjBg5B,EAAAt8C,UAAA8sB,kBAAA,WACE,OAAOwvB,EAAUe,oBAAoBt/C,KAAK6jB,eAAgB7jB,KAAKoF,WAAYpF,KAAK8sB,WAIlFyxB,EAAAt8C,UAAA2iB,SAAA,SAAS26B,QAAA,IAAAA,OAAA,GACP,IAAI1kB,EAAK,IAAI7kB,MACb6kB,EAAGrV,KAAK,KACR,IAAI4F,EAAQ,EACR0B,EAAW9sB,KAAK8sB,SAChBA,GACEyyB,IACF1kB,EAAGrV,KAAK,UACRqV,EAAGrV,KAAKsH,EAASlI,YACjBwG,EAAQ,GAGZ,IAAIjmB,EAAanF,KAAK6jB,eAClBo7B,EAAgB95C,EAAW0B,OAC/B,GAAIo4C,EAKF,IAJA,IAAIx1C,EAAQzJ,KAAKy+C,eACb/R,EAAWjjC,EAAQA,EAAM5C,OAAS,EAClC24C,EAAgBx/C,KAAK0+C,mBACrBe,EAAYz/C,KAAK2+C,QAAUM,EAAgB,GAAK,EAC3C5+C,EAAI,EAAGA,EAAI4+C,IAAiB5+C,IAAK+qB,EACpCA,GAAOyP,EAAGrV,KAAK,MACfnlB,GAAKo/C,GAAW5kB,EAAGrV,KAAK,OACxBnlB,EAAIqsC,EAAU7R,EAAGrV,KAAgB/b,EAAOpJ,IACvCw6B,EAAGrV,KAAKo5B,EAAwBv+C,IACjCA,GAAKm/C,GAAiBn/C,GAAKo/C,EAAW5kB,EAAGrV,KAAK,OAC7CqV,EAAGrV,KAAK,MACbqV,EAAGrV,KAAKrgB,EAAW9E,GAAGukB,YAK1B,OAFAiW,EAAGrV,KAAK,SACRqV,EAAGrV,KAAKxlB,KAAKoF,WAAWwf,YACjBiW,EAAGtV,KAAK,KAEnBg5B,EA7HA,GAAa7+C,EAAA6+C,YAkIb,IAAImB,EAA+C,KAGnD,SAAgBd,EAAwBxzB,GACjCs0B,IAA6BA,MAClC,IAAK,IAAIr/C,EAAIq/C,EAA4B74C,OAAQxG,GAAK+qB,IAAS/qB,EAC7Dq/C,EAA4Bl6B,KAAK,OAASnlB,EAAEukB,SAAS,KAEvD,OAAO86B,EAA4Bt0B,EAAQ,GAL7C1rB,EAAAk/C,8cCtmBA,IAuBYr8C,EAwIAo9C,EA/JZrmC,EAAAnZ,EAAA,GAMAqZ,EAAArZ,EAAA,GAKAuC,EAAAvC,EAAA,GA0JA,SAAgBy/C,EAAiB55C,GAE/B,OADAiM,OAAOjM,EAAKa,QACJb,EAAKkM,WAAW,IACtB,QACE,OAAQlM,GACN,IAAK,WAAY,OAAOzD,EAAMkkB,SAC9B,IAAK,KAAM,OAAOlkB,EAAMs9C,GACxB,IAAK,QAAS,OAAOt9C,EAAMu9C,MAC3B,IAAK,QAAS,OAAOv9C,EAAMw9C,MAE7B,MAEF,QACE,OAAQ/5C,GACN,IAAK,QAAS,OAAOzD,EAAMyU,MAE7B,MAEF,QACE,OAAQhR,GACN,IAAK,OAAQ,OAAOzD,EAAMy9C,KAC1B,IAAK,QAAS,OAAOz9C,EAAM09C,MAC3B,IAAK,QAAS,OAAO19C,EAAMuR,MAC3B,IAAK,WAAY,OAAOvR,EAAM0U,SAC9B,IAAK,QAAS,OAAO1U,EAAMsnB,MAC3B,IAAK,cAAe,OAAOtnB,EAAMyR,YAEnC,MAEF,SACE,OAAQhO,GACN,IAAK,WAAY,OAAOzD,EAAM29C,SAC9B,IAAK,UAAW,OAAO39C,EAAM49C,QAC7B,IAAK,UAAW,OAAO59C,EAAM69C,QAC7B,IAAK,SAAU,OAAO79C,EAAM89C,OAC5B,IAAK,KAAM,OAAO99C,EAAM2U,GAE1B,MAEF,SACE,OAAQlR,GACN,IAAK,OAAQ,OAAOzD,EAAM+9C,KAC1B,IAAK,OAAQ,OAAO/9C,EAAMkoB,KAC1B,IAAK,SAAU,OAAOloB,EAAMkU,OAC5B,IAAK,UAAW,OAAOlU,EAAMg+C,QAE/B,MAEF,SACE,OAAQv6C,GACN,IAAK,QAAS,OAAOzD,EAAMS,MAC3B,IAAK,UAAW,OAAOT,EAAMi+C,QAC7B,IAAK,MAAO,OAAOj+C,EAAMoV,IACzB,IAAK,OAAQ,OAAOpV,EAAMk+C,KAC1B,IAAK,WAAY,OAAOl+C,EAAM2R,SAEhC,MAEF,SACE,OAAQlO,GACN,IAAK,MAAO,OAAOzD,EAAMyjB,IAE3B,MAEF,SACE,OAAQhgB,GACN,IAAK,KAAM,OAAOzD,EAAMqV,GACxB,IAAK,aAAc,OAAOrV,EAAMm+C,WAChC,IAAK,SAAU,OAAOn+C,EAAMuV,OAC5B,IAAK,KAAM,OAAOvV,EAAMo+C,GACxB,IAAK,aAAc,OAAOp+C,EAAM4R,WAChC,IAAK,YAAa,OAAO5R,EAAMkuB,UAC/B,IAAK,KAAM,OAAOluB,EAAMq+C,GAE1B,MAEF,SACE,OAAQ56C,GACN,IAAK,QAAS,OAAOzD,EAAMs+C,MAE7B,MAEF,SACE,OAAQ76C,GACN,IAAK,MAAO,OAAOzD,EAAMu+C,IAE3B,MAEF,SACE,OAAQ96C,GACN,IAAK,SAAU,OAAOzD,EAAMw+C,OAE9B,MAEF,SACE,OAAQ/6C,GACN,IAAK,YAAa,OAAOzD,EAAMioB,UAC/B,IAAK,MAAO,OAAOjoB,EAAM8R,IACzB,IAAK,OAAQ,OAAO9R,EAAMO,KAE5B,MAEF,SACE,OAAQkD,GACN,IAAK,KAAM,OAAOzD,EAAMy+C,GAE1B,MAEF,SACE,OAAQh7C,GACN,IAAK,UAAW,OAAOzD,EAAM0+C,QAC7B,IAAK,UAAW,OAAO1+C,EAAM2+C,QAC7B,IAAK,YAAa,OAAO3+C,EAAM4+C,UAC/B,IAAK,SAAU,OAAO5+C,EAAM6+C,OAE9B,MAEF,SACE,OAAQp7C,GACN,IAAK,WAAY,OAAOzD,EAAMikB,SAC9B,IAAK,SAAU,OAAOjkB,EAAMyV,OAE9B,MAEF,SACE,OAAQhS,GACN,IAAK,MAAO,OAAOzD,EAAM0jB,IACzB,IAAK,SAAU,OAAO1jB,EAAMqU,OAC5B,IAAK,QAAS,OAAOrU,EAAMa,MAC3B,IAAK,SAAU,OAAOb,EAAM2V,OAE9B,MAEF,SACE,OAAQlS,GACN,IAAK,OAAQ,OAAOzD,EAAMoS,KAC1B,IAAK,QAAS,OAAOpS,EAAM4V,MAC3B,IAAK,OAAQ,OAAO5V,EAAMQ,KAC1B,IAAK,MAAO,OAAOR,EAAM6V,IACzB,IAAK,OAAQ,OAAO7V,EAAMkP,KAC1B,IAAK,SAAU,OAAOlP,EAAM8+C,OAE9B,MAEF,SACE,OAAQr7C,GACN,IAAK,MAAO,OAAOzD,EAAM++C,IACzB,IAAK,OAAQ,OAAO/+C,EAAMgW,KAE5B,MAEF,SACE,OAAQvS,GACN,IAAK,QAAS,OAAOzD,EAAMiW,MAC3B,IAAK,OAAQ,OAAOjW,EAAMg/C,KAE5B,MAEF,SACE,OAAQv7C,GACN,IAAK,QAAS,OAAOzD,EAAMi/C,OAKjC,OAAOj/C,EAAMwZ,QAGf,SAAgB0lC,EAAsBC,GACpC,OAAQA,GACN,KAAKn/C,EAAMkkB,SACX,KAAKlkB,EAAMs9C,GACX,KAAKt9C,EAAMyR,YACX,KAAKzR,EAAM49C,QACX,KAAK59C,EAAM89C,OACX,KAAK99C,EAAMk+C,KACX,KAAKl+C,EAAMoV,IACX,KAAKpV,EAAMyjB,IACX,KAAKzjB,EAAMq+C,GACX,KAAKr+C,EAAMs+C,MACX,KAAKt+C,EAAMw+C,OACX,KAAKx+C,EAAMioB,UACX,KAAKjoB,EAAMikB,SACX,KAAKjkB,EAAM0jB,IACX,KAAK1jB,EAAMkP,KAAM,OAAO,EACxB,QAAS,OAAO,IAvUpB,SAAYlP,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,2BArIF,CAAYA,EAAA7C,EAAA6C,QAAA7C,EAAA6C,WAwIZ,SAAYo9C,GACVA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBAHF,CAAYA,EAAAjgD,EAAAigD,qBAAAjgD,EAAAigD,wBAMZjgD,EAAAkgD,mBAwKAlgD,EAAA+hD,wBAqBA/hD,EAAAiiD,sBAAA,SAAsCD,GACpC,OAAQA,GACN,KAAKn/C,EAAM89C,OAAQ,MAAO,SAC1B,KAAK99C,EAAMo+C,GAAI,MAAO,KACtB,KAAKp+C,EAAM4R,WAAY,MAAO,aAC9B,KAAK5R,EAAM8R,IAAK,MAAO,MACvB,KAAK9R,EAAM8+C,OAAQ,MAAO,SAC1B,KAAK9+C,EAAMgW,KAAM,MAAO,OACxB,KAAKhW,EAAMi/C,MAAO,MAAO,QACzB,KAAKj/C,EAAMq/C,YAAa,MAAO,MAC/B,KAAKr/C,EAAMwR,MAAO,MAAO,IACzB,KAAKxR,EAAMs/C,SAAU,MAAO,IAC5B,KAAKt/C,EAAMu/C,YAAa,MAAO,IAC/B,KAAKv/C,EAAMw/C,gBAAiB,MAAO,KACnC,KAAKx/C,EAAMy/C,mBAAoB,MAAO,KACtC,KAAKz/C,EAAM0/C,cAAe,MAAO,KACjC,KAAK1/C,EAAM2/C,mBAAoB,MAAO,KACtC,KAAK3/C,EAAM4/C,qBAAsB,MAAO,MACxC,KAAK5/C,EAAM6/C,0BAA2B,MAAO,MAC7C,KAAK7/C,EAAMgZ,KAAM,MAAO,IACxB,KAAKhZ,EAAMkZ,MAAO,MAAO,IACzB,KAAKlZ,EAAM8/C,kBAAmB,MAAO,KACrC,KAAK9/C,EAAM+/C,SAAU,MAAO,IAC5B,KAAK//C,EAAMggD,MAAO,MAAO,IACzB,KAAKhgD,EAAMigD,QAAS,MAAO,IAC3B,KAAKjgD,EAAMkgD,UAAW,MAAO,KAC7B,KAAKlgD,EAAMmgD,YAAa,MAAO,KAC/B,KAAKngD,EAAMogD,kBAAmB,MAAO,KACrC,KAAKpgD,EAAMqgD,wBAAyB,MAAO,KAC3C,KAAKrgD,EAAMsgD,oCAAqC,MAAO,MACvD,KAAKtgD,EAAMugD,UAAW,MAAO,IAC7B,KAAKvgD,EAAMwgD,IAAK,MAAO,IACvB,KAAKxgD,EAAMygD,MAAO,MAAO,IACzB,KAAKzgD,EAAM0gD,YAAa,MAAO,IAC/B,KAAK1gD,EAAM2gD,MAAO,MAAO,IACzB,KAAK3gD,EAAM4gD,oBAAqB,MAAO,KACvC,KAAK5gD,EAAM6gD,QAAS,MAAO,KAC3B,KAAK7gD,EAAM8gD,OAAQ,MAAO,IAC1B,KAAK9gD,EAAM+gD,YAAa,MAAO,KAC/B,KAAK/gD,EAAMghD,aAAc,MAAO,KAChC,KAAKhhD,EAAMihD,gBAAiB,MAAO,KACnC,KAAKjhD,EAAMkhD,yBAA0B,MAAO,MAC5C,KAAKlhD,EAAMmhD,aAAc,MAAO,KAChC,KAAKnhD,EAAMohD,eAAgB,MAAO,KAClC,KAAKphD,EAAMqhD,yBAA0B,MAAO,MAC5C,KAAKrhD,EAAMshD,+BAAgC,MAAO,MAClD,KAAKthD,EAAMuhD,2CAA4C,MAAO,OAC9D,KAAKvhD,EAAMwhD,iBAAkB,MAAO,KACpC,KAAKxhD,EAAMyhD,WAAY,MAAO,KAC9B,KAAKzhD,EAAM0hD,aAAc,MAAO,KAChC,QAEE,OADAhyC,QAAO,GACA,KAKb,IAAAzP,EAAA,WAUE,SAAAA,EAAY6K,EAAgB2tB,EAAYC,GA4CxCj7B,KAAA0uB,aAAsB,EA3CpB1uB,KAAKqN,OAASA,EACdrN,KAAKg7B,MAAQA,EACbh7B,KAAKi7B,IAAMA,EA0Cf,OAvCSz4B,EAAA+iB,KAAP,SAAY2+B,EAAUC,GACpB,GAAID,EAAE72C,QAAU82C,EAAE92C,OAAQ,MAAM,IAAI4V,MAAM,mBAC1C,OAAO,IAAIzgB,EAAM0hD,EAAE72C,OACjB62C,EAAElpB,MAAQmpB,EAAEnpB,MAAQkpB,EAAElpB,MAAQmpB,EAAEnpB,MAChCkpB,EAAEjpB,IAAMkpB,EAAElpB,IAAMipB,EAAEjpB,IAAMkpB,EAAElpB,MAI9Bl6B,OAAAC,eAAIwB,EAAAP,UAAA,eAAJ,WACE,OAAO,IAAIO,EAAMxC,KAAKqN,OAAQrN,KAAKg7B,MAAOh7B,KAAKg7B,wCAEjDj6B,OAAAC,eAAIwB,EAAAP,UAAA,aAAJ,WACE,OAAO,IAAIO,EAAMxC,KAAKqN,OAAQrN,KAAKi7B,IAAKj7B,KAAKi7B,sCAG/Cl6B,OAAAC,eAAIwB,EAAAP,UAAA,YAAJ,WAGE,IAFA,IAAI+D,EAAOhG,KAAKqN,OAAOrH,KACnB2oB,EAAO,EACFhZ,EAAM3V,KAAKg7B,MAAOrlB,GAAO,IAAKA,EACb,IAApB3P,EAAKkM,WAAWyD,IAA2BgZ,IAEjD,OAAOA,mCAGT5tB,OAAAC,eAAIwB,EAAAP,UAAA,cAAJ,WAGE,IAFA,IAAI+D,EAAOhG,KAAKqN,OAAOrH,KACnB4oB,EAAS,EACJjZ,EAAM3V,KAAKg7B,MAAQ,EAAGrlB,GAAO,GACZ,IAApB3P,EAAKkM,WAAWyD,KADqBA,IAEvCiZ,EAEJ,OAAOA,mCAGTpsB,EAAAP,UAAA2iB,SAAA,WACE,OAAO5kB,KAAKqN,OAAOrH,KAAK+P,UAAU/V,KAAKg7B,MAAOh7B,KAAKi7B,MAIvDz4B,EAvDA,GAAa9C,EAAA8C,QA+Db,IAAA4hD,EAAA,SAAA/yC,GAgBE,SAAA+yC,EAAY/2C,EAAgBgP,QAAA,IAAAA,MAAA,MAA5B,IAAA9K,EACEF,EAAA7Q,KAAAR,KAAMqc,IAAYrc,KAdpBuR,EAAA0pB,IAAW,EAEX1pB,EAAAoE,IAAW,EACXpE,EAAAmwC,OAAgB,EAChBnwC,EAAA8yC,SAAgB,EAEhB9yC,EAAA+yC,WAAoB,EACpB/yC,EAAAgzC,aAAoB,EACpBhzC,EAAAizC,oBAA2B,EAE3BjzC,EAAAkzC,UAAmC,KAKjClzC,EAAKlE,OAASA,EACdkE,EAAKoE,IAAM,EACXpE,EAAK0pB,IAAM5tB,EAAOrH,KAAKa,OACvB0K,EAAK8K,YAAcA,GAA4B,IAAIrG,MAEnD,IAAIhQ,EAAOqH,EAAOrH,KAWlB,GAPEuL,EAAKoE,IAAMpE,EAAK0pB,KACS,OAAzBj1B,EAAKkM,WAAWX,EAAKoE,QAEnBpE,EAAKoE,IAKPpE,EAAKoE,IAAM,EAAIpE,EAAK0pB,KACK,IAAzBj1B,EAAKkM,WAAWX,EAAKoE,MACQ,IAA7B3P,EAAKkM,WAAWX,EAAKoE,IAAM,GAG3B,IADApE,EAAKoE,KAAO,EAEVpE,EAAKoE,IAAMpE,EAAK0pB,KACS,IAAzBj1B,EAAKkM,WAAWX,EAAKoE,QAEnBpE,EAAKoE,aAiiCf,OA7kC+BrE,EAAA8yC,EAAA/yC,GAkD7B+yC,EAAAniD,UAAA0f,KAAA,SAAK+iC,GAEH,YAFG,IAAAA,MAAyC/E,EAAmBS,SAC/DpgD,KAAKskD,WAAa,EACXtkD,KAAK0hD,MAAQ1hD,KAAK2kD,WAAWD,IAG9BN,EAAAniD,UAAA0iD,WAAR,SACED,EACAE,QADA,IAAAF,MAAyC/E,EAAmBS,cAC5D,IAAAwE,MAAsBnmC,IAAImZ,WAG1B,IADA,IAAI5xB,EAAOhG,KAAKqN,OAAOrH,KAChBhG,KAAK2V,IAAM3V,KAAKi7B,KAAK,CAC1Bj7B,KAAKqkD,SAAWrkD,KAAK2V,IACrB,IAAIjV,EAAIsF,EAAKkM,WAAWlS,KAAK2V,KAC7B,OAAQjV,GACN,QACE,OACIV,KAAK2V,IAAM3V,KAAKi7B,KACO,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,MACpB,MAGL,QACA,OACA,QACA,QACA,UACI3V,KAAK2V,IACP,MAEF,QAEE,QADE3V,KAAK2V,IAELivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,KACb,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,QAEnB3V,KAAK2V,IAELivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,KACb,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,QAEnB3V,KAAK2V,IACApT,EAAM6/C,2BAER7/C,EAAM2/C,oBAER3/C,EAAM0gD,YAEf,QACA,QACA,QACE,OAAO1gD,EAAMsiD,cAEf,QAEE,QADE7kD,KAAK2V,IAELivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,KACb,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,QAEnB3V,KAAK2V,IACApT,EAAMohD,gBAERphD,EAAMigD,QAEf,QAEE,KADExiD,KAAK2V,IACHivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,IAAK,CAC7C,GAA6B,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IACApT,EAAM4gD,oBAEf,GAA6B,IAAzBn9C,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IACApT,EAAMwhD,iBAGjB,OAAOxhD,EAAMugD,UAEf,QAEE,QADE9iD,KAAK2V,IACApT,EAAMuiD,UAEf,QAEE,QADE9kD,KAAK2V,IACApT,EAAMwiD,WAEf,QAEE,KADE/kD,KAAK2V,IACHivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,IAAK,CAC7C,GAA6B,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IACApT,EAAMihD,gBAEf,GAA6B,IAAzBx9C,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IAELivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,KACb,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,QAEnB3V,KAAK2V,IACApT,EAAMkhD,0BAERlhD,EAAM8/C,kBAGjB,OAAO9/C,EAAM+/C,SAEf,QAEE,KADEtiD,KAAK2V,IACHivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,IAAK,CAC7C,GAA6B,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IACApT,EAAMkgD,UAEf,GAA6B,IAAzBz8C,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IACApT,EAAM+gD,YAGjB,OAAO/gD,EAAMgZ,KAEf,QAEE,QADEvb,KAAK2V,IACApT,EAAMwR,MAEf,QAEE,KADE/T,KAAK2V,IACHivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,IAAK,CAC7C,GAA6B,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IACApT,EAAMmgD,YAEf,GAA6B,IAAzB18C,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IACApT,EAAMghD,aAGjB,OAAOhhD,EAAMkZ,MAEf,QAEE,KADEzb,KAAK2V,IACHivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,IAAK,CAC7C,GAAIv4B,EAAAsiD,eAAeh/C,EAAKkM,WAAWlS,KAAK2V,MAEtC,QADE3V,KAAK2V,IACApT,EAAM0iD,aAEf,GACEL,EAAiB,GAAK5kD,KAAK2V,IAAM,EAAI3V,KAAKi7B,KACjB,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,MACQ,IAA7B3P,EAAKkM,WAAWlS,KAAK2V,IAAM,GAG3B,OADA3V,KAAK2V,KAAO,EACLpT,EAAMq/C,YAGjB,OAAOr/C,EAAM2iD,IAEf,QACE,IAAIC,EAAkBnlD,KAAK2V,IAE3B,KADE3V,KAAK2V,IACHivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,IAAK,CAC7C,GAA6B,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,KAAwB,CAC/C,IAAIxP,EAAcqT,EAAApG,YAAYgyC,KAQ9B,IANEplD,KAAK2V,IAAM,EAAI3V,KAAKi7B,KACS,IAA7Bj1B,EAAKkM,WAAWlS,KAAK2V,IAAM,OAEzB3V,KAAK2V,IACPxP,EAAcqT,EAAApG,YAAYiyC,UAEnBrlD,KAAK2V,IAAM3V,KAAKi7B,KACvB,GAA6B,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,KAA2B,GAChD3V,KAAK2V,IACP,MAGA3V,KAAKykD,WACPzkD,KAAKykD,UACHt+C,EACAH,EAAK+P,UAAUovC,EAAiBnlD,KAAK2V,KACrC3V,KAAKoE,MAAM+gD,EAAiBnlD,KAAK2V,MAGrC,MAEF,GAA6B,IAAzB3P,EAAKkM,WAAWlS,KAAK2V,KAA2B,CAElD,IADA,IAAI2vC,GAAS,IACJtlD,KAAK2V,IAAM3V,KAAKi7B,KAEvB,GACG,KAFHv6B,EAAIsF,EAAKkM,WAAWlS,KAAK2V,OAGvB3V,KAAK2V,IAAM,EAAI3V,KAAKi7B,KACS,IAA7Bj1B,EAAKkM,WAAWlS,KAAK2V,IAAM,GAC3B,CACA3V,KAAK2V,KAAO,EACZ2vC,GAAS,EACT,MAGCA,EAKMtlD,KAAKykD,WACdzkD,KAAKykD,UACHjrC,EAAApG,YAAY4B,MACZhP,EAAK+P,UAAUovC,EAAiBnlD,KAAK2V,KACrC3V,KAAKoE,MAAM+gD,EAAiBnlD,KAAK2V,MARnC3V,KAAKqhB,MACH/H,EAAAgI,eAAeikC,YACfvlD,KAAKoE,MAAMpE,KAAK2V,KAAM,MAS1B,MAEF,GAA6B,IAAzB3P,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IACApT,EAAMmhD,aAGjB,OAAOnhD,EAAMggD,MAEf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,OAAOviD,KAAKwlD,cACRjjD,EAAMkjD,eACNljD,EAAM0iD,aAEZ,QAEE,QADEjlD,KAAK2V,IACApT,EAAMmjD,MAEf,QAEE,QADE1lD,KAAK2V,IACApT,EAAMojD,UAEf,QAEE,KADE3lD,KAAK2V,IACHivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,IAAK,CAC7C,GAA6B,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IAELivC,EAAiB,GACjB5kD,KAAK2V,IAAM3V,KAAKi7B,KACS,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,QAEnB3V,KAAK2V,IACApT,EAAMqhD,0BAERrhD,EAAMogD,kBAEf,GAA6B,IAAzB38C,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IACApT,EAAMw/C,gBAGjB,OAAOx/C,EAAMs/C,SAEf,QAEE,KADE7hD,KAAK2V,IACHivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,IAAK,CAC7C,GAA6B,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IAELivC,EAAiB,GACjB5kD,KAAK2V,IAAM3V,KAAKi7B,KACS,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,QAEnB3V,KAAK2V,IACApT,EAAM4/C,sBAER5/C,EAAM0/C,cAEf,GAA6B,IAAzBj8C,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IACApT,EAAMqjD,mBAGjB,OAAOrjD,EAAM8gD,OAEf,QAEE,KADErjD,KAAK2V,IACHivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,IAAK,CAC7C,GAA6B,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,KAA8B,CAErD,KADE3V,KAAK2V,IACHivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,IAAK,CAC7C,GAA6B,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IAELivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,KACb,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,QAEnB3V,KAAK2V,IACApT,EAAMuhD,4CAERvhD,EAAMsgD,oCAEf,GAA6B,IAAzB78C,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IACApT,EAAMshD,+BAGjB,OAAOthD,EAAMqgD,wBAEf,GAA6B,IAAzB58C,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IACApT,EAAMy/C,mBAGjB,OAAOz/C,EAAMu/C,YAEf,QAEE,QADE9hD,KAAK2V,IACApT,EAAMsjD,SAEf,QAEE,QADE7lD,KAAK2V,IACApT,EAAMujD,YAEf,QAEE,QADE9lD,KAAK2V,IACApT,EAAMwjD,aAEf,QAEE,QADE/lD,KAAK2V,IAELivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,KACb,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,QAEnB3V,KAAK2V,IACApT,EAAM0hD,cAER1hD,EAAMygD,MAEf,SAEE,QADEhjD,KAAK2V,IACApT,EAAMyjD,UAEf,SAEE,KADEhmD,KAAK2V,IACHivC,EAAiB,GAAK5kD,KAAK2V,IAAM3V,KAAKi7B,IAAK,CAC7C,GAA6B,KAAzBj1B,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IACApT,EAAM6gD,QAEf,GAA6B,IAAzBp9C,EAAKkM,WAAWlS,KAAK2V,KAEvB,QADE3V,KAAK2V,IACApT,EAAMyhD,WAGjB,OAAOzhD,EAAMwgD,IAEf,SAEE,QADE/iD,KAAK2V,IACApT,EAAM0jD,WAEf,SAEE,QADEjmD,KAAK2V,IACApT,EAAM2gD,MAEf,QAEE,QADEljD,KAAK2V,IACApT,EAAM2jD,GAEf,QACE,GAAIxjD,EAAAyjD,kBAAkBzlD,GAAI,CACxB,GAAIgC,EAAA0jD,mBAAmB1lD,GAAI,CAEzB,IADA,IAAI2lD,EAAYrmD,KAAK2V,MAEjB3V,KAAK2V,IAAM3V,KAAKi7B,KAClBv4B,EAAA4jD,iBAAiB5lD,EAAIsF,EAAKkM,WAAWlS,KAAK2V,OAE1C,IAAKjT,EAAA0jD,mBAAmB1lD,GAEtB,OADAV,KAAK2V,IAAM0wC,EACJ9jD,EAAMW,WAGjB,IACIqjD,EAAe3G,EADD55C,EAAK+P,UAAUswC,EAAWrmD,KAAK2V,MAEjD,GACE4wC,GAAgBhkD,EAAMwZ,SACtB2oC,IAAuB/E,EAAmB6G,SAExC9B,IAAuB/E,EAAmB8G,SAC1ChF,EAAsB8E,IAGxB,OAAOA,EAETvmD,KAAK2V,IAAM0wC,EAEb,OAAO9jD,EAAMW,WACR,GAAIR,EAAAgkD,aAAahmD,GAAI,GACxBV,KAAK2V,IACP,MAOF,OALA3V,KAAKqhB,MACH/H,EAAAgI,eAAeqlC,kBACf3mD,KAAKoE,MAAMpE,KAAK2V,IAAK3V,KAAK2V,IAAM,MAEhC3V,KAAK2V,IACApT,EAAMwZ,SAInB,OAAOxZ,EAAMqkD,WAGfxC,EAAAniD,UAAA4kD,KAAA,SACEC,EACApC,EACAqC,QAFA,IAAAD,OAAA,QACA,IAAApC,MAAyC/E,EAAmBS,cAC5D,IAAA2G,MAAyBtoC,IAAImZ,WAE7B,IAAI5xB,EAAOhG,KAAKqN,OAAOrH,KACvB,GAAIhG,KAAKskD,UAAY,EAAG,CACtB,IAAI+B,EAAYrmD,KAAK2V,IACjBqxC,EAAchnD,KAAK0hD,MACnBuF,EAAiBjnD,KAAKqkD,SAG1B,GAFArkD,KAAKskD,UAAYtkD,KAAK2kD,WAAWD,EAAoBqC,GACrD/mD,KAAKukD,aAAevkD,KAAKqkD,SACrByC,EAAgB,CAClB9mD,KAAKwkD,oBAAqB,EAC1B,IAAK,IAAI7uC,EAAM0wC,EAAWprB,EAAMj7B,KAAKukD,aAAc5uC,EAAMslB,IAAOtlB,EAC9D,GAAIjT,EAAAw4B,YAAYl1B,EAAKkM,WAAWyD,IAAO,CACrC3V,KAAKwkD,oBAAqB,EAC1B,OAINxkD,KAAK2V,IAAM0wC,EACXrmD,KAAK0hD,MAAQsF,EACbhnD,KAAKqkD,SAAW4C,EAElB,OAAOjnD,KAAKskD,WAGdF,EAAAniD,UAAAilD,eAAA,WACE,OAAOlnD,KAAKmnD,KAAK5kD,EAAMW,WAAYy8C,EAAmB8G,SAGxDrC,EAAAniD,UAAAmlD,mBAAA,WACE,OAAOpnD,KAAKmnD,KAAK5kD,EAAMW,WAAYy8C,EAAmB6G,SAGxDpC,EAAAniD,UAAAklD,KAAA,SAAKzF,EAAcgD,QAAA,IAAAA,MAAyC/E,EAAmBS,SAC7E,IAAIiG,EAAYrmD,KAAK2V,IACjBqxC,EAAchnD,KAAK0hD,MACnBuF,EAAiBjnD,KAAKqkD,SACtB0C,EAAoBtoC,IAAImZ,UAC5B,OAAQ8pB,GACN,KAAKn/C,EAAMu/C,YACTiF,EAAoB,EAKxB,OADA/mD,KAAK0hD,MAAQ1hD,KAAK2kD,WAAWD,EAAoBqC,GAC7C/mD,KAAK0hD,OAASA,GAChB1hD,KAAKskD,WAAa,GACX,IAEPtkD,KAAK2V,IAAM0wC,EACXrmD,KAAK0hD,MAAQsF,EACbhnD,KAAKqkD,SAAW4C,GACT,IAIX7C,EAAAniD,UAAAolD,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAM3xC,IAAM3V,KAAK2V,IACjB2xC,EAAM5F,MAAQ1hD,KAAK0hD,MACnB4F,EAAMjD,SAAWrkD,KAAKqkD,SACfiD,GAGTlD,EAAAniD,UAAAwlD,QAAA,SAAQH,GACNC,EAAgBD,GAGlBlD,EAAAniD,UAAAylD,MAAA,SAAMJ,GACJtnD,KAAK2V,IAAM2xC,EAAM3xC,IACjB3V,KAAK0hD,MAAQ4F,EAAM5F,MACnB1hD,KAAKqkD,SAAWiD,EAAMjD,SACtBrkD,KAAKskD,WAAa,GAGpBF,EAAAniD,UAAAmC,MAAA,SAAM42B,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQh7B,KAAKqkD,SACbppB,EAAMj7B,KAAK2V,KACFslB,EAAM,IACfA,EAAMD,GAED,IAAIx4B,EAAMxC,KAAKqN,OAAQ2tB,EAAOC,IAGvCmpB,EAAAniD,UAAA0lD,eAAA,WAGE,IAFA,IAAI3hD,EAAOhG,KAAKqN,OAAOrH,KACnBg1B,EAAQh7B,KAAK2V,MAEb3V,KAAK2V,IAAM3V,KAAKi7B,KAClBv4B,EAAA4jD,iBAAiBtgD,EAAKkM,WAAWlS,KAAK2V,QAExC,OAAO3P,EAAK+P,UAAUilB,EAAOh7B,KAAK2V,MAGpCyuC,EAAAniD,UAAA4xC,WAAA,WAKE,IAJA,IAAI7tC,EAAOhG,KAAKqN,OAAOrH,KACnB4hD,EAAQ5hD,EAAKkM,WAAWlS,KAAK2V,OAC7BqlB,EAAQh7B,KAAK2V,IACbyU,EAAS,KACA,CACX,GAAIpqB,KAAK2V,KAAO3V,KAAKi7B,IAAK,CACxB7Q,GAAUpkB,EAAK+P,UAAUilB,EAAOh7B,KAAK2V,KACrC3V,KAAKqhB,MACH/H,EAAAgI,eAAeumC,4BACf7nD,KAAKoE,MAAM42B,EAAQ,EAAGh7B,KAAKi7B,MAE7B,MAEF,IAAIv6B,EAAIsF,EAAKkM,WAAWlS,KAAK2V,KAC7B,GAAIjV,GAAKknD,EAAO,CACdx9B,GAAUpkB,EAAK+P,UAAUilB,EAAOh7B,KAAK2V,OACrC,MAEF,GAAK,IAADjV,EAAJ,CAMA,GAAIgC,EAAAw4B,YAAYx6B,GAAI,CAClB0pB,GAAUpkB,EAAK+P,UAAUilB,EAAOh7B,KAAK2V,KACrC3V,KAAKqhB,MACH/H,EAAAgI,eAAeumC,4BACf7nD,KAAKoE,MAAM42B,EAAQ,EAAGh7B,KAAK2V,MAE7B,QAEA3V,KAAK2V,SAbLyU,GAAUpkB,EAAK+P,UAAUilB,EAAOh7B,KAAK2V,KACrCyU,GAAUpqB,KAAK8nD,qBACf9sB,EAAQh7B,KAAK2V,IAajB,OAAOyU,GAGTg6B,EAAAniD,UAAA6lD,mBAAA,WACE,KAAM9nD,KAAK2V,KAAO3V,KAAKi7B,IAKrB,OAJAj7B,KAAKqhB,MACH/H,EAAAgI,eAAeymC,uBACf/nD,KAAKoE,MAAMpE,KAAKi7B,MAEX,GAGT,IAAIj1B,EAAOhG,KAAKqN,OAAOrH,KACnBtF,EAAIsF,EAAKkM,WAAWlS,KAAK2V,OAC7B,OAAQjV,GACN,QAAkB,MAAO,KACzB,QAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,QAA2B,MAAO,IAClC,QAA2B,MAAO,IAClC,SACE,OACEV,KAAK2V,IAAM3V,KAAKi7B,KACS,KAAzBj1B,EAAKkM,WAAWlS,KAAK2V,QAEnB3V,KAAK2V,IACA3V,KAAKgoD,6BAEPhoD,KAAKioD,oBAEd,QAEIjoD,KAAK2V,IAAM3V,KAAKi7B,KACS,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,QAEnB3V,KAAK2V,IAIX,QACA,UACA,UAAkC,MAAO,GACzC,QAAS,OAAOomC,OAAOmM,aAAaxnD,KAIxC0jD,EAAAniD,UAAAkmD,kBAAA,WAIE,IAHA,IAAIniD,EAAOhG,KAAKqN,OAAOrH,KACnBg1B,EAAQh7B,KAAK2V,IACbyyC,GAAU,IACD,CACX,GAAIpoD,KAAK2V,KAAO3V,KAAKi7B,IAAK,CACxBj7B,KAAKqhB,MACH/H,EAAAgI,eAAe+mC,wCACfroD,KAAKoE,MAAM42B,EAAOh7B,KAAKi7B,MAEzB,MAEF,GAA6B,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,KAAzB,CAKA,IAAIjV,EAAIsF,EAAKkM,WAAWlS,KAAK2V,KAC7B,GAAK,IAADjV,IAAwB0nD,EAAS,MACrC,GAAI1lD,EAAAw4B,YAAYx6B,GAAI,CAClBV,KAAKqhB,MACH/H,EAAAgI,eAAe+mC,wCACfroD,KAAKoE,MAAM42B,EAAOh7B,KAAK2V,MAEzB,QAEA3V,KAAK2V,IACPyyC,GAAU,QAdNpoD,KAAK2V,IACPyyC,GAAU,EAed,OAAOpiD,EAAK+P,UAAUilB,EAAOh7B,KAAK2V,MAGpCyuC,EAAAniD,UAAAqmD,gBAAA,WAIE,IAHA,IAAItiD,EAAOhG,KAAKqN,OAAOrH,KACnBg1B,EAAQh7B,KAAK2V,IACbjS,EAAQ,EACL1D,KAAK2V,IAAM3V,KAAKi7B,KAAK,CAC1B,IAAIv6B,EAASsF,EAAKkM,WAAWlS,KAAK2V,KAClC,IAAKjT,EAAA4jD,iBAAiB5lD,GAAI,MAI1B,SAHEV,KAAK2V,IAGCjV,GACN,SACEgD,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACF1D,KAAKqhB,MACH/H,EAAAgI,eAAeinC,iCACfvoD,KAAKoE,MAAM42B,EAAOh7B,KAAK2V,MAGpB3P,EAAK+P,UAAUilB,EAAOh7B,KAAK2V,MAGpCyuC,EAAAniD,UAAAujD,YAAA,WACE,IAAIx/C,EAAOhG,KAAKqN,OAAOrH,KACvB,GAA6B,IAAzBA,EAAKkM,WAAWlS,KAAK2V,MAAuB3V,KAAK2V,IAAM,EAAI3V,KAAKi7B,IAClE,OAAQj1B,EAAKkM,WAAWlS,KAAK2V,IAAM,IACjC,QACA,SACA,QACA,QACA,QACA,SAAiB,OAAO,EAI5B,IADA,IAAIA,EAAM3V,KAAK2V,IACRA,EAAM3V,KAAKi7B,KAAK,CACrB,IAAIv6B,EAAIsF,EAAKkM,WAAWyD,GACxB,GAAK,IAADjV,GAAsB,IAADA,GAAoB,KAADA,EAC1C,OAAO,EAET,IAAKA,EAAC,IAAkBA,EAAC,KAAoB,IAADA,EAAiB,MAE7DiV,IAEF,OAAO,GAGTyuC,EAAAniD,UAAAumD,YAAA,WACE,IAAIxiD,EAAOhG,KAAKqN,OAAOrH,KACvB,GAA6B,IAAzBA,EAAKkM,WAAWlS,KAAK2V,MAAuB3V,KAAK2V,IAAM,EAAI3V,KAAKi7B,IAAK,CACvE,OAAQj1B,EAAKkM,WAAWlS,KAAK2V,IAAM,IACjC,QACA,SAEE,OADA3V,KAAK2V,KAAO,EACL3V,KAAKyoD,iBAEd,QACA,QAEE,OADAzoD,KAAK2V,KAAO,EACL3V,KAAK0oD,oBAEd,QACA,SAEE,OADA1oD,KAAK2V,KAAO,EACL3V,KAAK2oD,mBAGhB,GAAIjmD,EAAAkmD,aAAa5iD,EAAKkM,WAAWlS,KAAK2V,IAAM,IAAK,CAC/C,IAAIqlB,EAAQh7B,KAAK2V,MACf3V,KAAK2V,IACP,IAAIrU,EAAQtB,KAAK2oD,mBAKjB,OAJA3oD,KAAKqhB,MACH/H,EAAAgI,eAAeunC,8CACf7oD,KAAKoE,MAAM42B,EAAOh7B,KAAK2V,MAElBrU,GAGX,OAAOtB,KAAK8oD,sBAGd1E,EAAAniD,UAAAwmD,eAAA,WAME,IALA,IAAIziD,EAAOhG,KAAKqN,OAAOrH,KACnBg1B,EAAQh7B,KAAK2V,IACbrU,EAAQge,QAAQ,EAAG,GACnBypC,EAASzpC,QAAQ,GAAI,GACrB0pC,EAAShuB,EACNh7B,KAAK2V,IAAM3V,KAAKi7B,KAAK,CAC1B,IAAItlB,EAAM3V,KAAK2V,IACXjV,EAAIsF,EAAKkM,WAAWyD,GACxB,GAAIjV,GAAC,IAAmBA,GAAC,GAEvBY,EAAQ2nD,QACNC,QAAQ5nD,EAAOynD,GACfzpC,QAAQ5e,EAAC,GAAgB,SAErB,GAAIA,GAAC,IAAkBA,GAAC,GAE9BY,EAAQ2nD,QACNC,QAAQ5nD,EAAOynD,GACfzpC,QAAQ,GAAK5e,EAAC,GAAe,SAE1B,GAAIA,GAAC,IAAkBA,GAAC,IAE7BY,EAAQ2nD,QACNC,QAAQ5nD,EAAOynD,GACfzpC,QAAQ,GAAK5e,EAAC,GAAe,QAE1B,IAAK,IAADA,EAWT,MAVIsoD,GAAUrzC,GACZ3V,KAAKqhB,MACH2nC,GAAUhuB,EACN1hB,EAAAgI,eAAe6nC,wCACf7vC,EAAAgI,eAAe8nC,0DACnBppD,KAAKoE,MAAMuR,IAGfqzC,EAASrzC,EAAM,EAIjB3V,KAAK2V,IAAMA,EAAM,EAanB,OAXI3V,KAAK2V,KAAOqlB,EACdh7B,KAAKqhB,MACH/H,EAAAgI,eAAe+nC,2BACfrpD,KAAKoE,MAAM42B,IAEJguB,GAAUhpD,KAAK2V,KACxB3V,KAAKqhB,MACH/H,EAAAgI,eAAe6nC,wCACfnpD,KAAKoE,MAAM4kD,EAAS,IAGjB1nD,GAGT8iD,EAAAniD,UAAA6mD,mBAAA,WAME,IALA,IAAI9iD,EAAOhG,KAAKqN,OAAOrH,KACnBg1B,EAAQh7B,KAAK2V,IACbrU,EAAQge,QAAQ,EAAG,GACnBgqC,EAAShqC,QAAQ,GAAI,GACrB0pC,EAAShuB,EACNh7B,KAAK2V,IAAM3V,KAAKi7B,KAAK,CAC1B,IAAItlB,EAAM3V,KAAK2V,IACXjV,EAAIsF,EAAKkM,WAAWyD,GACxB,GAAIjV,GAAC,IAAmBA,GAAC,GAEvBY,EAAQ2nD,QACNC,QAAQ5nD,EAAOgoD,GACfhqC,QAAQ5e,EAAC,GAAgB,QAEtB,IAAK,IAADA,EAWT,MAVIsoD,GAAUrzC,GACZ3V,KAAKqhB,MACH2nC,GAAUhuB,EACN1hB,EAAAgI,eAAe6nC,wCACf7vC,EAAAgI,eAAe8nC,0DACnBppD,KAAKoE,MAAMuR,IAGfqzC,EAASrzC,EAAM,EAIjB3V,KAAK2V,IAAMA,EAAM,EAanB,OAXI3V,KAAK2V,KAAOqlB,EACdh7B,KAAKqhB,MACH/H,EAAAgI,eAAeioC,eACfvpD,KAAKoE,MAAM42B,IAEJguB,GAAUhpD,KAAK2V,KACxB3V,KAAKqhB,MACH/H,EAAAgI,eAAe6nC,wCACfnpD,KAAKoE,MAAM4kD,EAAS,IAGjB1nD,GAGT8iD,EAAAniD,UAAA0mD,iBAAA,WAME,IALA,IAAI3iD,EAAOhG,KAAKqN,OAAOrH,KACnBg1B,EAAQh7B,KAAK2V,IACbrU,EAAQge,QAAQ,EAAG,GACnBkqC,EAAQlqC,QAAQ,EAAG,GACnB0pC,EAAShuB,EACNh7B,KAAK2V,IAAM3V,KAAKi7B,KAAK,CAC1B,IAAItlB,EAAM3V,KAAK2V,IACXjV,EAAIsF,EAAKkM,WAAWyD,GACxB,GAAIjV,GAAC,IAAmBA,GAAC,GAEvBY,EAAQ2nD,QACNC,QAAQ5nD,EAAOkoD,GACflqC,QAAQ5e,EAAC,GAAgB,QAEtB,IAAK,IAADA,EAWT,MAVIsoD,GAAUrzC,GACZ3V,KAAKqhB,MACH2nC,GAAUhuB,EACN1hB,EAAAgI,eAAe6nC,wCACf7vC,EAAAgI,eAAe8nC,0DACnBppD,KAAKoE,MAAMuR,IAGfqzC,EAASrzC,EAAM,IAIf3V,KAAK2V,IAaT,OAXI3V,KAAK2V,KAAOqlB,EACdh7B,KAAKqhB,MACH/H,EAAAgI,eAAemoC,qBACfzpD,KAAKoE,MAAM42B,IAEJguB,GAAUhpD,KAAK2V,KACxB3V,KAAKqhB,MACH/H,EAAAgI,eAAe6nC,wCACfnpD,KAAKoE,MAAM4kD,EAAS,IAGjB1nD,GAGT8iD,EAAAniD,UAAAymD,kBAAA,WAOE,IANA,IAAI1iD,EAAOhG,KAAKqN,OAAOrH,KACnBg1B,EAAQh7B,KAAK2V,IACbrU,EAAQge,QAAQ,EAAG,GACnBoqC,EAAQpqC,QAAQ,EAAG,GACnBqqC,EAAQrqC,QAAQ,EAAG,GACnB0pC,EAAShuB,EACNh7B,KAAK2V,IAAM3V,KAAKi7B,KAAK,CAC1B,IAAItlB,EAAM3V,KAAK2V,IACXjV,EAAIsF,EAAKkM,WAAWyD,GACxB,GAAK,IAADjV,EAEFY,EAAQ4nD,QACN5nD,EACAooD,QAEG,GAAK,IAADhpD,EAETY,EAAQ2nD,QACNC,QAAQ5nD,EAAOooD,GACfC,OAEG,IAAK,IAADjpD,EAWT,MAVIsoD,GAAUrzC,GACZ3V,KAAKqhB,MACH2nC,GAAUhuB,EACN1hB,EAAAgI,eAAe6nC,wCACf7vC,EAAAgI,eAAe8nC,0DACnBppD,KAAKoE,MAAMuR,IAGfqzC,EAASrzC,EAAM,EAIjB3V,KAAK2V,IAAMA,EAAM,EAanB,OAXI3V,KAAK2V,KAAOqlB,EACdh7B,KAAKqhB,MACH/H,EAAAgI,eAAesoC,sBACf5pD,KAAKoE,MAAM42B,IAEJguB,GAAUhpD,KAAK2V,KACxB3V,KAAKqhB,MACH/H,EAAAgI,eAAe6nC,wCACfnpD,KAAKoE,MAAM4kD,EAAS,IAGjB1nD,GAGT8iD,EAAAniD,UAAA4nD,UAAA,WAWE,OAAO7pD,KAAK8pD,oBAGd1F,EAAAniD,UAAA6nD,iBAAA,WAIE,IAFA,IAAI9uB,EAAQh7B,KAAK2V,IACb3P,EAAOhG,KAAKqN,OAAOrH,KAChBhG,KAAK2V,IAAM3V,KAAKi7B,KAAOv4B,EAAAsiD,eAAeh/C,EAAKkM,WAAWlS,KAAK2V,SAC9D3V,KAAK2V,IAET,GAAI3V,KAAK2V,IAAM3V,KAAKi7B,KAAgC,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,KAE9C,MADE3V,KAAK2V,IACA3V,KAAK2V,IAAM3V,KAAKi7B,KAAOv4B,EAAAsiD,eAAeh/C,EAAKkM,WAAWlS,KAAK2V,SAC9D3V,KAAK2V,IAGX,GAAI3V,KAAK2V,IAAM3V,KAAKi7B,IAAK,CACvB,IAAIv6B,EAAIsF,EAAKkM,WAAWlS,KAAK2V,KAC7B,GAAK,IAADjV,GAAoB,KAADA,EAUrB,MARIV,KAAK2V,IAAM3V,KAAKi7B,MACS,IAAzBj1B,EAAKkM,WAAWlS,KAAK2V,MACI,IAAzB3P,EAAKkM,WAAWlS,KAAK2V,OAEvBjT,EAAAsiD,eAAeh/C,EAAKkM,WAAWlS,KAAK2V,IAAM,OAExC3V,KAAK2V,IAEF3V,KAAK2V,IAAM3V,KAAKi7B,KAAOv4B,EAAAsiD,eAAeh/C,EAAKkM,WAAWlS,KAAK2V,SAC9D3V,KAAK2V,IAIb,OAAOo0C,WAAW/jD,EAAK+P,UAAUilB,EAAOh7B,KAAK2V,OAG/CyuC,EAAAniD,UAAA+nD,aAAA,WACE,MAAM,IAAI/mC,MAAM,oBAGlBmhC,EAAAniD,UAAAgmD,kBAAA,WAIE,IAHA,IAAIgC,EAAS,EACT3oD,EAAQ,EACR0E,EAAOhG,KAAKqN,OAAOrH,KAChBhG,KAAK2V,IAAM3V,KAAKi7B,KAAK,CAC1B,IAAIv6B,EAAIsF,EAAKkM,WAAWlS,KAAK2V,OAC7B,GAAIjV,GAAC,IAAmBA,GAAC,GACvBY,EAAgB,GAARA,EAAaZ,EAAC,QACjB,GAAIA,GAAC,IAAkBA,GAAC,GAC7BY,EAAgB,GAARA,EAAa,GAAKZ,EAAC,OACtB,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,OAJAV,KAAKqhB,MACH/H,EAAAgI,eAAe+nC,2BACfrpD,KAAKoE,MAAMpE,KAAK2V,IAAM,EAAG3V,KAAK2V,MAEzB,GANPrU,EAAgB,GAARA,EAAa,GAAKZ,EAAC,GAQ7B,GAAgB,KAAVupD,EAAa,MAErB,OAAIA,GACFjqD,KAAKqhB,MACH/H,EAAAgI,eAAeymC,uBACf/nD,KAAKoE,MAAMpE,KAAK2V,MAEX,IAEFomC,OAAOmM,aAAa5mD,IAGrB8iD,EAAAniD,UAAA+lD,0BAAR,WACE,IAAIhtB,EAAQh7B,KAAK2V,IACbrU,EAAQtB,KAAKyoD,iBACbyB,EAAU5Z,QAAQhvC,GAClB6oD,GAAU,EAEdl4C,QAAQs+B,SAASjvC,IACb4oD,EAAU,UACZlqD,KAAKqhB,MACH/H,EAAAgI,eAAe8oC,4EACfpqD,KAAKoE,MAAM42B,EAAOh7B,KAAK2V,MAEzBw0C,GAAU,GAGZ,IAAInkD,EAAOhG,KAAKqN,OAAOrH,KAiBvB,OAhBIhG,KAAK2V,KAAO3V,KAAKi7B,KACnBj7B,KAAKqhB,MACH/H,EAAAgI,eAAeymC,uBACf/nD,KAAKoE,MAAM42B,EAAOh7B,KAAKi7B,MAEzBkvB,GAAU,GACwB,KAAzBnkD,EAAKkM,WAAWlS,KAAK2V,OAC5B3V,KAAK2V,KAEP3V,KAAKqhB,MACH/H,EAAAgI,eAAe+oC,qCACfrqD,KAAKoE,MAAM42B,EAAOh7B,KAAK2V,MAEzBw0C,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACbnO,OAAOmM,aAAagC,GACpBnO,OAAOmM,aAC2B,QAA/BgC,EAAU,OAAS,KAAO,IAC1BA,EAAU,OAAS,KAAY,QAIxC9F,EAAAniD,UAAAqoD,OAAA,aAEFlG,EA7kCA,CAA+B9qC,EAAAwQ,mBAAlBpqB,EAAA0kD,YAglCb,IAAAoD,EAAA,WAOA,OAPA,gBAAa9nD,EAAA8nD,QAUb,IAAID,EAA8B,o6BCxjDlC,IAmKYnX,EAnKZma,EAAApqD,EAAA,IAQAmZ,EAAAnZ,EAAA,GAKAsZ,EAAAtZ,EAAA,GAyBAkC,EAAAlC,EAAA,GAUAs8C,EAAAt8C,EAAA,GA4BAmC,EAAAnC,EAAA,GAKAqZ,EAAArZ,EAAA,GA+DAoZ,EAAApZ,EAAA,GASAuC,EAAAvC,EAAA,IAUA,SAAYiwC,GAEVA,IAAA,mBAEAA,IAAA,mBAJF,CAAYA,EAAA1wC,EAAA0wC,SAAA1wC,EAAA0wC,YAQZ,IAAAoa,EAAA,oBAAAA,IAGExqD,KAAA+vB,OAAiBqgB,EAAOqa,OAExBzqD,KAAAwf,eAAsB,EAEtBxf,KAAAyf,UAAiB,EAEjBzf,KAAA0qD,cAAqB,EAErB1qD,KAAA2qD,aAAoB,EAEpB3qD,KAAAuuB,WAAkB,EAElBvuB,KAAA0f,WAAkB,EAElB1f,KAAA6iB,cAA2C,KAE3C7iB,KAAA4qD,SAAQ,EAGR5qD,KAAA2f,kBAAyB,EAEzB3f,KAAA4f,gBAAuB,EA0BzB,OAvBE7e,OAAAC,eAAIwpD,EAAAvoD,UAAA,gBAAJ,WACE,OAAOjC,KAAK+vB,QAAUqgB,EAAOC,wCAI/BtvC,OAAAC,eAAIwpD,EAAAvoD,UAAA,iBAAJ,WACE,OAAOjC,KAAK+vB,QAAUqgB,EAAOC,OAAS92B,EAAA+E,KAAK4+B,QAAU3jC,EAAA+E,KAAK6+B,yCAI5Dp8C,OAAAC,eAAIwpD,EAAAvoD,UAAA,iBAAJ,WACE,OAAOjC,KAAK+vB,QAAUqgB,EAAOC,OAAS92B,EAAA+E,KAAK0+B,QAAUzjC,EAAA+E,KAAK2+B,yCAI5Dl8C,OAAAC,eAAIwpD,EAAAvoD,UAAA,sBAAJ,WACE,OAAOjC,KAAK+vB,QAAUqgB,EAAOC,OAAQ,EAAiB,mCAIxDma,EAAAvoD,UAAA4d,WAAA,SAAWgrC,GACT,OAAoC,IAA5B7qD,KAAK4qD,SAAWC,IAE5BL,EAlDA,GAAa9qD,EAAA8qD,UAqDb,SAAkBM,GAEhBA,IAAA,eAEAA,IAAA,mCAEAA,IAAA,mCANF,CAAkBprD,EAAAorD,UAAAprD,EAAAorD,aAUlB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,uBAEAA,IAAA,uBANF,CAAkBrrD,EAAAqrD,iBAAArrD,EAAAqrD,oBAUlB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,eAJF,CAAkBtrD,EAAAsrD,WAAAtrD,EAAAsrD,cAQlB,IAywOIC,EACAC,EA1wOJC,EAAA,SAAA95C,GA6CE,SAAA85C,EAAYnhC,EAAkB3L,QAAA,IAAAA,MAAA,MAA9B,IAAA9M,EACEF,EAAA7Q,KAAAR,KAAMgqB,EAAQ3N,cAAYrc,YAjC5BuR,EAAA65C,qBAAwC,KAExC75C,EAAA85C,0BAEA95C,EAAA+5C,YAA2B,KAE3B/5C,EAAAg6C,YAAoBhyC,EAAA+E,KAAKc,KAQzB7N,EAAAi6C,kBAEAj6C,EAAAk6C,eAA4C,IAAItvC,IAEhD5K,EAAAm6C,iBAEAn6C,EAAAo6C,QAAqB,EAErBp6C,EAAAq6C,QAAuB,EAEvBr6C,EAAAs6C,mBAA0B,EAy1ElBt6C,EAAAu6C,eAAkC,KAClCv6C,EAAAw6C,eAAkC,KAClCx6C,EAAAy6C,eAAkC,KAClCz6C,EAAA06C,eAAkC,KAl1ExC16C,EAAKyY,QAAUA,EACfzY,EAAKkM,SAAWuM,EAAQvM,SACnBY,IAASA,EAAU,IAAImsC,GAC5Bj5C,EAAK8M,QAAUA,EACf9M,EAAK6d,aAAe9P,QAGlB4sC,IAAI7tC,EAAQqB,WAAY,IAE1BnO,EAAK5R,OAAS8Z,EAAA+sB,OAAO7kC,WA4pOzB,OAptO8B2P,EAAA65C,EAAA95C,GAwCrB85C,EAAAgB,QAAP,SAAeniC,EAAkB3L,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAI8sC,EAASnhC,EAAS3L,GAAS8tC,WAmBxChB,EAAAlpD,UAAAkqD,QAAA,mBACM9tC,EAAUre,KAAKqe,QACf1e,EAASK,KAAKL,OACdqqB,EAAUhqB,KAAKgqB,QAGnBA,EAAQ5L,WAAWC,GAGnB,IAAI+tC,EAAwB,IAAI3P,EAAAhxB,SAASzB,EAAQxG,cAAe,QAAS,IAAIjK,EAAAglC,aAAchlC,EAAA+E,KAAKc,OAChGpf,KAAKosD,sBAAwBA,EAC7B,IAAIC,EAAoB,IAAIr2C,MAC5BhW,KAAKqsD,kBAAoBA,EACzBrsD,KAAK4wB,gBAAkBw7B,EAKvB,IAFA,IAAIzuC,EAAUqM,EAAQrM,QAEbtd,EAAI,EAAGuG,EAAI+W,EAAQ9W,OAAQxG,EAAIuG,IAAKvG,EACvCsd,EAAQtd,GAAGslB,SAAS3lB,KAAKssD,cAAc3uC,EAAQtd,IAIrD,GAAIgsD,EAAkBxlD,QAAmC,OAAzBmjB,EAAQhN,aAAuB,CAC7D,IAAI5N,EAAYg9C,EAAsBh9C,UAClCm9C,EAAU5sD,EAAO8tC,YACnB2e,EAAsBhsC,aACtBpgB,KAAKwsD,mBACHp9C,EAAUyU,eACVzU,EAAUhK,WACVgK,EAAU0d,UAEZvT,EAAA4kC,mBAAmBiO,EAAsBvgC,kBACzClsB,EAAO4rC,YAAY,KAAM8gB,IAE3BD,EAAsB99B,SAAS3uB,EAAQ4sD,GAClCviC,EAAQhN,cAAcrd,EAAOoxC,SAASwb,GAI7C,IAAIn9B,EAAepvB,KAAKovB,aACxBA,EAAeq9B,UAAUr9B,EAAc/Q,EAAQW,UAAU+E,UACzD/jB,KAAKovB,aAAeA,EAChB/Q,EAAQkB,SACV5f,EAAO2tC,UACL,YAAW,GAEX,EACA3tC,EAAOyoC,UAAUkI,QAAQlhB,GAAemhB,SAASnhB,KAGnDzvB,EAAO2tC,UACL,YAAW,GAEX,EACA3tC,EAAOqoC,UAAUsI,QAAQlhB,KAK7B,IAAIs9B,EAAW1sD,KAAKwrD,eAAe3kD,OAC/BypC,QAAQqc,UAAUF,UAAUr9B,EAAc,OAAU9P,QAAQ,GAAI,KAChE,EACJ3f,EAAOkwC,UACL6c,EACA1sD,KAAKqe,QAAQkB,SACT9F,EAAA+sB,OAAO6P,kBACP58B,EAAA+sB,OAAO4P,kBACXp2C,KAAKwrD,eACLntC,EAAQ0R,OACR,UAIE1R,EAAQqsC,cAAc/qD,EAAO2vC,gBAAgB,IAAK,MAAO,UAG7D,IAAIoc,EAAgB1rD,KAAK0rD,cAErBkB,GAAwB,EADJlB,EAAc7kD,SAGpClH,EAAOixC,iBAAiB8a,GACxB/rD,EAAO2uC,eAAe,IAAK,SAC3Bse,GAAwB,GAItBvuC,EAAQssC,cACVhrD,EAAOyvC,eAAe,IAAK,MAAO,SAC7Bwd,GAAuBjtD,EAAO2uC,eAAe,IAAK,cAIzD,IAAiC,IAAAphB,EAAAzL,EAAAuI,EAAQpN,oBAAkBiF,EAAAqL,EAAAvL,QAAAE,EAAAD,KAAAC,EAAAqL,EAAAvL,OAAE,CAApD,IAAAqB,EAAAlB,EAAAD,EAAAvgB,MAAA,GAACV,EAAAoiB,EAAA,GAAM6pC,EAAA7pC,EAAA,GACdhjB,KAAK8sD,iBAAiBlsD,EAAMisD,EAAaxkD,2GAM3C,OAFIrI,KAAK6rD,mBAAmBtB,EAAAwC,oBAAoB/sD,MAEzCL,GAIDwrD,EAAAlpD,UAAA6qD,iBAAR,SAAyBlsD,EAAcyH,EAAkBygB,4BAAA,IAAAA,MAAA,IAGvD,IAAI9c,EAAU3D,EAAQ2D,QACtB,GAAIA,EAAS,CACX,IAAIghD,EAAYlkC,EAASloB,GAAQyH,EAAQzF,MAAQ65C,EAAAzgC,YAAYlI,MACzDzR,EAAAsW,mBACAtW,EAAAqW,kBAEJ,GAAIrQ,EAAQzF,MAAQ65C,EAAAzgC,YAAYwO,cAC9B,IAAmB,IAAAyiC,EAAAxrC,EAAAzV,EAAQtC,UAAQwjD,EAAAD,EAAAtrC,QAAAurC,EAAAtrC,KAAAsrC,EAAAD,EAAAtrC,OAAE,EAA5B7K,EAAMo2C,EAAA5rD,OACDuC,GAAGxB,EAAAsB,YAAY8S,SAC3BzW,KAAK8sD,iBAAiBh2C,EAAOqO,WAAYrO,EAAQk2C,8GAGnD,IAAmB,IAAAG,EAAA1rC,EAAAzV,EAAQtC,UAAQ0jD,EAAAD,EAAAxrC,QAAAyrC,EAAAxrC,KAAAwrC,EAAAD,EAAAxrC,OAAE,CAAhC,IAAI7K,KAAMs2C,EAAA9rD,OACFuC,GAAGxB,EAAAsB,YAAYu9C,UAC1BlhD,KAAK8sD,iBAAiBh2C,EAAOqO,WAAYrO,EAAQk2C,sGAKvD,OAAQ3kD,EAAQzF,MAGd,KAAK65C,EAAAzgC,YAAYzJ,OAEf,GADclK,EAAQxE,GAAGxB,EAAAsB,YAAYkmB,QAAUxhB,EAAQxE,GAAGxB,EAAAsB,YAAYiT,OAASvU,EAAAsB,YAAY6iB,WAC1ExmB,KAAKqe,QAAQwB,WAAU,GAStC7f,KAAKL,OAAO+uC,gBAAgBrmC,EAAQ+X,aAAc0I,EAASloB,QARvDiH,EAAuBQ,EAASR,cAElC7H,KAAKqhB,MACH/H,EAAAgI,eAAe+rC,+BACfxlD,EAAYjH,KAAKwD,OAMvB,MAEF,KAAKq4C,EAAAzgC,YAAY0O,UAEb,IAAI7iB,EADN,GAAKoK,OAAO5J,EAAQ5E,QAAQI,GAAGxB,EAAAsB,YAAYkmB,QAAW7pB,KAAKqe,QAAQwB,WAAU,GAS3E7f,KAAKL,OAAO+uC,gBAAgBrmC,EAAQ+X,aAAc0I,EAASloB,QARvDiH,EAA0BQ,EAASR,cAErC7H,KAAKqhB,MACH/H,EAAAgI,eAAe+rC,+BACfxlD,EAAYjH,KAAKwD,OAMvB,MAIF,KAAKq4C,EAAAzgC,YAAY9H,SACf,IACI9E,GADAgU,EAAqB/a,GACA+G,UACrBA,EAAUsvC,mBAAqBtvC,EAAUyU,eAAehd,SAE1Duc,EAAWpjB,KAAKstD,iBAAiBlqC,GACjCpjB,KAAKutD,iBAEHnqC,EAASvf,GAAGxB,EAAAsB,YAAY6pD,WAAWxtD,KAAKL,OAAOuuC,kBAAkB9qB,EAAShD,aAAc0I,EAASloB,GACrG,MAIF,KAAK67C,EAAAzgC,YAAY+L,SACf,IAAIlnB,EAASoR,OAAkB5J,EAAS2f,iBACxChoB,KAAK8sD,iBAAiBzqD,EAAA2W,cAAgBpY,EAAMC,EAAQioB,GACpD,IAAI2kC,EAAoBplD,EAAS4f,gBAC7BwlC,GAAQztD,KAAK8sD,iBAAiBzqD,EAAA4W,cAAgBrY,EAAM6sD,EAAQ3kC,GAChE,MAIF,KAAK2zB,EAAAzgC,YAAYmT,MACf,IAAIxvB,EAASK,KAAKL,OACd0E,EAAegE,EAAShE,KACxBqpD,EAAarpD,EAAKypB,eAClBwY,EAAiBj+B,EAAS+mB,aAC1BpQ,EAAYhf,KAAKqe,QAAQW,UACzB2uC,EAAiB3tD,KAAKqe,QAAQsvC,eAG9BC,EAAa9kC,EAASzmB,EAAA2W,cAAgBpY,EAgB1C,GAfAjB,EAAO8tC,YACLmgB,EACA5tD,KAAKwsD,mBAAmB,KAAMnoD,EAAM2a,GACpC,KACArf,EAAOgqC,WACLtlC,EAAK0f,SACL1f,EAAKR,GAAE,GACPlE,EAAO0pC,eAAe,EAAGskB,GACzBD,EACApnB,IAGJ3mC,EAAOuuC,kBAAkB0f,EAAYA,IAGhCvlD,EAAQxE,GAAGxB,EAAAsB,YAAY6iB,UAAW,CACrC,IAAIqnC,EAAa/kC,EAASzmB,EAAA4W,cAAgBrY,EAC1CjB,EAAO8tC,YACLogB,EACA7tD,KAAKwsD,oBAAqBnoD,GAAQkV,EAAA+E,KAAKc,KAAMJ,GAC7C,KACArf,EAAOqqC,YACL3lC,EAAK0f,SACLpkB,EAAO0pC,eAAe,EAAGskB,GACzBhuD,EAAO0pC,eAAe,EAAGqkB,GACzBA,EACApnB,IAGJ3mC,EAAOuuC,kBAAkB2f,EAAYA,GAEvC,MAIF,KAAKpR,EAAAzgC,YAAYuH,uBACf,IAAqB,IAAAuqC,EAAArsC,EAAoBpZ,EAASkjB,UAAU7hB,UAAQqkD,EAAAD,EAAAnsC,QAAAosC,EAAAnsC,KAAAmsC,EAAAD,EAAAnsC,OAAE,CAAjE,IACC2G,EAAe1nB,EACnB,IAFOwiB,EAAQ2qC,EAAAzsD,OAEFuC,GAAGxB,EAAAsB,YAAY8f,SAE1B6E,IADI0lC,EAAW5qC,EAAShD,cACCrK,UAAUi4C,EAASp4C,YAAY,MAE1D5V,KAAK8sD,iBAAiBxkC,EAAclF,EAAU0F,qGAEhD,MAEF,KAAK2zB,EAAAzgC,YAAY0G,oBACf,IAAqB,IAAAurC,EAAAxsC,EAAiBpZ,EAASkjB,UAAU7hB,UAAQwkD,EAAAD,EAAAtsC,QAAAusC,EAAAtsC,KAAAssC,EAAAD,EAAAtsC,OAAE,CAA9D,IAAIyB,EAGD4qC,EAFF1lC,EAAe1nB,EACnB,IAFOwiB,EAAQ8qC,EAAA5sD,OAEFuC,GAAGxB,EAAAsB,YAAY8f,SAE1B6E,IADI0lC,EAAW5qC,EAAShD,cACCrK,UAAUi4C,EAASp4C,YAAY,MAE1D,IAAIu4C,EAAO/qC,EAASoM,oBAChB2+B,GAAMnuD,KAAK8sD,iBAAiBxkC,EAAejmB,EAAAsW,mBAAqBw1C,EAAKhpC,WAAYgpC,EAAMrlC,GAC3F9oB,KAAK8sD,iBAAiBxkC,EAAclF,EAAU0F,qGAEhD,MAIF,KAAK2zB,EAAAzgC,YAAYyO,KACjB,KAAKgyB,EAAAzgC,YAAYlI,MACjB,KAAK2oC,EAAAzgC,YAAYwO,UAAW,MAE5B,QAASvY,QAAO,KAOpBk5C,EAAAlpD,UAAAmsD,oBAAA,SAAoBlwC,EAAwCmwC,GAC1D,IAAIhhD,EAASrN,KAAKgqB,QAAQ/L,mBAAmBC,GACzC7Q,EAAQrN,KAAKssD,cAAcj/C,GAE7BrN,KAAKqhB,MACH/H,EAAAgI,eAAegtC,iBACfD,EAAWjqD,MAAO8Z,IAMxBitC,EAAAlpD,UAAAqqD,cAAA,SAAcj/C,GACZ,IAAIA,EAAOxJ,GAAGxB,EAAAsB,YAAY6pD,UAA1B,CACAngD,EAAOrJ,IAAI3B,EAAAsB,YAAY6pD,UAQvB,IALA,IAAIhuC,EAAgBxf,KAAKqe,QAAQmB,cAC7BmG,EAAUtY,EAAOsY,QACjBymC,EAAwBpsD,KAAKosD,sBAC7BC,EAAoBrsD,KAAKqsD,kBACzB9gD,EAAa8B,EAAO9B,WACflL,EAAI,EAAGuG,EAAI2E,EAAW1E,OAAQxG,EAAIuG,IAAKvG,EAAG,CACjD,IAAIiM,EAAYf,EAAWlL,GAC3B,OAAQiM,EAAU1J,MAChB,KAAK4W,EAAA/W,SAASkU,kBAET6I,GAAkBmG,GAAWrZ,EAAUzI,GAAGxB,EAAAsB,YAAY8S,WACnCnK,EAAWiiD,WAE/BvuD,KAAKwuD,wBAA0CliD,KAAe,MAEhE,MAEF,KAAKkN,EAAA/W,SAASsV,qBAAsB,MACpC,KAAKyB,EAAA/W,SAAS2U,iBACRoI,GAAkBmG,GAAWrZ,EAAUzI,GAAGxB,EAAAsB,YAAY8S,UACxDzW,KAAKyuD,uBAAwCniD,GAE/C,MAEF,KAAKkN,EAAA/W,SAASwS,qBAETuK,GAAkBmG,GAAWrZ,EAAUzI,GAAGxB,EAAAsB,YAAY8S,WAChCnK,EAAWiiD,WAElCvuD,KAAK0uD,2BAAgDpiD,MAEvD,MAEF,KAAKkN,EAAA/W,SAASqV,OACZ9X,KAAKouD,oBACe9hD,EAAWW,eACXX,EAAWS,MAE/B,MAEF,KAAKyM,EAAA/W,SAAS+T,sBACRgJ,GAAkBmG,GAAWrZ,EAAUzI,GAAGxB,EAAAsB,YAAY8S,UACxDzW,KAAK2uD,4BAAkDriD,GAEzD,MAEF,KAAKkN,EAAA/W,SAAS8T,SACZ,IAAIq4C,EAAe5uD,KAAK6uD,yBAA4CviD,GAChEsiD,GAAcvC,EAAkB7mC,KAAKopC,GACzC,MAEF,KAAKp1C,EAAA/W,SAASgU,OACuC,MAA7BnK,EAAWW,gBAC/BjN,KAAKouD,oBACuB9hD,EAAWW,eACMX,EAAWS,OAGtDyS,GAAiBmG,IACnB3lB,KAAK8uD,uBAAwCxiD,GAE/C,MAEF,QACE,IAAIyiD,EAAmB/uD,KAAK4wB,gBAC5B5wB,KAAK4wB,gBAAkBw7B,EACvBC,EAAkB7mC,KAAKxlB,KAAKgvD,iBAAiB1iD,IAC7CtM,KAAK4wB,gBAAkBm+B,MAS/B5D,EAAAlpD,UAAAgtD,yBAAA,SAAyBpnD,GAEvB,IAAIQ,EAAU4J,OAAOjS,KAAKgqB,QAAQzN,eAAerb,IAAI2G,EAAYqd,wBAEjE,OADAjT,OAAO5J,EAAQzF,MAAQ65C,EAAAzgC,YAAYzJ,QAC9BvS,KAAKkvD,cAAsB7mD,GACjBA,EADkC,MAInD8iD,EAAAlpD,UAAAitD,cAAA,SAAcC,GACZ,GAAIA,EAAOtrD,GAAGxB,EAAAsB,YAAY6pD,UAAW,OAAO,EAC5C2B,EAAOnrD,IAAI3B,EAAAsB,YAAY6pD,UAEvB,IAAI7tD,EAASK,KAAKL,OACdkI,EAAcsnD,EAAOtnD,YACrBunD,EAA0B,EAE9B,GAAID,EAAO9qD,MAAQkV,EAAA+E,KAAKc,KACtB,GAAIvX,EAGF,GAAIA,EAAYxD,KAAM,CACpB,IAAIgrD,EAAervD,KAAKyd,SAAS6xC,YAAYznD,EAAYxD,MACzD,IAAKgrD,EAAc,OAAO,EAC1B,GAAIA,GAAgB91C,EAAA+E,KAAKc,KAKvB,OAJApf,KAAKqhB,MACH/H,EAAAgI,eAAeiuC,cACf1nD,EAAYxD,KAAKD,QAEZ,EAET+qD,EAAO9qD,KAAOgrD,MAGT,KAAIxnD,EAAY9C,YAqBrB,OAJA/E,KAAKqhB,MACH/H,EAAAgI,eAAeiuC,cACf1nD,EAAYjH,KAAKwD,MAAMorD,QAElB,EAfP,GALAJ,EAAWpvD,KAAKyvD,4BACd5nD,EAAY9C,YACZwU,EAAA+E,KAAKc,KAAI,GAGPpf,KAAKurD,aAAehyC,EAAA+E,KAAKc,KAK3B,OAJApf,KAAKqhB,MACH/H,EAAAgI,eAAeouC,mCACf7nD,EAAY9C,YAAYX,MAAOpE,KAAKurD,YAAY3mC,WAAY,WAEvD,EAETuqC,EAAO9qD,KAAOrE,KAAKurD,iBAWrBt5C,QAAO,GAKX,GAAIk9C,EAAOtrD,GAAGxB,EAAAsB,YAAY+f,UAAYyrC,EAAOnqC,aAAay3B,EAAAxgC,eAAe7J,SAAU,OAAO,EAE1F,IAAIs7C,EAAayB,EAAO9qD,KAAKypB,eACzB6hC,EAAqBR,EAAOtrD,GAAGxB,EAAAsB,YAAYkmB,QAAUslC,EAAOtrD,GAAGxB,EAAAsB,YAAYiT,OAASvU,EAAAsB,YAAY6iB,UAGpG,GAAI2oC,EAAOtrD,GAAGxB,EAAAsB,YAAY+f,SAGxB,OAAIisC,GAAsB3vD,KAAKqe,QAAQwB,WAAU,IAC/CsvC,EAAOnrD,IAAI3B,EAAAsB,YAAYisD,eACnB/nD,EACFgoD,EAAiBV,EAAQtnD,EAAasnD,EAAO1rD,SAE7CwnD,EAA8B,MAC9BC,EAA+BiE,EAAOhqC,YAExCxlB,EAAO6vC,gBACL2f,EAAO/uC,aACP6qC,EACAC,EACAwC,GAEFyB,EAAOnrD,IAAI3B,EAAAsB,YAAY6pD,WAChB,IAIPxtD,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfnV,OAAOpK,GAAazD,QAGjB,GAKT,IAAI0rD,GAAoB,EAGxB,GAAoB,OAAhBjoD,GAAoD,OAA5BA,EAAY9C,aA0BtC,GAzBKqqD,IACHA,EAAWpvD,KAAK+vD,kBACdloD,EAAY9C,YACZoqD,EAAO9qD,KAAI,MAMXoV,EAAA2Z,gBAAgBg8B,IAAa31C,EAAA4Z,aAAa6C,QACxCy5B,GACFP,EAAWzvD,EAAO0yC,qBAAqB+c,GACnC31C,EAAA2Z,gBAAgBg8B,IAAa31C,EAAA4Z,aAAa6C,QAC5Cl2B,KAAKw7B,QACHliB,EAAAgI,eAAe0uC,4DACfnoD,EAAYzD,OAEd0rD,GAAoB,IAGtBA,GAAoB,GAKpBX,EAAOnqC,aAAay3B,EAAAxgC,eAAezJ,UAChCs9C,EAAmB,CAGtB,OAFA79C,OAAOwH,EAAA2Z,gBAAgBg8B,IAAa31C,EAAA4Z,aAAa6C,OAClCzc,EAAA8d,kBAAkB63B,IAE/B,OACED,EAAOrkC,kBAAiB,EACxBqkC,EAAOpkC,qBAAuBzL,QAAQ7F,EAAA0c,iBAAiBi5B,GAAW,GAClE,MAEF,OACED,EAAOrkC,kBAAiB,EACxBqkC,EAAOpkC,qBAAuBzL,QAC5B7F,EAAA+d,oBAAoB43B,GACpB31C,EAAA68B,qBAAqB8Y,IAEvB,MAEF,OACED,EAAOrkC,kBAAiB,EACxBqkC,EAAOlkC,mBAAqBxR,EAAAge,iBAAiB23B,GAC7C,MAEF,OACED,EAAOrkC,kBAAiB,EACxBqkC,EAAOlkC,mBAAqBxR,EAAAie,iBAAiB03B,GAC7C,MAEF,QAEE,OADAn9C,QAAO,IACA,EAGXk9C,EAAOnrD,IAAI3B,EAAAsB,YAAYqnB,eAM3BokC,EAAWD,EAAO9qD,KAAK25C,aAAar+C,GAGtC,IAAIygB,EAAe+uC,EAAO/uC,aAS1B,OAPI0vC,GACFnwD,EAAO2tC,UAAUltB,EAAcstC,GAAY,EAAMyB,EAAO9qD,KAAK25C,aAAar+C,IAC1EK,KAAKqsD,kBAAkB7mC,KAAK7lB,EAAO0rC,gBAAgBjrB,EAAcgvC,KAGjEzvD,EAAO2tC,UAAUltB,EAAcstC,GAAaiC,EAAoBP,IAE3D,GAKTjE,EAAAlpD,UAAAwsD,uBAAA,SAAuB5mD,GACrB,IAAIQ,EAAU4J,OAAOjS,KAAKgqB,QAAQzN,eAAerb,IAAI2G,EAAYqd,wBAEjE,OADAjT,OAAO5J,EAAQzF,MAAQ65C,EAAAzgC,YAAYyO,MAC9BzqB,KAAKiwD,YAAkB5nD,GACfA,EADgC,MAI/C8iD,EAAAlpD,UAAAguD,YAAA,SAAY5nD,WACV,GAAIA,EAAQxE,GAAGxB,EAAAsB,YAAY6pD,UAAW,OAAO,EAC7CnlD,EAAQrE,IAAI3B,EAAAsB,YAAY6pD,UAExB,IAAI7tD,EAASK,KAAKL,OAClBK,KAAKsrD,YAAcjjD,EACnB,IAAI6nD,EAAkC,KAClCC,GAAqB,EAEzB,GAAI9nD,EAAQ2D,YACV,IAAmB,IAAAkhB,EAAAzL,EAAApZ,EAAQ2D,QAAQtC,UAAQmY,EAAAqL,EAAAvL,QAAAE,EAAAD,KAAAC,EAAAqL,EAAAvL,OAAE,CAAxC,IAAI7K,EAAM+K,EAAAvgB,MACb,GAAIwV,EAAOlU,MAAQ65C,EAAAzgC,YAAY0O,UAA/B,CACA,IAAI0lC,GAAc,EACd/U,EAAiBvkC,EACjBu5C,EAAmBhV,EAAIxzC,YAC3BwzC,EAAIr3C,IAAI3B,EAAAsB,YAAY6pD,UACpB,IAAI4B,OAAQ,EACRiB,EAAiB/uD,OACnB8tD,EAAWpvD,KAAK+vD,kBACFM,EAAiB/uD,MAC7BiY,EAAA+E,KAAKG,IAAG,KAINhF,EAAA2Z,gBAAgBg8B,IAAa31C,EAAA4Z,aAAa6C,QACxC7tB,EAAQxE,GAAGxB,EAAAsB,YAAYkmB,QACzBulC,EAAWzvD,EAAO0yC,qBAAqB+c,GACnC31C,EAAA2Z,gBAAgBg8B,IAAa31C,EAAA4Z,aAAa6C,QAC5Cl2B,KAAKqhB,MACH/H,EAAAgI,eAAegvC,0EACfD,EAAiB/uD,MAAM8C,OAEzBgsD,GAAc,IAGhBA,GAAc,IAGQ,MAAjBF,EACTd,EAAWzvD,EAAOqoC,UAAU,IAExBmoB,GACFnwD,KAAKqhB,MACH/H,EAAAgI,eAAeivC,kCACfF,EAAiBjsD,OAGrBgrD,EAAWzvD,EAAOopC,aAAatvB,EAAAsa,SAASy8B,OACtC7wD,EAAO8pC,gBAAgBymB,EAAc9vC,aAAY,GACjDzgB,EAAOqoC,UAAU,IAEnBonB,EAAWzvD,EAAO0yC,qBAAqB+c,GACnC31C,EAAA2Z,gBAAgBg8B,IAAa31C,EAAA4Z,aAAa6C,QACxC7tB,EAAQxE,GAAGxB,EAAAsB,YAAYkmB,QACzB7pB,KAAKqhB,MACH/H,EAAAgI,eAAegvC,0EACfD,EAAiBjsD,OAGrBgsD,GAAc,IAGdA,GACFzwD,EAAO2tC,UAAU+N,EAAIj7B,aAAY,GAAkB,EAAMzgB,EAAOqoC,UAAU,IAC1EhoC,KAAKqsD,kBAAkB7mC,KAAK7lB,EAAO0rC,gBAAgBgQ,EAAIj7B,aAAcgvC,IACrEe,GAAqB,IAErBxwD,EAAO2tC,UAAU+N,EAAIj7B,aAAY,GAAmB/X,EAAQxE,GAAGxB,EAAAsB,YAAYkmB,OAAQulC,GACnFe,GAAqB,GAEvBD,EAA2B7U,qGAI/B,OADAr7C,KAAKsrD,YAAc,MACZ,GAMTH,EAAAlpD,UAAAysD,2BAAA,SACE7mD,EACA3D,EACAwnB,QAAA,IAAAA,MAAA,MAEA,IAAIrjB,EAAU4J,OAAOjS,KAAKgqB,QAAQzN,eAAerb,IAAI2G,EAAYqd,wBAEjE,OADAjT,OAAO5J,EAAQzF,MAAQ65C,EAAAzgC,YAAYuH,oBAC5BvjB,KAAKywD,kCACSpoD,EACnBnE,EACAwnB,EACA,KACoBrjB,EAASR,YAAYjH,OAK7CuqD,EAAAlpD,UAAAwuD,kCAAA,SACExuD,EACAiC,EACAwnB,EACAS,EACAkiC,GAEA,IAAIjrC,EAAWpjB,KAAKyd,SAASizC,iCAC3BzuD,EACAiC,EACAwnB,EACA2iC,GAEF,OAAKjrC,GACLA,EAAS+I,WAAaA,EACjBnsB,KAAK2wD,gBAAgBvtC,GACnBA,EADqC,MAFtB,MAOxB+nC,EAAAlpD,UAAAuqD,mBAAA,SACE3oC,EACAze,EACA0nB,QAAA,IAAAA,MAAA,MAEA,IACIya,EADA0X,EAAgBp7B,EAAiBA,EAAehd,OAAS,EAEzDukB,EAAQ,EAQZ,GAPI0B,IACFya,EAAa,IAAIvxB,MAAM,EAAIipC,IAChB,GAAKnyB,EAASgB,eACzB1C,EAAQ,GAERmc,EAAa,IAAIvxB,MAAMipC,GAErBp7B,EACF,IAAK,IAAIxjB,EAAI,EAAGA,EAAI4+C,IAAiB5+C,IAAK+qB,EACxCmc,EAAWnc,GAASvH,EAAexjB,GAAGytB,eAG1C,IAAI8iC,EAAaxrD,EAAW0oB,eACxBnuB,EAASK,KAAKL,OACdquC,EAAUruC,EAAOioC,2BAA2BgpB,EAAYrpB,GAC5D,IAAKyG,EAAS,CACZ,IAAIptC,EAAO2Y,EAAAglC,UAAUe,oBAAoBz7B,EAAgBze,EAAY0nB,GACrEkhB,EAAUruC,EAAO2nC,gBAAgB1mC,EAAMgwD,EAAYrpB,GAErD,OAAOyG,GAITmd,EAAAlpD,UAAA0uD,gBAAA,SAAgBvtC,GACd,GAAIA,EAASvf,GAAGxB,EAAAsB,YAAY6pD,UAAW,OAAO,EAC9Cv7C,SAASmR,EAASvf,GAAGxB,EAAAsB,YAAY+f,UAAYN,EAAS4B,aAAay3B,EAAAxgC,eAAe7J,WAClFgR,EAASpf,IAAI3B,EAAAsB,YAAY6pD,UAGzB,IAkBIxhC,EAlBAnkB,EAAcub,EAASnhB,UAAU4F,YACjCwH,EAAOxH,EAAYwH,KACnBA,EACE+T,EAASvf,GAAGxB,EAAAsB,YAAY+f,UAC1B1jB,KAAKqhB,MACH/H,EAAAgI,eAAeuvC,yDACfhpD,EAAYjH,KAAKwD,OAIhBgf,EAASvf,GAAGxB,EAAAsB,YAAY+f,UAC3B1jB,KAAKqhB,MACH/H,EAAAgI,eAAewvC,gFACfjpD,EAAYjH,KAAKwD,OAMvB,IAAIgL,EAAYgU,EAAShU,UACrB4+B,EAAUhuC,KAAKwsD,mBAAmBp9C,EAAUyU,eAAgBzU,EAAUhK,WAAYgK,EAAU0d,UAC5FntB,EAASK,KAAKL,OAClB,GAAI0P,EAAM,CACR,IAAI0hD,EAAgB3tC,EAASvf,GAAGxB,EAAAsB,YAAYqQ,aACxC5O,EAAage,EAAShU,UAAUhK,WAGhC2pD,EAAmB/uD,KAAK4wB,gBAC5B5wB,KAAK4wB,gBAAkBxN,EACvB,IAAIoK,EAAOpK,EAASoK,KAChB9nB,OAAI,EACR,GAAI2J,EAAKzM,MAAQ4W,EAAA/W,SAAS+U,WACxBvF,QAAQmR,EAASrf,MAAM1B,EAAAsB,YAAYqQ,YAAc3R,EAAAsB,YAAYqiB,IAAM3jB,EAAAsB,YAAYsiB,IAAM5jB,EAAAsB,YAAYggB,OACjG1R,OAAOmR,EAASvf,GAAGxB,EAAAsB,YAAYmF,QAC/BpD,EAAO1F,KAAK+vD,kBACY1gD,EAAMpI,WAC5B7B,EAAU,KAIZooB,EAAKxpB,IAAG,GACHwpB,EAAK2F,YAAYztB,EAAMN,IAAaooB,EAAKxpB,IAAG,GACjDwpB,EAAKc,eACA,CACLrc,OAAO5C,EAAKzM,MAAQ4W,EAAA/W,SAASuS,OAC7B,IAAIg8C,EAAQhxD,KAAKixD,kBAAmC5hD,EAAM9D,YAiB1D,GAhBI6X,EAASvf,GAAGxB,EAAAsB,YAAYggB,QAC1BhkB,EAAO2tC,UAAU,WAAU,GAAkB,EAAM3tC,EAAOqoC,UAAU,IACpEgpB,EAAME,QACJvxD,EAAOqsC,SACLrsC,EAAOipC,YACLnvB,EAAAwd,QAAQC,OACRv3B,EAAO8pC,gBAAgB,WAAU,IAEnC9pC,EAAO4rC,YAAY,MACjB5rC,EAAOktC,WAAW,QAAS,KAAI,GAC/BltC,EAAO0rC,gBAAgB,WAAY1rC,EAAOqoC,UAAU,SAK5Dxa,EAAKc,WACDyiC,EAAe,CACjB,IAAIpD,EAAiB3tD,KAAKqe,QAAQsvC,eAIlC,GAHA17C,OAAOmR,EAASvf,GAAGxB,EAAAsB,YAAYipB,YAG1BY,EAAK3pB,GAAE,GAGV,GAAI2pB,EAAK3pB,GAAE,IACTmtD,EAAMxrC,KAAK7lB,EAAO0pC,eAAe,EAAGskB,QAG/B,CACL,IAAIlqD,EAASwO,OAAOmR,EAAS3f,QAC7BwO,OAAOxO,EAAOb,MAAQ65C,EAAAzgC,YAAYlI,OAClCk9C,EAAMxrC,KAAK7lB,EAAO4pC,eAAe,EAC/BvpC,KAAKmxD,wBAA+B1tD,EAAQoE,EAAYjH,cAMrDwE,GAAcmU,EAAA+E,KAAKc,MAASoO,EAAK3pB,GAAE,IAC5C7D,KAAKqhB,MACH/H,EAAAgI,eAAe8vC,+DACfvpD,EAAYuH,UAAUhK,WAAWhB,OAGrCsB,EAAQsrD,EAAMnqD,OAEM,GAAhBmqD,EAAMnqD,OACJmqD,EAAM,GACNrxD,EAAO4rC,YAAY,KAAMylB,EAAO5rD,EAAW0oB,gBAH7CnuB,EAAOusC,YAgBb,GAXAlsC,KAAK4wB,gBAAkBm+B,EAGvB/iC,EAAMrsB,EAAO8tC,YACXrqB,EAAShD,aACT4tB,EACAz0B,EAAA4kC,mBAAmB/6B,EAASyI,kBAC5BnmB,GAIE0d,EAAS4B,aAAay3B,EAAAxgC,eAAe3J,UAAW,CAClD,IAAIwG,EAAY7G,OAAOuH,EAAAX,cAAcW,EAAA1H,cAAcQ,SAAUzK,EAAYoE,aACzEjM,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACftO,EAAU1U,aAKdgf,EAASpf,IAAI3B,EAAAsB,YAAYisD,eACzBC,EAAiBzsC,EAAUvb,EAAaub,EAASnhB,UAAUwB,QAG3DuoB,EAAMrsB,EAAOmvC,kBACX1rB,EAAShD,aACT6qC,EACAC,EACAld,GAKJ,OADA5qB,EAASkL,SAAS3uB,EAAQqsB,IACnB,GAKTm/B,EAAAlpD,UAAA0sD,4BAAA,SAA4B9mD,GAG1B,IAFA,IAAImE,EAAUnE,EAAYmE,QACtBwT,EAAgBxf,KAAKqe,QAAQmB,cACxBnf,EAAI,EAAGuG,EAAIoF,EAAQnF,OAAQxG,EAAIuG,IAAKvG,EAAG,CAC9C,IAAIyW,EAAS9K,EAAQ3L,GACrB,OAAQyW,EAAOlU,MACb,KAAK4W,EAAA/W,SAASkU,kBAET6I,IAAiB1I,EAAOjT,GAAGxB,EAAAsB,YAAY8S,SACpBK,EAAQy3C,WAE5BvuD,KAAKwuD,wBAA0C13C,MAEjD,MAEF,KAAK0C,EAAA/W,SAASsV,sBAETyH,IAAiB1I,EAAOjT,GAAGxB,EAAAsB,YAAY8S,SAChBK,EAAQy3C,WAEhCvuD,KAAKqxD,4BAAkDv6C,MAEzD,MAEF,KAAK0C,EAAA/W,SAAS2U,iBACRoI,GAAiB1I,EAAOjT,GAAGxB,EAAAsB,YAAY8S,UACzCzW,KAAKyuD,uBAAwC33C,GAE/C,MAEF,KAAK0C,EAAA/W,SAASwS,qBAETuK,IAAiB1I,EAAOjT,GAAGxB,EAAAsB,YAAY8S,SACjBK,EAAQy3C,WAE/BvuD,KAAK0uD,2BAAgD53C,MAEvD,MAEF,KAAK0C,EAAA/W,SAAS+T,sBACRgJ,GAAiB1I,EAAOjT,GAAGxB,EAAAsB,YAAY8S,UACzCzW,KAAK2uD,4BAAkD73C,GAEzD,MAEF,KAAK0C,EAAA/W,SAAS8T,SACZ,GAAIiJ,GAAiB1I,EAAOjT,GAAGxB,EAAAsB,YAAY8S,QAAS,CAClD,IAAIm4C,EAAe5uD,KAAK6uD,yBAA4C/3C,GAAQ,GACxE83C,GAAc5uD,KAAKqsD,kBAAkB7mC,KAAKopC,GAEhD,MAEF,QAAS38C,QAAO,MAKtBk5C,EAAAlpD,UAAAqvD,iBAAA,SAAiB5vD,WACf,GAAKA,EAAGsK,QAAR,CAEA,IAAIwT,EAAgBxf,KAAKqe,QAAQmB,kBACjC,IAAoB,IAAA0N,EAAAzL,EAAA/f,EAAGsK,QAAQtC,UAAQmY,EAAAqL,EAAAvL,QAAAE,EAAAD,KAAAC,EAAAqL,EAAAvL,OAAE,CAApC,IAAItZ,EAAOwZ,EAAAvgB,MACd,OAAQ+G,EAAQzF,MACd,KAAK65C,EAAAzgC,YAAY0G,iBAGXlD,IACiBnX,EAASxE,GAAGxB,EAAAsB,YAAY8S,SACpBpO,EAASxE,GAAGxB,EAAAsB,YAAY8f,UAE/CzjB,KAAKuxD,+BAA+ClpD,MAEtD,MAEF,KAAKo0C,EAAAzgC,YAAYyO,KACfzqB,KAAKiwD,YAAkB5nD,GACvB,MAEF,KAAKo0C,EAAAzgC,YAAYuH,mBACf,IAEI/D,GAAqCnX,EAASxE,GAAGxB,EAAAsB,YAAY8S,WACrCpO,EAASxE,GAAGxB,EAAAsB,YAAY8f,SAClD,CACA,GAAIpb,EAAQ2c,aAAay3B,EAAAxgC,eAAe7J,SAAU,MAClDpS,KAAKywD,kCACgBpoD,KAEnB,KACA,KACoBA,EAASR,YAAYjH,MAG7C,MAEF,KAAK67C,EAAAzgC,YAAYzJ,OACfvS,KAAKkvD,cAAsB7mD,GAC3B,MAEF,KAAKo0C,EAAAzgC,YAAYwO,UACfxqB,KAAKsxD,iBAA4BjpD,yGASzC8iD,EAAAlpD,UAAA6sD,uBAAA,SAAuBxiD,GACrB,IAAIqQ,EAAmB3c,KAAKgqB,QAAQrN,iBAChC3Q,EAAUM,EAAUN,QACxB,GAAKA,EACL,IAAK,IAAI3L,EAAI,EAAGuG,EAAIoF,EAAQnF,OAAQxG,EAAIuG,IAAKvG,EAAG,CAC9C,IAAIyW,EAAS9K,EAAQ3L,GACjBgI,EAAUsU,EAAiBzb,IAC7BoL,EAAUlI,MAAMiJ,OAAOC,aAAejL,EAAAwT,eAAiBiB,EAAOrJ,aAAazH,MAE7E,GAAKqC,EACL,OAAQA,EAAQzF,MACd,KAAK65C,EAAAzgC,YAAY0G,gBACOra,EAASxE,GAAGxB,EAAAsB,YAAY8f,UAC5CzjB,KAAKuxD,+BAA+ClpD,MAEtD,MAEF,KAAKo0C,EAAAzgC,YAAYyO,KACfzqB,KAAKiwD,YAAkB5nD,GACvB,MAEF,KAAKo0C,EAAAzgC,YAAYuH,oBAEQlb,EAASxE,GAAGxB,EAAAsB,YAAY8f,UAC7CnX,EAAUlI,MAAMiJ,OAAOsY,SAEvB3lB,KAAKywD,kCACgBpoD,KAEnB,KACA,KACoBA,EAASR,YAAYjH,MAG7C,MAEF,KAAK67C,EAAAzgC,YAAYzJ,OACfvS,KAAKkvD,cAAsB7mD,GAC3B,MAEF,KAAKo0C,EAAAzgC,YAAYwO,UACfxqB,KAAKsxD,iBAA4BjpD,MASzC8iD,EAAAlpD,UAAAusD,wBAAA,SACE3mD,EACA3D,EACAwnB,QAAA,IAAAA,MAAA,MAEA,IAAIrjB,EAAU4J,OAAOjS,KAAKgqB,QAAQzN,eAAerb,IAAI2G,EAAYqd,wBACjEjT,OAAO5J,EAAQzF,MAAQ65C,EAAAzgC,YAAY0G,iBACnC1iB,KAAKuxD,+BACalpD,EAChBnE,EACAwnB,EACA7jB,IAIJsjD,EAAAlpD,UAAAsvD,+BAAA,SACEtvD,EACAiC,EACAwnB,EACA8lC,QADA,IAAA9lC,MAAA,WACA,IAAA8lC,MAAA,MAEA,IAAIpuC,EAAWpjB,KAAKyd,SAASg0C,8BAC3BxvD,EACAiC,EACAwnB,EACA8lC,GAAyBvvD,EAAU4F,aAEhCub,GACLpjB,KAAK0xD,aAAatuC,IAGpB+nC,EAAAlpD,UAAAyvD,aAAA,SAAatuC,eACX,GAAIA,EAASvf,GAAGxB,EAAAsB,YAAY6pD,UAAW,OAAO,EAC9CpqC,EAASpf,IAAI3B,EAAAsB,YAAY6pD,UAEzB,IAAImE,EAAgBvuC,EAASnhB,UAAU+J,QACvC,GAAI2lD,MACF,IAAoB,IAAA9vC,EAAAJ,EAAAkwC,EAAcjoD,UAAQsZ,EAAAnB,EAAAF,QAAAqB,EAAApB,KAAAoB,EAAAnB,EAAAF,OAAE,CAC1C,QADOtZ,EAAO2a,EAAA1hB,OACEsB,MACd,KAAK65C,EAAAzgC,YAAYzJ,OACfvS,KAAKkvD,cAAsB7mD,GAC3B,MAEF,KAAKo0C,EAAAzgC,YAAYuH,mBAEQlb,EAASxE,GAAGxB,EAAAsB,YAAY8f,UAE7CzjB,KAAKywD,kCACgBpoD,KACf,KAAM,KACUA,EAASR,YAAYjH,MAG7C,MAEF,KAAK67C,EAAAzgC,YAAY+L,UACXlnB,EAAoBwH,EAAS2f,kBAE/BhoB,KAAKywD,kCACH5vD,KACI,KAAM,KACVA,EAAOgH,YAAYjH,OAGnB6sD,EAAoBplD,EAAS4f,kBAE/BjoB,KAAKywD,kCACHhD,KACI,KAAM,KACVA,EAAO5lD,YAAYjH,yGAQ/B,IAAIgxD,EAAexuC,EAASoM,oBACxBoiC,GAAc5xD,KAAK2wD,gBAAgBiB,GACvC,IAAIlrC,EAAkBtD,EAASpX,QAC/B,GAAI0a,MACF,IAAoB,IAAAumC,EAAAxrC,EAAAiF,EAAgBhd,UAAQwjD,EAAAD,EAAAtrC,QAAAurC,EAAAtrC,KAAAsrC,EAAAD,EAAAtrC,OAAE,CAAzC,IAAItZ,EACP,QADOA,EAAO6kD,EAAA5rD,OACEsB,MACd,KAAK65C,EAAAzgC,YAAYuH,mBAEQlb,EAASxE,GAAGxB,EAAAsB,YAAY8f,UAE7CzjB,KAAKywD,kCACgBpoD,KAEnB+a,EAASsI,wBACT,KACoBrjB,EAASR,YAAYjH,MAG7C,MAEF,KAAK67C,EAAAzgC,YAAYmT,MACf9mB,EAAQrE,IAAI3B,EAAAsB,YAAY6pD,UACxB,MAEF,KAAK/Q,EAAAzgC,YAAY+L,SACf,IAAIlnB,EAQA4sD,GARA5sD,EAAoBwH,EAAS2f,kBAE/BhoB,KAAKywD,kCACH5vD,KACIuiB,EAASsI,wBAAyB,KACtC7qB,EAAOgH,YAAYjH,OAGnB6sD,EAAoBplD,EAAS4f,kBAE/BjoB,KAAKywD,kCACHhD,KACIrqC,EAASsI,wBAAyB,KACtC+hC,EAAO5lD,YAAYjH,yGAQ/B,OAAO,GAGTuqD,EAAAlpD,UAAAovD,4BAAA,SACExpD,EACA3D,EACAwnB,EACA8lC,QADA,IAAA9lC,MAAA,WACA,IAAA8lC,MAAA,MAGAxxD,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfvf,EAAYzD,QAOhB+mD,EAAAlpD,UAAA4vD,iBAAA,SAAiBxrB,EAAoByrB,QAAA,IAAAA,MAAA,GACnC,IAAI1iC,EAAeq9B,UAAUzsD,KAAKovB,aAAc0iC,GAC5CvrB,EAAU9sB,EAAA2sB,cAAczkC,OAAO0kC,EAAQjX,GAG3C,OAFApvB,KAAKwrD,eAAehmC,KAAK+gB,GACzBvmC,KAAKovB,aAAe65B,QAAQ75B,EAAc9P,QAAQ+mB,EAAOx/B,OAAQ,IAC1D0/B,GAMT4kB,EAAAlpD,UAAA8vD,yBAAA,SAAyB/gB,GAEvB,GADA/+B,OAAO++B,EAAKntC,GAAGxB,EAAAsB,YAAY6pD,WACvBxc,EAAK/kB,oBAAsB,EAC7B,OAAO+kB,EAAK/kB,mBAEd,IAAIy/B,EAAgB1rD,KAAK0rD,cACrBtgC,EAAQsgC,EAAc7kD,OAO1B,OANKmqC,EAAKntC,GAAGxB,EAAAsB,YAAYquD,aAAehhB,EAAK5hC,UAAUsvC,mBAAqB1N,EAAK5hC,UAAUyU,eAAehd,SAExGmqC,EAAOhxC,KAAKstD,iBAAiBtc,IAE/B0a,EAAclmC,KAAKwrB,EAAKhlB,KACxBglB,EAAK/kB,mBAAqBb,EACnBA,GAKT+/B,EAAAlpD,UAAA+sD,iBAAA,SAAiB1iD,GACf,IACI5G,EADA/F,EAASK,KAAKL,OAElB,OAAQ2M,EAAU1J,MAChB,KAAK4W,EAAA/W,SAASuS,MACZtP,EAAO1F,KAAKiyD,sBAAsC3lD,GAClD,MAEF,KAAKkN,EAAA/W,SAASuU,MACZtR,EAAO1F,KAAKkyD,sBAAsC5lD,GAClD,MAEF,KAAKkN,EAAA/W,SAASwU,SACZvR,EAAO1F,KAAKmyD,yBAA4C7lD,GACxD,MAEF,KAAKkN,EAAA/W,SAASyU,GACZxR,EAAO1F,KAAKoyD,mBAAgC9lD,GAC5C,MAEF,KAAKkN,EAAA/W,SAAS0U,MACZzR,EAAO1F,KAAKqyD,sBAAsC/lD,GAClD,MAEF,KAAKkN,EAAA/W,SAAS+U,WACZ9R,EAAO1F,KAAKsyD,2BAAgDhmD,GAC5D,MAEF,KAAKkN,EAAA/W,SAASkV,IACZjS,EAAO1F,KAAKuyD,oBAAkCjmD,GAC9C,MAEF,KAAKkN,EAAA/W,SAASmV,GACZlS,EAAO1F,KAAKwyD,mBAAgClmD,GAC5C,MAEF,KAAKkN,EAAA/W,SAASuV,OACZtS,EAAO1F,KAAKyyD,uBAAwCnmD,GACpD,MAEF,KAAKkN,EAAA/W,SAASyV,OACZxS,EAAO1F,KAAK0yD,uBAAwCpmD,GACpD,MAEF,KAAKkN,EAAA/W,SAAS0V,MACZzS,EAAO1F,KAAK2yD,sBAAsCrmD,GAClD,MAEF,KAAKkN,EAAA/W,SAAS2V,IACZ1S,EAAO1F,KAAK4yD,oBAAkCtmD,GAC9C,MAEF,KAAKkN,EAAA/W,SAAS8T,UACZ7Q,EAAO1F,KAAK6uD,yBAA4CviD,MAC7C5G,EAAO/F,EAAOusC,aACzB,MAEF,KAAK1yB,EAAA/W,SAAS8V,KACZ7S,EAAO1F,KAAK6yD,qBAAoCvmD,GAChD,MAEF,KAAKkN,EAAA/W,SAAS+V,MACZ9S,EAAO1F,KAAK8yD,sBAAsCxmD,GAClD,MAEF,KAAKkN,EAAA/W,SAAS4V,gBAGZ,GAAIrY,KAAK4wB,iBAAmB5wB,KAAKosD,sBAC/B,OAAOzsD,EAAOusC,YAIlB,QACEj6B,QAAO,GACPvM,EAAO/F,EAAOytC,oBAIlB,OADIptC,KAAKqe,QAAQkQ,WAAWvuB,KAAK+yD,iBAAiBrtD,EAAM4G,EAAUlI,OAC3DsB,GAGTylD,EAAAlpD,UAAAgvD,kBAAA,SAAkB1lD,GAChB,IAAIynD,EAAgBznD,EAAW1E,OAC3BmqD,EAAQ,IAAIh7C,MAAqBg9C,GACrChC,EAAMnqD,OAAS,EAEf,IADA,IAAI2mB,EAAOxtB,KAAK4wB,gBAAgBpD,KACvBntB,EAAI,EAAGA,EAAI2yD,IAAiB3yD,EAAG,CACtC,IAAIqF,EAAO1F,KAAKgvD,iBAAiBzjD,EAAWlL,IAC5C,OAAQoZ,EAAA2Z,gBAAgB1tB,IACtB,KAAK+T,EAAA4Z,aAAa4E,MAChB,IAAKxe,EAAAye,aAAaxyB,GAAO,CACvB,IAAK,IAAI4a,EAAI,EAAG1Z,EAAI6S,EAAA0e,mBAAmBzyB,GAAO4a,EAAI1Z,IAAK0Z,EAAG0wC,EAAMxrC,KAAK/L,EAAA4e,cAAc3yB,EAAM4a,IACzF,MAIJ,QAAS0wC,EAAMxrC,KAAK9f,GACpB,KAAK+T,EAAA4Z,aAAa4/B,KAEpB,GAAIzlC,EAAKzpB,MAAK,IAA6B,CACrC0V,EAAAwiC,yBAAyBv2C,IAAOsrD,EAAMxrC,KAAKxlB,KAAKL,OAAOytC,qBAC3D,OAGJ,OAAO4jB,GAGT7F,EAAAlpD,UAAAgwD,sBAAA,SAAsB3lD,GACpB,IAAIf,EAAae,EAAUf,WACvBslB,EAAa7wB,KAAK4wB,gBAAgBpD,KAClCA,EAAOqD,EAAWO,OACtBpxB,KAAK4wB,gBAAgBpD,KAAOA,EAE5B,IAAIwjC,EAAQhxD,KAAKixD,kBAAkB1lD,GAC/B7F,EAAuB,GAAhBsrD,EAAMnqD,OACb7G,KAAKL,OAAOusC,YACI,GAAhB8kB,EAAMnqD,OACJmqD,EAAM,GACNhxD,KAAKL,OAAO4rC,YAAY,KAAMylB,EAAMv3C,EAAA8d,kBAAkBy5B,EAAMA,EAAMnqD,OAAS,KAIjF,OAFA7G,KAAK4wB,gBAAgBpD,KAAOA,EAAK+D,OACjCV,EAAW6B,QAAQlF,GACZ9nB,GAGTylD,EAAAlpD,UAAAiwD,sBAAA,SAAsB5lD,GACpB,IAAI3M,EAASK,KAAKL,OAClB,GAAI2M,EAAUZ,MAKZ,OAJA1L,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACf9a,EAAUZ,MAAMtH,OAEXzE,EAAOytC,oBAEhB,IAAI5f,EAAOxtB,KAAK4wB,gBAAgBpD,KAC5BuD,EAAavD,EAAKuD,WACtB,OAAkB,MAAdA,GACF/wB,KAAKqhB,MACH/H,EAAAgI,eAAe4xC,qFACf5mD,EAAUlI,OAELzE,EAAOytC,sBAEhB5f,EAAKxpB,IAAG,GACDrE,EAAO+rC,YAAY3a,KAG5Bo6B,EAAAlpD,UAAAkwD,yBAAA,SAAyB7lD,GACvB,IAAI3M,EAASK,KAAKL,OACd+L,EAAQY,EAAUZ,MACtB,GAAIA,EAKF,OAJA1L,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACf1b,EAAMtH,OAEDzE,EAAOytC,oBAGhB,IAAI5f,EAAOxtB,KAAK4wB,gBAAgBpD,KAC5BsD,EAAgBtD,EAAKsD,cACzB,OAAqB,MAAjBA,GACF9wB,KAAKqhB,MACH/H,EAAAgI,eAAe6xC,8EACf7mD,EAAUlI,OAELzE,EAAOytC,sBAEhB5f,EAAKxpB,IAAG,IACDrE,EAAO+rC,YAAY5a,KAG5Bq6B,EAAAlpD,UAAAmwD,mBAAA,SAAmB9lD,GACjB,IAAIskB,EAAkB5wB,KAAK4wB,gBACvBjxB,EAASK,KAAKL,OAEd+L,EAAQklB,EAAgBzC,oBACxB0C,EAAaD,EAAgBpD,KAC7BA,EAAOqD,EAAWO,OACtBR,EAAgBpD,KAAOA,EACvB,IAAIuD,EAAa,SAAWrlB,EAC5B8hB,EAAKuD,WAAaA,EAClB,IAAID,EAAgB,YAAcplB,EAClC8hB,EAAKsD,cAAgBA,EAErB,IAAIzhB,EAAOrP,KAAKgvD,iBAAiB1iD,EAAUA,WACvC8mD,EAAWpzD,KAAKqzD,cAClBrzD,KAAK+vD,kBAAkBzjD,EAAUjC,UAAWkP,EAAA+E,KAAKG,IAAG,KACpDze,KAAKurD,aAKP36B,EAAgBpD,KAAOA,EAAK+D,OAC5BX,EAAgBvC,oBAChB,IAAIilC,EAAa9lC,EAAKzpB,MAAK,IAC3BypB,EAAK2D,MACH,KAKFN,EAAW6B,QAAQlF,GAEnB,IAAI+lC,GACF5zD,EAAOmsC,WAAWhb,EAChBwiC,EACIjkD,EACA1P,EAAO4rC,YAAY,MACjBl8B,EACA1P,EAAO+rC,YAAY5a,EAAesiC,IACnC,KAIT,OADIE,GAAYC,EAAM/tC,KAAK7lB,EAAOytC,qBAC3BztC,EAAO4rC,YAAYxa,EAAYwiC,IAGxCpI,EAAAlpD,UAAAowD,sBAAA,SAAsB/lD,GACpB,OAAOtM,KAAKL,OAAOusC,aAGrBif,EAAAlpD,UAAAqwD,2BAAA,SAA2BhmD,GACzB,IAAIlG,EAAOpG,KAAK+vD,kBAAkBzjD,EAAUrF,WAAYsS,EAAA+E,KAAKc,KAAI,KAKjE,OAJIpf,KAAKurD,aAAehyC,EAAA+E,KAAKc,OAC3BhZ,EAAOpG,KAAKL,OAAOisC,WAAWxlC,GAC9BpG,KAAKurD,YAAchyC,EAAA+E,KAAKc,MAEnBhZ,GAGT+kD,EAAAlpD,UAAAswD,oBAAA,SAAoBjmD,GAGlB,IAAIskB,EAAkB5wB,KAAK4wB,gBACvBllB,EAAQklB,EAAgBzC,oBACxB0C,EAAaD,EAAgBpD,KAC7BA,EAAOqD,EAAWO,OACtBR,EAAgBpD,KAAOA,EACvB,IAAIuD,EAAavD,EAAKuD,WAAa,SAAWrlB,EAC9C8hB,EAAKuD,WAAaA,EAClB,IAAID,EAAgB,YAAcplB,EAClC8hB,EAAKsD,cAAgBA,EACrB,IAAI0iC,EAAc,UAAY9nD,EAG1B/L,EAASK,KAAKL,OACdyvD,EAAW9iD,EAAUvH,YACrB/E,KAAKgvD,iBAA4B1iD,EAAUvH,aAC3C,EACAquD,EAA0B,EAC1BK,GAAa,EACjB,GAAInnD,EAAUjC,UAAW,CACvB+oD,EAAWpzD,KAAKqzD,cACdrzD,KAAKyvD,4BAAwCnjD,EAAUjC,UAAWkP,EAAA+E,KAAKW,KAAI,GAC3Ejf,KAAKurD,aAGP,IAAImI,EAAU/zD,EAAO0yC,qBAAqB+gB,GACtC35C,EAAA2Z,gBAAgBsgC,IAAYj6C,EAAA4Z,aAAa6C,QAC3CjkB,OAAiC,GAA1BwH,EAAA8d,kBAAkBm8B,IACQ,GAA7Bj6C,EAAA0c,iBAAiBu9B,KAAeD,GAAa,IAKnDL,EAAWpzD,KAAKqzD,cACdrzD,KAAKyvD,4BAAwCnjD,EAAUjC,UAAWkP,EAAA+E,KAAKW,KAAI,GAC3Ejf,KAAKurD,kBAIP6H,EAAWzzD,EAAOqoC,UAAU,GAC5ByrB,GAAa,EAEf,IAAIE,EAAWrnD,EAAU2C,YACrBjP,KAAK+vD,kBAA8BzjD,EAAU2C,YAAasK,EAAA+E,KAAKc,KAAI,KACnE,EACAw0C,EAAgBtnD,EAAUA,UAC1BunD,EAAWD,EAAchxD,MAAQ4W,EAAA/W,SAASuS,OAA8D,GAApC4+C,EAAeroD,WAAW1E,OAC9F7G,KAAKgvD,iBAAkC4E,EAAeroD,WAAW,IACjEvL,KAAKgvD,iBAAiB4E,GAG1BhjC,EAAgBpD,KAAOA,EAAK+D,OAC5BX,EAAgBvC,oBAChB,IAAIylC,EAAetmC,EAAKzpB,MAAM,KAC9BypB,EAAK2D,MACH,KAKEsiC,EAAY5iC,EAAW6B,QAAQlF,GAC9BqD,EAAW+B,mBAAmBpF,GAEnC,IAAIumC,EAAa,IAAI/9C,MACjBo5C,GAAU2E,EAAWvuC,KAAK4pC,GAE9B,IAAI4E,EAAc,IAAIh+C,MAuBtB,OAtBI89C,EACFE,EAAYxuC,KACV7lB,EAAO4rC,YAAYza,GACjBnxB,EAAO+rC,YAAY3a,EAAYpxB,EAAOipC,YAAYnvB,EAAAwd,QAAQC,OAAQk8B,IAClES,GACD,KAGHG,EAAYxuC,KACV7lB,EAAO+rC,YAAY3a,EAAYpxB,EAAOipC,YAAYnvB,EAAAwd,QAAQC,OAAQk8B,KAEpEY,EAAYxuC,KAAKquC,IAEfF,GAAUK,EAAYxuC,KAAKmuC,GAC/BK,EAAYxuC,KACV7lB,EAAO+rC,YAAY8nB,IAGrBO,EAAWvuC,KACT7lB,EAAOmsC,WAAW0nB,EAAa7zD,EAAO4rC,YAAY,KAAMyoB,EAAW,KAG9Dr0D,EAAO4rC,YAAYxa,EAAYgjC,IAGxC5I,EAAAlpD,UAAAuwD,mBAAA,SAAmBlmD,GACjB,IAAI3M,EAASK,KAAKL,OACdixB,EAAkB5wB,KAAK4wB,gBACvB5iB,EAAS1B,EAAU0B,OACnBC,EAAU3B,EAAU2B,QAGpBmlD,EAAWpzD,KAAKqzD,cAClBrzD,KAAKyvD,4BAA4BnjD,EAAUjC,UAAWkP,EAAA+E,KAAKW,KAAI,GAC/Djf,KAAKurD,aAGP,IACGvrD,KAAKqe,QAAQmB,eACdxf,KAAK4wB,gBAAgB7sB,MAAM1B,EAAAsB,YAAY8f,QAAUphB,EAAAsB,YAAYswD,iBAC7D,CAEA,IAAIC,EAAkBv0D,EAAO0yC,qBAAqB+gB,GAClD,GACE35C,EAAA2Z,gBAAgB8gC,IAAoBz6C,EAAA4Z,aAAa6C,OACf,GAAlCzc,EAAA8d,kBAAkB28B,GAElB,OAAOz6C,EAAA0c,iBAAiB+9B,GACpBl0D,KAAKgvD,iBAAiBhhD,GACtBC,EACEjO,KAAKgvD,iBAAiB/gD,GACtBtO,EAAOusC,YAIbknB,EAAWpzD,KAAKqzD,cACdrzD,KAAKyvD,4BAA4BnjD,EAAUjC,UAAWkP,EAAA+E,KAAKW,KAAI,GAC/Djf,KAAKurD,aAMX,IAAI16B,EAAaD,EAAgBpD,KAC7B2mC,EAAatjC,EAAWO,OAC5BR,EAAgBpD,KAAO2mC,EACvB,IAAIC,EAAap0D,KAAKgvD,iBAAiBhhD,GACvC4iB,EAAgBpD,KAAO2mC,EAAW5iC,OAElC,IAAI8iC,EAA6B,EACjC,GAAIpmD,EAAS,CACX,IAAIqmD,EAAczjC,EAAWO,OAC7BR,EAAgBpD,KAAO8mC,EACvBD,EAAcr0D,KAAKgvD,iBAAiB/gD,GACpC2iB,EAAgBpD,KAAO8mC,EAAY/iC,OACnCV,EAAWgC,cAAcshC,EAAYG,QAErCzjC,EAAW+B,mBAAmBuhC,GAEhC,OAAOx0D,EAAOqsC,SAASonB,EAAUgB,EAAYC,IAG/ClJ,EAAAlpD,UAAAwwD,uBAAA,SAAuBnmD,GACrB,IAAI3M,EAASK,KAAKL,OACdixB,EAAkB5wB,KAAK4wB,gBACvBxqB,EAAsB,EACtBonB,EAAOoD,EAAgBpD,KAK3B,GAFAA,EAAKxpB,IAAG,GAEJsI,EAAUhL,MAAO,CACnB,IAAI8D,EAAaooB,EAAKpoB,WACtB,GAAIA,GAAcmU,EAAA+E,KAAKc,KAOrB,OANApf,KAAKyvD,4BAA4BnjD,EAAUhL,MAAO8D,EAAU,GAC5DpF,KAAKqhB,MACH/H,EAAAgI,eAAeouC,mCACfpjD,EAAUhL,MAAM8C,MAAOpE,KAAKurD,YAAY3mC,WAAYxf,EAAWwf,YAEjE5kB,KAAKurD,YAAchyC,EAAA+E,KAAKc,KACjBzf,EAAOytC,oBAEhBhnC,EAAOpG,KAAK+vD,kBACVzjD,EAAUhL,MACV8D,EAAU,EAEVwrB,EAAgB/sB,GAAGxB,EAAAsB,YAAY8hB,eAC5B,EACA,GAIA+H,EAAK2F,YAAY/sB,EAAMhB,IAAaooB,EAAKxpB,IAAG,GAInD,OAAIwV,EAAAzE,gBAAgBzI,GAAmBlG,GAAczG,EAAOusC,YAGrD1e,EAAK3pB,GAAE,MACVlE,EAAO+rC,YAAYz5B,OAAOub,EAAKwD,aAAc,EAAG5qB,GAChDzG,EAAOysC,aAAahmC,IAG1B+kD,EAAAlpD,UAAAywD,uBAAA,SAAuBpmD,GACrB,IAAI3M,EAASK,KAAKL,OACdixB,EAAkB5wB,KAAK4wB,gBAEvB9gB,EAAQxD,EAAUwD,MAClBykD,EAAWzkD,EAAMjJ,OACrB,IAAK0tD,EACH,OAAOv0D,KAAK+vD,kBAAkBzjD,EAAUjC,UAAWkP,EAAA+E,KAAKc,KAAI,KAI9D,IAAIo1C,EAAU5jC,EAAgBzC,oBAC1B0C,EAAaD,EAAgBpD,KAG7BinC,EAAY7jC,EAAgBjD,aAAapU,EAAA+E,KAAKQ,KAAK,GACnD41C,EAAiBD,EAAUrpC,MAG3BupC,EAAS,IAAI3+C,MAAqB,EAAIu+C,GAC1CI,EAAO,GAAKh1D,EAAOwrC,eACjBupB,EACA10D,KAAK+vD,kBAAkBzjD,EAAUjC,UAAWkP,EAAA+E,KAAKQ,IAAG,MAMtD,IAFA,IAAI81C,EAAa,EACbC,GAAgB,EACXx0D,EAAI,EAAGA,EAAIk0D,IAAYl0D,EAAG,CACjC,IACIqL,EADQoE,EAAMzP,GACAqL,MACdA,EACFipD,EAAOC,KAAgBj1D,EAAO+rC,YAAY,OAASrrC,EAAEukB,SAAS,IAAM,IAAM4vC,EACxE70D,EAAOopC,aAAatvB,EAAAsa,SAASC,MAC3Br0B,EAAO0pC,eAAeqrB,EAAc,GACpC10D,KAAK+vD,kBAAkBrkD,EAAO6N,EAAA+E,KAAKQ,IAAG,OAI1C+1C,EAAex0D,EAInBuwB,EAAgB3C,cAAcwmC,GAG9BE,EAAOC,GAAcj1D,EAAO+rC,aAAampB,GAAgB,EACnD,OAASA,EAAajwC,SAAS,IAC/B,SACA,IAAM4vC,GAGZ,IAAIM,EAAen1D,EAAO4rC,YAAY,SAAWipB,EAASG,EAAM,GAC5DI,GAAgB,EAChBC,GAAuB,EACvBC,GAAe,EACfC,GAAkB,EACtB,IAAS70D,EAAI,EAAGA,EAAIk0D,IAAYl0D,EAAG,CACjC,IACIkL,EADQuE,EAAMzP,GACKkL,WACnBynD,EAAgBznD,EAAW1E,OAG3B2mB,EAAOqD,EAAWO,OACtBR,EAAgBpD,KAAOA,EACvB,IAAIuD,EAAa,SAAWyjC,EAC5BhnC,EAAKuD,WAAaA,EAElB,IAAIokC,EAAS90D,GAAKk0D,EAAW,EACzBa,EAAYD,EAASpkC,EAAa,QAAU1wB,EAAI,GAAGukB,SAAS,IAAM,IAAM4vC,EACxExD,EAAQ,IAAIh7C,MAAqB,EAAIg9C,GACzChC,EAAM,GAAK8D,EAGX,IAFA,IAAIO,EAAQ,EACR/B,GAAa,EACRhzC,EAAI,EAAGA,EAAI0yC,IAAiB1yC,EAAG,CACtC,IAAI5a,EAAO1F,KAAKgvD,iBAAiBzjD,EAAW+U,IAC5C,GAAI7G,EAAA2Z,gBAAgB1tB,IAAS+T,EAAA4Z,aAAa4/B,MACxCjC,EAAMqE,KAAW3vD,EACb8nB,EAAKzpB,MAAK,KAA6B,CACzCuvD,GAAa,EACb,OAINtC,EAAMnqD,OAASwuD,GACX/B,GAAc6B,KACX3nC,EAAK3pB,GAAE,KAAqBkxD,GAAgB,GAC5CvnC,EAAK3pB,GAAE,KAA6BmxD,GAAuB,GAC3DxnC,EAAK3pB,GAAE,KAAoBoxD,GAAe,GAC1CznC,EAAK3pB,GAAE,MAAuBqxD,GAAkB,IAIvD1nC,EAAK2D,MACH,KAGFP,EAAgBpD,KAAOA,EAAK+D,OAC5BujC,EAAen1D,EAAO4rC,YAAY6pB,EAAWpE,EAAK,GAWpD,OATApgC,EAAgBvC,oBAGZwmC,GAAgB,IACdE,GAAelkC,EAAW7sB,IAAG,GAC7BgxD,GAAsBnkC,EAAW7sB,IAAG,GACpCixD,GAAcpkC,EAAW7sB,IAAG,GAC5BkxD,GAAiBrkC,EAAW7sB,IAAG,KAE9B8wD,GAGT3J,EAAAlpD,UAAA0wD,sBAAA,SAAsBrmD,GACpB,IAAIkhB,EAAOxtB,KAAK4wB,gBAAgBpD,KAShC,OANAA,EAAKxpB,IAAG,GAGRwpB,EAAKxpB,IAAG,GAGDumD,EAAA+K,aAAat1D,KAAM,KAAMsM,IAGlC6+C,EAAAlpD,UAAA2wD,oBAAA,SAAoBtmD,GAQlB,OAJAtM,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACf9a,EAAUlI,OAELpE,KAAKL,OAAOytC,qBAOrB+d,EAAAlpD,UAAA4sD,yBAAA,SAAyBviD,EAA8BipD,QAAA,IAAAA,OAAA,GACrD,IAAIvrC,EAAUhqB,KAAKgqB,QACf4G,EAAkB5wB,KAAK4wB,gBACvBtiB,EAAehC,EAAUgC,aACzBknD,EAAkBlnD,EAAazH,OAGnC,GAAI0uD,GACF3kC,GAAmB5wB,KAAKosD,uBACxB9/C,EAAU7I,QAAU6I,EAAU7I,OAAOb,MAAQ4W,EAAA/W,SAAS6S,OACrD,CAMD,IAAK,IAAIjV,EAAI,EAAGA,EAAIm1D,IAAmBn1D,EACrCL,KAAKivD,yBAAyB3gD,EAAajO,IAE7C,OAAO,EAIT,IAAIo1D,EAAe,IAAIz/C,MACnBwX,EAAOxtB,KAAK4wB,gBAAgBpD,KAC5B/P,EAAWzd,KAAKyd,SACpB,IAASpd,EAAI,EAAGA,EAAIm1D,IAAmBn1D,EAAG,CACxC,IAAIwH,EAAcyG,EAAajO,GAC3BO,EAAOiH,EAAYjH,KAAKoF,KACxB3B,EAAoB,KACpB+qD,EAA0B,EAC9B,GAAIvnD,EAAYxD,KAAM,CAKpB,KAJAA,EAAOoZ,EAAS6xC,YACdznD,EAAYxD,KACZmpB,EAAK9B,0BAEI,SACP7jB,EAAY9C,cACdqqD,EAAWpvD,KAAK+vD,kBACdloD,EAAY9C,YACZV,EAAI,UAKH,KAAIwD,EAAY9C,YAchB,CACL/E,KAAKqhB,MACH/H,EAAAgI,eAAeiuC,cACf1nD,EAAYjH,KAAKwD,MAAMorD,OAEzB,SAbA,GALAJ,EAAWpvD,KAAKyvD,4BACd5nD,EAAY9C,YACZwU,EAAA+E,KAAKc,KAAI,GAGPpf,KAAKurD,aAAehyC,EAAA+E,KAAKc,KAAM,CACjCpf,KAAKqhB,MACH/H,EAAAgI,eAAeouC,mCACf7nD,EAAYzD,MAAOpE,KAAKurD,YAAY3mC,WAAY,UAElD,SAEFvgB,EAAOrE,KAAKurD,YAQd,IAAImK,GAAY,EAChB,GAAI7tD,EAAYhE,GAAGxB,EAAAsB,YAAYkmB,OAC7B,GAAIulC,EAEF,GADAA,EAAWpvD,KAAKL,OAAO0yC,qBAAqB+c,GACxC31C,EAAA2Z,gBAAgBg8B,IAAa31C,EAAA4Z,aAAa6C,MAAO,CACnD,IAAIrJ,EAAQ,IAAI4vB,EAAAtxB,MAAMnB,EAASppB,GAAO,EAAGyD,GACzC,OAAQoV,EAAA8d,kBAAkB63B,IACxB,OACEviC,EAAQA,EAAM3I,yBACZ5E,QACE7F,EAAA0c,iBAAiBi5B,GACjB,IAGJ,MAEF,OACEviC,EAAQA,EAAM3I,yBACZ5E,QACE7F,EAAA+d,oBAAoB43B,GACpB31C,EAAA68B,qBAAqB8Y,KAGzB,MAEF,OACEviC,EAAQA,EAAMzI,uBAA4B3K,EAAAge,iBAAiB23B,IAC3D,MAEF,OACEviC,EAAQA,EAAMzI,uBAAuB3K,EAAAie,iBAAiB03B,IACtD,MAEF,QAEE,OADAn9C,QAAO,GACAjS,KAAKL,OAAOytC,oBAIvB,IAAIzc,EAAeC,EAAgBpD,KAAKmD,aACxC,GAAKA,GACA,GAAIA,EAAazN,IAAItiB,GAKxB,OAJAZ,KAAKqhB,MACH/H,EAAAgI,eAAe+B,uBACfxb,EAAYjH,KAAKwD,MAAOxD,GAEnBZ,KAAKL,OAAOytC,yBANFxc,EAAgBpD,KAAKmD,aAAeA,EAAe,IAAIxU,IAQ1EwU,EAAa3sB,IAAIpD,EAAMisB,GACvB6oC,GAAY,OAEZ11D,KAAKw7B,QACHliB,EAAAgI,eAAe0uC,4DACfnoD,EAAYzD,YAIhBpE,KAAKqhB,MACH/H,EAAAgI,eAAeq0C,wCACf9tD,EAAYzD,OAIlB,IAAKsxD,EAAW,CACV7oC,OAAK,EAKPA,EAHAhlB,EAAY9D,MAAM1B,EAAAsB,YAAYm9C,IAAMz+C,EAAAsB,YAAYkmB,QAChD2D,EAAK3pB,GAAE,MAEC2pB,EAAKkE,eAAertB,EAAMzD,GAAM,EAAOiH,GAEvC+oB,EAAgBlD,SAASrpB,EAAMzD,EAAMiH,GAE3CunD,GACFqG,EAAajwC,KAAKxlB,KAAK41D,2BAA2B/tD,EAAYjH,KAAMwuD,IAChEviC,EAAMxoB,KAAKR,GAAG,KAChB2pB,EAAKQ,gBAAgBnB,EAAMzB,OAAQoC,EAAK2F,YAAYi8B,EAAU/qD,KAEvDwoB,EAAMxoB,KAAKR,GAAG,KACvB2pB,EAAKQ,gBAAgBnB,EAAMzB,OAAO,IAIxC,OAAOqqC,EAAa5uD,OACO,GAAvB4uD,EAAa5uD,OACX4uD,EAAa,GACbz1D,KAAKL,OAAO4rC,YAAY,KAAMkqB,EAAY,GAC5C,GAGNtK,EAAAlpD,UAAA4wD,qBAAA,SAAqBvmD,GACnB,OAAOtM,KAAK+vD,kBAAkBzjD,EAAUrF,WAAYsS,EAAA+E,KAAKc,KAAI,MAG/D+rC,EAAAlpD,UAAA6wD,sBAAA,SAAsBxmD,GACpB,IAAI3M,EAASK,KAAKL,OAGdyzD,EAAWpzD,KAAKqzD,cAClBrzD,KAAKyvD,4BAA4BnjD,EAAUjC,UAAWkP,EAAA+E,KAAKW,KAAI,GAC/Djf,KAAKurD,aAGP,IACGvrD,KAAKqe,QAAQmB,eACdxf,KAAK4wB,gBAAgB7sB,MAAM1B,EAAAsB,YAAY8f,QAAUphB,EAAAsB,YAAYswD,iBAC7D,CAEA,IAAIC,EAAkBv0D,EAAO0yC,qBAAqB+gB,GAClD,GACE35C,EAAA2Z,gBAAgB8gC,IAAoBz6C,EAAA4Z,aAAa6C,OACf,GAAlCzc,EAAA8d,kBAAkB28B,IAElB,IAAKz6C,EAAA0c,iBAAiB+9B,GAAkB,OAAOv0D,EAAOusC,iBAItDknB,EAAWpzD,KAAKqzD,cACdrzD,KAAKyvD,4BAA4BnjD,EAAUjC,UAAWkP,EAAA+E,KAAKW,KAAI,GAC/Djf,KAAKurD,aAMX,IAAI36B,EAAkB5wB,KAAK4wB,gBACvBllB,EAAQklB,EAAgBzC,oBACxB0C,EAAaD,EAAgBpD,KAC7BA,EAAOqD,EAAWO,OACtBR,EAAgBpD,KAAOA,EACvB,IAAIuD,EAAa,SAAWrlB,EAC5B8hB,EAAKuD,WAAaA,EAClB,IAAID,EAAgB,YAAcplB,EAClC8hB,EAAKsD,cAAgBA,EAErB,IAAIzhB,EAAOrP,KAAKgvD,iBAAiB1iD,EAAUA,WAEvCgnD,EAAa9lC,EAAKzpB,MAAK,IAc3B,OAXA6sB,EAAgBpD,KAAOA,EAAK+D,OAC5BX,EAAgBvC,oBAChBb,EAAK2D,MACH,KAMGN,EAAW+B,mBAAmBpF,GAE5B7tB,EAAO4rC,YAAYxa,GACxBpxB,EAAOmsC,WAAWhb,EAChBnxB,EAAOqsC,SAASonB,EACdE,EACIjkD,EACA1P,EAAO4rC,YAAY,MACjBl8B,EACA1P,EAAO+rC,YAAY5a,IACpB,QAabq6B,EAAAlpD,UAAA4zD,sBAAA,SACExtD,EACAytD,EACAC,GAEA9jD,OAAO5J,EAAQxE,GAAGxB,EAAAsB,YAAYqnB,UAC9B,IAAI3mB,EAAOgE,EAAQhE,KACnB,QACG0xD,GACD1xD,EAAKR,GAAE,IACPiyD,EAAejyD,GAAE,IACjBQ,EAAKoyB,KAAOq/B,EAAer/B,MACtBz2B,KAAKurD,YAAcuK,GAAgBlzD,MACnC5C,KAAKurD,YAAclnD,GAAMzB,MAE9B,OACA,OACE,IAAI4zB,EAAQnyB,EAAKg5C,yBAAyB9jC,EAAA+E,KAAKG,KAC/C,OAAOze,KAAKL,OAAOqoC,UACQ,GAAzB3/B,EAAQyiB,kBACJwlB,QAAQjoC,EAAQ0iB,uBAAyByL,GAASA,EAClD,GAGR,OACA,OACA,QACE,IAAIw/B,EAAO3tD,EAAQhE,KAAKiyB,wBAAwB/c,EAAA+E,KAAKG,KACrD,OAAOze,KAAKL,OAAOqoC,UACQ,GAAzB3/B,EAAQyiB,kBACJwlB,QAAQjoC,EAAQ0iB,sBAAwBirC,EACxC,GAGR,OACA,OACE,OAAOh2D,KAAKL,OAAOqoC,UACQ,GAAzB3/B,EAAQyiB,kBACJwlB,QAAQjoC,EAAQ0iB,sBAChB,GAGR,OACA,OACE,IAAK1iB,EAAQ2hB,QAAQ3L,QAAQkB,SAC3B,OAAOvf,KAAKL,OAAOqoC,UACQ,GAAzB3/B,EAAQyiB,kBACJwlB,QAAQjoC,EAAQ0iB,sBAChB,GAKV,OACA,OACE,OAAgC,GAAzB1iB,EAAQyiB,kBACX9qB,KAAKL,OAAOyoC,UACVkI,QAAQjoC,EAAQ0iB,sBAChBwlB,SAASloC,EAAQ0iB,uBAEnB/qB,KAAKL,OAAOyoC,UAAU,GAE5B,QAEE,IAAM//B,EAAQ2c,aAAay3B,EAAAxgC,eAAe7J,UAAY0jD,GAAkBv8C,EAAA+E,KAAKY,IAC3E,OAAOlf,KAAKL,OAAO+oC,UAAgCrgC,EAAS4iB,oBAG9DjrB,KAAKurD,YAAchyC,EAAA+E,KAAKY,IAE1B,QACE,OAAOlf,KAAKL,OAAO6oC,UAAgCngC,EAAS4iB,oBAE9D,QAEE,OADAhZ,QAAO,GACAjS,KAAKL,OAAOytC,sBAKzB+d,EAAAlpD,UAAA8tD,kBAAA,SACE9oD,EACA6uD,EACAG,EACAC,GAIA,IAAI9vD,EAFJpG,KAAKurD,YAAcuK,EAGnB,IACA,OAAQ7uD,EAAWrE,MACjB,KAAK4W,EAAA/W,SAASmR,UACZxN,EAAOpG,KAAKm2D,2BAAgDlvD,EAAY6uD,GACxE,MAEF,KAAKt8C,EAAA/W,SAASoR,OACZzN,EAAOpG,KAAKo2D,wBAA0CnvD,EAAY6uD,GAClE,MAEF,KAAKt8C,EAAA/W,SAASU,KAEZiD,EAAOpG,KAAKq2D,sBAAsCpvD,EAAY6uD,GAC9D,MAEF,KAAKt8C,EAAA/W,SAASsR,MACZ3N,EAAOpG,KAAKs2D,uBAAwCrvD,EAAY6uD,GAChE,MAEF,KAAKt8C,EAAA/W,SAASY,cACZ+C,EAAOpG,KAAKu2D,+BAAwDtvD,EAAY6uD,GAChF,MAEF,KAAKt8C,EAAA/W,SAASyR,SACZ9N,EAAOpG,KAAKw2D,0BAA8CvvD,EAAY6uD,GACtE,MAEF,KAAKt8C,EAAA/W,SAASS,WACd,KAAKsW,EAAA/W,SAASO,MACd,KAAKwW,EAAA/W,SAASK,KACd,KAAK0W,EAAA/W,SAASkS,KACd,KAAK6E,EAAA/W,SAASM,KACZqD,EAAOpG,KAAKy2D,4BACYxvD,EACtB6uD,EACc,GAAdG,GAEF,MAEF,KAAKz8C,EAAA/W,SAASW,MACZgD,EAAOpG,KAAK02D,uBACZ,MAEF,KAAKl9C,EAAA/W,SAAS0R,WACZ/N,EAAOpG,KAAK22D,4BAAkD1vD,EAAY6uD,GAC1E,MAEF,KAAKt8C,EAAA/W,SAASI,QACZuD,EAAOpG,KAAK42D,yBAA4C3vD,EAAY6uD,GACpE,MAEF,KAAKt8C,EAAA/W,SAAS4R,IACZjO,EAAOpG,KAAK62D,qBAAoC5vD,EAAY6uD,GAC5D,MAEF,KAAKt8C,EAAA/W,SAAS8R,cACZnO,EAAOpG,KAAK82D,+BAAwD7vD,EAAY6uD,GAChF,MAEF,KAAKt8C,EAAA/W,SAASa,eACZ8C,EAAOpG,KAAK+2D,gCACgB9vD,EAC1B6uD,EACc,GAAdG,GAEF,MAEF,KAAKz8C,EAAA/W,SAASgS,QACZrO,EAAOpG,KAAKg3D,yBAA4C/vD,EAAY6uD,GACpE,MAEF,KAAKt8C,EAAA/W,SAASoS,aACZzO,EAAOpG,KAAKi3D,8BAAsDhwD,EAAY6uD,GAC9E,MAEF,KAAKt8C,EAAA/W,SAASqS,YACZ1O,EAAOpG,KAAKk3D,6BAAoDjwD,EAAY6uD,GAC5E,MAEF,QACE91D,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAEbgC,EAAOpG,KAAKL,OAAOytC,qBAGrB,MAAO+pB,GACP,IAAIjqD,EAAgBjG,EAAW7C,MAAMiJ,OAAOJ,eAE5C,MADAmuB,QAAQC,IAAI,kDAAkDnuB,EAAa,aAAajG,EAAW7C,MAAMuqB,KAAI,YAAY1nB,EAAW7C,MAAMwqB,OAAM,KAC1IuoC,EAGR,IAAI5L,EAAcvrD,KAAKurD,YASvB,OARkB,GAAd0K,GAAyC1K,GAAeuK,GAC1D1vD,EAAOpG,KAAKo3D,kBAAkBhxD,EAAMmlD,EAAauK,EAAgBG,EAAgBC,EAAUjvD,GAC3FjH,KAAKurD,YAAcuK,GACF,GAARI,IACT9vD,EAAOpG,KAAKq3D,uBAAuBjxD,EAAMmlD,IAGvCvrD,KAAKqe,QAAQkQ,WAAWvuB,KAAK+yD,iBAAiB3sD,EAAMa,EAAW7C,OAC5DgC,GAGT+kD,EAAAlpD,UAAAwtD,4BAAA,SACExoD,EACA6uD,EACAI,GAEA,OAAOl2D,KAAK+vD,kBACV9oD,EACA6uD,GAAkBv8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLq3C,EAAc,EAElBI,IAIJ/K,EAAAlpD,UAAAowC,qBAAA,SACEprC,EACA6uD,EACAG,EACAC,GAEA,OAAOl2D,KAAKL,OAAO0yC,qBACjBryC,KAAK+vD,kBAAkB9oD,EAAY6uD,EAAgBG,EAAgBC,KAIvE/K,EAAAlpD,UAAAm1D,kBAAA,SACEhxD,EACA0xB,EACA5wB,EACA+uD,EACAC,EACA7H,GAEAp8C,OAAqB,GAAdgkD,GACP,IAAIt2D,EAASK,KAAKL,OAGlB,OAAiB,IAAbm4B,EAASl1B,MACXqP,OAAkB,IAAX/K,EAAOtE,MACd5C,KAAKqhB,MACH/H,EAAAgI,eAAeouC,mCACfrB,EAAWjqD,MAAO0zB,EAASlT,WAAY1d,EAAO0d,YAEzCjlB,EAAOytC,qBAID,IAAXlmC,EAAOtE,KAA8BjD,EAAOisC,WAAWxlC,IAEtD0xB,EAAShI,eAAe5oB,IACT,GAAd+uD,GACFj2D,KAAKqhB,MACH/H,EAAAgI,eAAeg2C,sDACfjJ,EAAWjqD,MAAO0zB,EAASlT,WAAY1d,EAAO0d,YAKhDkT,EAASj0B,GAAE,GAGTqD,EAAOrD,GAAE,GACM,IAAbi0B,EAASl1B,KAGI,IAAXsE,EAAOtE,OACTwD,EAAOzG,EAAOipC,YAAYnvB,EAAAwd,QAAQsgC,WAAYnxD,IAM5B,IAAXc,EAAOtE,OAChBwD,EAAOzG,EAAOipC,YAAYnvB,EAAAwd,QAAQugC,UAAWpxD,IAMtCc,EAAOrD,GAAE,GAMZuC,EAHW,IAAb0xB,EAASl1B,KACPsE,EAAOrD,GAAE,GACPqD,EAAOrD,GAAE,IACJlE,EAAOipC,YAAYnvB,EAAAwd,QAAQwgC,cAAerxD,GAE1CzG,EAAOipC,YAAYnvB,EAAAwd,QAAQygC,cAAetxD,GAG/Cc,EAAOrD,GAAE,IACJlE,EAAOipC,YAAYnvB,EAAAwd,QAAQ0gC,cAAevxD,GAE1CzG,EAAOipC,YAAYnvB,EAAAwd,QAAQ2gC,cAAexxD,GAMjDc,EAAOrD,GAAE,GACPqD,EAAOrD,GAAE,IACJlE,EAAOipC,YAAYnvB,EAAAwd,QAAQ4gC,cAAezxD,GAE1CzG,EAAOipC,YAAYnvB,EAAAwd,QAAQ6gC,cAAe1xD,GAG/Cc,EAAOrD,GAAE,IACJlE,EAAOipC,YAAYnvB,EAAAwd,QAAQ8gC,cAAe3xD,GAE1CzG,EAAOipC,YAAYnvB,EAAAwd,QAAQ+gC,cAAe5xD,IAOvD6L,OAAmB,GAAZ/K,EAAOxD,MAAyB,sBACvC0C,EAAOzG,EAAOisC,WAAWxlC,IAIlB0xB,EAASj0B,GAAE,IAAuBqD,EAAOrD,GAAE,GAKhDuC,EAFW,IAAXc,EAAOtE,KACLk1B,EAASj0B,GAAE,IACNlE,EAAOipC,YACZ9Q,EAASj0B,GAAE,GACP4V,EAAAwd,QAAQghC,gBACRx+C,EAAAwd,QAAQihC,gBACZ9xD,GAGKzG,EAAOipC,YACZ9Q,EAASj0B,GAAE,GACP4V,EAAAwd,QAAQkhC,gBACR1+C,EAAAwd,QAAQmhC,gBACZhyD,GAMA0xB,EAASj0B,GAAE,IACNlE,EAAOipC,YACZ9Q,EAASj0B,GAAE,GACP4V,EAAAwd,QAAQohC,gBACR5+C,EAAAwd,QAAQqhC,gBACZlyD,GAGKzG,EAAOipC,YACZ9Q,EAASj0B,GAAE,GACP4V,EAAAwd,QAAQshC,gBACR9+C,EAAAwd,QAAQuhC,gBACZpyD,GAQF0xB,EAASj0B,GAAE,IAGRqD,EAAOrD,GAAE,MACZuC,EAAOzG,EAAOipC,YAAYnvB,EAAAwd,QAAQwhC,QAASryD,IAIpCc,EAAOrD,GAAE,KAClBuC,EAAOzG,EAAOipC,YACZ1hC,EAAOrD,GAAE,GAAqB4V,EAAAwd,QAAQyhC,UAAYj/C,EAAAwd,QAAQ0hC,UAC1D34D,KAAKq3D,uBAAuBjxD,EAAM0xB,IAEpCo+B,EAAQ,GAKJp+B,EAASj0B,GAAE,KAETi0B,EAASrB,KAAOvvB,EAAOuvB,OACzBrwB,EAAOpG,KAAKq3D,uBAAuBjxD,EAAM0xB,GACzCo+B,EAAQ,GAMhBl2D,KAAKurD,YAAcrkD,EACJ,GAARgvD,EACHl2D,KAAKq3D,uBAAuBjxD,EAAMc,GAClCd,IAGN+kD,EAAAlpD,UAAAk0D,2BAAA,SAA2BlvD,EAAiC6uD,GAC1D,IAAI5uD,EAASlH,KAAKyd,SAAS6xC,YACzBroD,EAAWC,OACXlH,KAAK4wB,gBAAgBpD,KAAK9B,yBAE5B,OAAKxkB,EACElH,KAAK+vD,kBAAkB9oD,EAAWA,WAAYC,EAAM,KADvClH,KAAKL,OAAOytC,qBASlC+d,EAAAlpD,UAAAm0D,wBAAA,SACEnvD,EACA6uD,GAEA,IAII8C,EACAC,EACAC,EACAC,EACAC,EAEA5yD,EAVAzG,EAASK,KAAKL,OACd2H,EAAOL,EAAWK,KAClBC,EAAQN,EAAWM,MASnB0xD,GAAW,EAEX5xD,EAAWJ,EAAWI,SAC1B,OAAQA,GACN,KAAK/E,EAAAC,MAAMs/C,SAKT,GAJA+W,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAc,GAChE+C,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAa+B,IAC5C,CACZhV,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAKrB,GAFA0rB,EAAY94D,KAAKyvD,4BAA4BloD,EAAOsxD,EAAQ,GAC5DE,EAAY/4D,KAAKurD,cACbyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBgb,EAAUE,GAAW,IAuB1D,OALA/4D,KAAKqhB,MACH/H,EAAAgI,eAAe63C,8CACflyD,EAAW7C,MAAO,IAAKy0D,EAASj0C,WAAYm0C,EAAUn0C,YAExD5kB,KAAKurD,YAAcuK,EACZn2D,EAAOytC,oBAEhB,OAxBEwrB,EAAW54D,KAAKo3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1xD,GAEFwxD,EAAY94D,KAAKo3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzxD,GAUIyxD,EAAWp2D,MACjB,OACA,OACA,OACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASS,MAAOokC,EAAUE,GACrD,MAEF,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASW,MAAOkkC,EAAUE,GACrD,MAEF,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASW,MACTjb,EAAAsa,SAASS,MACbokC,EACAE,GAEF,MAEF,OACA,OACA,OACA,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASU,MAAOmkC,EAAUE,GACrD,MAEF,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASY,MACTlb,EAAAsa,SAASU,MACbmkC,EACAE,GAEF,MAEF,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASY,MAAOikC,EAAUE,GACrD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASa,MAAOgkC,EAAUE,GACrD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASc,MAAO+jC,EAAUE,GACrD,MAEF,QACE7mD,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlBptC,KAAKurD,YAAchyC,EAAA+E,KAAKW,KACxB,MAEF,KAAK3c,EAAAC,MAAMu/C,YAKT,GAJA8W,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAc,GAChE+C,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAa2B,IAC5C,CACZ5U,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAKrB,GAFA0rB,EAAY94D,KAAKyvD,4BAA4BloD,EAAOsxD,EAAQ,GAC5DE,EAAY/4D,KAAKurD,cACbyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBgb,EAAUE,GAAW,IAuB1D,OALA/4D,KAAKqhB,MACH/H,EAAAgI,eAAe63C,8CACflyD,EAAW7C,MAAO,IAAKy0D,EAASj0C,WAAYm0C,EAAUn0C,YAExD5kB,KAAKurD,YAAcuK,EACZn2D,EAAOytC,oBAEhB,OAxBEwrB,EAAW54D,KAAKo3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1xD,GAEFwxD,EAAY94D,KAAKo3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzxD,GAUIyxD,EAAWp2D,MACjB,OACA,OACA,OACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASqB,MAAOwjC,EAAUE,GACrD,MAEF,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASuB,MACT7b,EAAAsa,SAASqB,MACbwjC,EACAE,GAEF,MAEF,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASuB,MAAOsjC,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASsB,MAAOujC,EAAUE,GACrD,MAEF,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASwB,MACT9b,EAAAsa,SAASsB,MACbujC,EACAE,GAEF,MAEF,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASwB,MAAOqjC,EAAUE,GACrD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASyB,MAAOojC,EAAUE,GACrD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS0B,MAAOmjC,EAAUE,GACrD,MAEF,QACE7mD,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlBptC,KAAKurD,YAAchyC,EAAA+E,KAAKW,KACxB,MAEF,KAAK3c,EAAAC,MAAMw/C,gBAKT,GAJA6W,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAc,GAChE+C,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAagC,IAC5C,CACZjV,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAKrB,GAFA0rB,EAAY94D,KAAKyvD,4BAA4BloD,EAAOsxD,EAAQ,GAC5DE,EAAY/4D,KAAKurD,cACbyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBgb,EAAUE,GAAW,IAuB1D,OALA/4D,KAAKqhB,MACH/H,EAAAgI,eAAe63C,8CACflyD,EAAW7C,MAAO,KAAMy0D,EAASj0C,WAAYm0C,EAAUn0C,YAEzD5kB,KAAKurD,YAAcuK,EACZn2D,EAAOytC,oBAEhB,OAxBEwrB,EAAW54D,KAAKo3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1xD,GAEFwxD,EAAY94D,KAAKo3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzxD,GAUIyxD,EAAWp2D,MACjB,OACA,OACA,OACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASe,MAAO8jC,EAAUE,GACrD,MAEF,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASiB,MACTvb,EAAAsa,SAASe,MACb8jC,EACAE,GAEF,MAEF,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASiB,MAAO4jC,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASgB,MAAO6jC,EAAUE,GACrD,MAEF,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASkB,MACTxb,EAAAsa,SAASgB,MACb6jC,EACAE,GAEF,MAEF,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASkB,MAAO2jC,EAAUE,GACrD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASmB,MAAO0jC,EAAUE,GACrD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASoB,MAAOyjC,EAAUE,GACrD,MAEF,QACE7mD,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlBptC,KAAKurD,YAAchyC,EAAA+E,KAAKW,KACxB,MAEF,KAAK3c,EAAAC,MAAMy/C,mBAKT,GAJA4W,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAc,GAChE+C,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAa4B,IAC5C,CACZ7U,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAKrB,GAFA0rB,EAAY94D,KAAKyvD,4BAA4BloD,EAAOsxD,EAAQ,GAC5DE,EAAY/4D,KAAKurD,cACbyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBgb,EAAUE,GAAW,IAuB1D,OALA/4D,KAAKqhB,MACH/H,EAAAgI,eAAe63C,8CACflyD,EAAW7C,MAAO,KAAMy0D,EAASj0C,WAAYm0C,EAAUn0C,YAEzD5kB,KAAKurD,YAAcuK,EACZn2D,EAAOytC,oBAEhB,OAxBEwrB,EAAW54D,KAAKo3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1xD,GAEFwxD,EAAY94D,KAAKo3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzxD,GAUIyxD,EAAWp2D,MACjB,OACA,OACA,OACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS2B,MAAOkjC,EAAUE,GACrD,MAEF,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAAS6B,MACTnc,EAAAsa,SAAS2B,MACbkjC,EACAE,GAEF,MAEF,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS6B,MAAOgjC,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS4B,MAAOijC,EAAUE,GACrD,MAEF,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAAS8B,MACTpc,EAAAsa,SAAS4B,MACbijC,EACAE,GAEF,MAEF,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS8B,MAAO+iC,EAAUE,GACrD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS+B,MAAO8iC,EAAUE,GACrD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASgC,MAAO6iC,EAAUE,GACrD,MAEF,QACE7mD,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlBptC,KAAKurD,YAAchyC,EAAA+E,KAAKW,KACxB,MAGF,KAAK3c,EAAAC,MAAM4/C,qBACX,KAAK7/C,EAAAC,MAAM0/C,cAUT,GAJA2W,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAc,GAChE+C,EAAW74D,KAAKurD,YAGZlkD,GAAY/E,EAAAC,MAAM0/C,eAAiBjiD,KAAKurD,YAAY1nD,GAAE,KAExD,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAayB,IAC5C,CACZ1U,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAQN,GAFA6xD,EAAY94D,KAAKyvD,4BAA4BloD,EAAOsxD,EAAQ,GAC5DE,EAAY/4D,KAAKurD,cACbyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBgb,EAAUE,GAAW,IAuB1D,OALA/4D,KAAKqhB,MACH/H,EAAAgI,eAAe63C,8CACflyD,EAAW7C,MAAO9B,EAAAq/C,sBAAsB16C,EAAWI,UAAWwxD,EAASj0C,WAAYm0C,EAAUn0C,YAE/F5kB,KAAKurD,YAAcuK,EACZn2D,EAAOytC,oBAEhB,OAxBEwrB,EAAW54D,KAAKo3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1xD,GAEFwxD,EAAY94D,KAAKo3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzxD,GAUIyxD,EAAWp2D,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASC,MAAO4kC,EAAUE,GACrD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASE,MACTxa,EAAAsa,SAASC,MACb4kC,EACAE,GAEF,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASE,MAAO2kC,EAAUE,GACrD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASG,MAAO0kC,EAAUE,GACrD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASI,MAAOykC,EAAUE,GACrD,MAEF,QACE7mD,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlBptC,KAAKurD,YAAchyC,EAAA+E,KAAKW,KACxB,MAEF,KAAK3c,EAAAC,MAAM6/C,0BACX,KAAK9/C,EAAAC,MAAM2/C,mBAKT,GAJA0W,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAc,GAChE+C,EAAW74D,KAAKurD,YAGZlkD,GAAY/E,EAAAC,MAAM2/C,oBAAsBliD,KAAKurD,YAAY1nD,GAAE,KAE7D,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAa0B,IAC5C,CACZ3U,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAQN,GAFA6xD,EAAY94D,KAAKyvD,4BAA4BloD,EAAOsxD,EAAQ,GAC5DE,EAAY/4D,KAAKurD,cACbyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBgb,EAAUE,GAAW,IAuB1D,OALA/4D,KAAKqhB,MACH/H,EAAAgI,eAAe63C,8CACflyD,EAAW7C,MAAO9B,EAAAq/C,sBAAsB16C,EAAWI,UAAWwxD,EAASj0C,WAAYm0C,EAAUn0C,YAE/F5kB,KAAKurD,YAAcuK,EACZn2D,EAAOytC,oBAEhB,OAxBEwrB,EAAW54D,KAAKo3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1xD,GAEFwxD,EAAY94D,KAAKo3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzxD,GAUIyxD,EAAWp2D,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASK,MAAOwkC,EAAUE,GACrD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASM,MACT5a,EAAAsa,SAASK,MACbwkC,EACAE,GAEF,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASM,MAAOukC,EAAUE,GACrD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASO,MAAOskC,EAAUE,GACrD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASQ,MAAOqkC,EAAUE,GACrD,MAEF,QACE7mD,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlBptC,KAAKurD,YAAchyC,EAAA+E,KAAKW,KACxB,MAEF,KAAK3c,EAAAC,MAAM8gD,OACT,OAAOrjD,KAAKo5D,kBAAkB9xD,EAAMC,EAAOuuD,GAE7C,KAAKxzD,EAAAC,MAAM+gD,YAAa2V,GAAW,EACnC,KAAK32D,EAAAC,MAAMgZ,KAKT,GAJAq9C,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAc,GAChE+C,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAagB,KAC5C,CACZjU,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAGrB,GAAI6rB,EACFH,EAAY94D,KAAK+vD,kBAAkBxoD,EAAOsxD,EAAQ,SAC7C,CAGL,GAFAC,EAAY94D,KAAKyvD,4BAA4BloD,EAAOsxD,EAAQ,GAC5DE,EAAY/4D,KAAKurD,cACbyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBgb,EAAUE,GAAW,IAuB1D,OALA/4D,KAAKqhB,MACH/H,EAAAgI,eAAe63C,8CACflyD,EAAW7C,MAAO,IAAKy0D,EAASj0C,WAAYm0C,EAAUn0C,YAExD5kB,KAAKurD,YAAcuK,EACZn2D,EAAOytC,oBAtBdwrB,EAAW54D,KAAKo3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1xD,GAEFwxD,EAAY94D,KAAKo3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzxD,GAWN,OAAQvH,KAAKurD,YAAY3oD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASy8B,OAAQoI,EAAUE,GACtD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASslC,OACT5/C,EAAAsa,SAASy8B,OACboI,EACAE,GAEF,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASslC,OAAQT,EAAUE,GACtD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASulC,OAAQV,EAAUE,GACtD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASwlC,OAAQX,EAAUE,GACtD,MAEF,QACE7mD,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAMghD,aAAc0V,GAAW,EACpC,KAAK32D,EAAAC,MAAMkZ,MAKT,GAJAm9C,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAc,GAChE+C,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAaiB,KAC5C,CACZlU,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAGrB,GAAI6rB,EACFH,EAAY94D,KAAK+vD,kBAAkBxoD,EAAOsxD,EAAQ,KAClDE,EAAY/4D,KAAKurD,gBACZ,CAGL,GAFAuN,EAAY94D,KAAKyvD,4BAA4BloD,EAAOsxD,EAAQ,GAC5DE,EAAY/4D,KAAKurD,cACbyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBgb,EAAUE,GAAW,IAuB1D,OALA/4D,KAAKqhB,MACH/H,EAAAgI,eAAe63C,8CACflyD,EAAW7C,MAAO,IAAKy0D,EAASj0C,WAAYm0C,EAAUn0C,YAExD5kB,KAAKurD,YAAcuK,EACZn2D,EAAOytC,oBAtBdwrB,EAAW54D,KAAKo3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1xD,GAEFwxD,EAAY94D,KAAKo3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzxD,GAWN,OAAQvH,KAAKurD,YAAY3oD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASylC,OAAQZ,EAAUE,GACtD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAAS0lC,OACThgD,EAAAsa,SAASylC,OACbZ,EACAE,GAEF,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS0lC,OAAQb,EAAUE,GACtD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS2lC,OAAQd,EAAUE,GACtD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS4lC,OAAQf,EAAUE,GACtD,MAEF,QACE7mD,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAMihD,gBAAiByV,GAAW,EACvC,KAAK32D,EAAAC,MAAM+/C,SAKT,GAJAsW,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAc,GAChE+C,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAakB,KAC5C,CACZnU,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAGrB,GAAI6rB,EACFL,EAAW54D,KAAKq3D,uBAAuBuB,EAAUC,GACjDC,EAAY94D,KAAK+vD,kBAAkBxoD,EAAOsxD,EAAQ,SAC7C,CAGL,GAFAC,EAAY94D,KAAKyvD,4BAA4BloD,EAAOsxD,EAAQ,GAC5DE,EAAY/4D,KAAKurD,cACbyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBgb,EAAUE,GAAW,IAuB1D,OALA/4D,KAAKqhB,MACH/H,EAAAgI,eAAe63C,8CACflyD,EAAW7C,MAAO,IAAKy0D,EAASj0C,WAAYm0C,EAAUn0C,YAExD5kB,KAAKurD,YAAcuK,EACZn2D,EAAOytC,oBAtBdwrB,EAAW54D,KAAKo3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1xD,GAEFwxD,EAAY94D,KAAKo3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzxD,GAWN,OAAQvH,KAAKurD,YAAY3oD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASiC,OAAQ4iC,EAAUE,GACtD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAAS6lC,OACTngD,EAAAsa,SAASiC,OACb4iC,EACAE,GAEF,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS6lC,OAAQhB,EAAUE,GACtD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS8lC,OAAQjB,EAAUE,GACtD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS+lC,OAAQlB,EAAUE,GACtD,MAEF,QACE7mD,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAMkhD,yBAA0BwV,GAAW,EAChD,KAAK32D,EAAAC,MAAM8/C,kBAKT,GAJAuW,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAc,GAChE+C,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAamB,KAC5C,CACZpU,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAGrB,IAAIhqB,OAAQ,EAGZ,GAAyB,IAArBpjB,KAAKurD,YAAY3oD,MAGnB,GAFAk2D,EAAY94D,KAAK+vD,kBAAkBxoD,EAAOgS,EAAA+E,KAAKY,IAAG,KAClD65C,EAAY/4D,KAAKurD,cACXnoC,EAAWpjB,KAAKgsD,gBAAiB,CAErC,KADI/mC,EAAYjlB,KAAKgqB,QAAQzN,eAAerb,IAAI,UAChC,CACdlB,KAAKqhB,MACH/H,EAAAgI,eAAec,mBACfnb,EAAW7C,MAAO,SAEpBgC,EAAOzG,EAAOytC,oBACd,MAGF,KADInrC,EAAYgjB,EAAUjZ,QAAUiZ,EAAUjZ,QAAQ9K,IAAI,OAAS,MACnD,CACdlB,KAAKqhB,MACH/H,EAAAgI,eAAec,mBACfnb,EAAW7C,MAAO,aAEpBgC,EAAOzG,EAAOytC,oBACd,MAEFn7B,OAAOhQ,EAAUW,MAAQ65C,EAAAzgC,YAAYuH,oBACrCvjB,KAAKgsD,eAAiB5oC,EAAWpjB,KAAKyd,SAASmG,gBAAmC3hB,EAAW,YAsB/F,GAhBA22D,EAAW54D,KAAKo3D,kBACdwB,EACA54D,KAAKurD,YACLhyC,EAAA+E,KAAKa,IAAG,IAGR7X,GAEFuxD,EAAW74D,KAAKurD,YAChBuN,EAAY94D,KAAK+vD,kBACfxoD,EACAgS,EAAA+E,KAAKa,IAAG,KAIV45C,EAAY/4D,KAAKurD,cACXnoC,EAAWpjB,KAAKisD,gBAAiB,CAErC,KADIhnC,EAAYjlB,KAAKgqB,QAAQzN,eAAerb,IAAI,SAChC,CACdlB,KAAKqhB,MACH/H,EAAAgI,eAAec,mBACfnb,EAAW7C,MAAO,QAEpBgC,EAAOzG,EAAOytC,oBACd,MAGF,KADInrC,EAAYgjB,EAAUjZ,QAAUiZ,EAAUjZ,QAAQ9K,IAAI,OAAS,MACnD,CACdlB,KAAKqhB,MACH/H,EAAAgI,eAAec,mBACfnb,EAAW7C,MAAO,YAEpBgC,EAAOzG,EAAOytC,oBACd,MAEFn7B,OAAOhQ,EAAUW,MAAQ65C,EAAAzgC,YAAYuH,oBACrCvjB,KAAKisD,eAAiB7oC,EAAWpjB,KAAKyd,SAASmG,gBAAmC3hB,EAAW,MAM/FmE,EAHIgd,GAAYpjB,KAAK2wD,gBAAgBvtC,GAG9BpjB,KAAK+5D,eAAe32C,GAAYw1C,EAAUE,IAF1Cn5D,EAAOytC,oBAIhB,MAEF,KAAK9qC,EAAAC,MAAMmhD,aAAcuV,GAAW,EACpC,KAAK32D,EAAAC,MAAMggD,MAKT,GAJAqW,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAc,GAChE+C,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAaoB,KAC5C,CACZrU,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAGrB,GAAI6rB,EACFL,EAAW54D,KAAKq3D,uBAAuBuB,EAAUC,GACjDC,EAAY94D,KAAK+vD,kBAAkBxoD,EAAOsxD,EAAQ,KAClDE,EAAY/4D,KAAKurD,gBACZ,CAGL,GAFAuN,EAAY94D,KAAKyvD,4BAA4BloD,EAAOsxD,EAAQ,GAC5DE,EAAY/4D,KAAKurD,cACbyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBgb,EAAUE,GAAW,IAuB1D,OALA/4D,KAAKqhB,MACH/H,EAAAgI,eAAe63C,8CACflyD,EAAW7C,MAAO,IAAKy0D,EAASj0C,WAAYm0C,EAAUn0C,YAExD5kB,KAAKurD,YAAcuK,EACZn2D,EAAOytC,oBAtBdwrB,EAAW54D,KAAKo3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1xD,GAEFwxD,EAAY94D,KAAKo3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzxD,GAWN,OAAQvH,KAAKurD,YAAY3oD,MACvB,OACA,OACA,OACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASimC,OAAQpB,EAAUE,GACtD,MAEF,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASkmC,OACTxgD,EAAAsa,SAASimC,OACbpB,EACAE,GAEF,MAEF,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASkmC,OAAQrB,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS6C,OAAQgiC,EAAUE,GACtD,MAEF,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASmmC,OACTzgD,EAAAsa,SAAS6C,OACbgiC,EACAE,GAEF,MAEF,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASmmC,OAAQtB,EAAUE,GACtD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASomC,OAAQvB,EAAUE,GACtD,MAEF,QACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASqmC,OAAQxB,EAAUE,GACtD,MAEF,QACE7mD,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAMohD,eAAgBsV,GAAW,EACtC,KAAK32D,EAAAC,MAAMigD,QAKT,GAJAoW,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAc,GAChE+C,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAaqB,KAC5C,CACZtU,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAGrB,GAAI6rB,EACFL,EAAW54D,KAAKq3D,uBAAuBuB,EAAUC,GACjDC,EAAY94D,KAAK+vD,kBAAkBxoD,EAAOsxD,EAAQ,KAClDE,EAAY/4D,KAAKurD,gBACZ,CAGL,GAFAuN,EAAY94D,KAAKyvD,4BAA4BloD,EAAOsxD,EAAQ,GAC5DE,EAAY/4D,KAAKurD,cACbyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBgb,EAAUE,GAAW,IAuB1D,OALA/4D,KAAKqhB,MACH/H,EAAAgI,eAAe63C,8CACflyD,EAAW7C,MAAO,IAAKy0D,EAASj0C,WAAYm0C,EAAUn0C,YAExD5kB,KAAKurD,YAAcuK,EACZn2D,EAAOytC,oBAtBdwrB,EAAW54D,KAAKo3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1xD,GAEFwxD,EAAY94D,KAAKo3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzxD,GAWN,OAAQvH,KAAKurD,YAAY3oD,MACvB,OACA,OAIA,OACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS8C,OAAQ+hC,EAAUE,GACtD,MAEF,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASsmC,OACT5gD,EAAAsa,SAAS8C,OACb+hC,EACAE,GAEF,MAEF,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASsmC,OAAQzB,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS+C,OAAQ8hC,EAAUE,GACtD,MAEF,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASumC,OACT7gD,EAAAsa,SAAS+C,OACb8hC,EACAE,GAEF,MAEF,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASumC,OAAQ1B,EAAUE,GACtD,MAEF,QAEE,KADI11C,EAAWpjB,KAAK8rD,gBACL,CAEb,KADI7mC,EAAYjlB,KAAKgqB,QAAQzN,eAAerb,IAAI,UAChC,CACdlB,KAAKqhB,MACH/H,EAAAgI,eAAec,mBACfnb,EAAW7C,MAAO,SAEpBgC,EAAOzG,EAAOytC,oBACd,MAGF,KADInrC,EAAYgjB,EAAUjZ,QAAUiZ,EAAUjZ,QAAQ9K,IAAI,OAAS,MACnD,CACdlB,KAAKqhB,MACH/H,EAAAgI,eAAec,mBACfnb,EAAW7C,MAAO,aAEpBgC,EAAOzG,EAAOytC,oBACd,MAEFn7B,OAAOhQ,EAAUW,MAAQ65C,EAAAzgC,YAAYuH,oBACrCvjB,KAAK8rD,eAAiB1oC,EAAWpjB,KAAKyd,SAASmG,gBAAmC3hB,EAAW,MAK7FmE,EAHIgd,GAAYpjB,KAAK2wD,gBAAgBvtC,GAG9BpjB,KAAK+5D,eAAe32C,GAAYw1C,EAAUE,IAF1Cn5D,EAAOytC,oBAIhB,MAEF,QAEE,KADIhqB,EAAWpjB,KAAK+rD,gBACL,CACb,IAAI9mC,EASAhjB,EARJ,KADIgjB,EAAYjlB,KAAKgqB,QAAQzN,eAAerb,IAAI,SAChC,CACdlB,KAAKqhB,MACH/H,EAAAgI,eAAec,mBACfnb,EAAW7C,MAAO,QAEpBgC,EAAOzG,EAAOytC,oBACd,MAGF,KADInrC,EAAYgjB,EAAUjZ,QAAUiZ,EAAUjZ,QAAQ9K,IAAI,OAAS,MACnD,CACdlB,KAAKqhB,MACH/H,EAAAgI,eAAec,mBACfnb,EAAW7C,MAAO,YAEpBgC,EAAOzG,EAAOytC,oBACd,MAEFn7B,OAAOhQ,EAAUW,MAAQ65C,EAAAzgC,YAAYuH,oBACrCvjB,KAAK+rD,eAAiB3oC,EAAWpjB,KAAKyd,SAASmG,gBAAmC3hB,EAAW,MAK7FmE,EAHIgd,GAAYpjB,KAAK2wD,gBAAgBvtC,GAG9BpjB,KAAK+5D,eAAe32C,GAAYw1C,EAAUE,IAF1Cn5D,EAAOytC,oBAIhB,MAEF,QACEn7B,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAMqhD,yBAA0BqV,GAAW,EAChD,KAAK32D,EAAAC,MAAMogD,kBAKT,GAJAiW,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAeyE,QAAO,GACxE1B,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAaiC,aAC5C,CACZlV,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAKrB,OAFA0rB,EAAY94D,KAAK+vD,kBAAkBxoD,EAAOsxD,EAAQ,KAClDE,EAAY/4D,KAAKurD,YACTvrD,KAAKurD,YAAY3oD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASwC,OAAQqiC,EAAUE,GACtD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASymC,OAAQ5B,EAAUE,GACtD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASymC,OACT/gD,EAAAsa,SAASwC,OACbqiC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA94D,KAAKqhB,MACH/H,EAAAgI,eAAem5C,2CACfxzD,EAAW7C,MAAO9B,EAAAq/C,sBAAsB16C,EAAWI,UAAWrH,KAAKurD,YAAY3mC,YAE1EjlB,EAAOytC,oBAEhB,QACEn7B,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAMshD,+BAAgCoV,GAAW,EACtD,KAAK32D,EAAAC,MAAMqgD,wBAKT,GAJAgW,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAeyE,QAAO,GACxE1B,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAa6B,aAC5C,CACZ9U,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAMrB,OAHAwrB,EAAW54D,KAAKq3D,uBAAuBuB,EAAUC,GACjDC,EAAY94D,KAAK+vD,kBAAkBxoD,EAAOsxD,EAAQ,KAClDE,EAAY/4D,KAAKurD,YACTvrD,KAAKurD,YAAY3oD,MACvB,OACA,OAIA,OACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS2C,OAAQkiC,EAAUE,GACtD,MAEF,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS2mC,OAAQ9B,EAAUE,GACtD,MAEF,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAAS2mC,OACTjhD,EAAAsa,SAAS2C,OACbkiC,EACAE,GAEF,MAEF,OACA,OACA,QAIA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS4C,OAAQiiC,EAAUE,GACtD,MAEF,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS4mC,OAAQ/B,EAAUE,GACtD,MAEF,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAAS4mC,OACTlhD,EAAAsa,SAAS4C,OACbiiC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA94D,KAAKqhB,MACH/H,EAAAgI,eAAem5C,2CACfxzD,EAAW7C,MAAO9B,EAAAq/C,sBAAsB16C,EAAWI,UAAWrH,KAAKurD,YAAY3mC,YAE1EjlB,EAAOytC,oBAEhB,QACEn7B,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAMuhD,2CAA4CmV,GAAW,EAClE,KAAK32D,EAAAC,MAAMsgD,oCAKT,GAJA+V,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAeyE,QAAO,GACxE1B,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAa8B,eAC5C,CACZ/U,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAMrB,OAHAwrB,EAAW54D,KAAKq3D,uBAAuBuB,EAAUC,GACjDC,EAAY94D,KAAK+vD,kBAAkBxoD,EAAOsxD,EAAQ,KAClDE,EAAY/4D,KAAKurD,YACTvrD,KAAKurD,YAAY3oD,MACvB,OACA,OACA,QACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS4C,OAAQiiC,EAAUE,GAExD,OACA,OACA,OACA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS4C,OAAQiiC,EAAUE,GACtD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS4mC,OAAQ/B,EAAUE,GACtD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAAS4mC,OACTlhD,EAAAsa,SAAS4C,OACbiiC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA94D,KAAKqhB,MACH/H,EAAAgI,eAAem5C,2CACfxzD,EAAW7C,MAAO9B,EAAAq/C,sBAAsB16C,EAAWI,UAAWrH,KAAKurD,YAAY3mC,YAE1EjlB,EAAOytC,oBAEhB,QACEn7B,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAMwhD,iBAAkBkV,GAAW,EACxC,KAAK32D,EAAAC,MAAMugD,UAKT,GAJA8V,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAeyE,QAAO,GACxE1B,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAasB,aAC5C,CACZvU,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAGrB,GAAI6rB,EACFH,EAAY94D,KAAK+vD,kBAAkBxoD,EAAOsxD,EAAQ,KAClDE,EAAY/4D,KAAKurD,gBACZ,CAGL,GAFAuN,EAAY94D,KAAKyvD,4BAA4BloD,EAAOsxD,EAAQ,GAC5DE,EAAY/4D,KAAKurD,cACbyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBgb,EAAUE,GAAW,IAuB1D,OALA/4D,KAAKqhB,MACH/H,EAAAgI,eAAe63C,8CACflyD,EAAW7C,MAAO,IAAKy0D,EAASj0C,WAAYm0C,EAAUn0C,YAExD5kB,KAAKurD,YAAcuK,EACZn2D,EAAOytC,oBAtBdwrB,EAAW54D,KAAKo3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1xD,GAEFwxD,EAAY94D,KAAKo3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzxD,GAWN,OAAQvH,KAAKurD,YAAY3oD,MACvB,OACA,OACA,OACA,OACA,OACA,QACA,OACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASsC,OAAQuiC,EAAUE,GACtD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS6mC,OAAQhC,EAAUE,GACtD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAAS6mC,OACTnhD,EAAAsa,SAASsC,OACbuiC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA94D,KAAKqhB,MACH/H,EAAAgI,eAAem5C,2CACfxzD,EAAW7C,MAAO9B,EAAAq/C,sBAAsB16C,EAAWI,UAAWrH,KAAKurD,YAAY3mC,YAE1EjlB,EAAOytC,oBAEhB,QACEn7B,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAMyhD,WAAYiV,GAAW,EAClC,KAAK32D,EAAAC,MAAMwgD,IAKT,GAJA6V,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAeyE,QAAO,GACxE1B,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAauB,YAC5C,CACZxU,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAGrB,GAAI6rB,EACFH,EAAY94D,KAAK+vD,kBAAkBxoD,EAAOsxD,EAAQ,KAClDE,EAAY/4D,KAAKurD,gBACZ,CAGL,GAFAuN,EAAY94D,KAAKyvD,4BAA4BloD,EAAOsxD,EAAQ,GAC5DE,EAAY/4D,KAAKurD,cACbyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBgb,EAAUE,GAAW,IAuB1D,OALA/4D,KAAKqhB,MACH/H,EAAAgI,eAAe63C,8CACflyD,EAAW7C,MAAO,IAAKy0D,EAASj0C,WAAYm0C,EAAUn0C,YAExD5kB,KAAKurD,YAAcuK,EACZn2D,EAAOytC,oBAtBdwrB,EAAW54D,KAAKo3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1xD,GAEFwxD,EAAY94D,KAAKo3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzxD,GAWN,OAAQvH,KAAKurD,YAAY3oD,MACvB,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS8mC,MAAOjC,EAAUE,GACrD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS8mC,MAAOjC,EAAUE,GACrD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS+mC,MAAOlC,EAAUE,GACrD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAAS+mC,MACTrhD,EAAAsa,SAAS8mC,MACbjC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA94D,KAAKqhB,MACH/H,EAAAgI,eAAem5C,2CACfxzD,EAAW7C,MAAO9B,EAAAq/C,sBAAsB16C,EAAWI,UAAWrH,KAAKurD,YAAY3mC,YAE1EjlB,EAAOytC,oBAEhB,QACEn7B,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAM0hD,aAAcgV,GAAW,EACpC,KAAK32D,EAAAC,MAAMygD,MAKT,GAJA4V,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAeyE,QAAO,GACxE1B,EAAW74D,KAAKurD,YAGZvrD,KAAKurD,YAAY1nD,GAAE,KAAuB,CAC5C,IAAIi5C,EAEE1sB,EADN,GADI0sB,EAAiB+b,EAAS/b,eAG5B,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAawB,aAC5C,CACZzU,EAAOpG,KAAKk5D,sBAAsB9oC,EAAU9oB,EAAMsxD,EAAUrxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAGrB,GAAI6rB,EACFH,EAAY94D,KAAK+vD,kBAAkBxoD,EAAOsxD,EAAQ,KAClDE,EAAY/4D,KAAKurD,gBACZ,CAGL,GAFAuN,EAAY94D,KAAKyvD,4BAA4BloD,EAAOsxD,EAAQ,GAC5DE,EAAY/4D,KAAKurD,cACbyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBgb,EAAUE,GAAW,IAuB1D,OALA/4D,KAAKqhB,MACH/H,EAAAgI,eAAe63C,8CACflyD,EAAW7C,MAAO,IAAKy0D,EAASj0C,WAAYm0C,EAAUn0C,YAExD5kB,KAAKurD,YAAcuK,EACZn2D,EAAOytC,oBAtBdwrB,EAAW54D,KAAKo3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1xD,GAEFwxD,EAAY94D,KAAKo3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzxD,GAWN,OAAQvH,KAAKurD,YAAY3oD,MACvB,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASgnC,OAAQnC,EAAUE,GACtD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASgnC,OAAQnC,EAAUE,GACtD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASinC,OAAQpC,EAAUE,GACtD,MAEF,OACA,OACE1yD,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASinC,OACTvhD,EAAAsa,SAASgnC,OACbnC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA94D,KAAKqhB,MACH/H,EAAAgI,eAAem5C,2CACfxzD,EAAW7C,MAAO9B,EAAAq/C,sBAAsB16C,EAAWI,UAAWrH,KAAKurD,YAAY3mC,YAE1EjlB,EAAOytC,oBAEhB,QACEn7B,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAKF,KAAK9qC,EAAAC,MAAM4gD,oBAOT,GANAyV,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAc,GAChE+C,EAAW74D,KAAKurD,YAChBuN,EAAY94D,KAAK+vD,kBAAkBxoD,EAAOsxD,EAAQ,KAClDE,EAAY/4D,KAAKurD,YAGbnlD,EAAOzG,EAAOy0C,gBAAgBwkB,GAAU,EAAM,GAChD54D,KAAKqzD,cAAcuF,EAAU54D,KAAKurD,aAClCnlD,EAAOzG,EAAOqsC,SACZhsC,KAAKqzD,cAAcuF,EAAU54D,KAAKurD,aAClCuN,EACA1yD,OAIG,CACL,IAAIonB,EAAOxtB,KAAK4wB,gBAAgBpD,KAC5BinC,EAAYz0D,KAAK4wB,gBAAgB1C,oBACnCluB,KAAKurD,aACJ/9B,EAAK2F,YAAYylC,EAAU54D,KAAKurD,cAEnCnlD,EAAOzG,EAAOqsC,SACZhsC,KAAKqzD,cACH1zD,EAAO4pC,eAAekrB,EAAUrpC,MAAOwtC,GACvC54D,KAAKurD,aAEPuN,EACAn5D,EAAO0pC,eACLp3B,OAAOwiD,GAAWrpC,MAClBprB,KAAKurD,YAAYz9B,iBAIvB,MAEF,KAAKxrB,EAAAC,MAAM6gD,QAOT,GANAwV,EAAW54D,KAAKyvD,4BAA4BnoD,EAAMwuD,EAAc,GAChE+C,EAAW74D,KAAKurD,YAChBuN,EAAY94D,KAAK+vD,kBAAkBxoD,EAAOsxD,EAAQ,KAClDE,EAAY/4D,KAAKurD,YAGbnlD,EAAOpG,KAAKL,OAAOy0C,gBAAgBwkB,GAAU,EAAM,GACrDxyD,EAAOpG,KAAKL,OAAOqsC,SACjBhsC,KAAKqzD,cAAcuF,EAAU54D,KAAKurD,aAClCnlD,EACA0yD,OAIG,CACDtrC,EAAOxtB,KAAK4wB,gBAAgBpD,KAC5BinC,EAAYz0D,KAAK4wB,gBAAgB1C,oBACnCluB,KAAKurD,aACJ/9B,EAAK2F,YAAYylC,EAAU54D,KAAKurD,cAEnCnlD,EAAOzG,EAAOqsC,SACZhsC,KAAKqzD,cACH1zD,EAAO4pC,eAAekrB,EAAUrpC,MAAOwtC,GACvC54D,KAAKurD,aAEP5rD,EAAO0pC,eACLp3B,OAAOwiD,GAAWrpC,MAClBprB,KAAKurD,YAAYz9B,gBAEnBgrC,GAGJ,MAEF,QACE7mD,QAAO,GACP7L,EAAOpG,KAAKL,OAAOytC,oBAGvB,OAAO6rB,EACHj5D,KAAK41D,2BAA2BtuD,EAAMlB,EAAM0vD,GAAkBv8C,EAAA+E,KAAKc,MACnEhZ,GAGN+kD,EAAAlpD,UAAAg5D,qBAAA,SACEC,EACA55D,EACA65D,EACA9M,GAEA,IAAI+M,EACAC,EAAyB,EAO7B,OANIH,EAAiBr3D,GAAGxB,EAAAsB,YAAYipB,WAClCyuC,EAAUF,EACVC,MAEAA,GAAwB95D,GAEnBtB,KAAKs7D,kBACVJ,EACAE,EACA/M,EACAgN,EACAH,EAAiBl2C,aAAay3B,EAAAxgC,eAAezJ,UAIjD24C,EAAAlpD,UAAAi3D,sBAAA,SACEgC,EACA5zD,EACAsxD,EACArxD,EACA8mD,GAEA,IAAI+M,EACAC,EAAyB,EAC7B,GAAIH,EAAiBr3D,GAAGxB,EAAAsB,YAAYipB,UAAW,CAC7C,IAAInpB,EAASwO,OAAOipD,EAAiBz3D,QACrCwO,OAAOxO,EAAOb,MAAQ65C,EAAAzgC,YAAYlI,OAClCunD,EAAUzC,EACVwC,GAAwB7zD,QAExB6zD,GAAwB9zD,EAAMC,GAShC,OAPUvH,KAAKs7D,kBACbJ,EACAE,EACA/M,EACAgN,EACAH,EAAiBl2C,aAAay3B,EAAAxgC,eAAezJ,UAKjD24C,EAAAlpD,UAAAm3D,kBAAA,SAAkBnyD,EAAwBs0D,EAA6BzF,GACrE,IAOIxY,EANA7/B,EADUzd,KAAKgqB,QACIvM,SACnBmT,EAAkB5wB,KAAK4wB,gBACvBb,EAAStS,EAAS+9C,kBAAkBv0D,EAAY2pB,GACpD,IAAKb,EAAQ,OAAO/vB,KAAKL,OAAOytC,oBAIhC,OAAQrd,EAAOntB,MACb,KAAK65C,EAAAzgC,YAAYzJ,OACf,IAAKvS,KAAKkvD,cAAsBn/B,GAC9B,OAAO/vB,KAAKL,OAAOytC,oBAErBn7B,OAAgB8d,EAAQ1rB,MAAQkV,EAAA+E,KAAKc,MAGvC,KAAKq9B,EAAAzgC,YAAYqP,MACjB,KAAKoxB,EAAAzgC,YAAYmT,MACfmuB,EAAmCvtB,EAAQ1rB,KAC3C,MAEF,KAAKo4C,EAAAzgC,YAAY+L,SACf,IAAIE,EAA6B8H,EAAQ9H,gBACzC,GAAIA,EAAiB,CACnB,IAAI7E,EAAWpjB,KAAKyd,SAASmG,gBAAgBqE,EAAiB,MAC9D,IAAK7E,EAAU,OAAOpjB,KAAKL,OAAOytC,oBAClCn7B,OAAmD,GAA5CmR,EAAShU,UAAUyU,eAAehd,QACzCy2C,EAAal6B,EAAShU,UAAUyU,eAAe,GAC/C,MAMF,OAJA7jB,KAAKqhB,MACH/H,EAAAgI,eAAem6C,oEACfx0D,EAAW7C,MAAkB2rB,EAAQ3P,cAEhCpgB,KAAKL,OAAOytC,oBAErB,KAAKqP,EAAAzgC,YAAYlI,MACf,GAAI2J,EAASi+C,yBAA0B,CACrC,IAAIC,EAAc/qC,EAAgBpD,KAAK3pB,GAAE,MACrC+3D,EAAqB7rC,EAAQE,eAAewsB,EAAApjC,aAAaa,YAAayhD,GAC1E,IAAKC,EAaH,OAZyB7rC,EAAQE,eAAewsB,EAAApjC,aAAaY,YAAa0hD,GAOxE37D,KAAKqhB,MACH/H,EAAAgI,eAAeu6C,+CACf50D,EAAW7C,MAAe2rB,EAAQ3P,cAPpCpgB,KAAKqhB,MACH/H,EAAAgI,eAAew6C,qCACf70D,EAAW7C,MAAe2rB,EAAQ3P,cAQ/BpgB,KAAKL,OAAOytC,oBAErBn7B,OAAqD,GAA9C2pD,EAAWxsD,UAAUyU,eAAehd,QAC3Cy2C,EAAase,EAAWxsD,UAAUyU,eAAe,GACjD,MAIJ,QAKE,OAJA7jB,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAKvBn7B,OAAOqrC,GAAc/jC,EAAA+E,KAAKc,MAC1B,IAAI+7C,EAAYn7D,KAAK+vD,kBAAkBwL,EAAiBje,EAAU,KAClE,OAAOt9C,KAAK41D,2BACV3uD,EACAk0D,EACArF,GAAkBv8C,EAAA+E,KAAKc,OAI3B+rC,EAAAlpD,UAAA2zD,2BAAA,SACE3uD,EACA80D,EACAC,QAAA,IAAAA,OAAA,GAEA,IAAIr8D,EAASK,KAAKL,OACdowB,EAAS/vB,KAAKyd,SAAS+9C,kBAAkBv0D,EAAYjH,KAAK4wB,iBAC9D,IAAKb,EAAQ,OAAOpwB,EAAOytC,oBAE3B,OAAQrd,EAAOntB,MACb,KAAK65C,EAAAzgC,YAAYqP,MACf,IAAIhnB,EAAe0rB,EAAQ1rB,KAG3B,GAFA4N,OAAO5N,GAAQkV,EAAA+E,KAAKc,MACpBpf,KAAKurD,YAAcyQ,EAAM33D,EAAOkV,EAAA+E,KAAKc,KACzB2Q,EAAQlsB,GAAGxB,EAAAsB,YAAYkmB,OAKjC,OAJA7pB,KAAKqhB,MACH/H,EAAAgI,eAAem6C,oEACfx0D,EAAW7C,MAAO2rB,EAAO3P,cAEpBzgB,EAAOytC,oBAEhB,IAAI5f,EAAOxtB,KAAK4wB,gBAAgBpD,KAIhC,OAHInpB,EAAKR,GAAG,KACV2pB,EAAKQ,gBAAwB+B,EAAQ3E,OAAQoC,EAAK2F,YAAY4oC,EAAsB13D,IAE/E23D,EACHr8D,EAAO4pC,eAAuBxZ,EAAQ3E,MAAO2wC,GAC7Cp8D,EAAOwrC,eAAuBpb,EAAQ3E,MAAO2wC,GAEnD,KAAKtf,EAAAzgC,YAAYzJ,OACf,IAAKvS,KAAKkvD,cAAsBn/B,GAAS,OAAOpwB,EAAOytC,oBACnD/oC,EAAgB0rB,EAAQ1rB,KAG5B,GAFA4N,OAAO5N,GAAQkV,EAAA+E,KAAKc,MACpBpf,KAAKurD,YAAcyQ,EAAM33D,EAAOkV,EAAA+E,KAAKc,KACzB2Q,EAAQlsB,GAAGxB,EAAAsB,YAAYkmB,OAMjC,OALA7pB,KAAKqhB,MACH/H,EAAAgI,eAAem6C,oEACfx0D,EAAW7C,MACX2rB,EAAO3P,cAEFzgB,EAAOytC,oBAGhB,GADA2uB,EAAuB/7D,KAAKq3D,uBAAuB0E,EAAsB13D,GACrE23D,EAAK,CACP,IAAItO,EAAarpD,EAAKypB,eAClB1N,EAAe2P,EAAO3P,aAC1B,OAAOzgB,EAAO4rC,YAAY,MACxB5rC,EAAO0rC,gBAAgBjrB,EAAc27C,GACrCp8D,EAAO8pC,gBAAgBrpB,EAAcstC,IACpCA,GAEH,OAAO/tD,EAAO0rC,gBAAgBtb,EAAO3P,aAAc27C,GAGvD,KAAKtf,EAAAzgC,YAAYmT,MACf,IAAMtnB,EAAsBkoB,EAAQloB,YACpC,GACUkoB,EAAQlsB,GAAGxB,EAAAsB,YAAY6iB,YAE7BxmB,KAAK4wB,gBAAgB/sB,GAAGxB,EAAAsB,YAAYqQ,cACrB,MAAfnM,GAC2B,MAA3BA,EAAY9C,YAOd,OAJA/E,KAAKqhB,MACH/H,EAAAgI,eAAem6C,oEACfx0D,EAAW7C,MAAe2rB,EAAQ3P,cAE7BzgB,EAAOytC,oBAEhB,IAAI6uB,EAAiBhqD,OAAOjS,KAAKyd,SAASy+C,uBACtCC,EAAWn8D,KAAKyvD,4BAClBwM,EACAj8D,KAAKqe,QAAQW,UAAS,GAGpB3a,EAAe0rB,EAAQ1rB,KAC3BrE,KAAKurD,YAAcyQ,EAAM33D,EAAOkV,EAAA+E,KAAKc,KACjCsuC,EAAarpD,EAAKypB,eAKtB,GAJa,IAATzpB,EAAKzB,OAEPm5D,EAAuB/7D,KAAKq3D,uBAAuB0E,EAAsB13D,IAEvE23D,EAAK,CAEHxuC,GADAoD,EAAkB5wB,KAAK4wB,iBACApD,KAD3B,IAMIknC,EAJY9jC,EAAgB1C,oBAC9B7pB,GACCmpB,EAAK2F,YAAY4oC,EAAsB13D,IAEX+mB,MAG/B,OAAOzrB,EAAO4rC,YAAY,MACxB5rC,EAAOwrC,eAAeupB,EAAgBqH,GACtCp8D,EAAOqqC,YACL3lC,EAAK0f,SACLo4C,EACAx8D,EAAO0pC,eAAeqrB,EAAgBhH,GACtCA,EACQ39B,EAAQX,cAElBzvB,EAAO0pC,eAAeqrB,EAAgBhH,IACrCA,GAGH,OAAO/tD,EAAOqqC,YACZ3lC,EAAK0f,SACLo4C,EACAJ,EACArO,EACQ39B,EAAQX,cAItB,KAAKqtB,EAAAzgC,YAAY+L,SACf,IAAIE,EAA6B8H,EAAQ9H,gBACzC,GAAIA,EAAiB,CACnB,IAAIm0C,EAAiBp8D,KAAKyd,SAASmG,gBAAgBqE,EAAiB,MACpE,IAAKm0C,EAAgB,OAAOz8D,EAAOytC,oBAGnC,IAAK4uB,EAAK,CACR,GAAII,EAAev4D,GAAGxB,EAAAsB,YAAYipB,UAAW,CACvCqvC,EAAiBhqD,OAAOjS,KAAKyd,SAASy+C,uBACtCC,EAAWn8D,KAAKyvD,4BAClBwM,EACAj8D,KAAKqe,QAAQW,UAAS,GAGxB,OAAOhf,KAAK+5D,eAAeqC,GAAkBD,EAAUJ,IAEvD,OAAO/7D,KAAK+5D,eAAeqC,GAAkBL,IAKjD,IAAI/zC,EAA6B+H,EAAQ/H,gBACzC/V,OAA0B,MAAnB+V,GACP,IAAIq0C,EAAiBr8D,KAAKyd,SAASmG,gBAAmCoE,EAAiB,MACvF,IAAKq0C,EAAgB,OAAO18D,EAAOytC,oBACnC,IACIkvB,GADAl3D,EAAai3D,EAAejtD,UAAUhK,YACR0oB,eAClC,GAAIsuC,EAAev4D,GAAGxB,EAAAsB,YAAYipB,UAAW,CACvCqvC,EAAiBhqD,OAAOjS,KAAKyd,SAASy+C,uBACtCC,EAAWn8D,KAAKyvD,4BAClBwM,EACAj8D,KAAKqe,QAAQW,UAAS,GAIpB01C,EADY10D,KAAK4wB,gBAAgB1C,oBAAoB9oB,GAAY,GACtCgmB,MAC/B,OAAOzrB,EAAO4rC,YAAY,MACxBvrC,KAAK+5D,eAAeqC,GAClBz8D,EAAO4pC,eAAemrB,EAAgByH,GACtCJ,IAEF/7D,KAAK+5D,eAAesC,GAClB18D,EAAO0pC,eAAeqrB,EAAgB4H,MAEvCA,GAGH,OAAO38D,EAAO4rC,YAAY,MACxBvrC,KAAK+5D,eAAeqC,GAAkBL,IACtC/7D,KAAK+5D,eAAesC,IACnBC,GAQP,OALEt8D,KAAKqhB,MACH/H,EAAAgI,eAAem6C,oEACfx0D,EAAW7C,MAAO2rB,EAAO3P,cAGtBzgB,EAAOytC,oBAEhB,KAAKqP,EAAAzgC,YAAYlI,MACf,IAAIvL,EAAoBvI,KAAKyd,SAASi+C,yBACtC,GAAInzD,EAAmB,CACrB,IAAIozD,EAAc37D,KAAK4wB,gBAAgBpD,KAAK3pB,GAAE,MAC1C04D,EAAqBxsC,EAAQE,eAAewsB,EAAApjC,aAAaY,YAAa0hD,GAC1E,IAAKY,EAKH,OAJAv8D,KAAKqhB,MACH/H,EAAAgI,eAAew6C,qCACf70D,EAAW7C,MAAO2rB,EAAO3P,cAEpBzgB,EAAOytC,oBAEhB,IAAIwuB,EAAqB7rC,EAAQE,eAAewsB,EAAApjC,aAAaa,YAAayhD,GAC1E,IAAKC,EAMH,OALA57D,KAAKqhB,MACH/H,EAAAgI,eAAeu6C,+CACf50D,EAAW7C,MAAO2rB,EAAO3P,cAE3BpgB,KAAKurD,YAAcyQ,EAAMO,EAAWntD,UAAUhK,WAAamU,EAAA+E,KAAKc,KACzDzf,EAAOytC,oBAEhB,IAAIkQ,EAAqBvtB,EAAQ1rB,KAO7Bm4D,GANAP,EAAiBhqD,OAAOjS,KAAKyd,SAASy+C,uBACtCC,EAAWn8D,KAAKyvD,4BAClBwM,EACAj8D,KAAKqe,QAAQW,UAAS,GAGNhf,KAAK+vD,kBACrBxnD,EACAgR,EAAA+E,KAAKG,IAAG,MAIV,GAAIu9C,EAAK,CACP,IAAIprC,EACA6rC,GADA7rC,EAAkB5wB,KAAK4wB,iBACWjD,aAAa2vB,GAAY,GAC3Dof,EAAmB9rC,EAAgB1C,oBAAoBluB,KAAKurD,aAAa,GACzEnmD,EAAam3D,EAAWntD,UAAUhK,WAEtC,OADApF,KAAK4wB,gBAAgB3C,cAAcwuC,GAC5B98D,EAAO4rC,YAAY,MACxBvrC,KAAK+5D,eAAe6B,GAClBj8D,EAAO4pC,eAAekzB,EAAgBrxC,MAAO+wC,GAC7Cx8D,EAAO4pC,eAAemzB,EAAiBtxC,MAAOoxC,GAC9CT,IAEF/7D,KAAK+5D,eAAewC,GAClB58D,EAAO0pC,eAAeozB,EAAgBrxC,MAAOqxC,EAAgBp4D,KAAKypB,gBAClEnuB,EAAO0pC,eAAeqzB,EAAiBtxC,MAAOsxC,EAAiBr4D,KAAKypB,mBAErE1oB,EAAW0oB,gBAEd,OAAO9tB,KAAK+5D,eAAe6B,GACzBO,EACAK,EACAT,KAWV,OAJA/7D,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENzE,EAAOytC,qBAGhB+d,EAAAlpD,UAAAo0D,sBAAA,SAAsBpvD,EAA4B6uD,GAChD,IAKI1mD,EACAutD,EANAh9D,EAASK,KAAKL,OACdixB,EAAkB5wB,KAAK4wB,gBACvBb,EAAS/vB,KAAKyd,SAAS+9C,kBAAkBv0D,EAAWA,WAAY2pB,GACpE,IAAKb,EAAQ,OAAOpwB,EAAOytC,oBAI3B,OAAQrd,EAAOntB,MAGb,KAAK65C,EAAAzgC,YAAYuH,mBACf,IAAIthB,EAA+B8tB,EAC/B7rB,EAAgB+C,EAAW/C,cAG/B,GAAIjC,EAAU+iB,aAAay3B,EAAAxgC,eAAe7J,SACxC,OAAOpS,KAAK48D,6BAA6B36D,EAAWgF,EAAY6uD,GAGlE,IAAI1yC,EAA4B,KAGhC,GAAIlf,EAAe,CACjB,IAAKjC,EAAU4B,GAAGxB,EAAAsB,YAAY8f,SAK5B,OAJAzjB,KAAKqhB,MACH/H,EAAAgI,eAAeu7C,sBACf51D,EAAWA,WAAW7C,MAAOnC,EAAUme,cAElCzgB,EAAOytC,oBAEhBhqB,EAAWpjB,KAAKyd,SAASizC,iCACvBzuD,EACAiC,EACAlE,KAAK4wB,gBAAgBpD,KAAK9B,wBAC1BzkB,OAIG,IAAIhF,EAAU4B,GAAGxB,EAAAsB,YAAY8f,SAAU,CAI5C,IAHA,IAAIq5C,EAAgB,IAAI3gD,IACpBrQ,EAAiBmG,OAAOhQ,EAAU4F,YAAYiE,gBAC9CixD,EAAoBjxD,EAAejF,OAC9BxG,EAAI,EAAGA,EAAI08D,IAAqB18D,EACvCy8D,EAAc94D,IAAI8H,EAAezL,GAAGO,KAAKoF,KAAM,MAGjD,IAAI6d,EAAiB5hB,EAAU4F,YAAYuH,UAAUjK,WACjD63D,EAAoBn5C,EAAehd,OACnCu0D,EAAsBn0D,EAAWrB,UACjCq3D,EAAe7B,EAAoBv0D,OACnCq2D,EAAgB,IAAIlnD,MAAqBinD,GAC7C,IAAS58D,EAAI,EAAGA,EAAI28D,IAAqB38D,EAAG,CAC1C,IAAI88D,EAAWt5C,EAAexjB,GAAGgE,KAC7BzD,EAAOu8D,EAASv6D,MAAQ4W,EAAA/W,SAASgP,KAAkB0rD,EAAUv8D,KAAKoF,KAAO,KACzEo3D,EAAqB/8D,EAAI48D,EACzB7B,EAAoB/6D,GACpB4B,EAAU4F,YAAYuH,UAAUjK,WAAW9E,GAAG0E,YAClD,IAAKq4D,EAKH,OAJAp9D,KAAKqhB,MACH/H,EAAAgI,eAAeoG,+BACfzgB,EAAW7C,MAAO44D,EAAkBp4C,SAAS,IAAKq4C,EAAar4C,SAAS,KAEnEjlB,EAAOytC,oBAEhB,GAAa,OAATxsC,GAAiBk8D,EAAc55C,IAAItiB,GAAO,CAE5C,GADIy8D,EAAeP,EAAc57D,IAAIN,GACnB,CAChBs8D,EAAc78D,GAAKL,KAAKyvD,4BAA4B2N,EAAoBC,EAAY,GACpF,IAAIrE,OAAU,EACd,KAAMA,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBwf,EAAcr9D,KAAKurD,aAAa,OACjEyN,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBwf,EAAcr9D,KAAKurD,aAAa,IAKvE,OAJAvrD,KAAKqhB,MACH/H,EAAAgI,eAAeouC,mCACf7rC,EAAexjB,GAAGgE,KAAKD,MAAOpE,KAAKurD,YAAY3mC,WAAYy4C,EAAaz4C,YAEnEjlB,EAAOytC,oBAGlBiwB,EAAerE,OAEfkE,EAAc78D,GAAKL,KAAKyvD,4BAA4B2N,EAAoB7jD,EAAA+E,KAAKG,IAAG,GAChF4+C,EAAer9D,KAAKurD,YAGtBuR,EAAc94D,IAAIpD,EAAMy8D,OACnB,CACL,IAAIC,EAAet9D,KAAKyd,SAAS6xC,YAC/BzrC,EAAexjB,GAAGgE,KAClBrE,KAAK4wB,gBAAgBpD,KAAK9B,yBAE5B,IAAK4xC,EAAc,OAAO39D,EAAOytC,oBACjC8vB,EAAc78D,GAAKL,KAAK+vD,kBACtBqN,EACAE,EAAY,MAMlB,IAAIC,EAAwB,IAAIvnD,MAAY+mD,GAC5C,IAAS18D,EAAI,EAAGA,EAAI08D,IAAqB18D,EAAG,CAC1C,IAAIg9D,EAAeprD,OAAO6qD,EAAc57D,IAAI4K,EAAezL,GAAGO,KAAKoF,OACnEu3D,EAAsBl9D,GAAKg9D,EAO7B,OALAj6C,EAAWpjB,KAAKyd,SAASmG,gBACvB3hB,EACAs7D,EACAv9D,KAAK4wB,gBAAgBpD,KAAK9B,0BAGrB1rB,KAAK+5D,eAAe32C,EAAU85C,GADfl9D,KAAKL,OAAOytC,oBAQlChqB,EAAWpjB,KAAKyd,SAASmG,gBACvB3hB,EACA,KACAjC,KAAK4wB,gBAAgBpD,KAAK9B,yBAG9B,IAAKtI,EAAU,OAAOpjB,KAAKL,OAAOytC,oBAGlC,IAAI+uB,EAA0B,EAS9B,OARI/4C,EAASvf,GAAGxB,EAAAsB,YAAYipB,YAC1BuvC,EAAWn8D,KAAKyvD,4BACdx9C,OAAOjS,KAAKyd,SAASy+C,uBACrBl8D,KAAKqe,QAAQW,UAAS,IAKnBhf,KAAKs7D,kBACVl4C,EACAnc,EAAWrB,UACXqB,EACAk1D,EACA/4C,EAAS4B,aAAay3B,EAAAxgC,eAAezJ,SAKzC,KAAKiqC,EAAAzgC,YAAYqP,MACf,GAAIjc,EAAoB2gB,EAAQ1rB,KAAKyf,mBAAoB,CAErD64C,EADU5sC,EAAQlsB,GAAGxB,EAAAsB,YAAYqnB,SACtBrrB,EAAOqoC,UAAUsI,QAAgBvgB,EAAQhF,uBAEzCprB,EAAO0pC,eAAuBtZ,EAAQ3E,MAAK,GAExD,MAMA,OAJAprB,KAAKqhB,MACH/H,EAAAgI,eAAek8C,uGACfv2D,EAAW7C,MAAe2rB,EAAQ1rB,KAAKugB,YAElCjlB,EAAOytC,oBAGlB,KAAKqP,EAAAzgC,YAAYzJ,OACf,GAAInD,EAAqB2gB,EAAQ1rB,KAAKyf,mBAAoB,CACxD64C,EAAWh9D,EAAO8pC,gBAAyB1Z,EAAQ3P,aAAuB2P,EAAQ1rB,KAAKypB,gBACvF,MAMA,OAJA9tB,KAAKqhB,MACH/H,EAAAgI,eAAek8C,uGACfv2D,EAAW7C,MAAgB2rB,EAAQ1rB,KAAKugB,YAEnCjlB,EAAOytC,oBAGlB,KAAKqP,EAAAzgC,YAAYmT,MAEf,GAAI/f,EADe2gB,EAAQ1rB,KACNyf,mBAAoB,CACvC,IAAIm4C,EAAiBhqD,OAAOjS,KAAKyd,SAASy+C,uBACtCC,EAAWn8D,KAAKyvD,4BAClBwM,EACAj8D,KAAKqe,QAAQW,UAAS,GAGxB29C,EAAWh9D,EAAOgqC,WAChB,GACA,EACAwyB,EAAQ,EAEApsC,EAAQX,cAElB,MAMA,OAJApvB,KAAKqhB,MACH/H,EAAAgI,eAAek8C,uGACfv2D,EAAW7C,MAAe2rB,EAAQ1rB,KAAKugB,YAElCjlB,EAAOytC,oBAGlB,KAAKqP,EAAAzgC,YAAY8S,gBACf1f,EAA6B2gB,EAAQ3gB,UACrCutD,EAAW38D,KAAK+vD,kBACd9oD,EAAWA,WACM8oB,EAAQ1rB,KAAI,KAI/B,MAEF,KAAKo4C,EAAAzgC,YAAYlI,MACf,OAAOnU,EAAOusC,YAEhB,KAAKuQ,EAAAzgC,YAAY+L,SAEjB,QAKE,OAJA/nB,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENzE,EAAOytC,oBAGlB,OAAOptC,KAAKy9D,oBACVruD,EACAutD,EACA11D,EAAWrB,UACXqB,IAIIkkD,EAAAlpD,UAAA26D,6BAAR,SACE36D,EACAgF,EACA6uD,GAEA,IAAI5xD,EAA+B,KAI/Bw5D,EAAoBz2D,EAAW/C,cAC/B+C,EAAW/C,gBACRjC,EAAU4B,GAAGxB,EAAAsB,YAAY8f,UAC5BzjB,KAAKqhB,MACH/H,EAAAgI,eAAeu7C,sBACf51D,EAAW7C,MAAOnC,EAAUme,cAGhClc,EAAgBlE,KAAKyd,SAASkgD,qBAC5B1rD,OAAOhQ,EAAU4F,YAAYiE,gBAC7B4xD,EACA19D,KAAK4wB,gBAAgBpD,KAAK9B,wBAC1BzkB,IAKJ,IAAIb,EAAOmkD,EAAAqT,YACT59D,KACAiC,EACAiC,EACA+C,EAAWrB,UACXkwD,EACA7uD,GAEF,OAAKb,IACHpG,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,sBASvB+d,EAAAlpD,UAAA47D,mBAAA,SACEzuD,EACA6tD,EACAa,EACAzP,GAKA,GAAIyP,IAAwB,MADb1uD,EAAU0d,UAMvB,OAJA9sB,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,QAEN,EAIT,IAAIu6C,EAAUvvC,EAAUuvC,QACxB,GAAIA,EAKF,OAJA3+C,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,QAEN,EAGT,IAAI25D,EAAU3uD,EAAUsvC,mBACpB3O,EAAU3gC,EAAUyU,eAAehd,OAGvC,OAAIo2D,EAAec,GACjB/9D,KAAKqhB,MACH08C,EAAUhuB,EACNz2B,EAAAgI,eAAe08C,wCACf1kD,EAAAgI,eAAeoG,+BACnB2mC,EAAWjqD,MAAO25D,EAAQn5C,WAAYq4C,EAAar4C,aAE9C,KAILq4C,EAAeltB,IAAY4O,KAC7B3+C,KAAKqhB,MACH/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO2rC,EAAQnrB,WAAYq4C,EAAar4C,aAE9C,IAOXumC,EAAAlpD,UAAAq5D,kBAAA,SACEl4C,EACAg4C,EACA/M,EACAgN,EACA4C,QADA,IAAA5C,MAAA,QACA,IAAA4C,OAAA,GAEA,IAAIhB,EAAe7B,EAAoBv0D,OACnCuI,EAAYgU,EAAShU,UAEzB,IAAKpP,KAAK69D,mBACRzuD,EACA6tD,EACW,GAAX5B,EACAhN,GAEA,OAAOruD,KAAKL,OAAOytC,oBAIrB,GAAI6wB,EAAQ,CAEV,GADAhsD,QAAQmR,EAASvf,GAAGxB,EAAAsB,YAAYquD,cAC5BhyD,KAAKqrD,uBAAuB6S,SAAS96C,GAKlC,CACLpjB,KAAKqrD,uBAAuB7lC,KAAKpC,GACjC,IAAIhd,EAAOpG,KAAKm+D,2BAA2B/6C,EAAUg4C,EAAqB/M,EAAYgN,GAEtF,OADAr7D,KAAKqrD,uBAAuBt9B,MACrB3nB,EARPpG,KAAKw7B,QACHliB,EAAAgI,eAAe88C,yCACf/P,EAAWjqD,MAAOgf,EAAShD,cAWjC,IAAIi+C,EAAuBhD,EAAU4B,EAAe,EAAIA,EACpD/zB,EAAW,IAAIlzB,MAAqBqoD,GACpCjzC,EAAQ,EACRiwC,IACFnyB,EAAS,GAAKmyB,EACdjwC,EAAQ,GAGV,IADA,IAAIvH,EAAiBzU,EAAUyU,eACtBxjB,EAAI,EAAGA,EAAI48D,IAAgB58D,IAAK+qB,EACvC8d,EAAS9d,GAASprB,KAAK+vD,kBACrBqL,EAAoB/6D,GACpBwjB,EAAexjB,GAAE,KAMrB,OADA4R,OAAOmZ,GAASizC,GACTr+D,KAAK+5D,eAAe32C,EAAU8lB,IAI/BiiB,EAAAlpD,UAAAk8D,2BAAR,SACE/6C,EACAg4C,EACA/M,EACAgN,gBAAA,IAAAA,MAAA,GAEA,IAAI4B,EAAe7B,EAAoBv0D,OACnCuI,EAAYgU,EAAShU,UACrBwhB,EAAkB5wB,KAAK4wB,gBACvBjxB,EAASK,KAAKL,OACdkI,EAAcub,EAASnhB,UAAU4F,YAGjCy2D,EAAe1tC,EAAgBpD,KAC/BwD,EAAc5N,EAAShD,aAAe,aAAegD,EAASkJ,gBAAgB1H,SAAS,IACvFxf,EAAage,EAAShU,UAAUhK,WAChCooB,EAAOivB,EAAAhvB,KAAK9rB,OAAOivB,GACvBpD,EAAKxpB,IAAG,MACRwpB,EAAKwD,YAAcA,EACnBxD,EAAKpoB,WAAaA,EAClBooB,EAAK9B,wBAA0BtI,EAASsI,wBAIxC,IAAIrc,KACJ,GAAIgsD,EAAS,CACX,IAAI53D,EAASwO,OAAOmR,EAAS3f,QAE7B,GADAwO,OAAOxO,EAAOb,MAAQ65C,EAAAzgC,YAAYlI,OAC9B2F,EAAA2Z,gBAAgBioC,IAAY5hD,EAAA4Z,aAAaC,SAC3C9F,EAAKoE,oBACHnY,EAAA8Z,iBAAiB8nC,GACT53D,EAAQY,KAChB,YAEG,CACL,IAAIk6D,EAAY/wC,EAAKkE,eAAuBjuB,EAAQY,KAAM,QAAQ,GAClEgL,EAAKmW,KACH7lB,EAAOwrC,eAAeozB,EAAUnzC,MAAOiwC,KAK7C,IADA,IAAIx3C,EAAiBzU,EAAUyU,eACtBxjB,EAAI,EAAGA,EAAI48D,IAAgB58D,EAAG,CACrC,IAAIm+D,EAAYx+D,KAAK+vD,kBACnBqL,EAAoB/6D,GACpBwjB,EAAexjB,GAAE,KAInB,GAAIoZ,EAAA2Z,gBAAgBorC,IAAc/kD,EAAA4Z,aAAaC,SAC7C9F,EAAKoE,oBACHnY,EAAA8Z,iBAAiBirC,GACjB36C,EAAexjB,GACf+O,EAAUme,iBAAiBltB,QAGxB,CACL,IAAIo+D,EAAgBjxC,EAAKkE,eACvB7N,EAAexjB,GACf+O,EAAUme,iBAAiBltB,IAC1BmtB,EAAK2F,YAAYqrC,EAAW36C,EAAexjB,KAE9CgP,EAAKmW,KACH7lB,EAAOwrC,eAAeszB,EAAcrzC,MAAOozC,KAMjD5tC,EAAgBpD,KAAOA,EACvB,IAAIyxB,EAAgB7vC,EAAUyU,eAAehd,OAC7C,IAASxG,EAAI48D,EAAc58D,EAAI4+C,IAAiB5+C,EAAG,CACjD,IAAI+uD,EAAWpvD,KAAK+vD,kBAClB99C,OAAOpK,EAAYuH,UAAUjK,WAAW9E,GAAG0E,aAC3C8e,EAAexjB,GAAE,KAIfo+D,EAAgBjxC,EAAKkE,eACvB7N,EAAexjB,GACf+O,EAAUme,iBAAiBltB,IAC1BmtB,EAAK2F,YAAYi8B,EAAUvrC,EAAexjB,KAE7CgP,EAAKmW,KACH7lB,EAAOwrC,eAAeszB,EAAcrzC,MAAOgkC,IAK/C,IAAIwE,EAAgB3hD,OAAOpK,EAAYwH,MACvC,GAAIukD,EAAchxD,MAAQ4W,EAAA/W,SAASuS,MAEjC,IADA,IAAIzJ,EAA8BqoD,EAAeroD,WACjC3E,GAAPvG,EAAI,EAAOkL,EAAW1E,QAAQxG,EAAIuG,IAAKvG,EAAG,CACjD,IAAIqF,EAAO1F,KAAKgvD,iBAAiBzjD,EAAWlL,IAC5C,GAAIoZ,EAAA2Z,gBAAgB1tB,IAAS+T,EAAA4Z,aAAa4/B,MACxC5jD,EAAKmW,KAAK9f,GACN8nB,EAAKzpB,MAAK,KAA6B,WAI/CsL,EAAKmW,KAAKxlB,KAAKgvD,iBAAiB4E,IAIlC,IAAIjjC,EAAenD,EAAKmD,aACxB,GAAIA,EAAc,KAChB,IAAwB,IAAAzD,EAAAzL,EAAAkP,EAAajnB,UAAQmY,EAAAqL,EAAAvL,QAAAE,EAAAD,KAAAC,EAAAqL,EAAAvL,OAAE,CAA1C,IAAI6P,EAAW3P,EAAAvgB,MACdkwB,EAAY3tB,GAAGxB,EAAAsB,YAAY8tB,SAC7Bb,EAAgB3C,cAAcuD,qGAGlChE,EAAKmD,aAAe,KAOtB,OALAnD,EAAKc,WACLtuB,KAAK4wB,gBAAgBpD,KAAO8wC,EAC5Bt+D,KAAKurD,YAAcnmD,EAGfA,GAAcmU,EAAA+E,KAAKc,MAASoO,EAAKzpB,MAAK,IAOnCpE,EAAO4rC,YAAYva,EAAa3hB,EAAMjK,EAAW0oB,iBANtD9tB,KAAKqhB,MACH/H,EAAAgI,eAAe8vC,+DACfvpD,EAAYuH,UAAUhK,WAAWhB,OAE5BzE,EAAOytC,sBAMlB+d,EAAAlpD,UAAAqrD,iBAAA,SAAiBoR,GAQf,IAAIxyC,EAAawyC,EAASxyC,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAIyyC,EAAoBD,EAAStvD,UAC7BwvD,EAAeF,EAASt+C,aACxBy+C,EAAyBF,EAAkB96C,eAC3Ci7C,EAAgCJ,EAASz8D,UAAU4F,YAAYuH,UAAUjK,WACzE45D,EAAmBJ,EAAkBv5D,WACrC45D,EAAiBL,EAAkB7xC,SACnCmyC,EAAaP,EAAS76D,GAAGxB,EAAAsB,YAAYipB,UAGrCsyC,EAAeP,EAAkBjgB,mBACjCygB,EAAcD,EACdE,EAAeP,EAAuBh4D,OACtCw4D,EAAcD,EACdH,MACAE,IACAE,GAEJ,IAAIC,EAAcrtD,OAAOotD,EAAcF,GAEnCI,EAAoB,IAAIvpD,MAAqBmpD,GAC7CK,EAAe,EAGf7/D,EAASK,KAAKL,OACds/D,IACFM,EAAkB,GAAK5/D,EAAO0pC,eAAe,EAAGrpC,KAAKqe,QAAQsvC,gBAC7D6R,EAAe,GAIjB,IAAK,IAAIn/D,EAAI,EAAGA,EAAI6+D,IAAgB7+D,IAAKm/D,EACvCD,EAAkBC,GAAgB7/D,EAAO0pC,eAAem2B,EAAcX,EAAuBx+D,GAAGytB,gBAElG7b,OAAOutD,GAAgBL,GAGvB,IAAIM,EAAsB,IAAIlmD,EAAAglC,UAAUsgB,EAAwBE,EAAkBC,GAC9EU,EAAiBd,EAAe,cACpCa,EAAoB/gB,mBAAqB0gB,GACzClzC,EAAa,IAAIuwB,EAAAhxB,SACfizC,EAASz8D,UACTy9D,EACAD,EACAf,EAASj7D,OACTi7D,EAAShzC,0BAEA1nB,IAAI06D,EAASh7D,MAAQrB,EAAAsB,YAAYquD,WAAa3vD,EAAAsB,YAAY6pD,UACrEkR,EAASxyC,WAAaA,EAItB,IAAI6iC,EAAmB/uD,KAAK4wB,gBAC5B5wB,KAAK4wB,gBAAkB1E,EAGvB,IAAIwgB,EAAW4yB,EAAc,EACzB71D,EAAQ,IAAIuM,MAAc02B,GAC1BizB,EAAM,KAAOL,EAAY16C,SAAS,IACtC,IAASvkB,EAAI,EAAGA,EAAIqsC,IAAYrsC,EAAG,CACjC,IAAIqL,EAAQrL,EAAEukB,SAAS,IAAM+6C,EAC7Bl2D,EAAMpJ,GAAKqL,EAEb,IAAI2D,EAAO1P,EAAO4rC,YAAY9hC,EAAM,IAClC9J,EAAO4rC,YAAY,cACjB5rC,EAAO6sC,aAAa/iC,EAAO,aAEzBy1D,EACIv/D,EAAOopC,aACLtvB,EAAAsa,SAASylC,OACT75D,EAAO8pC,gBAAgB,QAAO,GAC9B9pC,EAAOqoC,UAAUk3B,IAEnBv/D,EAAO8pC,gBAAgB,QAAO,MAGtC9pC,EAAOytC,sBAET,IAAS/sC,EAAI,EAAGA,EAAIi/D,IAAej/D,IAAKm/D,EAAc,CACpD,IAAIn7D,EAAOw6D,EAAuBK,EAAe7+D,GAC7CwH,EAAci3D,EAA8BI,EAAe7+D,GAC3D0E,EAAc8C,EAAY9C,YAC1BqqD,OAAQ,EACRrqD,EACFqqD,EAAWzvD,EAAOwrC,eAAeq0B,EAC/Bx/D,KAAK+vD,kBACHhrD,EACAV,EAAI,OAMRrE,KAAKqhB,MACH/H,EAAAgI,eAAes+C,4CACf/3D,EAAYzD,OAEdgrD,EAAWzvD,EAAOytC,qBAEpB/9B,EAAO1P,EAAO4rC,YAAY9hC,EAAMpJ,EAAI,IAClCgP,EACA+/C,IAEFmQ,EAAkBC,GAAgB7/D,EAAO0pC,eAAem2B,EAAcn7D,EAAKypB,gBAE7E9tB,KAAK4wB,gBAAkBm+B,EACvB98C,OAAOutD,GAAgBH,GAEvB,IAAI9S,EAAU5sD,EAAO8tC,YACnBiyB,EACA1/D,KAAKwsD,mBACHiT,EAAoB57C,eACpB47C,EAAoBr6D,WACpBq6D,EAAoB3yC,UAEtBvT,EAAA4kC,mBAAmBjyB,EAAWL,kBAC9BlsB,EAAO4rC,YAAY,MACjBl8B,EACA1P,EAAOktC,WACL+xB,EACAW,EACAR,EAAiBjxC,iBAElBixC,EAAiBjxC,iBAGtB,OADA5B,EAAWoC,SAAS3uB,EAAQ4sD,GACrBrgC,GAIDi/B,EAAAlpD,UAAA49D,cAAR,WAEE,IAAK7/D,KAAK2rD,QAAS,CACjB,IAAIhsD,EAASK,KAAKL,OAClBK,KAAK2rD,QAAUhsD,EAAO2tC,UAHL,QAIH,GAEZ,EACA3tC,EAAOqoC,UAAU,IAGrB,MAVmB,SAcbmjB,EAAAlpD,UAAAsrD,cAAR,WAEE,IAAKvtD,KAAK4rD,QAAS,CACjB,IAAIjsD,EAASK,KAAKL,OAClBK,KAAK4rD,QAAUjsD,EAAO8tC,YAHL,WAIfztC,KAAKwsD,oBAAqBjzC,EAAA+E,KAAKQ,KAAOvF,EAAA+E,KAAKc,MAC3C,KACAzf,EAAO0rC,gBAAgBrrC,KAAK6/D,gBAC1BlgE,EAAO0pC,eAAe,EAAC,KAG3B1pC,EAAOuuC,kBAVU,WAUsB,YAEzC,MAZmB,YAgBrBid,EAAAlpD,UAAA83D,eAAA,SACE32C,EACA8lB,QAAA,IAAAA,MAAA,MAEA,IAAI42B,EAAc52B,EAAWA,EAASriC,OAAS,EAC3Co2D,EAAe6C,EAEfX,EADe/7C,EAAShU,UAAUsvC,mBAElC0gB,EAAeh8C,EAAShU,UAAUyU,eAAehd,OACjDw4D,EAAcD,EACdh8C,EAASvf,GAAGxB,EAAAsB,YAAYipB,cACxBuyC,IACAE,IACApC,GAEJhrD,OAAO6tD,GAAeX,GAEtB,IAAIx/D,EAASK,KAAKL,OAClB,IAAKK,KAAK2wD,gBAAgBvtC,GAAW,OAAOzjB,EAAOytC,oBACnD,IAAIhoC,EAAage,EAAShU,UAAUhK,WAChC26D,EAAe38C,EAASvf,GAAGxB,EAAAsB,YAAYisD,eAG3C,GAAIkQ,EAAcT,EAAa,CACxBn2B,KACHA,EAAW,IAAIlzB,MAAMqpD,IACZx4D,OAAS,GAKpB,IAHA,IAAIgd,EAAiBT,EAAShU,UAAUyU,eACpCm8C,EAAiB58C,EAASnhB,UAAU4F,YAAYuH,UAAUjK,WAC1D86D,GAA0B,EACrB5/D,EAAI48D,EAAc58D,EAAI++D,IAAgB/+D,EAAG,CAChD,IAAI0E,EAAci7D,EAAe3/D,GAAG0E,YACpC,GAAsB,OAAhBA,IAAwByU,EAAA7W,oBAAoBoC,EAAYnC,MAAQ,CACpEq9D,GAA0B,EAC1B,OAGJ,GAAIA,EACF,IAAS5/D,EAAI48D,EAAc58D,EAAI++D,IAAgB/+D,EAC7C6oC,EAAS1jB,KACPxlB,KAAK+vD,kBACSiQ,EAAe3/D,GAAG0E,YAC9B8e,EAAexjB,GAAE,UAMlB,CACL,IAASA,EAAI48D,EAAc58D,EAAI++D,IAAgB/+D,EAC7C6oC,EAAS1jB,KAAK3B,EAAexjB,GAAG29C,aAAar+C,IAE/C,IAAKogE,EAAc,CACjB,IAAIrB,EAAWt7C,EAEf,GADAA,EAAWpjB,KAAKstD,iBAAiBlqC,IAC5BpjB,KAAK2wD,gBAAgBvtC,GAAW,OAAOzjB,EAAOytC,oBACnDhqB,EAASoK,KAAK9pB,MAAQg7D,EAASlxC,KAAK9pB,MACpC1D,KAAKgqB,QAAQxN,gBAAgBxY,IAAIof,EAAShD,aAAcgD,GACxD,IAAIk5C,EAAmBl3D,EAAW0oB,eAElC,OADA9tB,KAAKurD,YAAcnmD,EACZzF,EAAO4rC,YAAY,MACxB5rC,EAAO0rC,gBAAgBrrC,KAAK6/D,gBAAiBlgE,EAAOqoC,UAAUi1B,IAC9Dt9D,EAAOktC,WAAWzpB,EAAShD,aAAc8oB,EAAUozB,IAClDA,KAOT,OADAt8D,KAAKurD,YAAcnmD,EACf26D,EAAqBpgE,EAAOotC,iBAAiB3pB,EAAShD,aAAc8oB,EAAU9jC,EAAW0oB,gBACnFnuB,EAAOktC,WAAWzpB,EAAShD,aAAc8oB,EAAU9jC,EAAW0oB,iBAK1Eq9B,EAAAlpD,UAAAw7D,oBAAA,SACEruD,EACAutD,EACAvB,EACA/M,EACAgN,QAAA,IAAAA,MAAA,GAEA,IAAI4B,EAAe7B,EAAoBv0D,OAEvC,IAAK7G,KAAK69D,mBACRzuD,EACA6tD,EACW,GAAX5B,EACAhN,GAEA,OAAOruD,KAAKL,OAAOytC,oBAGrB,IAAIixB,EAAuBhD,EAAU4B,EAAe,EAAIA,EACpD/zB,EAAW,IAAIlzB,MAAqBqoD,GACpCjzC,EAAQ,EACRiwC,IACFnyB,EAAS,GAAKmyB,EACdjwC,EAAQ,GAGV,IADA,IAAIvH,EAAiBzU,EAAUyU,eACtBxjB,EAAI,EAAGA,EAAI48D,IAAgB58D,IAAK+qB,EACvC8d,EAAS9d,GAASprB,KAAK+vD,kBACrBqL,EAAoB/6D,GACpBwjB,EAAexjB,GAAE,KAMrB,OADA4R,OAAOmZ,GAASizC,GACTr+D,KAAKkgE,iBAAiB9wD,EAAWutD,EAAUzzB,IAIpDiiB,EAAAlpD,UAAAi+D,iBAAA,SACE9wD,EACAutD,EACAzzB,QAAA,IAAAA,MAAA,MAEA,IAAI42B,EAAc52B,EAAWA,EAASriC,OAAS,EAC3Co2D,EAAe6C,EAEfX,EADe/vD,EAAUsvC,mBAEzB0gB,EAAehwD,EAAUyU,eAAehd,OACxCw4D,EAAcD,EACdhwD,EAAU0d,aACVqyC,IACAE,IACApC,GAEJhrD,OAAO6tD,GAAeX,GAEtBn/D,KAAKwsD,mBAAmBp9C,EAAUyU,eAAgBzU,EAAUhK,WAAYgK,EAAU0d,UAClF,IAAIntB,EAASK,KAAKL,OAGlB,GAAImgE,EAAcT,EAAa,CACxBn2B,KACHA,EAAW,IAAIlzB,MAAMqpD,IACZx4D,OAAS,GAGpB,IADA,IAAIgd,EAAiBzU,EAAUyU,eACtBxjB,EAAI48D,EAAc58D,EAAI++D,IAAgB/+D,EAC7C6oC,EAAS1jB,KAAK3B,EAAexjB,GAAG29C,aAAar+C,IAIjD,IAAIyF,EAAagK,EAAUhK,WAE3B,OADApF,KAAKurD,YAAcnmD,EACZzF,EAAO4rC,YAAY,MACxB5rC,EAAO0rC,gBAAgBrrC,KAAK6/D,gBAC1BlgE,EAAOqoC,UAAUi1B,IAEnBt9D,EAAOstC,mBAAmB0vB,EAAUzzB,EAAU95B,EAAU2f,sBACvD3pB,EAAW0oB,iBAGhBq9B,EAAAlpD,UAAAq0D,uBAAA,SAAuBrvD,EAA6B6uD,GAIlD,IAHA,IAAI9tD,EAAcf,EAAWe,YACzBm4D,EAAiBn4D,EAAYnB,OAC7Bu5D,EAAQ,IAAIpqD,MAAqBmqD,KAC5B9/D,EAAI,EAAGA,EAAI8/D,IAAkB9/D,EACpC+/D,EAAM//D,GAAKL,KAAK+vD,kBACd/nD,EAAY3H,GACZkZ,EAAA+E,KAAKc,UAWT,OANAghD,EAAMD,GAAkBngE,KAAK+vD,kBAC3B/nD,EAAYm4D,GACZrK,OAIK91D,KAAKL,OAAO4rC,YAAY,KAAM60B,EAAOpgE,KAAKurD,YAAYz9B,iBAG/Dq9B,EAAAlpD,UAAAs0D,+BAAA,SAA+BtvD,EAAqC6uD,GAClE,IAAI/lC,EAAS/vB,KAAKyd,SAAS4iD,qBAAqBp5D,EAAYjH,KAAK4wB,iBACjE,IAAKb,EAAQ,OAAO/vB,KAAKL,OAAOytC,oBAChC,OAAQrd,EAAOntB,MACb,KAAK65C,EAAAzgC,YAAYlI,MACf,IAAI6nD,EAAc37D,KAAK4wB,gBAAgBpD,KAAK3pB,GAAE,MAC1C04D,EAAqBxsC,EAAQE,eAAewsB,EAAApjC,aAAaY,YAAa0hD,GAC1E,IAAKY,EAKH,OAJAv8D,KAAKqhB,MACH/H,EAAAgI,eAAew6C,qCACf70D,EAAWA,WAAW7C,MAAe2rB,EAAQ3P,cAExCpgB,KAAKL,OAAOytC,oBAErB,IAAIiuB,EAAUr7D,KAAK+vD,kBACjB9oD,EAAWA,WACH8oB,EAAQ1rB,KAAI,KAItB,OAAOrE,KAAKs7D,kBAAkBiB,GAC5Bt1D,EAAWsB,mBACVtB,EAAYo0D,GAOnB,OAJAr7D,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,qBAGrB+d,EAAAlpD,UAAAu0D,0BAAA,SAA0BvvD,EAAgC6uD,GACxD,IAAIjuD,EAAcZ,EAAWY,YACzBjH,EAAOiH,EAAYjH,KACnBukB,GAAcvkB,EAAKoF,KAAKa,OACxBjG,EAAKoF,KACL,aAAe,IAAMhG,KAAK0rD,cAAc7kD,OAAO+d,SAAS,IACxDgM,EAAkB5wB,KAAK4wB,gBACvB3uB,EAAY,IAAIw6C,EAAA31B,kBAClB9mB,KAAKgqB,QACL7E,EACAyL,EAAgBxQ,aAAe/d,EAAA6W,gBAAkBiM,EACjDtd,EACA,KACA40C,EAAAxgC,eAAerY,MAEb4pB,EAAOoD,EAAgBpD,KACvBpK,EAAWpjB,KAAKywD,kCAClBxuD,KAEAurB,EAAK9B,wBACL8B,EACA3lB,GAEF,IAAKub,EAAU,OAAOpjB,KAAKL,OAAOytC,oBAClCptC,KAAKurD,YAAcnoC,EAAShU,UAAU/K,KAGtC,IAAI+mB,EAAQprB,KAAK+xD,yBAAyB3uC,GAC1C,OAAOgI,EAAQ,EACXprB,KAAKL,OAAOytC,oBACZptC,KAAKL,OAAOqoC,UAAU5c,IAG5B+/B,EAAAlpD,UAAAy0D,qBAAA,WAEE,OADa12D,KAAKL,OACJusC,aAQhBif,EAAAlpD,UAAAw0D,4BAAA,SACExvD,EACA6uD,EACAwK,GAEA,IAAI3gE,EAASK,KAAKL,OACdixB,EAAkB5wB,KAAK4wB,gBAG3B,OAAQ3pB,EAAWrE,MACjB,KAAK4W,EAAA/W,SAASK,KACZ,IAAIub,EAAUre,KAAKqe,QAInB,OAHKy3C,EAAehZ,iBAClB98C,KAAKurD,YAAcltC,EAAQW,WAEtBX,EAAQkB,SACX5f,EAAOyoC,UAAU,GACjBzoC,EAAOqoC,UAAU,GAEvB,KAAKxuB,EAAA/W,SAASM,KAEZ,OADA/C,KAAKurD,YAAchyC,EAAA+E,KAAKW,KACjBtf,EAAOqoC,UAAU,GAE1B,KAAKxuB,EAAA/W,SAASO,MAEZ,OADAhD,KAAKurD,YAAchyC,EAAA+E,KAAKW,KACjBtf,EAAOqoC,UAAU,GAE1B,KAAKxuB,EAAA/W,SAASkS,KAEZ,IADI6Y,EAAOoD,EAAgBpD,MAClB3pB,GAAE,MAET,GADI08D,EAAa/yC,EAAKsE,eAAe,QAGnC,OADA9xB,KAAKurD,YAAcgV,EAAWl8D,KACvB1E,EAAO0pC,eAAek3B,EAAWn1C,MAAOm1C,EAAWl8D,KAAKypB,gBAGnE,GAAI8C,EAAgB/sB,GAAGxB,EAAAsB,YAAYipB,UAAW,CAC5C,IAAInpB,EAASwO,OAAO2e,EAAgBntB,QACpCwO,OAAOxO,EAAOb,MAAQ65C,EAAAzgC,YAAYlI,OAClC,IAAIgZ,EAAmBrpB,EAAQY,KAC/B,OAAIusB,EAAgB/sB,GAAGxB,EAAAsB,YAAYqQ,eAC5BwZ,EAAK3pB,GAAE,KACV2pB,EAAKxpB,IAAG,IAERhE,KAAKurD,YAAcz+B,EACZntB,EAAO4pC,eAAe,EAC3BvpC,KAAKmxD,wBAA+B1tD,EAAQwD,MAIlDjH,KAAKurD,YAAcz+B,EACZntB,EAAO0pC,eAAe,EAAGvc,EAASgB,iBAO3C,OALA9tB,KAAKqhB,MACH/H,EAAAgI,eAAek/C,+CACfv5D,EAAW7C,OAEbpE,KAAKurD,YAAcvrD,KAAKqe,QAAQW,UACzBrf,EAAOytC,oBAEhB,KAAK5zB,EAAA/W,SAASW,MACZ,IAAIoqB,EAEE+yC,EADN,IADI/yC,EAAOoD,EAAgBpD,MAClB3pB,GAAE,MAET,GADI08D,EAAa/yC,EAAKsE,eAAe,QAInC,GADIxC,EADkBrd,OAAOsuD,EAAWl8D,KAAKy4C,gBAClBxtB,KAGzB,OADAtvB,KAAKurD,YAAcj8B,EAAKjrB,KACjB1E,EAAO0pC,eAAek3B,EAAWn1C,MAAOkE,EAAKjrB,KAAKypB,gBAI/D,GAAI8C,EAAgB/sB,GAAGxB,EAAAsB,YAAYipB,UAAW,CAC5C,IAEI0C,EAFA7rB,EAASwO,OAAO2e,EAAgBntB,QAGpC,GAFAwO,OAAOxO,EAAOb,MAAQ65C,EAAAzgC,YAAYlI,OAC9Bwb,EAAe7rB,EAAQ6rB,KACjB,CACR,IAAImxC,EAAYnxC,EAAKjrB,KAErB,OADArE,KAAKurD,YAAckV,EACZ9gE,EAAO0pC,eAAe,EAAGo3B,EAAU3yC,iBAQ9C,OALA9tB,KAAKqhB,MACH/H,EAAAgI,eAAeo/C,iDACfz5D,EAAW7C,OAEbpE,KAAKurD,YAAcvrD,KAAKqe,QAAQW,UACzBrf,EAAOytC,oBAKlB,IAAIrd,EAAS/vB,KAAKyd,SAASgF,kBACzBxb,EACAjH,KAAKsrD,aAAe16B,GAEtB,IAAKb,EAAQ,OAAOpwB,EAAOytC,oBAE3B,OAAQrd,EAAOntB,MACb,KAAK65C,EAAAzgC,YAAYqP,MACf,IAAIs1C,EAAoB5wC,EAAQ1rB,KAEhC,GADA4N,OAAO0uD,GAAapnD,EAAA+E,KAAKc,MACb2Q,EAAQlsB,GAAGxB,EAAAsB,YAAYqnB,SACjC,OAAOhrB,KAAK61D,sBAA6B9lC,EAAQ+lC,EAAgBwK,GAEnE,IAAI3zC,EAAqBoD,EAAQ3E,MAGjC,OAFAnZ,OAAO0a,GAAc,GACrB3sB,KAAKurD,YAAcoV,EACZ3gE,KAAKL,OAAO0pC,eAAe1c,EAAYg0C,EAAU7yC,gBAE1D,KAAK2uB,EAAAzgC,YAAYzJ,OACf,IAAKvS,KAAKkvD,cAAsBn/B,GAC9B,OAAO/vB,KAAKL,OAAOytC,oBAErB,IAAIqC,EAAsB1f,EAAQ1rB,KAElC,OADA4N,OAAOw9B,GAAcl2B,EAAA+E,KAAKc,MACb2Q,EAAQlsB,GAAGxB,EAAAsB,YAAYqnB,SAC3BhrB,KAAK61D,sBAA8B9lC,EAAQ+lC,EAAgBwK,IAEpEtgE,KAAKurD,YAAc9b,EACZzvC,KAAKL,OAAO8pC,gBAAyB1Z,EAAQ3P,aAAcqvB,EAAW3hB,iBAE/E,KAAK2uB,EAAAzgC,YAAY0O,UACf,OAAKqF,EAAOlsB,GAAGxB,EAAAsB,YAAY6pD,WAQ3BxtD,KAAKurD,YAAchyC,EAAA+E,KAAKG,IACRsR,EAAQlsB,GAAGxB,EAAAsB,YAAYqnB,SAC9BhrB,KAAKL,OAAOqoC,UAAsBjY,EAAQpF,eAE5C3qB,KAAKL,OAAO8pC,gBAA4B1Z,EAAQ3P,aAAY,KAXjEpgB,KAAKqhB,MACH/H,EAAAgI,eAAes/C,+HACf35D,EAAW7C,OAEbpE,KAAKurD,YAAchyC,EAAA+E,KAAKG,IACjBze,KAAKL,OAAOytC,qBAQvB,KAAKqP,EAAAzgC,YAAYuH,mBACf,IAAIH,EAAWpjB,KAAKyd,SAASmG,gBACRmM,EACnB,KACAa,EAAgBpD,KAAK9B,yBAEvB,IAAMtI,IAAYpjB,KAAK2wD,gBAAgBvtC,GAAY,OAAOzjB,EAAOytC,oBACjE,IAAIhiB,EAAQprB,KAAK+xD,yBAAyB3uC,GAE1C,OADApjB,KAAKurD,YAAcnoC,EAAShU,UAAU/K,KAC/BrE,KAAKL,OAAOqoC,UAAU5c,GAOjC,OAJAprB,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,qBAGrB+d,EAAAlpD,UAAA00D,4BAAA,SACE1vD,EACA6uD,GAEA,IAAIn2D,EAASK,KAAKL,OAIdyG,EAAOpG,KAAKyvD,4BAA4BxoD,EAAWA,WAAYjH,KAAKqe,QAAQW,UAAS,GACrF3a,EAAOrE,KAAKurD,YACZviD,EAAShJ,KAAKyd,SAAS6xC,YAAYroD,EAAW+B,QAElD,OADAhJ,KAAKurD,YAAchyC,EAAA+E,KAAKW,KACnBjW,EACE3E,EAAKR,GAAE,OAAyBmF,EAAOnF,GAAE,KAC5CQ,EAAK04C,gBAAgBjtB,eAAe9mB,GAClCrJ,EAAOopC,aACL1kC,EAAKR,GAAE,IACH4V,EAAAsa,SAASM,MACT5a,EAAAsa,SAASK,MACbhuB,EACA/B,EAAK25C,aAAar+C,IAEpBA,EAAOqoC,UAAU,GACnBroC,EAAOqoC,UAAU3jC,EAAKyrB,eAAe9mB,GAAQ,GAAQ,EAAI,GAXzCrJ,EAAOytC,qBAc7B+d,EAAAlpD,UAAA20D,yBAAA,SACE3vD,EACA6uD,EACA+K,QAAA,IAAAA,OAAA,GAEA,IAAIlhE,EAASK,KAAKL,OAElB,OAAQsH,EAAWwM,aACjB,KAAK+F,EAAAjG,YAAYG,MACfzB,QAAQ4uD,GACR,IAAItjB,EAAYuY,EAAehZ,eAC/B,OACES,GACAA,EAAUt7C,WAAajC,KAAKgqB,QAAQlN,eAE7B9c,KAAK8gE,oBACV7uD,OAAOsrC,EAAUr5C,eAAe,GACP+C,EAAYP,oBACrC,EACAO,IAGJjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENzE,EAAOytC,qBAEhB,KAAK5zB,EAAAjG,YAAYU,MACf,IAAI8sD,EAAsC95D,EAAY3F,MAItD,OAHIu/D,IACFE,GAAcA,GAEZjL,GAAkBv8C,EAAA+E,KAAKY,IAClBvf,EAAO6oC,UAAeu4B,IAE/B/gE,KAAKurD,YAAchyC,EAAA+E,KAAKa,IACjBxf,EAAO+oC,UAAUq4B,IAE1B,KAAKvnD,EAAAjG,YAAYa,QACf,IAAI4sD,EAAsC/5D,EAAY3F,MAOtD,OANIu/D,IACFG,EAAWC,QACT3hD,QAAQ,GACR0hD,IAGIlL,EAAelzD,MAIrB,OACE,GAAIs+D,UAAUF,GAAW,OAAOrhE,EAAOqoC,UAAUsI,QAAQ0wB,IACzD,MAEF,OACE,GAAIG,UAAUH,GAAW,OAAOrhE,EAAOqoC,UAAUsI,QAAQ0wB,IACzD,MAEF,OACE,GAAII,WAAWJ,GAAW,OAAOrhE,EAAOqoC,UAAUsI,QAAQ0wB,IAC1D,MAEF,OACE,GAAIK,WAAWL,GAAW,OAAOrhE,EAAOqoC,UAAUsI,QAAQ0wB,IAC1D,MAEF,OACE,GAAIM,WAAWN,GAAW,OAAOrhE,EAAOqoC,UAAUsI,QAAQ0wB,IAC1D,MAEF,OACE,GAAIO,WAAWP,GAAW,OAAOrhE,EAAOqoC,UAAUsI,QAAQ0wB,IAC1D,MAEF,QACE,GAAIQ,YAAYR,GAAW,OAAOrhE,EAAOqoC,UAAUsI,QAAQ0wB,IAC3D,MAEF,OACE,IAAKhhE,KAAKqe,QAAQkB,SAAU,CAC1B,GAAI+hD,WAAWN,GAAW,OAAOrhE,EAAOqoC,UAAUsI,QAAQ0wB,IAC1D,MAEF,OAAOrhE,EAAOyoC,UAAUkI,QAAQ0wB,GAAWzwB,SAASywB,IAEtD,OACE,IAAKhhE,KAAKqe,QAAQkB,SAAU,CAC1B,GAAIgiD,WAAWP,GAAW,OAAOrhE,EAAOqoC,UAAUsI,QAAQ0wB,IAC1D,MAEF,OAAOrhE,EAAOyoC,UAAUkI,QAAQ0wB,GAAWzwB,SAASywB,IAEtD,OACA,OACE,OAAOrhE,EAAOyoC,UAAUkI,QAAQ0wB,GAAWzwB,SAASywB,IAEtD,QACE,GAAIS,WAAWT,GAAW,OAAOrhE,EAAO6oC,UAAUk5B,WAAWV,IAC7D,MAEF,QACE,GAAIW,WAAWX,GAAW,OAAOrhE,EAAO+oC,UAAUk5B,WAAWZ,IAC7D,MAEF,QACE,MAEF,QAEE,OADA/uD,QAAO,GACAtS,EAAOytC,oBAMlB,OAAIk0B,WAAWN,IACbhhE,KAAKurD,YAAchyC,EAAA+E,KAAKG,IACjB9e,EAAOqoC,UAAUsI,QAAQ0wB,KACvBO,WAAWP,IACpBhhE,KAAKurD,YAAchyC,EAAA+E,KAAKQ,IACjBnf,EAAOqoC,UAAUsI,QAAQ0wB,MAEhChhE,KAAKurD,YAAchyC,EAAA+E,KAAKI,IACjB/e,EAAOyoC,UAAUkI,QAAQ0wB,GAAWzwB,SAASywB,KAGxD,KAAKxnD,EAAAjG,YAAYmB,OAEf,OADAzC,QAAQ4uD,GACD7gE,KAAK6hE,qBAA8C56D,GAE5D,KAAKuS,EAAAjG,YAAYe,OAEf,OADArC,QAAQ4uD,GACD7gE,KAAK8hE,qBAA8C76D,EAAY6uD,GAS1E,OALA91D,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAEbpE,KAAKurD,YAAcuK,EACZn2D,EAAOytC,qBAIhB+d,EAAAlpD,UAAA8/D,mBAAA,SAAmBC,GACjB,IAKIC,EALAj4C,EAAUhqB,KAAKgqB,QACf7M,EAAQ6M,EAAQ7M,MAChBI,EAAeyM,EAAQzM,aAEvBR,EAAiB9K,OAAO+X,EAAQjN,gBAIhCizB,EAAWhwC,KAAKyrD,eACpB,GAAIzb,EAAS9sB,IAAI8+C,GACfC,EAA+BjyB,EAAS9uC,IAAI8gE,OAGvC,CACL,IAAIn7D,EAASm7D,EAAYn7D,OACrBq7D,EAAcnlD,EAAewS,oBAAsB,GAAK,EACxD4yC,EAAYD,EAAsB,EAATr7D,EAEzBu7D,OAAG,EACHzsD,OAAG,EAEHwH,GACFilD,EAAM,IAAI1uB,WAAWn2B,EAAe4kD,GACpCxsD,EAAM4H,EACN7a,EAAA2/D,SAAS9X,EAAA+X,aAAatiE,KAAM+c,GAAiBqlD,EAAKp4C,EAAQxM,gBAE1D4kD,EAAM,IAAI1uB,WAAWyuB,GACrBxsD,EAAM,GAERjT,EAAA2/D,SAASx7D,EAAQu7D,EAAKzsD,EAAMoH,EAAesT,SAAS,WACpD1a,GAAOusD,EACP,IAAK,IAAI7hE,EAAI,EAAGA,EAAIwG,IAAUxG,EAC5BqC,EAAA6/D,SAASP,EAAY9vD,WAAW7R,GAAI+hE,EAAKzsD,GAAOtV,GAAK,IAEvD4hE,EAAgBjiE,KAAK6xD,iBAAiBuQ,GACtCpyB,EAAShsC,IAAIg+D,EAAaC,GAE5B,IAAIO,EAAeP,EAAc37B,OAIjC,OAHInpB,IAAOqlD,EAAevZ,QAAQuZ,EAAcljD,QAAQ/B,KAExDvd,KAAKurD,YAAcxuC,EAAe1Y,KAC9BrE,KAAKqe,QAAQkB,SACRvf,KAAKL,OAAOyoC,UAAUkI,QAAQkyB,GAAejyB,SAASiyB,KAE7DvwD,OAAOsvD,WAAWiB,IACXxiE,KAAKL,OAAOqoC,UAAUsI,QAAQkyB,MAIzCrX,EAAAlpD,UAAA4/D,qBAAA,SAAqB56D,GACnB,OAAOjH,KAAK+hE,mBAAmB96D,EAAW3F,QAI5C6pD,EAAAlpD,UAAAwgE,kBAAA,SAAkBC,EAAmBh5D,GACnC,IASI04D,EACAzsD,EAVAqU,EAAUhqB,KAAKgqB,QACf7M,EAAQ6M,EAAQ7M,MAChBI,EAAeyM,EAAQzM,aAEvB1W,EAAS6C,EAAO7C,OAChBkd,EAAW2+C,EAAY3+C,SACvB4+C,EAAa97D,EAASkd,EACtB6+C,EAAgB5iE,KAAKqe,QAAQW,UAAU+E,SAMvC8+C,EAAiB5wD,OAAO+X,EAAQnN,qBAChCimD,EAAoBD,EAAetzC,oBAAsB,GAAK,EAC9DwzC,EAAkB,GAAM,GAAKC,IAAIF,EAAmBH,EAAa,GACjExlD,GACFilD,EAAM,IAAI1uB,WAAWn2B,EAAewlD,GACpCptD,EAAM4H,EACN7a,EAAA2/D,SAAS9X,EAAA+X,aAAatiE,KAAM6iE,GAAiBT,EAAKp4C,EAAQxM,gBAE1D4kD,EAAM,IAAI1uB,WAAWqvB,GACrBptD,EAAM,GAERjT,EAAA2/D,SAASM,EAAYP,EAAKzsD,EAAMktD,EAAexyC,SAAS,eACxD1a,GAAOmtD,EACP,IAAIpV,EAAagV,EAAY50C,eAC7B,OAAQ4/B,GACN,OACE,OAAQ3pC,GACN,KAAK,EACH,IAAK,IAAI1jB,EAAI,EAAGA,EAAIwG,IAAUxG,EAAG,CAC/B,IAAIiB,EAAQoI,EAAOrJ,GACnB4R,OAAOwH,EAAA8d,kBAAkBj2B,IAAUosD,GACnCz7C,OAAOwH,EAAA2Z,gBAAgB9xB,IAAUmY,EAAA4Z,aAAa6C,OAC9CxzB,EAAAugE,QAAQxpD,EAAA0c,iBAAiB70B,GAAQ8gE,EAAKzsD,GACtCA,GAAO,EAET,MAEF,KAAK,EACH,IAAStV,EAAI,EAAGA,EAAIwG,IAAUxG,EAAG,CAC3BiB,EAAQoI,EAAOrJ,GACnB4R,OAAOwH,EAAA8d,kBAAkBj2B,IAAUosD,GACnCz7C,OAAOwH,EAAA2Z,gBAAgB9xB,IAAUmY,EAAA4Z,aAAa6C,OAC9CxzB,EAAA6/D,SAAS9oD,EAAA0c,iBAAiB70B,GAAQ8gE,EAAKzsD,GACvCA,GAAO,EAET,MAEF,KAAK,EACH,IAAStV,EAAI,EAAGA,EAAIwG,IAAUxG,EAAG,CAC3BiB,EAAQoI,EAAOrJ,GACnB4R,OAAOwH,EAAA8d,kBAAkBj2B,IAAUosD,GACnCz7C,OAAOwH,EAAA2Z,gBAAgB9xB,IAAUmY,EAAA4Z,aAAa6C,OAC9CxzB,EAAA2/D,SAAS5oD,EAAA0c,iBAAiB70B,GAAQ8gE,EAAKzsD,GACvCA,GAAO,EAET,MAEF,QAAS1D,QAAO,GAElB,MAEF,OACE,IAAS5R,EAAI,EAAGA,EAAIwG,IAAUxG,EAAG,CAC3BiB,EAAQoI,EAAOrJ,GACnB4R,OAAOwH,EAAA8d,kBAAkBj2B,IAAUosD,GACnCz7C,OAAOwH,EAAA2Z,gBAAgB9xB,IAAUmY,EAAA4Z,aAAa6C,OAC9CxzB,EAAAwgE,SAAS5jD,QAAQ7F,EAAA+d,oBAAoBl2B,GAAQmY,EAAA68B,qBAAqBh1C,IAAS8gE,EAAKzsD,GAChFA,GAAO,EAET,MAEF,OACE,IAAStV,EAAI,EAAGA,EAAIwG,IAAUxG,EAAG,CAC3BiB,EAAQoI,EAAOrJ,GACnB4R,OAAOwH,EAAA8d,kBAAkBj2B,IAAUosD,GACnCz7C,OAAOwH,EAAA2Z,gBAAgB9xB,IAAUmY,EAAA4Z,aAAa6C,OAC9CxzB,EAAAygE,SAAS1pD,EAAAge,iBAAiBn2B,GAAQ8gE,EAAKzsD,GACvCA,GAAO,EAET,MAEF,OACE,IAAStV,EAAI,EAAGA,EAAIwG,IAAUxG,EAAG,CAC3BiB,EAAQoI,EAAOrJ,GACnB4R,OAAOwH,EAAA8d,kBAAkBj2B,IAAUosD,GACnCz7C,OAAOwH,EAAA2Z,gBAAgB9xB,IAAUmY,EAAA4Z,aAAa6C,OAC9CxzB,EAAA0gE,SAAS3pD,EAAAie,iBAAiBp2B,GAAQ8gE,EAAKzsD,GACvCA,GAAO,EAET,MAEF,QAAS1D,QAAO,GAElB,IACIoxD,EADgBrjE,KAAK6xD,iBAAiBuQ,GACT97B,OAC7BnpB,IAAOkmD,EAAepa,QAAQoa,EAAc/jD,QAAQ/B,KAGxD,IAAIT,EAAiB7K,OAAO+X,EAAQlN,gBAChCwmD,EAAgBrxD,OAAOjS,KAAKyd,SAAS0F,aAAarG,GAAkB4lD,KACpEa,EAAmBD,EAAc/zC,oBAAsB,GAAK,EAC5DpS,GACFilD,EAAM,IAAI1uB,WAAWn2B,EAAegmD,GACpC5tD,EAAM4H,EACN7a,EAAA2/D,SAAS9X,EAAA+X,aAAatiE,KAAMsjE,GAAgBlB,EAAKp4C,EAAQxM,gBAEzD4kD,EAAM,IAAI1uB,WAAW6vB,GACrB5tD,EAAM,GAER,IACI6tD,EADexjE,KAAK6xD,iBAAiBuQ,GACV97B,OAG/B,OAFInpB,IAAOqmD,EAAcva,QAAQua,EAAalkD,QAAQ/B,KACtDvd,KAAKurD,YAAc+X,EAAcj/D,KACZ,GAAjBu+D,GACFlgE,EAAAwgE,SAASG,EAAcjB,EAAKzsD,EAAM2tD,EAAcjzC,SAAS,YACzD3tB,EAAA2/D,SAASx7D,EAAQu7D,EAAKzsD,EAAM2tD,EAAcjzC,SAAS,YAC5CrwB,KAAKL,OAAOyoC,UAAUkI,QAAQkzB,GAAcjzB,SAASizB,MAE5DvxD,OAAOsvD,WAAW8B,IAClB3gE,EAAA2/D,SAAS/xB,QAAQ+yB,GAAejB,EAAKzsD,EAAM2tD,EAAcjzC,SAAS,YAClE3tB,EAAA2/D,SAASx7D,EAAQu7D,EAAKzsD,EAAM2tD,EAAcjzC,SAAS,YACnDpe,OAAOsvD,WAAWiC,IACXxjE,KAAKL,OAAOqoC,UAAUsI,QAAQkzB,MAIzCrY,EAAAlpD,UAAA6+D,oBAAA,SACE4B,EACA16D,EACAy7D,EACApV,GAUA,IARA,IAAI1uD,EAASK,KAAKL,OAGdkH,EAASmB,EAAYnB,OACrB68D,EAAiB,IAAI1tD,MAAqBnP,GAC1C88D,EAAiB,IAAI3tD,MAAqBnP,GAC1C+8D,EAAoBlB,EAAY50C,eAChC+1C,GAAW,EACNxjE,EAAI,EAAGA,EAAIwG,IAAUxG,EAAG,CAC/B,IAAI+F,EAAO4B,EAAY3H,GACnBL,KAAK+vD,kBAA8B/nD,EAAY3H,GAAIqiE,EAAW,KAC9DA,EAAY1kB,aAAar+C,GAC7B+jE,EAAerjE,GAAK+F,EAChBy9D,IACFz9D,EAAOzG,EAAO0yC,qBAAqBqxB,EAAerjE,IAC9CoZ,EAAA2Z,gBAAgBhtB,IAASqT,EAAA4Z,aAAa6C,OACxCjkB,OAAOwH,EAAA8d,kBAAkBnxB,IAASw9D,GAClCD,EAAetjE,GAAK+F,IAEhBq9D,GACFzjE,KAAKw7B,QACHliB,EAAAgI,eAAe0uC,4DACf3B,EAAWjqD,OAGfy/D,GAAW,IAMjB,GAAIA,EAAU,OAAO7jE,KAAKyiE,kBAAkBC,EAAaiB,GAGzD,IAAI7mD,EAAiB7K,OAAOjS,KAAKgqB,QAAQlN,gBACzC,IAAKA,GAAkBA,EAAela,MAAQ65C,EAAAzgC,YAAY0G,gBAAiB,OAAO/iB,EAAOytC,oBACzF,IAAIk2B,EAAgBtjE,KAAKyd,SAAS0F,aAA6BrG,GAAkB4lD,IACjF,IAAKY,EAAe,OAAO3jE,EAAOytC,oBAClC,IAAI02B,EAAYR,EAAcj/D,KAG9BrE,KAAKurD,YAAcuY,EACnB,IAAIrW,EAAS6V,EAAcrzC,eAAewsB,EAAApjC,aAAaa,aAAa,GACpE,IAAKuzC,EAKH,OAJAztD,KAAKqhB,MACH/H,EAAAgI,eAAeu6C,+CACfxN,EAAWjqD,MAAOk/D,EAAcljD,cAE3BzgB,EAAOytC,oBAEhB,IAAI22B,EAAkBD,EAAUh2C,eAC5B8C,EAAkB5wB,KAAK4wB,gBACvB6jC,EAAY7jC,EAAgBjD,aAAam2C,GAAW,GACpD9S,EAAQ,IAAIh7C,MAAqB,EAAInP,GACrCukB,EAAQ,EACZ4lC,EAAM5lC,KAAWzrB,EAAOwrC,eAAespB,EAAUrpC,MAC/CprB,KAAK+5D,eAAe9nD,OAAOqxD,EAAc9zC,sBACvC7vB,EAAOqoC,UAAU,GACjBroC,EAAOqoC,UAAUnhC,MAGrB,IAASxG,EAAI,EAAGA,EAAIwG,IAAUxG,EAC5B2wD,EAAM5lC,KAAWprB,KAAK+5D,eAAetM,GACnC9tD,EAAO0pC,eAAeorB,EAAUrpC,MAAO24C,GACvCpkE,EAAOqoC,UAAU3nC,GACjBqjE,EAAerjE,KAOnB,OAJA4R,OAAOmZ,EAAQ,GAAK4lC,EAAMnqD,QAC1BmqD,EAAM5lC,GAASzrB,EAAO0pC,eAAeorB,EAAUrpC,MAAO24C,GACtDnzC,EAAgB3C,cAAcwmC,GAC9Bz0D,KAAKurD,YAAcuY,EACZnkE,EAAO4rC,YAAY,KAAMylB,EAAO+S,IAGzC5Y,EAAAlpD,UAAA6/D,qBAAA,SAAqB76D,EAAqC6uD,GACxD,IAAIn2D,EAASK,KAAKL,OAGdm9C,EAAiBgZ,EAAehZ,eACpC,IAAKA,GAAkBA,EAAej5C,GAAGxB,EAAAsB,YAAY8iB,UAKnD,OAJAzmB,KAAKqhB,MACH/H,EAAAgI,eAAeouC,mCACfzoD,EAAW7C,MAAO,WAAY0xD,EAAelxC,YAExCjlB,EAAOytC,oBAIhB,IAAI+gB,EAAOrR,EAAettB,oBAC1B,GAAI2+B,EAAM,CACR,GAAIA,EAAK/+C,UAAUsvC,mBAKjB,OAJA1+C,KAAKqhB,MACH/H,EAAAgI,eAAe0iD,sDACf/8D,EAAW7C,MAAO04C,EAAel4B,YAE5BjlB,EAAOytC,oBAEhB,GAAI+gB,EAAKtqD,GAAGxB,EAAAsB,YAAYu9C,SAKtB,OAJAlhD,KAAKqhB,MACH/H,EAAAgI,eAAe2iD,mFACfh9D,EAAW7C,MAAO04C,EAAel4B,YAE5BjlB,EAAOytC,oBAEhB,GAAI+gB,EAAKtqD,GAAGxB,EAAAsB,YAAYw9C,WAKtB,OAJAnhD,KAAKqhB,MACH/H,EAAAgI,eAAe4iD,qFACfj9D,EAAW7C,MAAO04C,EAAel4B,YAE5BjlB,EAAOytC,oBAKlB,IAAI3jC,EAAQxC,EAAWwC,MACnBijC,EAAWjjC,EAAM5C,OACjB6C,EAASzC,EAAWyC,OACpBsC,EAAU8wC,EAAe9wC,QACzBm4D,GAAY,EACZ/D,EAAQ,IAAIpqD,MAAqB02B,EAAW,GAC5C+nB,EAAYz0D,KAAK4wB,gBAAgBjD,aAAa3tB,KAAKqe,QAAQW,WAC/D/M,OAAOy6B,GAAYhjC,EAAO7C,QAC1B,IAAK,IAAIxG,EAAI,EAAGuG,EAAI8lC,EAAUrsC,EAAIuG,IAAKvG,EAAG,CACxC,IAAIyW,EAAS9K,EAAUA,EAAQ9K,IAAIuI,EAAMpJ,GAAG2F,MAAQ,KACpD,GAAK8Q,GAAUA,EAAOlU,MAAQ65C,EAAAzgC,YAAYmT,MAA1C,CAQA,IAAI9qB,EAAeyS,EAAQzS,KAC3B+7D,EAAM//D,EAAI,GAAKL,KAAKL,OAAOqqC,YACzB3lC,EAAK0f,SACL/jB,KAAKL,OAAO0pC,eAAeorB,EAAUrpC,MAAOprB,KAAKqe,QAAQsvC,gBACzD3tD,KAAK+vD,kBAAkBrmD,EAAOrJ,GAAYyW,EAAQzS,KAAI,KACtDA,EAAKypB,eACGhX,EAAQsY,mBAbhBpvB,KAAKqhB,MACH/H,EAAAgI,eAAe8iD,oCACf36D,EAAMpJ,GAAG+D,MAAOqF,EAAMpJ,GAAG2F,KAAM82C,EAAel4B,YAEhDu/C,GAAY,EAahB,OADAnkE,KAAKurD,YAAczO,EAAez4C,KAAK04C,gBACnConB,EAAkBxkE,EAAOytC,qBAG7BgzB,EAAM,GAAKzgE,EAAOwrC,eAChBspB,EAAUrpC,MACVm/B,EAAA8Z,gBAAgBrkE,KAAM88C,EAAgB71C,IAIxCm5D,EAAMA,EAAMv5D,OAAS,GAAKlH,EAAO0pC,eAAeorB,EAAUrpC,MAAOprB,KAAKqe,QAAQsvC,gBAEvEhuD,EAAO4rC,YAAY,KAAM60B,EAAOpgE,KAAKqe,QAAQsvC,kBAGtDxC,EAAAlpD,UAAA40D,qBAAA,SAAqB5vD,EAA2B6uD,GAC9C,IAAIn2D,EAASK,KAAKL,OACd0e,EAAUre,KAAKqe,QACfuS,EAAkB5wB,KAAK4wB,gBAGvBb,EAAS/vB,KAAKyd,SAAS+9C,kBACzBv0D,EAAWA,WACX2pB,GAEF,IAAKb,EAAQ,OAAOpwB,EAAOytC,oBAC3B,GAAIrd,EAAOntB,MAAQ65C,EAAAzgC,YAAY0G,gBAK7B,OAJA1iB,KAAKqhB,MACH/H,EAAAgI,eAAegjD,yEACfr9D,EAAWA,WAAW7C,OAEjBpE,KAAKL,OAAOytC,oBAErB,IAGI0P,EAqBA12C,EAxBAggB,EAAiC2J,EACjCw0C,EAA8B,KAC9BrgE,EAAgB+C,EAAW/C,cAoB/B,KAbEqgE,GAJCrgE,GACoD,QAApD44C,EAAiBgZ,EAAehZ,iBACjCA,EAAej5C,GAAGxB,EAAAsB,YAAY8f,SAEdzjB,KAAKyd,SAAS0F,aAC5BiD,EACA02B,EAAe54C,cACf0sB,EAAgBpD,KAAK9B,yBAGP1rB,KAAKyd,SAASg0C,8BAC5BrrC,EACAliB,EACA0sB,EAAgBpD,KAAK9B,wBACrBzkB,IAGgB,OAAOtH,EAAOytC,oBAKlC,IAAIo3B,EAAqCD,EACrC/0C,EAAuC,KAC3C,GAEE,GADAA,EAAsBg1C,EAAqBh1C,oBAClB,YAClBg1C,EAAuBA,EAAqBl1C,MAcrD,OAVElpB,EADEopB,EACKxvB,KAAKs7D,kBAAkB9rC,EAAqBvoB,EAAWrB,UAAWqB,EACvEoX,EAAQW,UAAUg/B,aAAar+C,IAK1BK,KAAKykE,aAAaF,EAAet9D,GAG1CjH,KAAKurD,YAAcgZ,EAAclgE,KAC1B+B,GAGT+kD,EAAAlpD,UAAA60D,+BAAA,SACE7vD,EACA6uD,GAGA,OAAO91D,KAAK+vD,kBACV9oD,EAAWA,WACX6uD,EAAc,MAWlB3K,EAAAlpD,UAAA80D,gCAAA,SACE2N,EACA5O,EACAwK,GAEA,IAAI3gE,EAASK,KAAKL,OAEdowB,EAAS/vB,KAAKyd,SAASknD,sBAAsBD,EAAgB1kE,KAAK4wB,iBACtE,IAAKb,EAAQ,OAAOpwB,EAAOytC,oBAE3B,OAAQrd,EAAOntB,MACb,KAAK65C,EAAAzgC,YAAYzJ,OACf,IAAKvS,KAAKkvD,cAAsBn/B,GAC9B,OAAOpwB,EAAOytC,oBAEhB,IAAIqC,EAAsB1f,EAAQ1rB,KAElC,OADA4N,OAAOw9B,GAAcl2B,EAAA+E,KAAKc,MACb2Q,EAAQlsB,GAAGxB,EAAAsB,YAAYqnB,SAC3BhrB,KAAK61D,sBAA8B9lC,EAAQ+lC,EAAgBwK,IAEpEtgE,KAAKurD,YAAc9b,EACZ9vC,EAAO8pC,gBAAyB1Z,EAAQ3P,aAAcqvB,EAAW3hB,iBAE1E,KAAK2uB,EAAAzgC,YAAY0O,UACf,IAAIjnB,EAAqBssB,EAAQtsB,OAEjC,OADAwO,OAAkB,OAAXxO,GAAmBA,EAAOb,MAAQ65C,EAAAzgC,YAAYyO,MAChDzqB,KAAKiwD,YAAkBxsD,IAI5BzD,KAAKurD,YAAchyC,EAAA+E,KAAKG,IACRsR,EAAQlsB,GAAGxB,EAAAsB,YAAYqnB,SAC9BrrB,EAAOqoC,UAAsBjY,EAAQpF,eAEvChrB,EAAO8pC,gBAA4B1Z,EAAQ3P,aAAY,KAP5DpgB,KAAKurD,YAAchyC,EAAA+E,KAAKG,IACjBze,KAAKL,OAAOytC,qBAQvB,KAAKqP,EAAAzgC,YAAYmT,MACf,IAAI8sC,EAAiBhqD,OAAOjS,KAAKyd,SAASy+C,uBAC1CjqD,OAAe8d,EAAQX,cAAgB,GACvC,IAAI+sC,EAAWn8D,KAAKyvD,4BAClBwM,EACAj8D,KAAKqe,QAAQW,UAAS,GAIxB,OADAhf,KAAKurD,YAAsBx7B,EAAQ1rB,KAC5B1E,EAAOgqC,WACJ5Z,EAAQ1rB,KAAK0f,SACbgM,EAAQ1rB,KAAKR,GAAG,GACxBs4D,EACQpsC,EAAQ1rB,KAAKypB,eACbiC,EAAQX,cAGpB,KAAKqtB,EAAAzgC,YAAY+L,SACf,IAAI9lB,EAAuB8tB,EAAQ/H,gBACnC,GAAI/lB,EAAW,CACb,IAAImhB,EAAWpjB,KAAKyd,SAASmG,gBAAgB3hB,EAAW,MACxD,IAAKmhB,EAAU,OAAOzjB,EAAOytC,oBAC7B,IAAIh+B,EAAYgU,EAAShU,UACzB,IAAKpP,KAAK69D,mBACRzuD,EACA,EACAgU,EAASvf,GAAGxB,EAAAsB,YAAYipB,UACxB83C,GAEA,OAAO/kE,EAAOytC,oBAEhB,IAAI6wB,EAA8D,IAApD76C,EAASyD,eAAiB41B,EAAAxgC,eAAezJ,QACvD,GAAI4Q,EAASvf,GAAGxB,EAAAsB,YAAYipB,UAAW,CACjCnpB,EAASwO,OAAOmR,EAAS3f,QAC7BwO,OAAOxO,EAAOb,MAAQ65C,EAAAzgC,YAAYlI,OAC9BmoD,EAAiBhqD,OAAOjS,KAAKyd,SAASy+C,uBACtCC,EAAWn8D,KAAKyvD,4BAClBwM,EACAj8D,KAAKqe,QAAQW,UAAS,GAIxB,OADAhf,KAAKurD,YAAcn8C,EAAUhK,WACtBpF,KAAKs7D,kBAAkBl4C,KAAcshD,EAAgBvI,EAAU8B,GAGtE,OADAj+D,KAAKurD,YAAcn8C,EAAUhK,WACtBpF,KAAKs7D,kBAAkBl4C,KAAcshD,EAAgB,EAAGzG,GAOjE,OAJAj+D,KAAKqhB,MACH/H,EAAAgI,eAAe8iD,oCACfM,EAAetgE,MAAkB2rB,EAAQ5K,WAAuB4K,EAAQtsB,OAAOmhB,YAE1EjlB,EAAOytC,oBAQpB,OAJAptC,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfs9C,EAAetgE,OAEVzE,EAAOytC,qBAGhB+d,EAAAlpD,UAAA+0D,yBAAA,SAAyB/vD,EAA+B6uD,GACtD,IAAIxrD,EAASrD,EAAWqD,OACpBC,EAAStD,EAAWsD,OACpBqmB,EAAkB5wB,KAAK4wB,gBACvBC,EAAaD,EAAgBpD,KAE7B4lC,EAAWpzD,KAAKqzD,cAClBrzD,KAAKyvD,4BAA4BxoD,EAAWoD,UAAWkP,EAAA+E,KAAKW,KAAI,GAChEjf,KAAKurD,aAGP,IACGvrD,KAAKqe,QAAQmB,eACdxf,KAAK4wB,gBAAgB7sB,MAAM1B,EAAAsB,YAAY8f,QAAUphB,EAAAsB,YAAYswD,iBAC7D,CAEA,IAAIC,EAAkBl0D,KAAKL,OAAO0yC,qBAAqB+gB,GACvD,GACE35C,EAAA2Z,gBAAgB8gC,IAAoBz6C,EAAA4Z,aAAa6C,OACf,GAAlCzc,EAAA8d,kBAAkB28B,GAElB,OAAOz6C,EAAA0c,iBAAiB+9B,GACpBl0D,KAAKyvD,4BAA4BnlD,EAAQwrD,EAAc,GACvD91D,KAAKyvD,4BAA4BllD,EAAQurD,EAAc,GAI3D1C,EAAWpzD,KAAKqzD,cACdrzD,KAAKyvD,4BAA4BxoD,EAAWoD,UAAWkP,EAAA+E,KAAKW,KAAI,GAChEjf,KAAKurD,aAKX,IAAIqZ,EAAa/zC,EAAWO,OAC5BR,EAAgBpD,KAAOo3C,EACvB,IAAIC,EAAa7kE,KAAKyvD,4BAA4BnlD,EAAQwrD,EAAc,GACpEgP,EAAa9kE,KAAKurD,YACtBqZ,EAAWrzC,OAEX,IAAIwzC,EAAal0C,EAAWO,OAC5BR,EAAgBpD,KAAOu3C,EACvB,IAAIC,EAAahlE,KAAKyvD,4BAA4BllD,EAAQurD,EAAc,GACpEmP,EAAajlE,KAAKurD,YACtB36B,EAAgBpD,KAAOu3C,EAAWxzC,OAElCV,EAAWgC,cAAc+xC,EAAYG,GAErC,IAAI/L,EAAaz/C,EAAA+E,KAAKu/B,iBAAiBinB,EAAYG,GAAY,GAC/D,OAAKjM,GAQL6L,EAAa7kE,KAAKo3D,kBAChByN,EACAC,EACA9L,EAAU,IAGV1uD,GAEF06D,EAAahlE,KAAKo3D,kBAChB4N,EACAC,EACAjM,EAAU,IAGVzuD,GAEFvK,KAAKurD,YAAcyN,EACZh5D,KAAKL,OAAOqsC,SAASonB,EAAUyR,EAAYG,KAxBhDhlE,KAAKqhB,MACH/H,EAAAgI,eAAeouC,mCACfzoD,EAAW7C,MAAO0gE,EAAWlgD,WAAYqgD,EAAWrgD,YAEtD5kB,KAAKurD,YAAcuK,EACZ91D,KAAKL,OAAOytC,sBAsBvB+d,EAAAlpD,UAAAg1D,8BAAA,SAA8BhwD,EAAoC6uD,GAChE,IAAIn2D,EAASK,KAAKL,OACdixB,EAAkB5wB,KAAK4wB,gBAGvBs0C,EAAWllE,KAAK+vD,kBAClB9oD,EAAWiE,QACX4qD,GAAkBv8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLq3C,EAAc,KAKpB,GAAIr8C,EAAA2Z,gBAAgB8xC,IAAazrD,EAAA4Z,aAAayF,YAAa,OAAOosC,EAClE,IAEIr8B,EACA6kB,EACAyX,EAJA5Z,EAAcvrD,KAAKurD,YAMvB,OAAQtkD,EAAWI,UACjB,KAAK/E,EAAAC,MAAMkgD,UAGT,GAAIziD,KAAKurD,YAAY1nD,GAAE,KAKrB,OAJA7D,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAGrB,OAAQme,EAAY3oD,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACEimC,EAAKpvB,EAAAsa,SAASy8B,OACd9C,EAAU,EACVyX,EAAYxlE,EAAOqoC,UAAU,GAC7B,MAEF,OACA,OAEEa,GADIxqB,EAAUre,KAAKqe,SACNkB,SACT9F,EAAAsa,SAASslC,OACT5/C,EAAAsa,SAASy8B,OACb9C,EAAarvC,EAAQsvC,eACrBwX,EAAY5Z,EAAYtN,YAAYt+C,GACpC,MAEF,OACA,OACEkpC,EAAKpvB,EAAAsa,SAASslC,OACd3L,EAAU,EACVyX,EAAYxlE,EAAOyoC,UAAU,GAC7B,MAEF,QACES,EAAKpvB,EAAAsa,SAASulC,OACd5L,EAAU,EACVyX,EAAYxlE,EAAO6oC,UAAU,GAC7B,MAEF,QACEK,EAAKpvB,EAAAsa,SAASwlC,OACd7L,EAAU,EACVyX,EAAYxlE,EAAO+oC,UAAU,GAC7B,MAEF,QAEE,OADAz2B,QAAO,GACAtS,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAMmgD,YAGT,GAAI1iD,KAAKurD,YAAY1nD,GAAE,KAKrB,OAJA7D,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENpE,KAAKL,OAAOytC,oBAGrB,OAAQme,EAAY3oD,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACEimC,EAAKpvB,EAAAsa,SAASylC,OACd9L,EAAU,EACVyX,EAAYxlE,EAAOqoC,UAAU,GAC7B,MAEF,OACA,OACE,IAAI3pB,EACJwqB,GADIxqB,EAAUre,KAAKqe,SACNkB,SACT9F,EAAAsa,SAAS0lC,OACThgD,EAAAsa,SAASylC,OACb9L,EAAarvC,EAAQsvC,eACrBwX,EAAY5Z,EAAYtN,YAAYt+C,GACpC,MAEF,OACA,OACEkpC,EAAKpvB,EAAAsa,SAAS0lC,OACd/L,EAAU,EACVyX,EAAYxlE,EAAOyoC,UAAU,GAC7B,MAEF,QACES,EAAKpvB,EAAAsa,SAAS2lC,OACdhM,EAAU,EACVyX,EAAYxlE,EAAO6oC,UAAU,GAC7B,MAEF,QACEK,EAAKpvB,EAAAsa,SAAS4lC,OACdjM,EAAU,EACVyX,EAAYxlE,EAAO+oC,UAAU,GAC7B,MAEF,QAEE,OADAz2B,QAAO,GACAtS,EAAOytC,oBAGlB,MAEF,QAEE,OADAn7B,QAAO,GACAtS,EAAOytC,oBAKlB,GAAI0oB,GAAkBv8C,EAAA+E,KAAKc,KACzB,OAAOpf,KAAK41D,2BAA2B3uD,EAAWiE,QAChDvL,EAAOopC,aAAaF,EAClBq8B,EACAC,IAEF,GAKJ,IAAI1Q,EAAY7jC,EAAgBjD,aAAa49B,GAAa,GACtD6Z,EAAWplE,KAAK41D,2BAA2B3uD,EAAWiE,QACxDvL,EAAOopC,aAAaF,EAClB7oC,KAAKL,OAAO0pC,eAAeorB,EAAUrpC,MAAOsiC,GAC5CyX,IAEF,GAEFnlE,KAAKurD,YAAct5C,OAAOwiD,GAAWpwD,KACrCusB,EAAgB3C,cAAqBwmC,GAErC,IAAI9nC,EAAqB8nC,EAAWrpC,MACpC,OAAOzrB,EAAO4rC,YAAY,MACxB5rC,EAAOwrC,eAAexe,EAAYu4C,GAClCE,EACAzlE,EAAO0pC,eAAe1c,EAAY+gC,IACjCA,IAGLvC,EAAAlpD,UAAAi1D,6BAAA,SACEjwD,EACA6uD,GAEA,IAEI1vD,EAFAzG,EAASK,KAAKL,OACds5D,GAAW,EAGf,OAAQhyD,EAAWI,UACjB,KAAK/E,EAAAC,MAAMgZ,KAWT,GAVAnV,EAAOpG,KAAK+vD,kBACV9oD,EAAWiE,QACX4qD,GAAkBv8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLq3C,EAAc,KAMhB91D,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB98C,KAAKurD,YAAYzO,eAGpC,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAakC,MAC5C,CACZnV,EAAOpG,KAAKi7D,qBAAqB7qC,EAAUnpB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENzE,EAAOytC,oBAIhB,MAEF,KAAK9qC,EAAAC,MAAMkZ,MACT,GAAIxU,EAAWiE,QAAQtI,MAAQ4W,EAAA/W,SAASI,UAClBoE,EAAWiE,QAASuI,aAAe+F,EAAAjG,YAAYa,SAC/CnN,EAAWiE,QAASuI,aAAe+F,EAAAjG,YAAYU,OAClE,CAED7N,EAAOpG,KAAK42D,yBAA4C3vD,EAAWiE,QAAS4qD,GAAgB,GAExF91D,KAAKqe,QAAQkQ,WAAWvuB,KAAK+yD,iBAAiB3sD,EAAMa,EAAW7C,OACnE,MAaF,GAVAgC,EAAOpG,KAAK+vD,kBACV9oD,EAAWiE,QACX4qD,GAAkBv8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLq3C,EAAc,KAMhB91D,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB98C,KAAKurD,YAAYzO,eAGpC,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAaoC,OAC5C,CACZrV,EAAOpG,KAAKi7D,qBAAqB7qC,EAAUnpB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENzE,EAAOytC,oBAGhB,OAAQptC,KAAKurD,YAAY3oD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASylC,OAAQ75D,EAAOqoC,UAAU,GAAI5hC,GACjE,MAEF,OACA,OACEA,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAAS0lC,OACThgD,EAAAsa,SAASylC,OACbx5D,KAAKurD,YAAYvN,aAAar+C,GAC9ByG,GAEF,MAEF,OACA,OACEA,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS0lC,OAAQ95D,EAAOyoC,UAAU,GAAIhiC,GACjE,MAEF,QACEA,EAAOzG,EAAOipC,YAAYnvB,EAAAwd,QAAQouC,OAAQj/D,GAC1C,MAEF,QACEA,EAAOzG,EAAOipC,YAAYnvB,EAAAwd,QAAQquC,OAAQl/D,GAC1C,MAEF,QACE6L,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAMkgD,UAYT,GAXAwW,GAAW,EACX7yD,EAAOpG,KAAK+vD,kBACV9oD,EAAWiE,QACX4qD,GAAkBv8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLq3C,EAAc,KAMhB91D,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB98C,KAAKurD,YAAYzO,eAGpC,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAamC,YAC5C,CACZpV,EAAOpG,KAAKi7D,qBAAqB7qC,EAAUnpB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENzE,EAAOytC,oBAGhB,OAAQptC,KAAKurD,YAAY3oD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASy8B,OAAQpqD,EAAMpG,KAAKL,OAAOqoC,UAAU,IACxE,MAEF,OACA,OACE5hC,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASslC,OACT5/C,EAAAsa,SAASy8B,OACbpqD,EACApG,KAAKurD,YAAYtN,YAAYt+C,IAE/B,MAEF,OACA,OACEyG,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASslC,OAAQjzD,EAAMzG,EAAOyoC,UAAU,IACnE,MAEF,QACEhiC,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASulC,OAAQlzD,EAAMzG,EAAO6oC,UAAU,IACnE,MAEF,QACEpiC,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASwlC,OAAQnzD,EAAMzG,EAAO+oC,UAAU,IACnE,MAEF,QACEz2B,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAMmgD,YAYT,GAXAuW,GAAW,EACX7yD,EAAOpG,KAAK+vD,kBACV9oD,EAAWiE,QACX4qD,GAAkBv8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLq3C,EAAc,KAMhB91D,KAAKurD,YAAY1nD,GAAE,KAAuB,CAE5C,GADIi5C,EAAiB98C,KAAKurD,YAAYzO,eAGpC,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAaqC,YAC5C,CACZtV,EAAOpG,KAAKi7D,qBAAqB7qC,EAAUnpB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENzE,EAAOytC,oBAGhB,OAAQptC,KAAKurD,YAAY3oD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASylC,OAAQpzD,EAAMzG,EAAOqoC,UAAU,IACnE,MAEF,OACA,OACE5hC,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAAS0lC,OACThgD,EAAAsa,SAASylC,OACbpzD,EACApG,KAAKurD,YAAYtN,YAAYt+C,IAE/B,MAEF,OACA,OACEyG,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS0lC,OAAQrzD,EAAMzG,EAAOyoC,UAAU,IACnE,MAEF,QACEhiC,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS2lC,OAAQtzD,EAAMzG,EAAO6oC,UAAU,IACnE,MAEF,QACEpiC,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAAS4lC,OAAQvzD,EAAMzG,EAAO+oC,UAAU,IACnE,MAEF,QACEz2B,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAM0gD,YAWT,GAVA78C,EAAOpG,KAAK+vD,kBACV9oD,EAAWiE,QACX4qD,GAAkBv8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLq3C,EAAc,KAMhB91D,KAAKurD,YAAY1nD,GAAE,KAErB,GADIi5C,EAAiB98C,KAAKurD,YAAYzO,eAGpC,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAasC,KAC5C,CACZvV,EAAOpG,KAAKi7D,qBAAqB7qC,EAAUnpB,EAAWiE,QAAS9E,EAAMa,GACrE,MAMNb,EAAOpG,KAAKulE,eAAen/D,EAAMpG,KAAKurD,aACtCvrD,KAAKurD,YAAchyC,EAAA+E,KAAKW,KACxB,MAEF,KAAK3c,EAAAC,MAAM2gD,MAaT,GAZA98C,EAAOpG,KAAK+vD,kBACV9oD,EAAWiE,QACX4qD,GAAkBv8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLq3C,EAAejyD,GAAE,GACf0V,EAAA+E,KAAKI,IACLo3C,EAAc,KAMlB91D,KAAKurD,YAAY1nD,GAAE,KAAuB,CAC5C,IAAIi5C,EAEE1sB,EADN,GADI0sB,EAAiB98C,KAAKurD,YAAYzO,eAGpC,GADI1sB,EAAW0sB,EAAe7sB,eAAewsB,EAAApjC,aAAauC,aAC5C,CACZxV,EAAOpG,KAAKi7D,qBAAqB7qC,EAAUnpB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAjH,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENzE,EAAOytC,oBAUhB,OAREhnC,EAAOpG,KAAKo3D,kBACVhxD,EACApG,KAAKurD,YAAavrD,KAAKurD,YAAYgP,QAAO,IAE1CtzD,EAAWiE,SAIPlL,KAAKurD,YAAY3oD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASgnC,OAAQ30D,EAAMzG,EAAOqoC,WAAW,IACpE,MAEF,OACA,OACE5hC,EAAOzG,EAAOopC,aACZ/oC,KAAKqe,QAAQkB,SACT9F,EAAAsa,SAASinC,OACTvhD,EAAAsa,SAASgnC,OACb30D,EACApG,KAAKurD,YAAYrN,eAAev+C,IAElC,MAEF,OACA,OACEyG,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASinC,OAAQ50D,EAAMzG,EAAOyoC,WAAW,GAAI,IACxE,MAEF,QACEn2B,QAAO,GACP7L,EAAOzG,EAAOytC,oBAGlB,MAEF,KAAK9qC,EAAAC,MAAM8+C,OAKT,OAJArhD,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAENzE,EAAOytC,oBAEhB,QAEE,OADAn7B,QAAO,GACAtS,EAAOytC,oBAGlB,OAAO6rB,EACHj5D,KAAK41D,2BAA2B3uD,EAAWiE,QAAS9E,EAAM0vD,GAAkBv8C,EAAA+E,KAAKc,MACjFhZ,GAIN+kD,EAAAlpD,UAAAo1D,uBAAA,SAAuBjxD,EAAqB/B,GAC1C,IAAI1E,EAASK,KAAKL,OACd6tB,EAAOxtB,KAAK4wB,gBAAgBpD,KAChC,OAAQnpB,EAAKzB,MACX,OACM4qB,EAAK2F,YAAY/sB,EAAM/B,KACzB+B,EAAOpG,KAAKqe,QAAQwB,WAAU,GAC1BlgB,EAAOipC,YAAYnvB,EAAAwd,QAAQuuC,cAAep/D,GAC1CzG,EAAOopC,aAAatvB,EAAAsa,SAAS2C,OAC3B/2B,EAAOopC,aAAatvB,EAAAsa,SAASwC,OAC3BnwB,EACAzG,EAAOqoC,UAAU,KAEnBroC,EAAOqoC,UAAU,MAGzB,MAEF,OACMxa,EAAK2F,YAAY/sB,EAAM/B,KACzB+B,EAAOpG,KAAKqe,QAAQwB,WAAU,GAC1BlgB,EAAOipC,YAAYnvB,EAAAwd,QAAQwuC,eAAgBr/D,GAC3CzG,EAAOopC,aAAatvB,EAAAsa,SAAS2C,OAC3B/2B,EAAOopC,aAAatvB,EAAAsa,SAASwC,OAC3BnwB,EACAzG,EAAOqoC,UAAU,KAEnBroC,EAAOqoC,UAAU,MAGzB,MAEF,OACMxa,EAAK2F,YAAY/sB,EAAM/B,KACzB+B,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASsC,OAClCjwB,EACAzG,EAAOqoC,UAAU,OAGrB,MAEF,OACMxa,EAAK2F,YAAY/sB,EAAM/B,KACzB+B,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASsC,OAClCjwB,EACAzG,EAAOqoC,UAAU,SAGrB,MAEF,QACMxa,EAAK2F,YAAY/sB,EAAM/B,KACzB+B,EAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASsC,OAClCjwB,EACAzG,EAAOqoC,UAAU,KAMzB,OAAO5hC,GAIT+kD,EAAAlpD,UAAAsjE,eAAA,SAAen/D,EAAqB/B,GAClC,IAAI1E,EAASK,KAAKL,OAClB,OAAQ0E,EAAKzB,MACX,OACA,OACA,OACA,OACA,QACEwD,EAAOpG,KAAKq3D,uBAAuBjxD,EAAM/B,GAG3C,OACA,OACE,OAAO1E,EAAOipC,YAAYnvB,EAAAwd,QAAQC,OAAQ9wB,GAE5C,OACA,OACE,OAAOzG,EAAOipC,YAAYnvB,EAAAwd,QAAQE,OAAQ/wB,GAE5C,OACA,OACE,OAAOzG,EAAOipC,YAAyB,IAAbvkC,EAAKoyB,KAAahd,EAAAwd,QAAQE,OAAS1d,EAAAwd,QAAQC,OAAQ9wB,GAE/E,QACE,OAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASG,MAAO9tB,EAAMzG,EAAO6oC,UAAU,IAEpE,QACE,OAAO7oC,EAAOopC,aAAatvB,EAAAsa,SAASI,MAAO/tB,EAAMzG,EAAO+oC,UAAU,IAEpE,QAEE,OADAz2B,QAAO,GACAtS,EAAOqoC,UAAU,KAM9BmjB,EAAAlpD,UAAAoxD,cAAA,SAAcjtD,EAAqB/B,GACjC,IAAI1E,EAASK,KAAKL,OAClB,OAAQ0E,EAAKzB,MACX,OACA,OACA,OACA,OACA,QACEwD,EAAOpG,KAAKq3D,uBAAuBjxD,EAAM/B,GAG3C,OACA,OACE,OAAO+B,EAET,OACA,OACE,OAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASM,MAAOjuB,EAAMzG,EAAOyoC,UAAU,IAEpE,OACA,OACE,OAAoB,IAAb/jC,EAAKoyB,KACR92B,EAAOopC,aAAatvB,EAAAsa,SAASM,MAAOjuB,EAAMzG,EAAOyoC,UAAU,IAC3DhiC,EAEN,QACE,OAAOzG,EAAOopC,aAAatvB,EAAAsa,SAASO,MAAOluB,EAAMzG,EAAO6oC,UAAU,IAEpE,QACE,OAAO7oC,EAAOopC,aAAatvB,EAAAsa,SAASQ,MAAOnuB,EAAMzG,EAAO+oC,UAAU,IAEpE,QAEE,OADAz2B,QAAO,GACAtS,EAAOqoC,UAAU,KAM9BmjB,EAAAlpD,UAAAwiE,aAAA,SAAaF,EAAsBlW,WAC7B1uD,EAASK,KAAKL,OACdixB,EAAkB5wB,KAAK4wB,gBACvB+8B,EAAiB3tD,KAAKqe,QAAQsvC,eAG9B8G,EAAY7jC,EAAgBjD,aAAa42C,EAAclgE,MAAM,GAC7DoxD,EAAe,IAAIz/C,MAQvB,GAPAy/C,EAAajwC,KACX7lB,EAAOwrC,eAAespB,EAAUrpC,MAC9Bm/B,EAAA8Z,gBAAgBrkE,KAAMukE,EAAelW,KAKrCkW,EAAcv4D,YAChB,IAAmB,IAAAkhB,EAAAzL,EAAA8iD,EAAcv4D,QAAQtC,UAAQmY,EAAAqL,EAAAvL,QAAAE,EAAAD,KAAAC,EAAAqL,EAAAvL,OAAE,CAA9C,IAAI7K,EAAM+K,EAAAvgB,MACb,GAAIwV,EAAOlU,MAAQ65C,EAAAzgC,YAAYmT,MAAO,CACpC,IAAIoB,EAAezZ,EACf4uD,EAAYn1C,EAAMlsB,KAClBshE,EAAkBD,EAAU53C,eAC5B83C,EAAmBr1C,EAAMtuB,UAAU4F,YAEvC,GADAoK,QAAQse,EAAMxsB,MAAM1B,EAAAsB,YAAYkmB,QAC5B+7C,EAAiB7gE,YACnB0wD,EAAajwC,KAAK7lB,EAAOqqC,YAAY07B,EAAU3hD,SAC7CpkB,EAAO0pC,eAAeorB,EAAUrpC,MAAOuiC,GACvC3tD,KAAK+vD,kBACH6V,EAAiB7gE,YACjB2gE,EAAS,KAIXC,EACAp1C,EAAMnB,mBAEH,CAEL,IAAI1X,EAAoC6Y,EAAMtuB,UAAU4F,YAAa6P,eACrE+9C,EAAajwC,KAAK7lB,EAAOqqC,YAAY07B,EAAU3hD,SAC7CpkB,EAAO0pC,eAAeorB,EAAUrpC,MAAOuiC,GACvCj2C,GAAkB,EACd/X,EAAO0pC,eAAe,EAAI3xB,EAAgBiuD,GAC1CD,EAAU1nB,aAAar+C,GACzBgmE,EACFp1C,EAAMnB,mHAchB,OANAqmC,EAAajwC,KACX7lB,EAAO0pC,eAAeorB,EAAUrpC,MAAOuiC,IAGzC/8B,EAAgB3C,cAAcwmC,GAC9Bz0D,KAAKurD,YAAcgZ,EAAclgE,KAC1B1E,EAAO4rC,YAAY,KAAMkqB,EAAc9H,IAIhDxC,EAAAlpD,UAAAkvD,wBAAA,SAAwBoT,EAAsBlW,GAE5C,IAAI1uD,EAASK,KAAKL,OACdguD,EAAiB3tD,KAAKqe,QAAQsvC,eAElC,OADA3tD,KAAKurD,YAAcgZ,EAAclgE,KAC1B1E,EAAOqsC,SACE,GAAd2hB,EACIhuD,EAAOopC,aACLtvB,EAAAsa,SAASM,MACT10B,EAAO0pC,eAAe,EAAC,GACvB1pC,EAAOyoC,UAAU,IAEnBzoC,EAAO0pC,eAAe,EAAC,GAC3B1pC,EAAO0pC,eAAe,EAAGskB,GACzBhuD,EAAO4pC,eAAe,EACpBvpC,KAAKykE,aAAaF,EAAelW,MAMvClD,EAAAlpD,UAAA8wD,iBAAA,SAAiB3sD,EAAqBhC,GACpC,IAAIwsB,EAAkB5wB,KAAK4wB,gBACvBvjB,EAASjJ,EAAMiJ,OACfA,EAAOmI,eAAiB,IAAGnI,EAAOmI,eAAiBxV,KAAKL,OAAOi2C,iBAAiBvoC,EAAOJ,iBAC3F7I,EAAMsqB,aAAetoB,EACrBwqB,EAAgB7E,eAAevG,KAAKphB,IAExC+mD,EAptOA,CAA8B7xC,EAAAwQ,mBAwtO9B,SAAS+lC,EACPxnD,EACAR,EACAg+D,GAKA,QALA,IAAAA,MAAA,MAEA5a,EAA8B4a,EAAgBA,EAAc1gD,WAAatd,EAAYzD,MAAMiJ,OAAOyI,WAClGo1C,EAA+B7iD,EAAQ8c,WAElC9c,EAAQ2c,aAAay3B,EAAAxgC,eAAe3J,UAAzC,CAEA,IAAI0X,EAAU3hB,EAAQ2hB,QAClBlR,EAAY7G,OAAOuH,EAAAX,cAAcW,EAAA1H,cAAcQ,SAAUzK,EAAYoE,aACrExG,EAAOqT,EAAUlT,UACrB,GAAIH,GAAQA,EAAKoB,OAAQ,CACvB,IAAImT,EAAMvU,EAAK,GACXuU,EAAIpX,MAAQ4W,EAAA/W,SAASI,SAA+BmX,EAAKvG,aAAe+F,EAAAjG,YAAYmB,QACtFw2C,EAAyDlxC,EAAK1Y,MAC1DmE,EAAKoB,QAAU,KACjBmT,EAAMvU,EAAK,IACH7C,MAAQ4W,EAAA/W,SAASI,SAA+BmX,EAAKvG,aAAe+F,EAAAjG,YAAYmB,QACtFu2C,EAA8BC,EAC9BA,EAAyDlxC,EAAK1Y,MAC1DmE,EAAKoB,OAAS,GAChBmjB,EAAQ3I,MACN/H,EAAAgI,eAAeoG,+BACf5O,EAAU1U,MAAO,IAAKqB,EAAKoB,OAAO+d,aAItCoF,EAAQ3I,MACN/H,EAAAgI,eAAemG,wBACfzN,EAAI5V,SAKV4lB,EAAQ3I,MACN/H,EAAAgI,eAAemG,wBACfzN,EAAI5V,YAIR4lB,EAAQ3I,MACN/H,EAAAgI,eAAe08C,wCACfllD,EAAU1U,MAAO,IAAK,MApwOf1E,EAAAyrD,0FCzPb,SAAY7pC,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,qCACAA,IAAA,mHACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,+HACAA,IAAA,qIACAA,IAAA,mGACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,yFACAA,IAAA,mEACAA,IAAA,+CACAA,IAAA,yMACAA,IAAA,+FACAA,IAAA,mHACAA,IAAA,yFACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,4EACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,wIACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,kJACAA,IAAA,oFACAA,IAAA,sIACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,4KACAA,IAAA,0DACAA,IAAA,8FACAA,IAAA,4JACAA,IAAA,gIACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,8KACAA,IAAA,kLACAA,IAAA,kFACAA,IAAA,0CACAA,IAAA,wFACAA,IAAA,4HAlHF,CAAY5hB,EAAA4hB,iBAAA5hB,EAAA4hB,oBAsHZ5hB,EAAAm6B,uBAAA,SAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,+DACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,qGACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,4EAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,8EAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,4FAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,QAAS,MAAO,sRClPpB,IAAA8rC,EAAA3lE,EAAA,IAYAs8C,EAAAt8C,EAAA,GASAqZ,EAAArZ,EAAA,GAeA4lE,EAAA5lE,EAAA,IAIA6lE,EAAA,WAKA,OALA,WAIEhmE,KAAAimE,OAAwB,IAAIjwD,OAJ9B,GAOAkwD,EAAA,WAQA,OAJE,SAAYC,EAAqBC,GAC/BpmE,KAAKqmE,cAAgBF,EACrBnmE,KAAKqE,KAAO+hE,GANhB,GAUAE,EAAA,WAUA,OAJE,SAAY1lE,EAAcyD,GAF1BrE,KAAAumE,mBAA6B,GAG3BvmE,KAAKY,KAAOA,EACZZ,KAAKqE,KAAOA,GARhB,GAYAmiE,EAAA,oBAAAA,KAuBA,OArBSA,EAAAC,cAAqC,IAAItqD,MAC7C,KAAM,SACN,MAAO,UACP,MAAO,UACP,MAAO,UACP,QAAS,KACT,KAAM,UACN,MAAO,WACP,MAAO,WACP,MAAO,WACP,QAAS,UACT,OAAQ,UACR,MAAO,YACP,MAAO,YACP,UAAW,UACX,eAAgB,SAChB,kBAAmB,SACnB,cAAe,SACf,cAAe,WACf,QAAS,WAEdqqD,EAvBA,GAAa9mE,EAAA8mE,YAyBb,IAAAE,EAAA,WAYA,OALE,SAAY9lE,EAAcyD,EAAcsiE,QAAA,IAAAA,MAAA,OAJxC3mE,KAAA4mE,WAAqB,MACrB5mE,KAAA6mE,YAAwB,YACxB7mE,KAAA8mE,YAAwB,UAGtB9mE,KAAKY,KAAOA,EACZZ,KAAKqE,KAAOA,EACZrE,KAAK4mE,WAAaD,GAVtB,GAcA7oD,EAAA,WAwBE,SAAAA,EAAYkM,GAVZhqB,KAAAymE,cAAqC,IAAItqD,IAEzCnc,KAAA+mE,aAA4B,IAAI59C,IAEhCnpB,KAAAgnE,cAAqC,IAAI7qD,IAEzCnc,KAAAinE,cAAsC,IAAI9qD,IAE1Cnc,KAAAknE,mBAAsD,IAAI/qD,IAIxDnc,KAAKgqB,QAAUA,EAEfhqB,KAAKmnE,SACHC,QAAS,cACThpB,MAAO,IAAIpoC,MACXqxD,QAAS,IAAIrxD,MACbsxD,QAAS,IAAItxD,MACbuxD,OAAQ,IAAIvxD,OAGdhW,KAAKymE,cAAgBD,EAAUC,cA4anC,OAtaE3oD,EAAA7b,UAAAulE,4BAAA,SAA4BC,EAAoBr4D,WAE1Cs4D,EAAS,IAAI1B,EACjB0B,EAAO9mE,KAAO6mE,EACdC,EAAOp4C,KAAO,GAEd,IAAInqB,EAA8BiK,EAAUjK,eAC5C,IAAsB,IAAAwiE,EAAAlmD,EAAAtc,GAAUyiE,EAAAD,EAAAhmD,QAAAimD,EAAAhmD,KAAAgmD,EAAAD,EAAAhmD,OAAE,CAA7B,IAAIkmD,EAASD,EAAAtmE,MACZ+C,EAAuBwjE,EAAUxjE,KACjCyjE,EAAW,IAAIhC,EAAAiC,aAAa/nE,KAAKgqB,QAAS3lB,GAC1C2jE,EAAUF,EAASG,QAAaH,EAASI,aAAY,KAAOJ,EAASK,YACzEnoE,KAAKooE,gBAAgBN,GACrBJ,EAAOzB,OAAOzgD,MAAO5kB,KAASinE,EAAUjnE,KAAKwD,MAAMwgB,WAAYvgB,KAAQ2jE,sGAEzE,OAAON,GAGT5pD,EAAA7b,UAAAmmE,gBAAA,SAAgBC,GACd,IAAIC,EAAeD,EAAaH,aAE5BK,EAAeF,EAAaG,qBAChC,GAAID,GAAiBA,EAAa3lE,MAAQ65C,EAAAzgC,YAAY0G,gBAAiB,CACrE,IAAI0D,EAAiCmiD,EACrCvoE,KAAKyoE,4BAA4BriD,GAGnC,IAAKpmB,KAAK+mE,aAAa7jD,IAAIolD,GAAe,CAExC,IAAII,EAAmB1oE,KAAK2oE,yBAAyBL,GACjDlC,EAAWpmE,KAAKymE,cAAcvlE,IAAIwnE,GAElCtC,GACFpmE,KAAKmnE,QAAQ/oB,MAAM54B,KAAK,IAAI0gD,EAAaoC,EAAclC,IAEzDpmE,KAAK+mE,aAAa39C,IAAIk/C,KAW1BxqD,EAAA7b,UAAA0mE,yBAAA,SAAyBL,GAGvB,GAD6BtoE,KAAKymE,cAAcvlE,IAAIonE,GAElD,OAAOA,EAET,IAAIM,EAAY5oE,KAAKgqB,QAAQtN,YAAYxb,IAAIonE,GAC7C,GAAIM,EAAW,CACb,IAAIC,EAAkBD,EAAUvkE,KAAKD,MAAMwgB,WAC3C,OAAO5kB,KAAK2oE,yBAAyBE,GAErC,OAAOP,GAQXxqD,EAAA7b,UAAA6mE,2BAAA,SAA2BR,GACzB,IAAIM,EAAY5oE,KAAKgqB,QAAQtN,YAAYxb,IAAIonE,GAC7C,GAAIM,EAAW,CACb,IAAIC,EAAkBD,EAAUvkE,KAAKD,MAAMwgB,WAC3C,OAAO5kB,KAAK8oE,2BAA2BD,GAEvC,OAAOP,GAUXxqD,EAAA7b,UAAA8mE,uBAAA,SAAuBT,GACrB,IAAI1J,EAAe5+D,KAAK8oE,2BAA2BR,GAGnD,OAD8BtoE,KAAKgqB,QAAQvN,YAAYvb,IAAI09D,IAI7D9gD,EAAA7b,UAAA+mE,mBAAA,SAAmB7+C,GAEjB,YAAW8+C,GAAP9+C,GAA2B,MAAPA,IAGA,KAAjBA,EAAI++C,OAAO,IAA4C,KAA9B/+C,EAAI++C,OAAO/+C,EAAItjB,OAAS,KAQ1DiX,EAAA7b,UAAAknE,sBAAA,SAAsB9gE,GACpB,GAAIA,EAAQzF,MAAQ65C,EAAAzgC,YAAYuH,mBAAoB,CAClD,IAAI6lD,EAA8B/gE,EAClC,OAAO09D,EAAAsD,QAAQC,qBAAqBF,EAASvhE,YAAa2R,EAAA1H,cAAcK,QAE1E,OAAO,GAMT2L,EAAA7b,UAAAsnE,yBAAA,SAAyBj9D,WACvB,GAAKA,EAAUL,eAGf,IAAsB,IAAAihB,EAAAzL,EAAAnV,EAAUL,YAAU4V,EAAAqL,EAAAvL,QAAAE,EAAAD,KAAAC,EAAAqL,EAAAvL,OAAE,CAAvC,IAAI7I,EAAS+I,EAAAvgB,MAChB,GAAIwX,EAAUjT,eAAiB2T,EAAA1H,cAAcO,UAAYyG,EAAUlT,UAAW,CAE5E,GAAIkT,EAAUlT,UAAUiB,OAAS,EAC/B,MAAM,IAAIoc,MAAM,8CAElB,IAAI5e,EAAOyU,EAAUlT,UAAU,GAAGxB,MAAMwgB,WACpChkB,EAAOZ,KAAKwpE,aAAa1wD,EAAUlT,UAAU,IACjD5F,KAAKypE,kBAAkB7oE,GACvBZ,KAAKmnE,QAAQI,OAAO/hD,KAAK,IAAIkhD,EAAM9lE,EAAMyD,IACzCrE,KAAK0pE,0BAA0B5wD,EAAUlT,UAAU,yGASzDkY,EAAA7b,UAAAunE,aAAA,SAAapjE,GACX,IAAIujE,EAAevjE,EAAKhC,MAAMwgB,WAC9B,GAAI5kB,KAAKgpE,mBAAmBW,GAC1B,OAAOA,EAAK5zD,UAAU,EAAG4zD,EAAK9iE,OAAS,GAEzC,IAAIuZ,EAAe2lD,EAAAsD,QAAQO,gBAAgBxjE,GACvCiC,EAA0BrI,KAAKgqB,QAAQzN,eAAerb,IAAIkf,GAC9D,GAAI/X,EAAS,CACX,IAAIR,EAA6EQ,EAASR,YAC1F,GAAIA,GAAeA,EAAY9C,YAE7B,OADgE8C,EAAY9C,YAC7DzD,MAGnB,MAAM,IAAI2hB,MAAM,wBAAwB7C,IAG1CtC,EAAA7b,UAAA4nE,2BAAA,SAA2BzjE,GACzB,IAEIga,EAFeha,EAAKhC,MAAMiJ,OAAOC,aAEH,IADvBlH,EAAKhC,MAAMwgB,WAElBvc,EAAUrI,KAAKgqB,QAAQzN,eAAerb,IAAIkf,GAC9C,IAAK/X,GAAWA,EAAQzF,MAAQ65C,EAAAzgC,YAAY0G,gBAC1C,MAAM,IAAIO,MAAM,WAAW7C,EAAY,6CAA6CA,EAAY,iBAElG,OAAO/X,GAMTyV,EAAA7b,UAAAynE,0BAAA,SAA0BtjE,GACxB,IAAIga,EAAe2lD,EAAAsD,QAAQO,gBAAgBxjE,GAC3CpG,KAAK8pE,6BAA6B1pD,IAGpCtC,EAAA7b,UAAA6nE,6BAAA,SAA6B1pD,GAC3B,IAAI/X,EAAUrI,KAAKgqB,QAAQzN,eAAerb,IAAIkf,GAC9C,IAAK/X,GAAWA,EAAQzF,MAAQ65C,EAAAzgC,YAAY0G,gBAC1C,MAAM,IAAIO,MAAM,WAAW7C,EAAY,6CAA6CA,EAAY,iBAElG,IAAIgG,EAAiC/d,EACrCrI,KAAKyoE,4BAA4BriD,IAGnCtI,EAAA7b,UAAAwmE,4BAAA,SAA4BriD,WACtBpa,EAAkCoa,EAAeve,YAAYmE,QAC7D07D,EAAS,IAAI1B,EAEjB,GADA0B,EAAO9mE,KAAOwlB,EAAejB,WACzBnlB,KAAKymE,cAAcvlE,IAAIwmE,EAAO9mE,MAChC,OAAO,KAET8mE,EAAOp4C,KAAO,OACd,IAAmB,IAAAy6C,EAAAtoD,EAAAzV,GAAOg+D,EAAAD,EAAApoD,QAAAqoD,EAAApoD,KAAAooD,EAAAD,EAAApoD,OAAE,CAAvB,IAAI7K,EAAMkzD,EAAA1oE,MACb,GAAIwV,EAAOlU,MAAQ4W,EAAA/W,SAASgV,iBAAkB,CAC5C,IAAIwyD,EAAmDnzD,EACnDwZ,EAAYxZ,EAAOlW,KAAKwD,MAAMwgB,WAC9B8gD,EAAmCuE,EAAa5lE,KAEpD,GAAIqhE,IAAcK,EAAAsD,QAAQC,qBAAqBW,EAAczwD,EAAA1H,cAAcW,QAAS,CAClF,IAAI5K,EAA4B,IAAIi+D,EAAAiC,aAAa/nE,KAAKgqB,QAAS07C,GAC3DwE,EAAgBxE,EAAUthE,MAAMwgB,WACpC,GAAI/c,EAAYsiE,WACd,SAEF,IAAI9lE,EAAQwD,EAAYogE,QAAalC,EAAAsD,QAAQe,iBAAiBF,GAAc,KAAOA,EACnFxC,EAAOzB,OAAOzgD,MAAM5kB,KAAQ0vB,EAAWjsB,KAAQA,IAC/CrE,KAAKooE,gBAAgBvgE,uGAK3B,OADA7H,KAAKqqE,UAAU3C,GACRA,GAGT5pD,EAAA7b,UAAAooE,UAAA,SAAU3C,GAEH1nE,KAAKgnE,cAAc9jD,IAAIwkD,EAAO9mE,QACjCZ,KAAKmnE,QAAQE,QAAQ7hD,KAAKkiD,GAC1B1nE,KAAKgnE,cAAchjE,IAAI0jE,EAAO9mE,KAAM8mE,KAIxC5pD,EAAA7b,UAAAqoE,UAAA,SAAUngD,GACRlY,OAAOkY,EAAItjB,OAAS,EAAG,iCACvBoL,OAAOkY,EAAItjB,QAAU,GAAI,eAAesjB,EAAG,wCAG7CrM,EAAA7b,UAAAwnE,kBAAA,SAAkB7oE,WAChBqR,OAAOrR,EAAKiG,OAAS,EAAG,gCACxBoL,OAAOrR,EAAKiG,QAAU,GAAI,mBAAmBjG,EAAI,uCACjD,IAAM2pE,EAAQ,uCAEd,IAAkB,IAAAC,EAAA/oD,EAAA7gB,GAAI6pE,EAAAD,EAAA7oD,QAAA8oD,EAAA7oD,KAAA6oD,EAAAD,EAAA7oD,OAAE,CAAnB,IAAI+oD,EAAKD,EAAAnpE,MACZ2Q,OAAOs4D,EAAMrM,SAASwM,GAAQ,cAAc9pE,EAAI,wCAAwC2pE,uGAO5FzsD,EAAA7b,UAAA0oE,uBAAA,SAAuBC,WACrB,GAAIA,EAAalkD,iBAAmBq/C,EAAAsD,QAAQwB,iBAAiBD,GAAe,CAC1E,IAAIv7D,EAAO,IAAI2G,MACX80D,GAAsB,EACtBC,EAAeH,EAAazlD,WAC5B6lD,EAAkB,IAAMD,EAE5B17D,EAAKmW,KAAK,6BACVnW,EAAKmW,KAAK,WAAWwlD,EAAe,UAAUD,EAAY,eAC1D17D,EAAKmW,KAAK,OAAOwlD,EAAe,+BAChC37D,EAAKmW,KAAK,OAAOwlD,EAAe,cAChC37D,EAAKmW,KAAK,gBAAgBwlD,EAAe,yBAEzC,IAAqB,IAAA99C,EAAAzL,EAAAmpD,EAAalkD,gBAAgBhd,UAAQmY,EAAAqL,EAAAvL,QAAAE,EAAAD,KAAAC,EAAAqL,EAAAvL,OAAE,CAAvD,IAAIyB,EAAQvB,EAAAvgB,MAEb,GAAI8hB,EAASxgB,MAAQ65C,EAAAzgC,YAAYuH,oBAAsBvjB,KAAKmpE,sBAAsB/lD,GAAW,CAC7FpjB,KAAKirE,yBAA4C7nD,GACjD0nD,GAAsB,EACtB,IAAIjjE,EAAuDub,EAAUvb,YAEjEqjE,EAAWrjE,EAAYjH,KAAKwD,MAAMwgB,WAClCw5B,EAAQv2C,EAAYuH,UAAUjK,WAElCnF,KAAKsqE,UAAUY,GACf77D,EAAKmW,KAAK,WAAWwlD,EAAe,cAAcE,EAAQ,QAG1D,IADA,IAAIjF,EAAS,IAAIjwD,MACRoV,EAAQ,EAAGA,EAAQgzB,EAAMv3C,OAAQukB,IAAS,CACjD,IAAI/mB,EAAsB+5C,EAAMhzB,GAC5BiC,EAAgBhpB,EAAKA,KAAKD,MAAMwgB,WAChC0I,EAAgBjpB,EAAKzD,KAAKwD,MAAMwgB,WAEhCojD,EAAwB,IAAIlC,EAAAiC,aAAa/nE,KAAKgqB,QAAS3lB,EAAKA,MAEhE,GAAI2jE,EAAQC,QACND,EAAQplE,MAAQkjE,EAAAqF,aAAaC,OAC/B/7D,EAAKmW,KAAK,aAAa8H,EAAa,oBAAoB06C,EAAQqD,YAAW,QAClErD,EAAQplE,MAAQkjE,EAAAqF,aAAaG,KACtCj8D,EAAKmW,KAAK,aAAa8H,EAAa,2BAC3B06C,EAAQplE,MAAQkjE,EAAAqF,aAAaz2D,OACtCrF,EAAKmW,KAAK,aAAa8H,EAAa,6BAEpCje,EAAKmW,KAAK,aAAa8H,EAAa,2BAA2B06C,EAAQE,aAAY,aAGrF,GAAIF,EAAQplE,MAAQkjE,EAAAqF,aAAaz2D,OAC/BrF,EAAKmW,KAAK,aAAa8H,EAAa,4BAC/B,GAAI06C,EAAQplE,MAAQkjE,EAAAqF,aAAaG,KACtCj8D,EAAKmW,KAAK,aAAa8H,EAAa,+BAC/B,GAAI06C,EAAQplE,MAAQkjE,EAAAqF,aAAaC,OACtC/7D,EAAKmW,KAAK,aAAa8H,EAAa,cAAc06C,EAAQqD,YAAW,YAChE,CACL,IAAIjrD,EAAe2lD,EAAAsD,QAAQO,gBAAgBvlE,EAAKA,MAChDrE,KAAK8pE,6BAA6B1pD,GAClC/Q,EAAKmW,KAAK,aAAa8H,EAAa,UAAUD,EAAa,OAC3Dhe,EAAKmW,KAAK,SAAS8H,EAAa,qBAGpC24C,EAAOzgD,KAAK8H,GAEdje,EAAKmW,KAAK,SAASwlD,EAAe,IAAIE,EAAQ,IAAIjF,EAAO1gD,KAAK,KAAI,MAClElW,EAAKmW,KAAK,4GAMd,GAHAnW,EAAKmW,KAAK,OAAOwlD,EAAe,cAChC37D,EAAKmW,KAAK,OACVxlB,KAAKupE,yBAAyBqB,EAAa/iE,aACvCijE,EACF,OAAOz7D,EAGX,OAAO,IAAI2G,OAMb8H,EAAA7b,UAAAgpE,yBAAA,SAAyBM,GAEvB,IACIL,EADmCK,EAAc1jE,YAC1BjH,KAAKwD,MAAMwgB,WAClCxV,EAAYm8D,EAAc1jE,YAAYuH,UACtCs4D,EAAS1nE,KAAKwnE,4BAA4B0D,EAAU97D,GAExDpP,KAAKqqE,UAAU3C,GACf1nE,KAAKmnE,QAAQG,QAAQ9hD,KAAK,IAAI8gD,EAAO4E,EAAUA,KAGjDptD,EAAA7b,UAAAupE,mBAAA,uBAEMC,EAAkBzrE,KAAKgqB,QAAQvN,YAAYivD,WAC/C,IAAgB,IAAAC,EAAAlqD,EAAAgqD,GAAeG,EAAAD,EAAAhqD,QAAAiqD,EAAAhqD,KAAAgqD,EAAAD,EAAAhqD,OAAE,CAA5B,IAAI/f,EAAGgqE,EAAAtqE,OACNA,EAAQtB,KAAKgqB,QAAQvN,YAAYvb,IAAIU,KAEvCw5B,QAAQC,IAAI,qBAAqBz5B,EAAG,YAAYN,EAAMsB,wGAI1D,IAAIipE,EAAiB7rE,KAAKgqB,QAAQtN,YAAYgvD,WAC9C,IAAgB,IAAAI,EAAArqD,EAAAoqD,GAAcE,EAAAD,EAAAnqD,QAAAoqD,EAAAnqD,KAAAmqD,EAAAD,EAAAnqD,OAAE,CAA3B,IACCrgB,EADGM,EAAGmqE,EAAAzqE,OACNA,EAAQtB,KAAKgqB,QAAQtN,YAAYxb,IAAIU,KAEvCw5B,QAAQC,IAAI,mBAAmBz5B,EAAG,YAAYN,EAAM+C,KAAKD,MAAMwgB,gHAKrE9G,EAAA7b,UAAA+pE,uBAAA,mBACMN,EAAO1rE,KAAKgqB,QAAQzN,eAAemvD,WACvC,IAAgB,IAAAO,EAAAxqD,EAAAiqD,GAAIQ,EAAAD,EAAAtqD,QAAAuqD,EAAAtqD,KAAAsqD,EAAAD,EAAAtqD,OAAE,CAAjB,IAAI/f,EAAGsqE,EAAA5qE,MACNA,EAAQtB,KAAKgqB,QAAQzN,eAAerb,IAAIU,GACxCN,GACF85B,QAAQC,IAAI,sBAAsBz5B,EAAG,SAAS66C,EAAAzgC,YAAY1a,EAAMsB,2GAK9Dkb,EAAA7b,UAAAkqE,wBAAR,mBACMT,EAAO1rE,KAAKgqB,QAAQzN,eAAemvD,WACvC,IAAgB,IAAAU,EAAA3qD,EAAAiqD,GAAIW,EAAAD,EAAAzqD,QAAA0qD,EAAAzqD,KAAAyqD,EAAAD,EAAAzqD,OAAE,CAAjB,IAAI/f,EAAGyqE,EAAA/qE,MACNA,EAAwBtB,KAAKgqB,QAAQzN,eAAerb,IAAIU,GAC5D,GAAIN,GAASA,EAAMsB,MAAQ65C,EAAAzgC,YAAY0G,gBAAiB,CAEtD,IAAI0D,EAAiD9kB,EACjD8kB,EAAezD,eACjByY,QAAQC,IAAI,sBAAsBz5B,EAAG,oBAAoBwkB,EAAezD,cAAcwC,iHAM9FrH,EAAA7b,UAAA8b,QAAA,uBAMMuuD,EAAuC,IAAIxG,EAAAyG,kBAAkBvsE,KAAKgqB,SAClEwiD,EAA+B,IAAI1G,EAAA2G,cAAczsE,KAAKgqB,SACtD0iD,EAAkBJ,EAAkBK,kBACpCC,EAAcJ,EAAcG,sBAEhC,IAAoB,IAAAE,EAAAprD,EAAAmrD,GAAWE,EAAAD,EAAAlrD,QAAAmrD,EAAAlrD,KAAAkrD,EAAAD,EAAAlrD,OAAE,CAA5B,IAAIorD,EAAOD,EAAAxrE,MACdorE,EAAgBlnD,KAAKunD,qGAGvB/sE,KAAKknE,mBAAqBpB,EAAAkH,YAAYC,YAAYP,GAClD,IAAIQ,EAAiB,IAAIl3D,UAEzB,IAAoB,IAAA6L,EAAAJ,EAAAzhB,KAAKgqB,QAAQzN,eAAe7S,UAAQsZ,EAAAnB,EAAAF,QAAAqB,EAAApB,KAAAoB,EAAAnB,EAAAF,OAAE,CAArD,IAAItZ,EAAO2a,EAAA1hB,MACd,GAAI+G,EAAQzF,MAAQ65C,EAAAzgC,YAAY0G,gBAAiB,CAC/C,IAAIkoD,EAA+BviE,EACnC,IAAKrI,KAAKinE,cAAc/jD,IAAI0nD,EAAaxqD,cACJpgB,KAAK2qE,uBAAuBC,GACjDuC,QAAQ,SAAC7rE,EAAe8pB,GACpC8hD,EAAe1nD,KAAKlkB,KAEtBtB,KAAKinE,cAAcjjE,IAAI4mE,EAAaxqD,aAAc/X,sGAKpD6kE,EAAermE,OAInB7G,KAAKotE,SAAWptE,KAAKqtE,iBAAiBH,IAGxCpvD,EAAA7b,UAAAqrE,WAAA,SAAW1sE,GAET,QAD8BZ,KAAKgqB,QAAQzN,eAAerb,IAAIN,IAKxDkd,EAAA7b,UAAAorE,iBAAR,SAAyBh+D,GAEvB,IAAIwrB,EAAK,IAAI7kB,MAQb,OAPA6kB,EAAGrV,KAAK,iFAERnW,EAAK89D,QAAQ,SAAC7rE,EAAe8pB,GAC3ByP,EAAGrV,KAAKlkB,KAEVu5B,EAAGrV,KAAK,KAEDqV,EAAGtV,KAAK,OAEnBzH,EAhdA,GAAape,EAAAoe,uRCjGb,IAAAurD,EAAA,oBAAAA,KAoFA,OA7EWA,EAAAC,qBAAP,SAA4Bh9D,EAAiCwM,WACrD7M,EAAaK,EAAUL,WAC3B,IAAKA,EACD,OAAO,MAEX,IAAuB,IAAAshE,EAAA9rD,EAAAxV,GAAUuhE,EAAAD,EAAA5rD,QAAA6rD,EAAA5rD,KAAA4rD,EAAAD,EAAA5rD,OAAE,CAC/B,GADe6rD,EAAAlsE,MACAuE,eAAiBiT,EAC5B,OAAO,oGAGf,OAAO,GAOJuwD,EAAAO,gBAAP,SAAuB3jE,GAInB,OAHmBA,EAAK7B,MAAMiJ,OAAOC,aAEH,IADvBrH,EAAK7B,MAAMwgB,YAUnBykD,EAAAe,iBAAP,SAAwBjC,GACpB,IAAIsF,EAAetF,EAAYuF,QAAQ,KACvC,IAAqB,GAAjBD,EAAoB,CACpB,IAAIriD,GAAqC,GAA7B+8C,EAAYuF,QAAQ,KAAaD,EAAetF,EAAYuF,QAAQ,KAChF,OAAOvF,EAAYpyD,UAAU,EAAGqV,GAGpC,IAAqB,IADrBqiD,EAAetF,EAAYuF,QAAQ,MACX,CACpB,IAAIC,EAAWxF,EAAYuF,QAAQ,KACnC,OAAOvF,EAAYpyD,UAAU03D,EAAe,EAAGE,GAEnD,OAAOxF,GAMJkB,EAAApB,QAAP,SAAeE,GACX,OAAOA,EAAYjK,SAAS,MACvBiK,EAAYjK,SAAS,UAAYiK,EAAYjK,SAAS,MACI,GAAxDiK,EAAY9tC,QAAQ,QAAS,IAAIuzC,OAAOF,QAAQ,MAMpDrE,EAAAwE,mBAAP,SAA0BC,WAElB/hE,EAAkB+hE,EAAiB/hE,gBACvC,GAAIA,MACA,IAAkB,IAAAgiE,EAAAtsD,EAAA1V,GAAeiiE,EAAAD,EAAApsD,QAAAqsD,EAAApsD,KAAAosD,EAAAD,EAAApsD,OAAE,CAC/B,GAJc,gBAGJqsD,EAAA1sE,MACAV,KAAKwD,MAAMwgB,WACjB,OAAO,oGAInB,OAAO,GAGJykD,EAAAwB,iBAAP,SAAwBzkD,GACpB,IACIzD,EAAuCyD,EAAezD,cAC1D,SAAIA,GAFiB,YAEAA,EAAcwC,aAM3CkkD,EApFA,GAAa3pE,EAAA2pE,y6BCNb,IAyDY4E,EAzDZ30D,EAAAnZ,EAAA,GAKAs8C,EAAAt8C,EAAA,GAmBAqZ,EAAArZ,EAAA,GAoBAoZ,EAAApZ,EAAA,GAMAkC,EAAAlC,EAAA,IAOA,SAAY8tE,GAEVA,IAAA,mBAEAA,IAAA,qBAJF,CAAYA,EAAAvuE,EAAAuuE,aAAAvuE,EAAAuuE,gBAQZ,IAAAvwD,EAAA,SAAArM,GAWE,SAAAqM,EAAYsM,GAAZ,IAAAzY,EACEF,EAAA7Q,KAAAR,KAAMgqB,EAAQ3N,cAAYrc,YAN5BuR,EAAA2qD,sBAA2C,KAE3C3qD,EAAAmqD,yBAA+C,KAK7CnqD,EAAKyY,QAAUA,IA+jCnB,OA5kC8B1Y,EAAAoM,EAAArM,GAiB5BqM,EAAAzb,UAAAqtD,YAAA,SACErpD,EACAylB,EACAwiD,GAIA,QALA,IAAAxiD,MAAA,WACA,IAAAwiD,MAAaD,EAAWE,QAIpBloE,EAAKrD,MAAQ4W,EAAA/W,SAASsP,UAAW,CACnC,IAAI3C,EAAYpP,KAAKouE,iBAAgCnoE,EAAMylB,EAAyBwiD,GACpF,OAAK9+D,EACEnJ,EAAK9B,WAAaiL,EAAU/K,KAAKm5C,aAAepuC,EAAU/K,KAD1C,KAKzB4N,OAAOhM,EAAKrD,MAAQ4W,EAAA/W,SAASgP,MAC7B,IAAI0rD,EAAqBl3D,EACrBkf,EAAag4C,EAASv8D,KAAKoF,KAC3Bge,EAAamB,EACbjE,EAAYi8C,EAAS/4D,MAAMiJ,OAAOC,aAAejL,EAAAwT,eAAiBsP,EAIhE5I,EAAiBvc,KAAKgqB,QAAQzN,eAC9BlU,OAAO,EACX,IACGA,EAAUkU,EAAerb,IAAIggB,MAC7B7Y,EAAUkU,EAAerb,IAAI8iB,IAE9B,OAAQ3b,EAAQzF,MACd,KAAK65C,EAAAzgC,YAAYyO,KACf,OAA+B,OAA3B0yC,EAASj5D,eAA0Bi5D,EAASj5D,cAAc2C,QACxDqnE,GAAcD,EAAWE,QAC3BnuE,KAAKqhB,MACH/H,EAAAgI,eAAeu7C,sBACf52D,EAAK7B,MAAOiE,EAAQ+X,cAGjB,MAEF7G,EAAA+E,KAAKG,IAEd,KAAKg+B,EAAAzgC,YAAY0G,gBACf,IAAIU,EAAWpjB,KAAKyxD,8BACFppD,EAChB80D,EAASj5D,cACTwnB,EACAzlB,GAEF,OAAKmd,EACEnd,EAAK9B,WAAaif,EAAS/e,KAAKm5C,aAAep6B,EAAS/e,KADzC,KAS5B,IAAIqM,EAAQ1Q,KAAKgqB,QAAQtN,YAAYxb,IAAIikB,GACzC,GAAIzU,EAAO,OAAO1Q,KAAKsvD,YAAY5+C,EAAMrM,KAAMqnB,EAAyBwiD,GAKxE,IAAIxQ,EAAoBP,EAASj5D,cACjC,GAAIw5D,EAAmB,CAGrB,IAFA,IAAI2Q,EAAmB3Q,EAAkB72D,OACrC0gC,EAAa,IAAIvxB,MAAYq4D,GACxBhuE,EAAI,EAAGA,EAAIguE,IAAoBhuE,EAAG,CACzC,IAAIiuE,EAAYtuE,KAAKsvD,YACnBoO,EAAkBr9D,GAClBqrB,EACAwiD,GAEF,IAAKI,EAAW,OAAO,KACvB/mC,EAAWlnC,GAAKiuE,EAElB,GAAID,EAAkB,CACpB,IAAIE,EAAch1D,EAAA+kC,cAAc/W,GAC5BgnC,EAAY1nE,SACdqa,GAAa,IAAMqtD,EAAc,IACjCvqD,GAAc,IAAMuqD,EAAc,UAE/B,GAAI7iD,EAAyB,CAClC,IAAI8iD,EAAkB9iD,EAAwBxqB,IAAI8iB,GAClD,GAAIwqD,EAAiB,OAAOA,GAOhC,IAAI/xD,EAAczc,KAAKgqB,QAAQvN,YAC3BpY,OAAI,EACR,OACGA,EAAOoY,EAAYvb,IAAIggB,MACvB7c,EAAOoY,EAAYvb,IAAI8iB,IAEjB3f,GAIP6pE,GAAcD,EAAWE,QAC3BnuE,KAAKqhB,MACH/H,EAAAgI,eAAec,mBACf+6C,EAASv8D,KAAKwD,MAAO4f,GAGlB,OAITtG,EAAAzb,UAAAmsE,iBAAA,SACEnoE,EACAylB,EACAwiD,QADA,IAAAxiD,MAAA,WACA,IAAAwiD,MAAyBD,EAAWE,QAEpC,IAAI9oE,EAAmBY,EAAKZ,iBACxBynB,EAAwB,KAC5B,GAAIznB,KACFynB,EAAW9sB,KAAKsvD,YAAYjqD,EAAkBqmB,EAAyBwiD,IACxD,OAAO,KAQxB,IANA,IAAIO,EAAqBxoE,EAAKd,WAC1B85C,EAAgBwvB,EAAmB5nE,OACnCgd,EAAiB,IAAI7N,MAAYipC,GACjCR,EAAiB,IAAIzoC,MAAcipC,GACnCP,EAAqB,EACrBC,GAAU,EACLt+C,EAAI,EAAGA,EAAI4+C,IAAiB5+C,EAAG,CACtC,IAAIquE,EAAoBD,EAAmBpuE,GAC3C,OAAQquE,EAAkBzpE,eACxB,KAAKuU,EAAA7H,cAAcyuC,QACjB1B,EAAqBr+C,EAAI,EACzB,MAEF,KAAKmZ,EAAA7H,cAAcg9D,KACjB18D,OAAO5R,GAAK4+C,GACZN,GAAU,EAId,IAAItxB,EAAgBrtB,KAAKsvD,YACvBr9C,OAAOy8D,EAAkBrqE,MACzBqnB,EACAwiD,GAEF,IAAK7gD,EAAe,OAAO,KAC3BxJ,EAAexjB,GAAKgtB,EACpBoxB,EAAep+C,GAAKquE,EAAkB9tE,KAAKoF,KAE7C,IACIZ,EADAwpE,EAAiB3oE,EAAKb,WAE1B,GAAIwpE,GAEF,KADAxpE,EAAapF,KAAKsvD,YAAYsf,EAAgBljD,EAAyBwiD,IACtD,OAAO,UAExB9oE,EAAamU,EAAA+E,KAAKc,KAEpB,IAAIhQ,EAAY,IAAImK,EAAAglC,UAAU16B,EAAgBze,EAAY0nB,GAI1D,OAHA1d,EAAUqvC,eAAiBA,EAC3BrvC,EAAUsvC,mBAAqBA,EAC/BtvC,EAAUuvC,QAAUA,EACbvvC,GAITsO,EAAAzb,UAAA07D,qBAAA,SACE7xD,EACA4xD,EACAhyC,EACA8lC,EACA0c,QAFA,IAAAxiD,MAAA,WACA,IAAA8lC,MAAA,WACA,IAAA0c,MAAyBD,EAAWE,QAEpC,IAAIU,EAAiB/iE,EAAejF,OAChCioE,EAAgBpR,EAAoBA,EAAkB72D,OAAS,EACnE,GAAIgoE,GAAkBC,EAgBpB,OAfIA,EACF9uE,KAAKqhB,MACH/H,EAAAgI,eAAeytD,oCACfv1D,EAAAhX,MAAM+iB,KACSm4C,EAAmB,GAAGt5D,MACtBs5D,EAAmBoR,EAAgB,GAAG1qE,OAErDyqE,EAAejqD,SAAS,IAAKkqD,EAAclqD,SAAS,KAE7C4sC,GACTxxD,KAAKqhB,MACH/H,EAAAgI,eAAeytD,oCACfvd,EAAsBptD,MAAMorD,MAAOqf,EAAejqD,SAAS,IAAK,KAG7D,KAGT,IADA,IAAI1gB,EAAgB,IAAI8R,MAAY64D,GAC3BxuE,EAAI,EAAGA,EAAIwuE,IAAkBxuE,EAAG,CACvC,IAAIgE,EAAOrE,KAAKsvD,YACDoO,EAAmBr9D,GAChCqrB,EACAwiD,GAEF,IAAK7pE,EAAM,OAAO,KAElBH,EAAc7D,GAAKgE,EAErB,OAAOH,GAITwZ,EAAAzb,UAAAwgB,kBAAA,SACE5W,EACA2oD,EACA0Z,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IACI9lE,EADAzH,EAAOiL,EAAW7F,KAGtB,GAAIwuD,EAAS,CAEX,OAAQA,EAAQ5xD,MACd,KAAK65C,EAAAzgC,YAAY9H,SAEf,GADA7L,EAAqBmsD,EAAShnC,KAAKsE,eAAelxB,GAIhD,OAFAZ,KAAKk8D,sBAAwB,KAC7Bl8D,KAAK07D,yBAA2B,KACzBrzD,EAETmsD,EAAqBA,EAASvyD,UAAUwB,OACxC,MAEF,KAAKg5C,EAAAzgC,YAAYlI,MACf0gD,EAAkBA,EAASvyD,UAAUwB,OAMzC,KAAO+wD,GAAS,CACd,IAAIxoD,EAAUwoD,EAAQxoD,QACtB,GAAIA,IACE3D,EAAU2D,EAAQ9K,IAAIN,IAGxB,OAFAZ,KAAKk8D,sBAAwB,KAC7Bl8D,KAAK07D,yBAA2B,KACzBrzD,EAGXmsD,EAAUA,EAAQ/wD,QAKtB,IAAI8Y,EAAiBvc,KAAKgqB,QAAQzN,eAClC,OAAIlU,EAAUkU,EAAerb,IAAI2K,EAAWzH,MAAMiJ,OAAOC,aAAejL,EAAAwT,eAAiBjV,KACvFZ,KAAKk8D,sBAAwB,KAC7Bl8D,KAAK07D,yBAA2B,KACzBrzD,IAILA,EAAUkU,EAAerb,IAAIN,KAC/BZ,KAAKk8D,sBAAwB,KAC7Bl8D,KAAK07D,yBAA2B,KACzBrzD,IAGL6lE,GAAcD,EAAWE,QAC3BnuE,KAAKqhB,MACH/H,EAAAgI,eAAec,mBACfvW,EAAWzH,MAAOxD,GAGf,OAIT8c,EAAAzb,UAAA0iE,sBAAA,SACED,EACAsK,EACAd,QAAA,IAAAA,MAAyBD,EAAWE,QAGpC,IAAIc,EAAmBvK,EAAez9D,WAClC8oB,EAAS/vB,KAAKw7D,kBAAkByT,EAAkBD,EAAoBd,GAC1E,IAAKn+C,EAAQ,OAAO,KAGpB,IAAIm/C,EAAexK,EAAe1iE,SAASgE,KAG3C,OAAQ+pB,EAAOntB,MACb,KAAK65C,EAAAzgC,YAAYzJ,OACjB,KAAKkqC,EAAAzgC,YAAYqP,MACjB,KAAKoxB,EAAAzgC,YAAYmT,MACf,IAAI9qB,EAA6B0rB,EAAQ1rB,KAGzC,GAFA4N,OAAO5N,GAAQkV,EAAA+E,KAAKc,QAChB09B,EAAiBz4C,EAAKy4C,gBAMxB,OAJA98C,KAAKqhB,MACH/H,EAAAgI,eAAe8iD,oCACfM,EAAe1iE,SAASoC,MAAO8qE,EAAoCn/C,EAAQ1rB,KAAKugB,YAE3E,KAETmL,EAAS+sB,EACT,MAEF,KAAKL,EAAAzgC,YAAY+L,SACf,IAOI+0B,EAPAj8C,EAASb,KAAK4jB,gBAChB3R,OAAkB8d,EAAQ/H,iBAC1B,KACA,KACAkmD,GAEF,IAAKrtE,EAAQ,OAAO,KAEpB,KADIi8C,EAAiBj8C,EAAOuO,UAAUhK,WAAW03C,gBAM/C,OAJA98C,KAAKqhB,MACH/H,EAAAgI,eAAe8iD,oCACfM,EAAe1iE,SAASoC,MAAO8qE,EAAcruE,EAAOuO,UAAUhK,WAAWwf,YAEpE,KAETmL,EAAS+sB,EACT,MAEF,KAAKL,EAAAzgC,YAAYlI,MACf,IAAIvL,EAAoBvI,KAAK07D,yBAC7B,GAAInzD,EAAmB,CACrB,IAAIg0D,EAAqBxsC,EAAQE,eAAewsB,EAAApjC,aAAaY,aAC7D,IAAKsiD,EAKH,OAJAv8D,KAAKqhB,MACH/H,EAAAgI,eAAew6C,qCACfvzD,EAAkBnE,MAAe2rB,EAAQ3P,cAEpC,KAET,IAAIhb,EAAam3D,EAAWntD,UAAUhK,WACtC,KAAM2qB,EAAS3qB,EAAW03C,gBAKxB,OAJA98C,KAAKqhB,MACH/H,EAAAgI,eAAe8iD,oCACfM,EAAe1iE,SAASoC,MAAO8qE,EAAc9pE,EAAWwf,YAEnD,MAQf,OAAQmL,EAAOntB,MACb,KAAK65C,EAAAzgC,YAAY0G,gBACjB,KAAK+5B,EAAAzgC,YAAYlI,MACf,OAAG,CACD,IACIgD,OAAM,EACV,IAFI9K,EAAU+jB,EAAO/jB,WAEL8K,EAAS9K,EAAQ9K,IAAIguE,IAGnC,OAFAlvE,KAAKk8D,sBAAwB+S,EAC7BjvE,KAAK07D,yBAA2B,KACzB5kD,EAGT,GAAIiZ,EAAOntB,MAAQ65C,EAAAzgC,YAAY0G,gBAAiB,CAC9C,IAAqBqN,EAAQpN,cAG3B,MAFAoN,EAA0CA,EAAQpN,kBAK/C,IAAIoN,EAAOntB,MAAQ65C,EAAAzgC,YAAYlI,MAOpC,MANA,IAAYic,EAAQT,KAGlB,MAFAS,EAAwBA,EAAQT,MAQtC,MAEF,QACE,IAAItjB,EACJ,GADIA,EAAU+jB,EAAO/jB,QAGnB,GADI8K,EAAS9K,EAAQ9K,IAAIguE,GAIvB,OAFAlvE,KAAKk8D,sBAAwB+S,EAC7BjvE,KAAK07D,yBAA2B,KACzB5kD,EAUf,OAJA9W,KAAKqhB,MACH/H,EAAAgI,eAAe8iD,oCACfM,EAAe1iE,SAASoC,MAAO8qE,EAAcn/C,EAAO3P,cAE/C,MAGT1C,EAAAzb,UAAAo+D,qBAAA,SACE8O,EACAH,EACAd,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IAAIc,EAAmBE,EAAcloE,WACjC8oB,EAAS/vB,KAAKw7D,kBAAkByT,EAAkBD,EAAoBd,GAC1E,IAAKn+C,EAAQ,OAAO,KACpB,OAAQA,EAAOntB,MACb,KAAK65C,EAAAzgC,YAAYzJ,OACjB,KAAKkqC,EAAAzgC,YAAYqP,MACjB,KAAKoxB,EAAAzgC,YAAYmT,MAEf,GAAIY,EAD6BA,EAAQ1rB,KACvBy4C,eAGhB,OAFA98C,KAAKk8D,sBAAwB+S,EAC7BjvE,KAAK07D,yBAA2ByT,EAAc5mE,kBACvCwnB,EAET,MAEF,KAAK0sB,EAAAzgC,YAAYlI,MACf,IAAIyoD,EAAqBxsC,EAAQE,eAAewsB,EAAApjC,aAAaY,aAC7D,IAAKsiD,EAOH,OANI2R,GAAcD,EAAWE,QAC3BnuE,KAAKqhB,MACH/H,EAAAgI,eAAew6C,qCACfqT,EAAc/qE,MAAe2rB,EAAQ3P,cAGlC,KAGT,GAAI2P,EADawsC,EAAWntD,UAAUhK,WACd03C,eAGtB,OAFA98C,KAAKk8D,sBAAwB+S,EAC7BjvE,KAAK07D,yBAA2ByT,EAAc5mE,kBACvCwnB,EAWb,OANIm+C,GAAcD,EAAWE,QAC3BnuE,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACf6nD,EAAiB7qE,OAGd,MAGTsZ,EAAAzb,UAAAu5D,kBAAA,SACEv0D,EACA+nE,EACAd,GAEA,SAFA,IAAAA,MAAyBD,EAAWE,QAE7BlnE,EAAWrE,MAAQ4W,EAAA/W,SAAS8R,eACjCtN,EAAuCA,EAAYA,WAErD,OAAQA,EAAWrE,MACjB,KAAK4W,EAAA/W,SAASmR,UACZ,IAAIvP,EAAOrE,KAAKsvD,YACQroD,EAAYC,OAClC8nE,EAAmBxhD,KAAK9B,wBACxBwiD,GAEF,GAAI7pE,EAEF,GADIk5C,EAAYl5C,EAAKy4C,eAInB,OAFA98C,KAAKk8D,sBAAwB,KAC7Bl8D,KAAK07D,yBAA2B,KACzBne,EAGX,OAAO,KAET,KAAK/jC,EAAA/W,SAASoR,OACZ,MAAM,IAAIoP,MAAM,mBAElB,KAAKzJ,EAAA/W,SAASkS,KACZ,GAAIq6D,EAAmBxhD,KAAK3pB,GAAE,MAE5B,GADIurE,EAAgBJ,EAAmBxhD,KAAKsE,eAAe,QAIzD,OAFA9xB,KAAKk8D,sBAAwB,KAC7Bl8D,KAAK07D,yBAA2B,KACzB0T,EAIX,OADI3rE,EAASurE,EAAmBvrE,SAE9BzD,KAAKk8D,sBAAwB,KAC7Bl8D,KAAK07D,yBAA2B,KACzBj4D,IAELyqE,GAAcD,EAAWE,QAC3BnuE,KAAKqhB,MACH/H,EAAAgI,eAAek/C,+CACfv5D,EAAW7C,OAGR,MAET,KAAKoV,EAAA/W,SAASW,MAEV,IAAIgsE,EAOF3rE,EARJ,GAAIurE,EAAmBxhD,KAAK3pB,GAAE,MAE5B,GADIurE,EAAgBJ,EAAmBxhD,KAAKsE,eAAe,SAIzD,OAFA9xB,KAAKk8D,sBAAwB,KAC7Bl8D,KAAK07D,yBAA2B,KACzB0T,EAIX,OADI3rE,EAASurE,EAAmBvrE,SAClBA,EAAOb,MAAQ65C,EAAAzgC,YAAYlI,QAAUrQ,EAAiBA,EAAQ6rB,OAC1EtvB,KAAKk8D,sBAAwB,KAC7Bl8D,KAAK07D,yBAA2B,KACzBj4D,IAELyqE,GAAcD,EAAWE,QAC3BnuE,KAAKqhB,MACH/H,EAAAgI,eAAeo/C,iDACfz5D,EAAW7C,OAGR,MAET,KAAKoV,EAAA/W,SAASS,WACZ,OAAOlD,KAAKyiB,kBAAwCxb,EAAY+nE,EAAoBd,GAEtF,KAAK10D,EAAA/W,SAASI,QACZ,OAA4BoE,EAAYwM,aACtC,KAAK+F,EAAAjG,YAAYmB,OAGf,OAFA1U,KAAKk8D,sBAAwBj1D,EAC7BjH,KAAK07D,yBAA2B,KACzB17D,KAAKgqB,QAAQjN,eAIxB,MAEF,KAAKvD,EAAA/W,SAASa,eACZ,OAAOtD,KAAK2kE,sBACgB19D,EAC1B+nE,EACAd,GAGJ,KAAK10D,EAAA/W,SAASY,cACZ,OAAOrD,KAAKqgE,qBACep5D,EACzB+nE,EACAd,GAGJ,KAAK10D,EAAA/W,SAASU,KACZ,IAAI8rE,EAAoChoE,EAAYA,WAChD8oB,EAAS/vB,KAAKw7D,kBAAkByT,EAAkBD,EAAoBd,GAC1E,IAAKn+C,EAAQ,OAAO,KACpB,GAAIA,EAAOntB,MAAQ65C,EAAAzgC,YAAYuH,mBAAoB,CACjD,IAAIH,EAAWpjB,KAAK0wD,iCACC3gC,EACF9oB,EAAY/C,cAC7B8qE,EAAmBxhD,KAAK9B,wBACxBzkB,EACAinE,GAEF,IAAK9qD,EAAU,OAAO,KACtB,IACIm6B,EADAn4C,EAAage,EAAShU,UAAUhK,WAEpC,GADIm4C,EAAYn4C,EAAW03C,eAIzB,OAAOS,EAEP,IAAInuC,EAAYhK,EAAW0e,mBAC3B,GAAI1U,EAAW,CACb,IAAIigE,EAAiBjgE,EAAUovC,qBAO/B,OANK6wB,IACHA,EAAiB,IAAI5yB,EAAA5tB,eAAe7uB,KAAKgqB,QAAS5a,GAClDA,EAAUovC,qBAAuB6wB,GAI5BA,EASX,OANInB,GAAcD,EAAWE,QAC3BnuE,KAAKqhB,MACH/H,EAAAgI,eAAek8C,uGACfyR,EAAiB7qE,MAAO2rB,EAAO3P,cAG5B,MAWb,OANI8tD,GAAcD,EAAWE,QAC3BnuE,KAAKqhB,MACH/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAGR,MAITsZ,EAAAzb,UAAA2hB,gBAAA,SACE3hB,EACAiC,EACAwnB,EACAwiD,gBADA,IAAAxiD,MAAA,WACA,IAAAwiD,MAAyBD,EAAWE,QAEpC,IAAII,EAAcrqE,EAAgBqV,EAAA+kC,cAAcp6C,GAAiB,GAC7Dkf,EAAWnhB,EAAUspB,UAAUrqB,IAAIqtE,GACvC,GAAInrD,EAAU,OAAOA,EAErB,IAAIvb,EAAc5F,EAAU4F,YACxBo3D,EAAah9D,EAAU4B,GAAGxB,EAAAsB,YAAYipB,UACtCxG,EAAiBnkB,EAAUmkB,eAG3B2G,EAAyBrB,EAE7B,GADAA,EAA0B,IAAIvP,IAC1B4Q,MACF,IAA2C,IAAAC,EAAAvL,EAAAsL,GAAsBE,EAAAD,EAAArL,QAAAsL,EAAArL,KAAAqL,EAAAD,EAAArL,OAAE,CAA1D,IAAAuL,EAAApL,EAAAmL,EAAA3rB,MAAA,GAAC6rB,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GACvBxB,EAAwB1nB,IACtBmpB,EACAC,qGAMN,IAAI5B,EAAqBvpB,EAAUupB,mBACnC,GAAIA,EAAoB,CACtBvZ,OAAOhQ,EAAU4B,GAAGxB,EAAAsB,YAAYipB,WAChC,IACI0iD,EADmBr9D,OAAOmU,GAAgBve,YACHiE,eACvCyjE,EAAyBD,EAAoBzoE,OACjDoL,OAAOs9D,GAA0B/jD,EAAmB3kB,QACpD,IAAK,IAAIxG,EAAI,EAAGA,EAAIkvE,IAA0BlvE,EAC5CqrB,EAAwB1nB,IACtBsrE,EAAoBjvE,GAAGO,KAAKoF,KAC5BwlB,EAAmBnrB,SAIvB4R,QAAQuZ,GAIV,IAEIgkD,EAFAC,EAAgB5nE,EAAYuH,UAC5BsgE,EAAyB7nE,EAAYiE,eAEzC,GAAI5H,IAAkBsrE,EAA2BtrE,EAAc2C,QAAS,CACtEoL,OAAOy9D,GAA0BF,GAA4BE,EAAuB7oE,QACpF,IAASxG,EAAI,EAAGA,EAAImvE,IAA4BnvE,EAC9CqrB,EAAwB1nB,IACA0rE,EAAwBrvE,GAAGO,KAAKoF,KACtD9B,EAAc7D,SAIlB4R,QAAQy9D,GAA2D,GAAjCA,EAAuB7oE,QAI3D,IAAI09D,EAA8B,KAC9Bz3C,EAAwB,KAC5B,GAAImyC,EAAY,CAOd,KANAsF,EAAgBvkE,KAAKmjB,aACnBlR,OAAOmU,GACPoF,EACAE,EACAwiD,IAEkB,OAAO,KAC3BphD,EAAWy3C,EAAclgE,KACzBqnB,EAAwB1nB,IAAI,OAAQ8oB,GAItC,IAiBI1nB,EAjBAuqE,EAAsBF,EAActqE,WACpCyqE,EAA0BD,EAAoB9oE,OAC9Cgd,EAAiB,IAAI7N,MAAY45D,GACjCnxB,EAAiB,IAAIzoC,MAAc45D,GACnClxB,EAAqB,EACzB,IAASr+C,EAAI,EAAGA,EAAIuvE,IAA2BvvE,EAAG,CAChD,IAAIwvE,EAAuBF,EAAoBtvE,GAC3CwvE,EAAqB5qE,eAAiBuU,EAAA7H,cAAcyuC,UACtD1B,EAAqBr+C,EAAI,GAE3B,IAAI88D,EAAWlrD,OAAO49D,EAAqBxrE,MACvCgpB,EAAgBrtB,KAAKsvD,YAAY6N,EAAUzxC,EAAyBwiD,GACxE,IAAK7gD,EAAe,OAAO,KAC3BxJ,EAAexjB,GAAKgtB,EACpBoxB,EAAep+C,GAAKwvE,EAAqBjvE,KAAKoF,KAIhD,GAAI/D,EAAU4B,GAAGxB,EAAAsB,YAAYsiB,KAC3B7gB,EAAamU,EAAA+E,KAAKc,UACb,GAAInd,EAAU4B,GAAGxB,EAAAsB,YAAYqQ,aAClC5O,EAAa6M,OAAOsyD,GAAelgE,SAC9B,CACD84D,EAAWlrD,OAAOw9D,EAAcrqE,YAApC,IACIf,EAAOrE,KAAKsvD,YAAY6N,EAAUzxC,EAAyBwiD,GAC/D,IAAK7pE,EAAM,OAAO,KAClBe,EAAaf,EAGf,IAAI+K,EAAY,IAAImK,EAAAglC,UAAU16B,EAAgBze,EAAY0nB,GAC1D1d,EAAUqvC,eAAiBA,EAC3BrvC,EAAUsvC,mBAAqBA,EAE/B,IAAIt+B,EAAene,EAAUme,aAa7B,OAZImuD,EAAY1nE,SAAQuZ,GAAgB,IAAMmuD,EAAc,KAC5DnrD,EAAW,IAAIq5B,EAAAhxB,SACbxpB,EACAme,EACAhR,EACAm1D,GAEIn+C,EACJsF,GAEFzpB,EAAUspB,UAAUvnB,IAAIuqE,EAAanrD,GACrCpjB,KAAKgqB,QAAQxN,gBAAgBxY,IAAIoc,EAAcgD,GACxCA,GAIT1F,EAAAzb,UAAA6tE,yBAAA,SACE7tE,EACAiC,EACAgqE,QAAA,IAAAA,MAAyBD,EAAWE,QAEpCl8D,OAAOhQ,EAAU4B,GAAGxB,EAAAsB,YAAYipB,WAChC,IAAIxG,EAAiBnU,OAAOhQ,EAAUmkB,gBAEtC,IAAMliB,IAAiBA,EAAc2C,OAAS,OAAO5E,EAErD,IAAIkjB,EAAaljB,EAAUkjB,WACvB4qD,EAAax2D,EAAA+kC,cAAcp6C,GAC3B8rE,EAAmB,IAAIvzB,EAAA31B,kBACzB9mB,KAAKgqB,QACL7E,EACAiB,EAAehG,aAAe,IAAM2vD,EAAa,IAAM1tE,EAAAsW,mBAAqBwM,EAC5EljB,EAAU4F,YACVue,EACAnkB,EAAU4kB,gBAKZ,OAHAmpD,EAAiBtsE,MAAQzB,EAAUyB,MACnCssE,EAAiBxoD,aAAevlB,EAAUulB,aAC1CwoD,EAAiBxkD,mBAAqBtnB,EAC/B8rE,GAITtyD,EAAAzb,UAAAyuD,iCAAA,SACEzuD,EACAy7D,EACAhyC,EACA2iC,EACA6f,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IAAI5Q,EAAuC,KAC3C,OAAIt7D,EAAU4B,GAAGxB,EAAAsB,YAAY8f,WAC3BxR,OAA4B,MAArByrD,GAAyD,GAA5BA,EAAkB72D,QACtD02D,EAAwBv9D,KAAK29D,qBAC3B1rD,OAAOhQ,EAAU4F,YAAYiE,gBAC7B4xD,EACAhyC,EACA2iC,EACA6f,IAIGluE,KAAK4jB,gBACV3hB,EACAs7D,EACA7xC,EACAwiD,GANmC,MAWvCxwD,EAAAzb,UAAAkhB,aAAA,SACElhB,EACAiC,EACAwnB,EACAwiD,4BADA,IAAAxiD,MAAA,WACA,IAAAwiD,MAAyBD,EAAWE,QAEpC,IAAII,EAAcrqE,EAAgBqV,EAAA+kC,cAAcp6C,GAAiB,GAG7Dkf,EAAWnhB,EAAUspB,UAAUrqB,IAAIqtE,GACvC,GAAInrD,EAAU,OAAOA,EAGrB,IAAI2J,EAAyBrB,EAE7B,GADAA,EAA0B,IAAIvP,IAC1B4Q,MACF,IAA2C,IAAA4C,EAAAlO,EAAAsL,GAAsB6C,EAAAD,EAAAhO,QAAAiO,EAAAhO,KAAAgO,EAAAD,EAAAhO,OAAE,CAA1D,IAAAsrC,EAAAnrC,EAAA8N,EAAAtuB,MAAA,GAAC6rB,EAAA8/B,EAAA,GAAe7/B,EAAA6/B,EAAA,GACvBvhC,EAAwB1nB,IAAImpB,EAAeC,qGAM/C,IAAIvlB,EAAc5F,EAAU4F,YAC5B,GAAI3D,EAAe,CACjB,IAAI4H,EAAiBjE,EAAYiE,eAC7BmkE,EAAwBnkE,EAAejF,OACvCqpE,EAAsBhsE,EAAc2C,OACxCoL,OAAOi+D,GAAuBD,GAC9B,IAAK,IAAI5vE,EAAI,EAAGA,EAAI6vE,IAAuB7vE,EACzCqrB,EAAwB1nB,IAAI8H,EAAezL,GAAGO,KAAKoF,KAAM9B,EAAc7D,SAGzE4R,OAA4C,GAArCpK,EAAYiE,eAAejF,QAIpC,IAAIspE,EAA0B,KAC9B,GAAItoE,EAAYlD,YAAa,CAC3B,IAAIyrE,EAAgBpwE,KAAKsvD,YACvBznD,EAAYlD,YACZ+mB,EACAwiD,GAEF,IAAKkC,EAAe,OAAO,KAC3B,KAAMD,EAAYC,EAActzB,gBAO9B,OANIoxB,GAAcD,EAAWE,QAC3BnuE,KAAKgqB,QAAQ3I,MACX/H,EAAAgI,eAAesB,sCACf/a,EAAYlD,YAAYP,OAGrB,KAET,GAAI+rE,EAAUnrD,aAAay3B,EAAAxgC,eAAerJ,QAOxC,OANIs7D,GAAcD,EAAWE,QAC3BnuE,KAAKgqB,QAAQ3I,MACX/H,EAAAgI,eAAe+uD,yCACfxoE,EAAYlD,YAAYP,MAAO+rE,EAAU/vD,cAGtC,KAET,GAAI+vD,EAAUnrD,aAAay3B,EAAAxgC,eAAepJ,YAAc5Q,EAAU+iB,aAAay3B,EAAAxgC,eAAepJ,WAO5F,OANIq7D,GAAcD,EAAWE,QAC3BnuE,KAAKgqB,QAAQ3I,MACX/H,EAAAgI,eAAegvD,+DACf92D,EAAAhX,MAAM+iB,KAAK1d,EAAYjH,KAAKwD,MAAOyD,EAAYlD,YAAYP,QAGxD,KAKX,IAAI+gB,EAAaljB,EAAUkjB,WACvB/E,EAAene,EAAUme,aACzBmuD,EAAY1nE,SACdse,GAAc,IAAMopD,EAAc,IAClCnuD,GAAgB,IAAMmuD,EAAc,MAEtCnrD,EAAW,IAAIq5B,EAAAptB,MAAMptB,EAAWkjB,EAAY/E,EAAclc,EAAeisE,IAChEzkD,wBAA0BA,EACnCzpB,EAAUspB,UAAUvnB,IAAIuqE,EAAanrD,GACrCpjB,KAAKgqB,QAAQxN,gBAAgBxY,IAAIoc,EAAcgD,GAG/C,IAAIgM,EAAoB,EACxB,GAAI+gD,EAAW,CACb,GAAIA,EAAUnkE,QAAS,CAChBoX,EAASpX,UAASoX,EAASpX,QAAU,IAAImQ,SAC9C,IAA4B,IAAA+wC,EAAAzrC,EAAA0uD,EAAUnkE,QAAQtC,UAAQyjD,EAAAD,EAAAvrC,QAAAwrC,EAAAvrC,KAAAurC,EAAAD,EAAAvrC,OAAE,CAAnD,IAAI4uD,EAAepjB,EAAA7rD,MACtB8hB,EAASpX,QAAQhI,IAAIusE,EAAgBprD,WAAYorD,sGAGrDnhD,EAAe+gD,EAAU5gD,oBAI3B,GAAIttB,EAAU8kB,qBAAsB,CAClC,IAAIypD,EAAqBxwE,KAAK8vE,yBAC5B7tE,EAAU8kB,qBACV7iB,EACAgqE,GAEF,IAAKsC,EAAoB,OAAO,KAChCptD,EAASoM,oBAAsBxvB,KAAK4jB,gBAAgB4sD,EAAoB,KAAM,KAAMtC,GAItF,GAAIjsE,EAAUykB,oBACZ,IAAmB,IAAA0mC,EAAA3rC,EAAAxf,EAAUykB,gBAAgBhd,UAAQokD,EAAAV,EAAAzrC,QAAAmsC,EAAAlsC,KAAAksC,EAAAV,EAAAzrC,OAAE,CAAlD,IAAI7K,EAAMg3C,EAAAxsD,MACb,OAAQwV,EAAOlU,MAGb,KAAK65C,EAAAzgC,YAAYiT,gBACV7L,EAASpX,UAASoX,EAASpX,QAAU,IAAImQ,KAC9C,IAAIypD,EAAoC9uD,EAAQjP,YAC5C69D,EAAyB,KAE7B,GAAKE,EAAiBvhE,KAiBpBqhE,EAAY1lE,KAAKsvD,YACfsW,EAAiBvhE,KACjB+e,EAASsI,wBACTwiD,OApBwB,CAC1B,GAAkB,OAAdiC,GAA4C,OAAtBA,EAAUnkE,QAAkB,CACpD,IAAIykE,EAAYN,EAAUnkE,QAAQ9K,IAAqB4V,EAAQqO,YAC3DsrD,IAAcA,EAAU5sE,GAAGxB,EAAAsB,YAAYu9C,WACzCjvC,OAAOw+D,EAAU7tE,MAAQ65C,EAAAzgC,YAAYmT,OACrCu2C,EAAoB+K,EAAWpsE,MAG9BqhE,GACCwI,GAAcD,EAAWE,QAC3BnuE,KAAKqhB,MACH/H,EAAAgI,eAAeiuC,cACfqW,EAAiBhlE,KAAKwD,MAAMorD,OAWpC,IAAKkW,EAAW,MAChB,IAAIgL,EAAgB,IAAIj0B,EAAAvtB,MACNpY,EAChBsJ,EAAe/d,EAAAsW,mBAAsC7B,EAAQqO,WAC7DugD,EACAE,EACAxiD,GAEF,OAAQsiD,EAAU3hD,UAChB,KAAK,EAAG,MACR,KAAK,EAAwB,EAAfqL,KAAoBA,EAAc,MAChD,KAAK,EAAwB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IAAuB,MACvE,KAAK,EAAwB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IAAuB,MACvE,QAASnd,QAAO,GAElBy+D,EAActhD,aAAeA,EAC7BA,GAAgBs2C,EAAU3hD,SAC1BX,EAASpX,QAAQhI,IAAI8S,EAAOqO,WAAYurD,GACxC,MAIF,KAAKj0B,EAAAzgC,YAAYuH,mBACVH,EAASpX,UAASoX,EAASpX,QAAU,IAAImQ,KAC9C,IAAI6zD,EAAmBhwE,KAAK8vE,yBACPh5D,EACnB5S,EACAgqE,GAEF,IAAK8B,EAAkB,OAAO,KAC9BA,EAAiB5vD,aAAeA,EAAe/d,EAAAsW,mBAAqBq3D,EAAiB7qD,WACrF/B,EAASpX,QAAQhI,IAAI8S,EAAOqO,WAAY6qD,GACxC,MAIF,KAAKvzB,EAAAzgC,YAAY+L,SACV3E,EAASpX,UAASoX,EAASpX,QAAU,IAAImQ,KAC9C,IAAI6L,EAAkB/V,OAAkB6E,EAAQkR,iBAC5CC,EAA6BnR,EAAQmR,gBACrC0oD,EAAmB,IAAIl0B,EAAAv0B,SACzBloB,KAAKgqB,QACLlT,EAAOqO,WACP/E,EAAe/d,EAAAsW,mBAAqB7B,EAAOqO,WAC3CljB,GAEE2uE,EAAyB5wE,KAAK8vE,yBAChC9nD,EACA9jB,EACAgqE,GAEF,IAAK0C,EAAwB,OAAO,KAIpC,GAHAA,EACGxwD,aAAeA,EAAe/d,EAAAsW,mBAAqBi4D,EAAuBzrD,WAC7EwrD,EAAiB3oD,gBAAkB4oD,EAC/B3oD,EAAiB,CACnB,IAAI4oD,GAAyB7wE,KAAK8vE,yBAChC7nD,EACA/jB,EACAgqE,GAEF,IAAK2C,GAAwB,OAAO,KACpCA,GACGzwD,aAAeA,EAAe/d,EAAAsW,mBAAqBk4D,GAAuB1rD,WAC7EwrD,EAAiB1oD,gBAAkB4oD,GAErCztD,EAASpX,QAAQhI,IAAI8S,EAAOqO,WAAYwrD,GACxC,MAEF,QAAS1+D,QAAO,sGAMtBmR,EAASmM,oBAAsBH,MAG/B,IAAsC,IAAA2+B,GAAAtsC,EAAAxf,EAAUqlB,oBAAkB2mC,GAAAF,GAAApsC,QAAAssC,GAAArsC,KAAAqsC,GAAAF,GAAApsC,OAAE,CAA3D,IAAAusC,GAAApsC,EAAAmsC,GAAA3sD,MAAA,GAACsB,GAAAsrD,GAAA,GAAM4iB,GAAA5iB,GAAA,GACdj8C,OAAOrP,IAAQ65C,EAAApjC,aAAa0C,SAC5B,IAAIm/C,QAAgB,EACpB,GAAI4V,GAAkBjtE,GAAGxB,EAAAsB,YAAYipB,UAAW,CAC9C,IAAImkD,GAAkB/wE,KAAK8vE,yBACzBgB,GACA5sE,EACAgqE,GAEF,IAAK6C,GAAiB,SACtB7V,GAAmBl7D,KAAK4jB,gBAAgBmtD,GAAiB,KAAM,KAAM7C,QAErEhT,GAAmBl7D,KAAK4jB,gBAAgBktD,GAAmB,KAAM,KAAM5C,GAEzE,GAAKhT,GAAL,CACA,IAAI7zC,GAAYjE,EAASiE,UACpBA,KAAWjE,EAASiE,UAAYA,GAAY,IAAIlL,KACrDkL,GAAUrjB,IAAIpB,GAAMs4D,2GAEtB,OAAO93C,GAIT1F,EAAAzb,UAAAwvD,8BAAA,SACExvD,EACAy7D,EACAhyC,EACA2iC,EACA6f,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IAAI5Q,EAAuC,KAG3C,GAAIt7D,EAAU4B,GAAGxB,EAAAsB,YAAY8f,SAAU,CACrC,IAAIutD,EAAqB/uE,EAAU4F,YAAYiE,eAC3CmkE,EAAwBe,EAAmBnqE,OAC/CoL,OAAOg+D,EAAwB,GAC/B,IAAIC,EAA4C,OAAtBxS,EAA6BA,EAAkB72D,OAAS,EAClF,GAAIopE,GAAyBC,EAO3B,OANIhC,GAAcD,EAAWE,QAC3BnuE,KAAKqhB,MACH/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO6rE,EAAsBrrD,SAAS,IAAKsrD,EAAoBtrD,SAAS,KAGhF,KAST,KAPA24C,EAAwBv9D,KAAK29D,qBAC3BqT,EACAtT,EACAhyC,EACA2iC,EACA6f,IAE0B,OAAO,UAInC,GAA0B,OAAtBxQ,GAA8BA,EAAkB72D,OAOlD,OANIqnE,GAAcD,EAAWE,QAC3BnuE,KAAKqhB,MACH/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGzB,KAKX,OAAOpgB,KAAKmjB,aACVlhB,EACAs7D,EACA7xC,EACAwiD,IAGNxwD,EA5kCA,CAA8BpE,EAAAwQ,mBAAjBpqB,EAAAge,iIC9Dbvd,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IAEA,IAAAsZ,EAAAtZ,EAAA,GAEAsZ,EAAA+sB,OAAOvkC,UAAU6xC,OAAS,WACxB,OAAO,IAAIm9B,SAASzqC,OAAOxmC,KAAKgsB,KAAKklD,YAGvCz3D,EAAA+sB,OAAOvkC,UAAU8xC,QAAU,WACzB,OAAO,IAAIk9B,SAASzqC,OAAOxmC,KAAKgsB,KAAKmlD,+BCpBvC,SAAAhiB,GAEA,MAAA8hB,EAAA9hB,EAAAiiB,UAAAjxE,EAAA,IAGA,QAAAyB,KAFAutD,EAAA8hB,WAEAA,GACArvE,EAAAuL,WAAA,cAAAvL,EAAAuL,WAAA,gBAAAgiD,EAAAvtD,GAAAqvE,EAAArvE,IAKAutD,EAAAkiB,kBAAAJ,EAAAK,QACAniB,EAAAoiB,cAAAN,EAAAO,MACAriB,EAAAsiB,cAAAR,EAAAS,SACAviB,EAAAwiB,QAAA,SAAA7nC,EAAAuR,GAAqC41B,EAAAW,OAAA9nC,GAAAuR,GACrC8T,EAAA0iB,OAAA,SAAA/nC,GAA+B,OAAAmnC,EAAAW,OAAA9nC,qCCf/BnqC,EAAAD,QAAAO,oBCAA,SAAAkvD,GAEA,IAAA2iB,EAAA,oBAAAt1B,qBAAA,IAAA2S,MAAApvD,KA6IA,SAAAgyE,IACA9uD,MAAA+uD,kBACA/uD,MAAA+uD,kBAAAhyE,KAAA+xE,GAEA/xE,KAAAs7B,MAAAt7B,KAAAY,KAAA,KAAAZ,KAAAi6B,QAAA,UAAAhX,OAAAqY,MAWA,SAAA22C,EAAAh4C,GACAj6B,KAAAi6B,WAAA,mBACAhX,MAAA+uD,kBACA/uD,MAAA+uD,kBAAAhyE,KAAAiyE,GAEAjyE,KAAAs7B,MAAAt7B,KAAAY,KAAA,KAAAZ,KAAAi6B,QAAA,UAAAhX,OAAAqY,MA/JAw2C,EAAAI,WAAA,EAEAnxE,OAAAoxE,iBACAL,EAAA,YAAAxwE,GAA0C,OAAAA,GAAA,SAE1Cq2B,WAAgBr2B,OAAA,IAAA8wE,UAAA,GAChBx6C,WAAgBt2B,MAAA,IAAA8wE,UAAA,KAGhBrxE,OAAAoxE,iBACAL,EAAA,aAAAxwE,GAA4C,OAAAA,GAAA,SAE5Cq2B,WAAgBr2B,OAAA,MAAA8wE,UAAA,GAChBx6C,WAAgBt2B,MAAA,MAAA8wE,UAAA,KAGhBrxE,OAAAoxE,iBACAL,EAAA,IAAAA,EAAA,eAAAxwE,GAAmE,SAAAA,IAEnEq2B,WAAgBr2B,OAAA,WAAA8wE,UAAA,GAChBx6C,WAAgBt2B,MAAA,WAAA8wE,UAAA,KAGhBrxE,OAAAoxE,iBACAL,EAAA,YAAAxwE,GAA0C,WAAAA,IAE1Cq2B,WAAgBr2B,MAAA,EAAA8wE,UAAA,GAChBx6C,WAAgBt2B,MAAA,IAAA8wE,UAAA,KAGhBrxE,OAAAoxE,iBACAL,EAAA,aAAAxwE,GAA4C,aAAAA,IAE5Cq2B,WAAgBr2B,MAAA,EAAA8wE,UAAA,GAChBx6C,WAAgBt2B,MAAA,MAAA8wE,UAAA,KAGhBrxE,OAAAoxE,iBACAL,EAAA,IAAAA,EAAA,eAAAxwE,GAAmE,OAAAA,IAAA,IAEnEq2B,WAAgBr2B,MAAA,EAAA8wE,UAAA,GAChBx6C,WAAgBt2B,MAAA,WAAA8wE,UAAA,KAGhBrxE,OAAAoxE,iBACAL,EAAA,cAAAxwE,GAA8C,QAAAA,IAE9Cq2B,WAAgBr2B,MAAA,EAAA8wE,UAAA,GAChBx6C,WAAgBt2B,MAAA,EAAA8wE,UAAA,KAGhBrxE,OAAAoxE,iBACAL,EAAA,aAAAxwE,GAA4C,OAAA+wE,KAAAC,OAAAhxE,KAE5Cq2B,WAAgBr2B,MAAA+wE,KAAAC,QAAA,eAAAF,UAAA,GAChBx6C,WAAgBt2B,MAAA+wE,KAAAC,OAAA,eAAAF,UAAA,GAChBG,oBAAyBjxE,MAAA+wE,KAAAC,OAAA,iBAAAF,UAAA,GACzBI,kBAAuBlxE,OAAA,SAAA8wE,UAAA,GACvBK,kBAAuBnxE,MAAA,SAAA8wE,UAAA,GACvBM,SAAcpxE,MAAA+wE,KAAAC,OAAA,cAAAF,UAAA,KAGdrxE,OAAAoxE,iBACAL,EAAA,aAAAxwE,GAA4C,OAAAA,IAE5Cq2B,WAAgBr2B,OAAA,uBAAA8wE,UAAA,GAChBx6C,WAAgBt2B,MAAA,uBAAA8wE,UAAA,GAChBG,oBAAyBjxE,MAAA,wBAAA8wE,UAAA,GACzBI,kBAAuBlxE,OAAA,iBAAA8wE,UAAA,GACvBK,kBAAuBnxE,MAAA,iBAAA8wE,UAAA,GACvBM,SAAcpxE,MAAA,sBAAA8wE,UAAA,KAGdN,EAAA,IAAAO,KAAAM,MAEAb,EAAA,aAAAxwE,GACA,IAAAZ,EAAA2xE,KAAAM,MAAArxE,MACA,OAAAA,EAAA,GAAAZ,KAGAoxE,EAAA,gBAAAxwE,GAGA,kBADAA,GAAA,WADAA,OAAA,gBACAA,IAAA,eACAA,IAAA,oBAGAwwE,EAAA,cAAAxwE,EAAAk1B,GAEA,OAAAl1B,IADAk1B,GAAA,IACAl1B,IAAA,GAAAk1B,GAGAs7C,EAAA,cAAAxwE,EAAAk1B,GAEA,OAAAl1B,KADAk1B,GAAA,IACAl1B,GAAA,GAAAk1B,GAGAs7C,EAAA,IAAAO,KAAAO,IAEAd,EAAA,IAAAO,KAAAnmB,IAEA4lB,EAAA,IAAAO,KAAAn/C,IAEA4+C,EAAA,KAAAO,KAAAx1B,KAEAi1B,EAAA,MAAAO,KAAAQ,MAGAf,EAAA,iBAAAxwE,GACA,WAAA+wE,KAAAO,IAAAtxE,EAAA+wE,KAAAS,MAAAxxE,IACA,EAAA+wE,KAAAU,MAAA,GAAAzxE,GAEA+wE,KAAAU,MAAAzxE,IAGAwwE,EAAA,gBAAA9jE,EAAAC,EAAA5D,GACA,OAAAA,EAAA2D,EAAAC,GAGA6jE,EAAA,KAAAO,KAAAW,KAEAlB,EAAA,MAAAO,KAAAS,MAEAhB,EAAA,kBAAAmB,EAAAC,GACA,OAAAb,KAAAO,IAAAK,GAAAZ,KAAAc,KAAAD,IAGApB,EAAA,eAAAxwE,GACA,IAAA4iD,EAAA5iD,GAAA,WACA6iD,GAAA,SAAA7iD,IAAA,EAIA,OAFA4iD,GADA5iD,EAAA4iD,EAAAC,IACA,WACAA,GAAA,MAAA7iD,IAAA,KAIAwwE,EAAA,iBAAAxwE,GACA,OAAAA,GAAA,QAAAA,GAAA,iBAAAA,GAUAywE,EAAA9vE,UAAAlB,OAAAY,OAAAshB,MAAAhhB,WACA8vE,EAAA9vE,UAAArB,KAAA,mBACAmxE,EAAA9vE,UAAAg4B,QAAA,cAEA63C,EAAA,uBACA,UAAAC,GAWAE,EAAAhwE,UAAAlB,OAAAY,OAAAshB,MAAAhhB,WACAgwE,EAAAhwE,UAAArB,KAAA,iBAEAkxE,EAAA,gBAAAsB,EAAAn5C,GACA,GAAAm5C,EAAA,OAAAA,EACA,UAAAnB,EAAAh4C,IAGA63C,EAAA,oBAAAxwE,GACA,OAAAA,GAGAwwE,EAAA,kBAAA3nD,EAAAkpD,GACA,SAAAC,SAAAnpD,OAAA8+C,IAGAltB,OAAA,uBAAAD,GACA,OAAAC,OAAAmM,aAAA12C,MAAAuqC,OAAAD,IAGAC,OAAA,wBAAAD,GACA,OAAAC,OAAAw3B,cAAA/hE,MAAAuqC,OAAAD,IAGAg2B,EAAA,UAAA0B,OAAAC,UAEA3B,EAAA,iBAAA93D,GACA,uBAAAA,GAGA83D,EAAA,qBAAA93D,GACA,uBAAAA,GAAA,iBAAAA,GAGA83D,EAAA,kBAAA93D,GACA,uBAAAA,gBAAA+hC,QAGA+1B,EAAA,QAAA97D,MAAAiyD,QAEA6J,EAAA,mBAAA1rE,GACA,OAAAA,GAGA0rE,EAAA,cAAAmB,EAAAC,GACA,OAAAD,EAAAC,GAGApB,EAAA,eAAAmB,EAAAC,GACA,OAAAb,KAAAC,OAAAW,EAAAC,IAGApB,EAAA,OAAAO,KAEAP,EAAA,aACA,IAAA4B,EAAA,IAAAhgC,WAAA,GACAigC,EAAA,EACA,OACA3sC,SAAA8qC,EAAA,4BAAAr7C,GACA,KAAAA,KAAA,YACA,GAAAk9C,EAAAl9C,EAAAi9C,EAAA7sE,OAAA,CACA,IAAA+sE,EAAAF,GACAA,EAAA,IAAAhgC,WAAA2+B,KAAAnmB,IAAA,MAAAwnB,EAAA7sE,OAAA4vB,EAAA,EAAAi9C,EAAA7sE,UACA7C,IAAA4vE,GAEA,IAAA9pC,EAAA6pC,EAEA,OADA,GAAAA,GAAAl9C,KAAAk9C,EAAA,KAAAA,IACA7pC,GAEAvY,KAAAugD,EAAA,wBAAAhoC,KACA+pC,KAAA/B,EAAA,wBAAAgC,EAAAC,EAAAt9C,GACAi9C,EAAAM,WAAAF,EAAAC,IAAAt9C,MAjBA,GAsBAq7C,EAAA,MAAAA,EAAA,kBAAAhoC,EAAAxoC,EAAAglC,GACAotC,KAAA5pC,GAAA,EAAAxD,IAAAhlC,GAGAwwE,EAAA,KAAAA,EAAA,iBAAAhoC,EAAAxD,GACA,OAAAotC,KAAA5pC,GAAA,EAAAxD,yCCvPA,SAAA6oB,GAAA,MAAA8kB,EAAA,IAAAC,aAAA,GACAC,EAAA,IAAAC,aAAAH,EAAA5tC,QACAguC,EAAA,IAAAC,WAAAL,EAAA5tC,QAEA8oB,EAAAolB,WAAA,SAAAjzE,GAEA,OADA6yE,EAAA,GAAA7yE,EACA+yE,EAAA,IAGAllB,EAAAqlB,WAAA,SAAAlzE,GAEA,OADA+yE,EAAA,GAAA/yE,EACA6yE,EAAA,IAGAhlB,EAAAslB,WAAA,SAAAnzE,GAEA,OADA2yE,EAAA,GAAA3yE,EACAge,QAAA+0D,EAAA,GAAAA,EAAA,KAGAllB,EAAAulB,WAAA,SAAApzE,GAGA,OAFA+yE,EAAA,GAAA/jC,QAAAhvC,GACA+yE,EAAA,GAAA9jC,SAAAjvC,GACA2yE,EAAA,wCCtBA,SAAA9kB,GAAA,MAAAwlB,EAAAxlB,EAAAwlB,MAAAx0E,EAAA,IAEAgvD,EAAA78B,SAAAqiD,EAAAC,KAEAzlB,EAAA98B,QAAAsiD,EAAAE,IAEA1lB,EAAA7vC,QAAA,SAAAw1D,EAAAC,GACA,OAAAJ,EAAAK,SAAAF,EAAAC,IAGA5lB,EAAA7e,QAAA,SAAAhvC,GACA,OAAAA,EAAA2zE,KAGA9lB,EAAA5e,SAAA,SAAAjvC,GACA,OAAAA,EAAA4zE,MAGA/lB,EAAAlG,QAAA,SAAA3hD,EAAAC,GACA,OAAAD,EAAA8hB,IAAA7hB,IAGA4nD,EAAA8R,QAAA,SAAA35D,EAAAC,GACA,OAAAD,EAAA6tE,IAAA5tE,IAGA4nD,EAAAjG,QAAA,SAAA5hD,EAAAC,GACA,OAAAD,EAAA8tE,IAAA7tE,IAGA4nD,EAAAkmB,QAAA,SAAA/tE,EAAAC,GACA,OAAAD,EAAAguE,IAAA/tE,IAGA4nD,EAAAomB,UAAA,SAAAjuE,EAAAC,GACA,OAAAD,EAAAkuE,aAAAF,IAAA/tE,EAAAiuE,cAAAC,YAGAtmB,EAAAumB,QAAA,SAAApuE,EAAAC,GACA,OAAAD,EAAAquE,IAAApuE,IAGA4nD,EAAAymB,UAAA,SAAAtuE,EAAAC,GACA,OAAAD,EAAAkuE,aAAAG,IAAApuE,EAAAiuE,cAAAC,YAGAtmB,EAAAh9B,QAAA,SAAA7qB,EAAAC,GACA,OAAAD,EAAAuuE,IAAAtuE,IAGA4nD,EAAA38B,OAAA,SAAAlrB,EAAAC,GACA,OAAAD,EAAAwuE,GAAAvuE,IAGA4nD,EAAA4mB,QAAA,SAAAzuE,EAAAC,GACA,OAAAD,EAAA0uE,IAAAzuE,IAGA4nD,EAAA/8B,QAAA,SAAA9qB,EAAAC,GACA,OAAAD,EAAA2uE,IAAA1uE,IAGA4nD,EAAA+mB,QAAA,SAAA5uE,EAAAC,GACA,OAAAD,EAAA6uE,IAAA5uE,IAGA4nD,EAAAxC,UAAA,SAAArlD,EAAAC,GACA,OAAAD,EAAA8uE,KAAA7uE,IAGA4nD,EAAA18B,QAAA,SAAAnxB,GACA,OAAAA,EAAA+0E,OAGAlnB,EAAAmnB,OAAA,SAAAhvE,EAAAC,GACA,OAAAD,EAAAivE,GAAAhvE,IAGA4nD,EAAAj9B,OAAA,SAAA5qB,EAAAC,GACA,OAAAD,EAAAkvE,GAAAjvE,IAGA4nD,EAAA1C,UAAA,SAAAnrD,EAAAwwD,GACA7/C,OAAA6/C,GAAA,IAAAA,IAAA,IACA,IAAAkE,EAAA2e,EAAA8B,QAAA3kB,EAAA,GACA,OAAAxwD,EAAA8nB,IAAA4sC,GAAA6f,IAAA7f,EAAAqgB,QAGAlnB,EAAA+R,UAAA,SAAA5/D,GACA,WAAAA,EAAA4zE,MAAA5zE,EAAA2zE,KAAA,GAAA3zE,EAAA2zE,KAAA12D,GAAAqZ,YACA,IAAAt2B,EAAA4zE,MAAA5zE,EAAA2zE,KAAA12D,GAAAoZ,WAAAr2B,EAAA2zE,IAAA,GAGA9lB,EAAAiS,WAAA,SAAA9/D,GACA,WAAAA,EAAA4zE,MAAA5zE,EAAA2zE,KAAA,GAAA3zE,EAAA2zE,KAAAz2D,IAAAoZ,YACA,IAAAt2B,EAAA4zE,MAAA5zE,EAAA2zE,KAAAz2D,IAAAmZ,WAAAr2B,EAAA2zE,IAAA,GAGA9lB,EAAAmS,WAAA,SAAAhgE,GACA,WAAAA,EAAA4zE,MAAA5zE,EAAA2zE,KAAA,IACA,IAAA3zE,EAAA4zE,MAAA5zE,EAAA2zE,IAAA,GAGA9lB,EAAAgS,UAAA,SAAA7/D,GACA,WAAAA,EAAA4zE,MAAA5zE,EAAA2zE,KAAA,GAAA3zE,EAAA2zE,KAAAr2D,GAAAgZ,WAGAu3B,EAAAkS,WAAA,SAAA//D,GACA,WAAAA,EAAA4zE,MAAA5zE,EAAA2zE,KAAA,GAAA3zE,EAAA2zE,KAAAp2D,IAAA+Y,WAGAu3B,EAAAoS,WAAA,SAAAjgE,GACA,WAAAA,EAAA4zE,MAGA/lB,EAAAqS,YAAA,SAAAlgE,GACA,WAAAA,EAAA4zE,OAAA,IAAA5zE,EAAA2zE,KAAA,IAAA3zE,EAAA2zE,MAGA,MAAAyB,EAAA/B,EAAAgC,WAAAz3D,IAAAszD,kBACAoE,EAAAjC,EAAAgC,WAAAz3D,IAAAuzD,kBAEAtjB,EAAAsS,WAAA,SAAAngE,GACA,OAAAA,EAAAu1E,IAAAH,IAAAp1E,EAAAw1E,IAAAF,IAGA,MAAAG,EAAApC,EAAAgC,WAAAx3D,IAAAqzD,kBACAwE,EAAArC,EAAAgC,WAAAx3D,IAAAszD,kBAEAtjB,EAAAwS,WAAA,SAAArgE,GACA,OAAAA,EAAAu1E,IAAAE,IAAAz1E,EAAAw1E,IAAAE,IAGA7nB,EAAAuS,WAAA,SAAApgE,GACA,OAAA6tD,EAAAkjB,KAAAC,OAAAhxE,EAAA21E,aAGA9nB,EAAAyS,WAAA,SAAAtgE,GACA,OAAAA,EAAA21E,YAGA9nB,EAAA+nB,cAAA,SAAA51E,EAAA61E,GACA,OAAAA,EAAA71E,EAAAk0E,aAAAl0E,GAAAsjB,SAAA,sCC9IAjlB,EAAAD,QAAAi1E,EAKA,IAAAyC,EAAA,KAEA,IACAA,EAAA,IAAAC,YAAAC,SAAA,IAAAD,YAAA7wC,OAAA,IAAAkN,YACA,u2BACSh0C,QACR,MAAA68C,IAcD,SAAAo4B,EAAAM,EAAAC,EAAAiC,GAMAn3E,KAAAi1E,IAAA,EAAAA,EAMAj1E,KAAAk1E,KAAA,EAAAA,EAMAl1E,KAAAm3E,aAoCA,SAAAI,EAAAC,GACA,YAAAA,KAAA,YAXA7C,EAAA1yE,UAAAw1E,WAEA12E,OAAAC,eAAA2zE,EAAA1yE,UAAA,cAAqDX,OAAA,IAkBrDqzE,EAAA4C,SAOA,IAAAG,KAOAC,KAQA,SAAAlB,EAAAn1E,EAAA61E,GACA,IAAAK,EAAAI,EAAAC,EACA,OAAAV,GAEAU,EAAA,IADAv2E,KAAA,IACAA,EAAA,OACAs2E,EAAAD,EAAAr2E,IAEAs2E,GAEAJ,EAAAxC,EAAA1zE,GAAA,EAAAA,GAAA,WACAu2E,IACAF,EAAAr2E,GAAAk2E,GACAA,IAGAK,GAAA,MADAv2E,GAAA,IACAA,EAAA,OACAs2E,EAAAF,EAAAp2E,IAEAs2E,GAEAJ,EAAAxC,EAAA1zE,IAAA,WACAu2E,IACAH,EAAAp2E,GAAAk2E,GACAA,GAmBA,SAAAb,EAAAr1E,EAAA61E,GACA,GAAAW,MAAAx2E,GACA,OAAA61E,EAAAY,EAAAnD,EACA,GAAAuC,EAAA,CACA,GAAA71E,EAAA,EACA,OAAAy2E,EACA,GAAAz2E,GAAA02E,EACA,OAAAC,MACK,CACL,GAAA32E,IAAA42E,EACA,OAAAvgD,EACA,GAAAr2B,EAAA,GAAA42E,EACA,OAAAtgD,EAEA,OAAAt2B,EAAA,EACAq1E,GAAAr1E,EAAA61E,GAAAgB,MACAnD,EAAA1zE,EAAA82E,EAAA,EAAA92E,EAAA82E,EAAA,EAAAjB,GAmBA,SAAAnC,EAAAqD,EAAAC,EAAAnB,GACA,WAAAxC,EAAA0D,EAAAC,EAAAnB,GA5CAxC,EAAA8B,UAkCA9B,EAAAgC,aAsBAhC,EAAAK,WASA,IAAAuD,EAAAlG,KAAAmG,IASA,SAAAC,EAAAtuD,EAAAgtD,EAAA9D,GACA,OAAAlpD,EAAAtjB,OACA,MAAAoc,MAAA,gBACA,WAAAkH,GAAA,aAAAA,GAAA,cAAAA,GAAA,cAAAA,EACA,OAAAyqD,EASA,GARA,iBAAAuC,GAEA9D,EAAA8D,EACAA,GAAA,GAEAA,OAEA9D,KAAA,IACA,MAAAA,EACA,MAAAqF,WAAA,SAEA,IAAAv2E,EACA,IAAAA,EAAAgoB,EAAAujD,QAAA,QACA,MAAAzqD,MAAA,mBACA,OAAA9gB,EACA,OAAAs2E,EAAAtuD,EAAApU,UAAA,GAAAohE,EAAA9D,GAAA8E,MAQA,IAHA,IAAAQ,EAAAhC,EAAA4B,EAAAlF,EAAA,IAEAjpD,EAAAwqD,EACAv0E,EAAA,EAAmBA,EAAA8pB,EAAAtjB,OAAgBxG,GAAA,GACnC,IAAAo2B,EAAA47C,KAAAn/C,IAAA,EAAA/I,EAAAtjB,OAAAxG,GACAiB,EAAAgyE,SAAAnpD,EAAApU,UAAA1V,IAAAo2B,GAAA48C,GACA,GAAA58C,EAAA,GACA,IAAAmiD,EAAAjC,EAAA4B,EAAAlF,EAAA58C,IACArM,IAAAgrD,IAAAwD,GAAAxvD,IAAAutD,EAAAr1E,SAGA8oB,GADAA,IAAAgrD,IAAAuD,IACAvvD,IAAAutD,EAAAr1E,IAIA,OADA8oB,EAAA+sD,WACA/sD,EAoBA,SAAAyuD,EAAAx9B,EAAA87B,GACA,uBAAA97B,EACAs7B,EAAAt7B,EAAA87B,GACA,iBAAA97B,EACAo9B,EAAAp9B,EAAA87B,GAEAnC,EAAA35B,EAAA45B,IAAA55B,EAAA65B,KAAA,kBAAAiC,IAAA97B,EAAA87B,UAfAxC,EAAA8D,aAyBA9D,EAAAkE,YAUA,IAcAT,EAAAU,WAOAd,EAAAI,IAOAF,EAAAF,EAAA,EAOAe,EAAAtC,EA5BA,OAkCA7B,EAAA6B,EAAA,GAMA9B,EAAAC,OAMA,IAAAmD,EAAAtB,EAAA,MAMA9B,EAAAoD,QAMA,IAAAlD,EAAA4B,EAAA,GAMA9B,EAAAE,MAMA,IAAAmE,EAAAvC,EAAA,MAMA9B,EAAAqE,OAMA,IAAAC,EAAAxC,GAAA,GAMA9B,EAAAsE,UAMA,IAAArhD,EAAAo9C,GAAA,iBAMAL,EAAA/8C,YAMA,IAAAqgD,EAAAjD,GAAA,SAMAL,EAAAsD,qBAMA,IAAAtgD,EAAAq9C,EAAA,kBAMAL,EAAAh9C,YAMA,IAAAuhD,EAAAvE,EAAA1yE,UAMAi3E,EAAAC,MAAA,WACA,OAAAn5E,KAAAm3E,SAAAn3E,KAAAi1E,MAAA,EAAAj1E,KAAAi1E,KAOAiE,EAAAjC,SAAA,WACA,OAAAj3E,KAAAm3E,UACAn3E,KAAAk1E,OAAA,GAAAkD,GAAAp4E,KAAAi1E,MAAA,GACAj1E,KAAAk1E,KAAAkD,GAAAp4E,KAAAi1E,MAAA,IAUAiE,EAAAt0D,SAAA,SAAAyuD,GAEA,IADAA,KAAA,IACA,MAAAA,EACA,MAAAqF,WAAA,SACA,GAAA14E,KAAAo5E,SACA,UACA,GAAAp5E,KAAAq5E,aAAA,CACA,GAAAr5E,KAAAu2E,GAAA5+C,GAAA,CAGA,IAAA2hD,EAAA3C,EAAAtD,GACAiC,EAAAt1E,KAAAs1E,IAAAgE,GACAC,EAAAjE,EAAAF,IAAAkE,GAAAnE,IAAAn1E,MACA,OAAAs1E,EAAA1wD,SAAAyuD,GAAAkG,EAAAJ,QAAAv0D,SAAAyuD,GAEA,UAAArzE,KAAAm4E,MAAAvzD,SAAAyuD,GAQA,IAHA,IAAAsF,EAAAhC,EAAA4B,EAAAlF,EAAA,GAAArzE,KAAAm3E,UACAqC,EAAAx5E,KACAoqB,EAAA,KACA,CACA,IAAAqvD,EAAAD,EAAAlE,IAAAqD,GAEAe,GADAF,EAAArE,IAAAsE,EAAArE,IAAAuD,IAAAQ,UAAA,GACAv0D,SAAAyuD,GAEA,IADAmG,EAAAC,GACAL,SACA,OAAAM,EAAAtvD,EAEA,KAAAsvD,EAAA7yE,OAAA,GACA6yE,EAAA,IAAAA,EACAtvD,EAAA,GAAAsvD,EAAAtvD,IASA8uD,EAAAS,YAAA,WACA,OAAA35E,KAAAk1E,MAOAgE,EAAAU,oBAAA,WACA,OAAA55E,KAAAk1E,OAAA,GAOAgE,EAAAW,WAAA,WACA,OAAA75E,KAAAi1E,KAOAiE,EAAAY,mBAAA,WACA,OAAA95E,KAAAi1E,MAAA,GAOAiE,EAAAa,cAAA,WACA,GAAA/5E,KAAAq5E,aACA,OAAAr5E,KAAAu2E,GAAA5+C,GAAA,GAAA33B,KAAAm4E,MAAA4B,gBAEA,IADA,IAAA1+B,EAAA,GAAAr7C,KAAAk1E,KAAAl1E,KAAAk1E,KAAAl1E,KAAAi1E,IACA+E,EAAA,GAAsBA,EAAA,GACtB,IAAA3+B,EAAA,GAAA2+B,GAD+BA,KAG/B,UAAAh6E,KAAAk1E,KAAA8E,EAAA,GAAAA,EAAA,GAOAd,EAAAE,OAAA,WACA,WAAAp5E,KAAAk1E,MAAA,IAAAl1E,KAAAi1E,KAOAiE,EAAAe,IAAAf,EAAAE,OAMAF,EAAAG,WAAA,WACA,OAAAr5E,KAAAm3E,UAAAn3E,KAAAk1E,KAAA,GAOAgE,EAAAgB,WAAA,WACA,OAAAl6E,KAAAm3E,UAAAn3E,KAAAk1E,MAAA,GAOAgE,EAAAiB,MAAA,WACA,aAAAn6E,KAAAi1E,MAOAiE,EAAAkB,OAAA,WACA,aAAAp6E,KAAAi1E,MAQAiE,EAAAmB,OAAA,SAAA1nD,GAGA,OAFA4kD,EAAA5kD,KACAA,EAAAkmD,EAAAlmD,KACA3yB,KAAAm3E,WAAAxkD,EAAAwkD,UAAAn3E,KAAAk1E,OAAA,OAAAviD,EAAAuiD,OAAA,SAEAl1E,KAAAk1E,OAAAviD,EAAAuiD,MAAAl1E,KAAAi1E,MAAAtiD,EAAAsiD,MASAiE,EAAA3C,GAAA2C,EAAAmB,OAOAnB,EAAAoB,UAAA,SAAA3nD,GACA,OAAA3yB,KAAAu2E,GAAA5jD,IASAumD,EAAAqB,IAAArB,EAAAoB,UAQApB,EAAA1C,GAAA0C,EAAAoB,UAOApB,EAAAsB,SAAA,SAAA7nD,GACA,OAAA3yB,KAAAy6E,KAAA9nD,GAAA,GASAumD,EAAAwB,GAAAxB,EAAAsB,SAOAtB,EAAAyB,gBAAA,SAAAhoD,GACA,OAAA3yB,KAAAy6E,KAAA9nD,IAAA,GASAumD,EAAApC,IAAAoC,EAAAyB,gBAQAzB,EAAA0B,GAAA1B,EAAAyB,gBAOAzB,EAAA2B,YAAA,SAAAloD,GACA,OAAA3yB,KAAAy6E,KAAA9nD,GAAA,GASAumD,EAAA4B,GAAA5B,EAAA2B,YAOA3B,EAAA6B,mBAAA,SAAApoD,GACA,OAAA3yB,KAAAy6E,KAAA9nD,IAAA,GASAumD,EAAArC,IAAAqC,EAAA6B,mBAQA7B,EAAA8B,GAAA9B,EAAA6B,mBAQA7B,EAAA+B,QAAA,SAAAtoD,GAGA,GAFA4kD,EAAA5kD,KACAA,EAAAkmD,EAAAlmD,IACA3yB,KAAAu2E,GAAA5jD,GACA,SACA,IAAAuoD,EAAAl7E,KAAAq5E,aACA8B,EAAAxoD,EAAA0mD,aACA,OAAA6B,IAAAC,GACA,GACAD,GAAAC,EACA,EAEAn7E,KAAAm3E,SAGAxkD,EAAAuiD,OAAA,EAAAl1E,KAAAk1E,OAAA,GAAAviD,EAAAuiD,OAAAl1E,KAAAk1E,MAAAviD,EAAAsiD,MAAA,EAAAj1E,KAAAi1E,MAAA,OAFAj1E,KAAAm1E,IAAAxiD,GAAA0mD,cAAA,KAYAH,EAAAuB,KAAAvB,EAAA+B,QAMA/B,EAAAkC,OAAA,WACA,OAAAp7E,KAAAm3E,UAAAn3E,KAAAu2E,GAAA5+C,GACAA,EACA33B,KAAAq2E,MAAAjtD,IAAAyrD,IAQAqE,EAAAf,IAAAe,EAAAkC,OAOAlC,EAAA9vD,IAAA,SAAAiyD,GACA9D,EAAA8D,KACAA,EAAAxC,EAAAwC,IAIA,IAAAC,EAAAt7E,KAAAk1E,OAAA,GACAqG,EAAA,MAAAv7E,KAAAk1E,KACAsG,EAAAx7E,KAAAi1E,MAAA,GACAwG,EAAA,MAAAz7E,KAAAi1E,IAEAyG,EAAAL,EAAAnG,OAAA,GACAyG,EAAA,MAAAN,EAAAnG,KACA0G,EAAAP,EAAApG,MAAA,GAGA4G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAYA,OAVAD,IADAC,GAAAP,GAHA,MAAAJ,EAAApG,QAIA,GAGA6G,IADAC,GAAAP,EAAAI,KACA,GAGAC,IADAC,GAAAP,EAAAI,KACA,GAEAE,GAAAP,EAAAI,EAEA1G,GANA+G,GAAA,QAMA,IATAC,GAAA,QAQAH,GAAA,QACA,IAHAC,GAAA,OAGA97E,KAAAm3E,WAQA+B,EAAA+C,SAAA,SAAAC,GAGA,OAFA3E,EAAA2E,KACAA,EAAArD,EAAAqD,IACAl8E,KAAAopB,IAAA8yD,EAAA/D,QASAe,EAAA/D,IAAA+D,EAAA+C,SAOA/C,EAAAiD,SAAA,SAAAC,GACA,GAAAp8E,KAAAo5E,SACA,OAAAxE,EAKA,GAJA2C,EAAA6E,KACAA,EAAAvD,EAAAuD,IAGAhF,EAKA,OAAApC,EAJAoC,EAAAhC,IAAAp1E,KAAAi1E,IACAj1E,KAAAk1E,KACAkH,EAAAnH,IACAmH,EAAAlH,MACAkC,EAAAiF,WAAAr8E,KAAAm3E,UAGA,GAAAiF,EAAAhD,SACA,OAAAxE,EACA,GAAA50E,KAAAu2E,GAAA5+C,GACA,OAAAykD,EAAAjC,QAAAxiD,EAAAi9C,EACA,GAAAwH,EAAA7F,GAAA5+C,GACA,OAAA33B,KAAAm6E,QAAAxiD,EAAAi9C,EAEA,GAAA50E,KAAAq5E,aACA,OAAA+C,EAAA/C,aACAr5E,KAAAm4E,MAAA/C,IAAAgH,EAAAjE,OAEAn4E,KAAAm4E,MAAA/C,IAAAgH,GAAAjE,MACK,GAAAiE,EAAA/C,aACL,OAAAr5E,KAAAo1E,IAAAgH,EAAAjE,aAGA,GAAAn4E,KAAA06E,GAAA3B,IAAAqD,EAAA1B,GAAA3B,GACA,OAAApC,EAAA32E,KAAAi3E,WAAAmF,EAAAnF,WAAAj3E,KAAAm3E,UAKA,IAAAmE,EAAAt7E,KAAAk1E,OAAA,GACAqG,EAAA,MAAAv7E,KAAAk1E,KACAsG,EAAAx7E,KAAAi1E,MAAA,GACAwG,EAAA,MAAAz7E,KAAAi1E,IAEAyG,EAAAU,EAAAlH,OAAA,GACAyG,EAAA,MAAAS,EAAAlH,KACA0G,EAAAQ,EAAAnH,MAAA,GACAqH,EAAA,MAAAF,EAAAnH,IAEA4G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAqBA,OAnBAD,IADAC,GAAAP,EAAAa,KACA,GAGAR,IADAC,GAAAP,EAAAc,KACA,GACAP,GAAA,MAEAD,IADAC,GAAAN,EAAAG,KACA,GAGAC,IADAC,GAAAP,EAAAe,KACA,GACAR,GAAA,MAEAD,IADAC,GAAAN,EAAAI,KACA,GACAE,GAAA,MAEAD,IADAC,GAAAL,EAAAE,KACA,GAEAE,GAAAP,EAAAgB,EAAAf,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA1G,GAZA+G,GAAA,QAYA,IAlBAC,GAAA,QAiBAH,GAAA,QACA,IAHAC,GAAA,OAGA97E,KAAAm3E,WASA+B,EAAA9D,IAAA8D,EAAAiD,SAQAjD,EAAAqD,OAAA,SAAAC,GAGA,GAFAjF,EAAAiF,KACAA,EAAA3D,EAAA2D,IACAA,EAAApD,SACA,MAAAn2D,MAAA,oBAaA,IAWAw5D,EAAAjD,EAAAkD,EArBA,GAAAtF,EAIA,OAAAp3E,KAAAm3E,WACA,aAAAn3E,KAAAk1E,OACA,IAAAsH,EAAAvH,MAAA,IAAAuH,EAAAtH,KAUAF,GANAh1E,KAAAm3E,SAAAC,EAAAuF,MAAAvF,EAAAwF,OACA58E,KAAAi1E,IACAj1E,KAAAk1E,KACAsH,EAAAvH,IACAuH,EAAAtH,MAEAkC,EAAAiF,WAAAr8E,KAAAm3E,UARAn3E,KAWA,GAAAA,KAAAo5E,SACA,OAAAp5E,KAAAm3E,SAAAY,EAAAnD,EAEA,GAAA50E,KAAAm3E,SA6BK,CAKL,GAFAqF,EAAArF,WACAqF,IAAAhH,cACAgH,EAAA1B,GAAA96E,MACA,OAAA+3E,EACA,GAAAyE,EAAA1B,GAAA96E,KAAAo2E,KAAA,IACA,OAAA4C,EACA0D,EAAA3E,MAtCA,CAGA,GAAA/3E,KAAAu2E,GAAA5+C,GACA,OAAA6kD,EAAAjG,GAAA1B,IAAA2H,EAAAjG,GAAA0C,GACAthD,EACA6kD,EAAAjG,GAAA5+C,GACAk9C,GAIA4H,EADAz8E,KAAAm2E,IAAA,GACAb,IAAAkH,GAAAvG,IAAA,IACAM,GAAA3B,GACA4H,EAAAnD,aAAAxE,EAAAoE,GAEAO,EAAAx5E,KAAAm1E,IAAAqH,EAAApH,IAAAqH,IACAC,EAAAD,EAAArzD,IAAAowD,EAAAlE,IAAAkH,UAIS,GAAAA,EAAAjG,GAAA5+C,GACT,OAAA33B,KAAAm3E,SAAAY,EAAAnD,EACA,GAAA50E,KAAAq5E,aACA,OAAAmD,EAAAnD,aACAr5E,KAAAm4E,MAAA7C,IAAAkH,EAAArE,OACAn4E,KAAAm4E,MAAA7C,IAAAkH,GAAArE,MACS,GAAAqE,EAAAnD,aACT,OAAAr5E,KAAAs1E,IAAAkH,EAAArE,aACAuE,EAAA9H,EAmBA,IADA4E,EAAAx5E,KACAw5E,EAAA3C,IAAA2F,IAAA,CAGAC,EAAApK,KAAAnmB,IAAA,EAAAmmB,KAAAQ,MAAA2G,EAAAvC,WAAAuF,EAAAvF,aAWA,IAPA,IAAA4F,EAAAxK,KAAAx1B,KAAAw1B,KAAAh3C,IAAAohD,GAAApK,KAAAyK,KACAC,EAAAF,GAAA,KAAAtE,EAAA,EAAAsE,EAAA,IAIAG,EAAArG,EAAA8F,GACAQ,EAAAD,EAAA5H,IAAAoH,GACAS,EAAA5D,cAAA4D,EAAAnC,GAAAtB,IAGAyD,GADAD,EAAArG,EADA8F,GAAAM,EACA/8E,KAAAm3E,WACA/B,IAAAoH,GAKAQ,EAAA5D,WACA4D,EAAAnI,GAEA6H,IAAAtzD,IAAA4zD,GACAxD,IAAArE,IAAA8H,GAEA,OAAAP,GASAxD,EAAA5D,IAAA4D,EAAAqD,OAOArD,EAAAgE,OAAA,SAAAV,GAKA,OAJAjF,EAAAiF,KACAA,EAAA3D,EAAA2D,IAGApF,EAOApC,GANAh1E,KAAAm3E,SAAAC,EAAA+F,MAAA/F,EAAAgG,OACAp9E,KAAAi1E,IACAj1E,KAAAk1E,KACAsH,EAAAvH,IACAuH,EAAAtH,MAEAkC,EAAAiF,WAAAr8E,KAAAm3E,UAGAn3E,KAAAm1E,IAAAn1E,KAAAs1E,IAAAkH,GAAApH,IAAAoH,KASAtD,EAAAvD,IAAAuD,EAAAgE,OAQAhE,EAAAM,IAAAN,EAAAgE,OAMAhE,EAAA7C,IAAA,WACA,OAAArB,GAAAh1E,KAAAi1E,KAAAj1E,KAAAk1E,KAAAl1E,KAAAm3E,WAQA+B,EAAArD,IAAA,SAAAljD,GAGA,OAFA4kD,EAAA5kD,KACAA,EAAAkmD,EAAAlmD,IACAqiD,EAAAh1E,KAAAi1E,IAAAtiD,EAAAsiD,IAAAj1E,KAAAk1E,KAAAviD,EAAAuiD,KAAAl1E,KAAAm3E,WAQA+B,EAAApD,GAAA,SAAAnjD,GAGA,OAFA4kD,EAAA5kD,KACAA,EAAAkmD,EAAAlmD,IACAqiD,EAAAh1E,KAAAi1E,IAAAtiD,EAAAsiD,IAAAj1E,KAAAk1E,KAAAviD,EAAAuiD,KAAAl1E,KAAAm3E,WAQA+B,EAAAlD,IAAA,SAAArjD,GAGA,OAFA4kD,EAAA5kD,KACAA,EAAAkmD,EAAAlmD,IACAqiD,EAAAh1E,KAAAi1E,IAAAtiD,EAAAsiD,IAAAj1E,KAAAk1E,KAAAviD,EAAAuiD,KAAAl1E,KAAAm3E,WAQA+B,EAAAmE,UAAA,SAAAC,GAGA,OAFA/F,EAAA+F,KACAA,IAAAnE,SACA,IAAAmE,GAAA,IACAt9E,KACAs9E,EAAA,GACAtI,EAAAh1E,KAAAi1E,KAAAqI,EAAAt9E,KAAAk1E,MAAAoI,EAAAt9E,KAAAi1E,MAAA,GAAAqI,EAAAt9E,KAAAm3E,UAEAnC,EAAA,EAAAh1E,KAAAi1E,KAAAqI,EAAA,GAAAt9E,KAAAm3E,WASA+B,EAAAjD,IAAAiD,EAAAmE,UAOAnE,EAAAqE,WAAA,SAAAD,GAGA,OAFA/F,EAAA+F,KACAA,IAAAnE,SACA,IAAAmE,GAAA,IACAt9E,KACAs9E,EAAA,GACAtI,EAAAh1E,KAAAi1E,MAAAqI,EAAAt9E,KAAAk1E,MAAA,GAAAoI,EAAAt9E,KAAAk1E,MAAAoI,EAAAt9E,KAAAm3E,UAEAnC,EAAAh1E,KAAAk1E,MAAAoI,EAAA,GAAAt9E,KAAAk1E,MAAA,OAAAl1E,KAAAm3E,WASA+B,EAAA/C,IAAA+C,EAAAqE,WAOArE,EAAAsE,mBAAA,SAAAF,GAIA,GAHA/F,EAAA+F,KACAA,IAAAnE,SAEA,KADAmE,GAAA,IAEA,OAAAt9E,KAEA,IAAAk1E,EAAAl1E,KAAAk1E,KACA,OAAAoI,EAAA,GAEAtI,EADAh1E,KAAAi1E,MACAqI,EAAApI,GAAA,GAAAoI,EAAApI,IAAAoI,EAAAt9E,KAAAm3E,UAEAnC,EADS,KAAAsI,EACTpI,EAEAA,IAAAoI,EAAA,GAFA,EAAAt9E,KAAAm3E,WAYA+B,EAAA9C,KAAA8C,EAAAsE,mBAQAtE,EAAAuE,MAAAvE,EAAAsE,mBAMAtE,EAAAzD,SAAA,WACA,OAAAz1E,KAAAm3E,SAEAnC,EAAAh1E,KAAAi1E,IAAAj1E,KAAAk1E,MAAA,GADAl1E,MAQAk5E,EAAA1D,WAAA,WACA,OAAAx1E,KAAAm3E,SACAn3E,KACAg1E,EAAAh1E,KAAAi1E,IAAAj1E,KAAAk1E,MAAA,IAQAgE,EAAAwE,QAAA,SAAA9C,GACA,OAAAA,EAAA56E,KAAA29E,YAAA39E,KAAA49E,aAOA1E,EAAAyE,UAAA,WACA,IAAA5I,EAAA/0E,KAAAk1E,KACAJ,EAAA90E,KAAAi1E,IACA,OACA,IAAAH,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,GACA,IAAAC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,KAQAmE,EAAA0E,UAAA,WACA,IAAA7I,EAAA/0E,KAAAk1E,KACAJ,EAAA90E,KAAAi1E,IACA,OACAF,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,IAWAH,EAAAkJ,UAAA,SAAAj0C,EAAAutC,EAAAyD,GACA,OAAAA,EAAAjG,EAAAmJ,YAAAl0C,EAAAutC,GAAAxC,EAAAoJ,YAAAn0C,EAAAutC,IASAxC,EAAAmJ,YAAA,SAAAl0C,EAAAutC,GACA,WAAAxC,EACA/qC,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAutC,IAUAxC,EAAAoJ,YAAA,SAAAn0C,EAAAutC,GACA,WAAAxC,EACA/qC,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAA,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAutC,qRC7xCA,IAAA79D,EAAAnZ,EAAA,GAIAqZ,EAAArZ,EAAA,GASAoZ,EAAApZ,EAAA,GAMAsZ,EAAAtZ,EAAA,GAcAs8C,EAAAt8C,EAAA,GAWAwZ,EAAAxZ,EAAA,IAIAkC,EAAAlC,EAAA,GAKA,SAAgBy9D,EACdogB,EACA/7E,EACAiC,EACAglC,EACA4sB,EACAzH,GAEA,IAEIn0B,EACAC,EACAC,EACAmZ,EALA5zC,EAASq+E,EAASr+E,OAWtB,OAAQsC,EAAUme,cAIhB,IAAK,YACH,IAAI/b,EAAO45E,EAAqBD,EAAU95E,EAAeglC,EAAUmlB,GAEnE,OADA2vB,EAASzyB,YAAchyC,EAAA+E,KAAKW,KACvB5a,EACEA,EAAKR,GAAE,KAAwBQ,EAAKR,GAAE,KACzClE,EAAOqoC,UAAU,GACjBroC,EAAOqoC,UAAU,GAHHroC,EAAOytC,oBAK3B,IAAK,UACC/oC,EAAO45E,EAAqBD,EAAU95E,EAAeglC,EAAUmlB,GAEnE,OADA2vB,EAASzyB,YAAchyC,EAAA+E,KAAKW,KACvB5a,EACEA,EAAKR,GAAE,GACVlE,EAAOqoC,UAAU,GACjBroC,EAAOqoC,UAAU,GAHHroC,EAAOytC,oBAK3B,IAAK,WACC/oC,EAAO45E,EAAqBD,EAAU95E,EAAeglC,EAAUmlB,GAEnE,OADA2vB,EAASzyB,YAAchyC,EAAA+E,KAAKW,KACvB5a,EACEA,EAAKR,GAAE,GACVlE,EAAOqoC,UAAU,GACjBroC,EAAOqoC,UAAU,GAHHroC,EAAOytC,oBAK3B,IAAK,cACC/oC,EAAO45E,EAAqBD,EAAU95E,EAAeglC,EAAUmlB,GAEnE,OADA2vB,EAASzyB,YAAchyC,EAAA+E,KAAKW,KACvB5a,GACL25E,EAASzyB,YAAchyC,EAAA+E,KAAKW,KACrB5a,EAAKR,GAAE,KACVlE,EAAOqoC,UAAU,GACjBroC,EAAOqoC,UAAU,IAJHroC,EAAOytC,oBAM3B,IAAK,WACC/oC,EAAO45E,EAAqBD,EAAU95E,EAAeglC,EAAUmlB,GAEnE,GADA2vB,EAASzyB,YAAchyC,EAAA+E,KAAKW,MACvB5a,EAAM,OAAO1E,EAAOytC,oBAEzB,GADImQ,EAAYl5C,EAAKy4C,eACN,CACb,IAAI//B,EAAiBihE,EAASh0D,QAAQjN,eACtC,GAAIA,GAAkBwgC,EAAUztB,eAAe/S,GAAiB,OAAOpd,EAAOqoC,UAAU,GAE1F,OAAOroC,EAAOqoC,UAAU,GAE1B,IAAK,UACC3jC,EAAO45E,EAAqBD,EAAU95E,EAAeglC,EAAUmlB,GAEnE,OADA2vB,EAASzyB,YAAchyC,EAAA+E,KAAKW,KACvB5a,EAEgB,QADjBk5C,EAAYl5C,EAAKy4C,iBAC+D,OAAvDS,EAAUttB,eAAewsB,EAAApjC,aAAaY,aAC/Dta,EAAOqoC,UAAU,GACjBroC,EAAOqoC,UAAU,GAJHroC,EAAOytC,oBAM3B,IAAK,YAQH,GAPA4wC,EAASzyB,YAAchyC,EAAA+E,KAAKW,KACxB/a,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,OAKX,OAJAm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,IAAI/kC,EAAU21E,EAASvgE,SAAS+9C,kBAAkBtyB,EAAS,GAAI80C,EAASptD,gBAAiBjX,EAAAs0D,WAAWiQ,SACpG,OAAOv+E,EAAOqoC,UAAU3/B,EAAU,EAAI,GAExC,IAAK,aAQH,GAPA21E,EAASzyB,YAAchyC,EAAA+E,KAAKW,KACxB/a,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,OAKX,OAJAm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,IAAI+wC,EAAOH,EAASvuB,4BAA4BvmB,EAAS,GAAI3vB,EAAA+E,KAAKG,IAAG,GAErE,OADAu/D,EAASzyB,YAAchyC,EAAA+E,KAAKW,KACrBtf,EAAOqoC,UAAUvuB,EAAA2Z,gBAAgB+qD,IAAS1kE,EAAA4Z,aAAa6C,MAAQ,EAAI,GAE5E,IAAK,YACH,IAAK8nD,EAASh0D,QAAQ7M,MAEpB,OADA6gE,EAASzyB,YAAchyC,EAAA+E,KAAKW,KACrBtf,EAAOqoC,UAAU,GAEtB3jC,EAAO45E,EAAqBD,EAAU95E,EAAeglC,EAAUmlB,GAEnE,OADA2vB,EAASzyB,YAAchyC,EAAA+E,KAAKW,KACvB5a,EAEgB,QADjBk5C,EAAYl5C,EAAKy4C,iBACSS,EAAUv4B,aAAay3B,EAAAxgC,eAAepJ,WAEhElT,EAAOqoC,UAAU,GADjBroC,EAAOqoC,UAAU,GAHHroC,EAAOytC,oBAS3B,IAAK,MACH,GAAuB,GAAnBlE,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKG,IAAG,KAEzD,OAAQu/D,EAASzyB,YAAY3oD,MAC3B,OACA,OACA,OACA,OACE2wC,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQG,OAAQ8C,GACzC,MAEF,QACA,OACA,OACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQG,OAAQ8C,GACzC,MAEF,OACE,GAAI8jD,EAASzyB,YAAY1nD,GAAE,KAAuB,CAChDm6E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBACb,MAIJ,OACEmG,EAAM5zC,EAAOipC,YACXo1C,EAAS3/D,QAAQkB,SACb9F,EAAAwd,QAAQmnD,OACR3kE,EAAAwd,QAAQG,OACZ8C,GAEF,MAEF,OACA,OACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQmnD,OAAQlkD,GACzC,MAEF,QACE8jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKG,IAAG,KAEzD,OAAQu/D,EAASzyB,YAAY3oD,MAC3B,OACA,OACA,OACA,OACE2wC,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQI,OAAQ6C,GACzC,MAEF,QACA,OACA,OACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQI,OAAQ6C,GACzC,MAEF,OACE,GAAI8jD,EAASzyB,YAAY1nD,GAAE,KAAuB,CAChDm6E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBACb,MAIJ,OACEmG,EAAM5zC,EAAOipC,YACXo1C,EAAS3/D,QAAQkB,SACb9F,EAAAwd,QAAQonD,OACR5kE,EAAAwd,QAAQI,OACZ6C,GAEF,MAEF,OACA,OACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQonD,OAAQnkD,GACzC,MAEF,QACE8jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAET,IAAK,SACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKG,IAAG,KAEzD,OAAQu/D,EAASzyB,YAAY3oD,MAC3B,OACA,OACA,OACA,OACE2wC,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQK,UAAW4C,GAC5C,MAEF,QACA,OACA,OACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQK,UAAW4C,GAC5C,MAEF,OACE,GAAI8jD,EAASzyB,YAAY1nD,GAAE,KAAuB,CAChDm6E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBACb,MAIJ,OACEmG,EAAM5zC,EAAOipC,YACXo1C,EAAS3/D,QAAQkB,SACb9F,EAAAwd,QAAQqnD,UACR7kE,EAAAwd,QAAQK,UACZ4C,GAEF,MAEF,OACA,OACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQqnD,UAAWpkD,GAC5C,MAEF,QACE8jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKG,IAAG,KAGzD,OADA0b,EAAO6jD,EAASjuB,kBAAkB7mB,EAAS,GAAI80C,EAASzyB,YAAW,KAC3DyyB,EAASzyB,YAAY3oD,MAC3B,OACA,OACA,OACA,OACA,QACE2wC,EAAMyqC,EAAS3mB,uBACb13D,EAAOopC,aAAatvB,EAAAsa,SAASwqD,QAASrkD,EAAMC,GAC5C6jD,EAASzyB,aAIb,OACA,OACEhY,EAAM5zC,EAAOopC,aAAatvB,EAAAsa,SAASwqD,QAASrkD,EAAMC,GAClD,MAEF,OACE,GAAI6jD,EAASzyB,YAAY1nD,GAAE,KAAuB,CAChDm6E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBACb,MAIJ,OACEmG,EAAM5zC,EAAOopC,aACXi1C,EAAS3/D,QAAQkB,SACb9F,EAAAsa,SAASyqD,QACT/kE,EAAAsa,SAASwqD,QACbrkD,EACAC,GAEF,MAEF,OACA,OACEoZ,EAAM5zC,EAAOopC,aAAatvB,EAAAsa,SAASyqD,QAAStkD,EAAMC,GAClD,MAEF,QACE6jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKG,IAAG,KAGzD,OADA0b,EAAO6jD,EAASjuB,kBAAkB7mB,EAAS,GAAI80C,EAASzyB,YAAW,KAC3DyyB,EAASzyB,YAAY3oD,MAC3B,OACA,OACA,OACA,OACA,QACE2wC,EAAMyqC,EAAS3mB,uBACb13D,EAAOopC,aAAatvB,EAAAsa,SAAS0qD,QAASvkD,EAAMC,GAC5C6jD,EAASzyB,aAEX,MAEF,OACA,OACEhY,EAAM5zC,EAAOopC,aAAatvB,EAAAsa,SAAS0qD,QAASvkD,EAAMC,GAClD,MAEF,OACE,GAAI6jD,EAASzyB,YAAY1nD,GAAE,KAAuB,CAChDm6E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBACb,MAIJ,OACEmG,EAAM5zC,EAAOopC,aACXi1C,EAAS3/D,QAAQkB,SACb9F,EAAAsa,SAAS2qD,QACTjlE,EAAAsa,SAAS0qD,QACbvkD,EACAC,GAEF,MAEF,OACA,OACEoZ,EAAM5zC,EAAOopC,aAAatvB,EAAAsa,SAAS2qD,QAASxkD,EAAMC,GAClD,MAEF,QACE6jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKa,IAAG,KAEzD,OAAQ6+D,EAASzyB,YAAY3oD,MAC3B,OACA,OACA,OAEE,IAAI6xD,EAAYupB,EAASptD,gBAAgB1C,oBAAoB3U,EAAA+E,KAAKG,KAAK,GACvE80B,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAekrB,EAAUrpC,MAAO8O,GACvCv6B,EAAOopC,aAAatvB,EAAAsa,SAASylC,OAC3B75D,EAAOqoC,UAAU,GACjBroC,EAAO0pC,eAAeorB,EAAUrpC,MAAK,IAEvCzrB,EAAOopC,aAAatvB,EAAAsa,SAASqB,MAC3Bz1B,EAAO0pC,eAAeorB,EAAUrpC,MAAK,GACrCzrB,EAAOqoC,UAAU,KAGrB,MAEF,OACMysB,EAAYupB,EAASptD,gBAAgB1C,oBAAoB8vD,EAAS3/D,QAAQW,WAAW,GACzFu0B,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAekrB,EAAUrpC,MAAO8O,GACvCv6B,EAAOopC,aACLi1C,EAAS3/D,QAAQkB,SACb9F,EAAAsa,SAAS0lC,OACThgD,EAAAsa,SAASylC,OACbwkB,EAAS3/D,QAAQW,UAAUg/B,aAAar+C,GACxCA,EAAO0pC,eAAeorB,EAAUrpC,MAAO4yD,EAAS3/D,QAAQsvC,iBAE1DhuD,EAAOopC,aACLi1C,EAAS3/D,QAAQkB,SACb9F,EAAAsa,SAASuB,MACT7b,EAAAsa,SAASqB,MACbz1B,EAAO0pC,eAAeorB,EAAUrpC,MAAO4yD,EAAS3/D,QAAQsvC,gBACxDqwB,EAAS3/D,QAAQW,UAAUg/B,aAAar+C,KAG5C,MAEF,OACM80D,EAAYupB,EAASptD,gBAAgB1C,oBAAoB3U,EAAA+E,KAAKI,KAAK,GACvE60B,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAekrB,EAAUrpC,MAAO8O,GACvCv6B,EAAOopC,aAAatvB,EAAAsa,SAAS0lC,OAC3B95D,EAAOyoC,UAAU,EAAG,GACpBzoC,EAAO0pC,eAAeorB,EAAUrpC,MAAK,IAEvCzrB,EAAOopC,aAAatvB,EAAAsa,SAASuB,MAC3B31B,EAAO0pC,eAAeorB,EAAUrpC,MAAK,GACrCzrB,EAAOyoC,UAAU,EAAG,KAGxB,MAEF,OACE,GAAI41C,EAASzyB,YAAY1nD,GAAE,KAAuB,CAChDm6E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBACb,MAIJ,OACA,OACA,OACA,OACA,QACEmG,EAAMrZ,EACN,MAEF,QACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQ0nD,OAAQzkD,GACzC,MAEF,QACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQ2nD,OAAQ1kD,GACzC,MAEF,QACEqZ,EAAM5zC,EAAOytC,oBACb,MAEF,QACE4wC,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKa,IAAG,KAGzD,OADAgb,EAAO6jD,EAASjuB,kBAAkB7mB,EAAS,GAAI80C,EAASzyB,YAAW,KAC3DyyB,EAASzyB,YAAY3oD,MAC3B,OACA,OACA,OACE,IAAI4qB,EAAOwwD,EAASptD,gBAAgBpD,KAChCqxD,EAAab,EAASptD,gBAAgBjD,aACxCqwD,EAASzyB,aACR/9B,EAAK2F,YAAY+G,EAAM8jD,EAASzyB,cAE/BuzB,EAAad,EAASptD,gBAAgB1C,oBACxC8vD,EAASzyB,aACR/9B,EAAK2F,YAAYgH,EAAM6jD,EAASzyB,cAEnCyyB,EAASptD,gBAAgB3C,cAAc4wD,GACvCtrC,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAes1C,EAAWzzD,MAAO8O,GACxCv6B,EAAO4pC,eAAeu1C,EAAW1zD,MAAO+O,GACxCx6B,EAAOopC,aAAatvB,EAAAsa,SAASqB,MAC3Bz1B,EAAO0pC,eAAew1C,EAAWzzD,MAAK,GACtCzrB,EAAO0pC,eAAey1C,EAAW1zD,MAAK,KAG1C,MAEF,OACA,OACA,OACA,QACMoC,EAAOwwD,EAASptD,gBAAgBpD,KAChCqxD,EAAab,EAASptD,gBAAgBjD,aACxCqwD,EAASzyB,aACR/9B,EAAK2F,YAAY+G,EAAM8jD,EAASzyB,cAE/BuzB,EAAad,EAASptD,gBAAgB1C,oBACxC8vD,EAASzyB,aACR/9B,EAAK2F,YAAYgH,EAAM6jD,EAASzyB,cAEnCyyB,EAASptD,gBAAgB3C,cAAc4wD,GACvCtrC,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAes1C,EAAWzzD,MAAO8O,GACxCv6B,EAAO4pC,eAAeu1C,EAAW1zD,MAAO+O,GACxCx6B,EAAOopC,aAAatvB,EAAAsa,SAASsB,MAC3B11B,EAAO0pC,eAAew1C,EAAWzzD,MAAK,GACtCzrB,EAAO0pC,eAAey1C,EAAW1zD,MAAK,KAG1C,MAEF,OACMyzD,EAAab,EAASptD,gBAAgBjD,aAAapU,EAAA+E,KAAKI,KAAK,GAC7DogE,EAAad,EAASptD,gBAAgB1C,oBAAoB3U,EAAA+E,KAAKI,KAAK,GACxEs/D,EAASptD,gBAAgB3C,cAAc4wD,GACvCtrC,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAes1C,EAAWzzD,MAAO8O,GACxCv6B,EAAO4pC,eAAeu1C,EAAW1zD,MAAO+O,GACxCx6B,EAAOopC,aAAatvB,EAAAsa,SAASuB,MAC3B31B,EAAO0pC,eAAew1C,EAAWzzD,MAAK,GACtCzrB,EAAO0pC,eAAey1C,EAAW1zD,MAAK,KAG1C,MAEF,OACMyzD,EAAab,EAASptD,gBAAgBjD,aAAapU,EAAA+E,KAAKI,KAAK,GAC7DogE,EAAad,EAASptD,gBAAgB1C,oBAAoB3U,EAAA+E,KAAKI,KAAK,GACxEs/D,EAASptD,gBAAgB3C,cAAc4wD,GACvCtrC,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAes1C,EAAWzzD,MAAO8O,GACxCv6B,EAAO4pC,eAAeu1C,EAAW1zD,MAAO+O,GACxCx6B,EAAOopC,aAAatvB,EAAAsa,SAASwB,MAC3B51B,EAAO0pC,eAAew1C,EAAWzzD,MAAK,GACtCzrB,EAAO0pC,eAAey1C,EAAW1zD,MAAK,KAG1C,MAEF,OACMyzD,EAAab,EAASptD,gBAAgBjD,aAAaqwD,EAAS3/D,QAAQW,WAAW,GAC/E8/D,EAAad,EAASptD,gBAAgB1C,oBAAoB8vD,EAAS3/D,QAAQW,WAAW,GAC1Fg/D,EAASptD,gBAAgB3C,cAAc4wD,GACvCtrC,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAes1C,EAAWzzD,MAAO8O,GACxCv6B,EAAO4pC,eAAeu1C,EAAW1zD,MAAO+O,GACxCx6B,EAAOopC,aACLi1C,EAAS3/D,QAAQkB,SACb9F,EAAAsa,SAASuB,MACT7b,EAAAsa,SAASqB,MACbz1B,EAAO0pC,eAAew1C,EAAWzzD,MAAO4yD,EAAS3/D,QAAQsvC,gBACzDhuD,EAAO0pC,eAAey1C,EAAW1zD,MAAO4yD,EAAS3/D,QAAQsvC,kBAG7D,MAEF,OACE,GAAIqwB,EAASzyB,YAAY1nD,GAAE,KAAuB,CAChDm6E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBACb,MAEEyxC,EAAab,EAASptD,gBAAgBjD,aAAaqwD,EAAS3/D,QAAQW,WAAW,GAC/E8/D,EAAad,EAASptD,gBAAgB1C,oBAAoB8vD,EAAS3/D,QAAQW,WAAW,GAC1Fg/D,EAASptD,gBAAgB3C,cAAc4wD,GACvCtrC,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAes1C,EAAWzzD,MAAO8O,GACxCv6B,EAAO4pC,eAAeu1C,EAAW1zD,MAAO+O,GACxCx6B,EAAOopC,aACLi1C,EAAS3/D,QAAQkB,SACb9F,EAAAsa,SAASwB,MACT9b,EAAAsa,SAASsB,MACb11B,EAAO0pC,eAAew1C,EAAWzzD,MAAO4yD,EAAS3/D,QAAQsvC,gBACzDhuD,EAAO0pC,eAAey1C,EAAW1zD,MAAO4yD,EAAS3/D,QAAQsvC,kBAG7D,MAEF,QACEpa,EAAM5zC,EAAOopC,aAAatvB,EAAAsa,SAASgrD,OAAQ7kD,EAAMC,GACjD,MAEF,QACEoZ,EAAM5zC,EAAOopC,aAAatvB,EAAAsa,SAASirD,OAAQ9kD,EAAMC,GACjD,MAEF,QACE6jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKa,IAAG,KAGzD,OADAgb,EAAO6jD,EAASjuB,kBAAkB7mB,EAAS,GAAI80C,EAASzyB,YAAW,KAC3DyyB,EAASzyB,YAAY3oD,MAC3B,OACA,OACA,OACM4qB,EAAOwwD,EAASptD,gBAAgBpD,KAChCqxD,EAAab,EAASptD,gBAAgBjD,aACxCqwD,EAASzyB,aACR/9B,EAAK2F,YAAY+G,EAAM8jD,EAASzyB,cAE/BuzB,EAAad,EAASptD,gBAAgB1C,oBACxC8vD,EAASzyB,aACR/9B,EAAK2F,YAAYgH,EAAM6jD,EAASzyB,cAEnCyyB,EAASptD,gBAAgB3C,cAAc4wD,GACvCtrC,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAes1C,EAAWzzD,MAAO8O,GACxCv6B,EAAO4pC,eAAeu1C,EAAW1zD,MAAO+O,GACxCx6B,EAAOopC,aAAatvB,EAAAsa,SAASS,MAC3B70B,EAAO0pC,eAAew1C,EAAWzzD,MAAK,GACtCzrB,EAAO0pC,eAAey1C,EAAW1zD,MAAK,KAG1C,MAEF,OACA,OACA,OACA,QACMoC,EAAOwwD,EAASptD,gBAAgBpD,KAChCqxD,EAAab,EAASptD,gBAAgBjD,aACxCqwD,EAASzyB,aACR/9B,EAAK2F,YAAY+G,EAAM8jD,EAASzyB,cAE/BuzB,EAAad,EAASptD,gBAAgB1C,oBACxC8vD,EAASzyB,aACR/9B,EAAK2F,YAAYgH,EAAM6jD,EAASzyB,cAEnCyyB,EAASptD,gBAAgB3C,cAAc4wD,GACvCtrC,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAes1C,EAAWzzD,MAAO8O,GACxCv6B,EAAO4pC,eAAeu1C,EAAW1zD,MAAO+O,GACxCx6B,EAAOopC,aAAatvB,EAAAsa,SAASU,MAC3B90B,EAAO0pC,eAAew1C,EAAWzzD,MAAK,GACtCzrB,EAAO0pC,eAAey1C,EAAW1zD,MAAK,KAG1C,MAEF,OACMyzD,EAAab,EAASptD,gBAAgBjD,aAAapU,EAAA+E,KAAKI,KAAK,GAC7DogE,EAAad,EAASptD,gBAAgB1C,oBAAoB3U,EAAA+E,KAAKI,KAAK,GACxEs/D,EAASptD,gBAAgB3C,cAAc4wD,GACvCtrC,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAes1C,EAAWzzD,MAAO8O,GACxCv6B,EAAO4pC,eAAeu1C,EAAW1zD,MAAO+O,GACxCx6B,EAAOopC,aAAatvB,EAAAsa,SAASW,MAC3B/0B,EAAO0pC,eAAew1C,EAAWzzD,MAAK,GACtCzrB,EAAO0pC,eAAey1C,EAAW1zD,MAAK,KAG1C,MAEF,OACMyzD,EAAab,EAASptD,gBAAgBjD,aAAapU,EAAA+E,KAAKI,KAAK,GAC7DogE,EAAad,EAASptD,gBAAgB1C,oBAAoB3U,EAAA+E,KAAKI,KAAK,GACxEs/D,EAASptD,gBAAgB3C,cAAc4wD,GACvCtrC,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAes1C,EAAWzzD,MAAO8O,GACxCv6B,EAAO4pC,eAAeu1C,EAAW1zD,MAAO+O,GACxCx6B,EAAOopC,aAAatvB,EAAAsa,SAASY,MAC3Bh1B,EAAO0pC,eAAew1C,EAAWzzD,MAAK,GACtCzrB,EAAO0pC,eAAey1C,EAAW1zD,MAAK,KAG1C,MAEF,OACMyzD,EAAab,EAASptD,gBAAgBjD,aAAaqwD,EAAS3/D,QAAQW,WAAW,GAC/E8/D,EAAad,EAASptD,gBAAgB1C,oBAAoB8vD,EAAS3/D,QAAQW,WAAW,GAC1Fg/D,EAASptD,gBAAgB3C,cAAc4wD,GACvCtrC,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAes1C,EAAWzzD,MAAO8O,GACxCv6B,EAAO4pC,eAAeu1C,EAAW1zD,MAAO+O,GACxCx6B,EAAOopC,aACLi1C,EAAS3/D,QAAQkB,SACb9F,EAAAsa,SAASW,MACTjb,EAAAsa,SAASS,MACb70B,EAAO0pC,eAAew1C,EAAWzzD,MAAO4yD,EAAS3/D,QAAQsvC,gBACzDhuD,EAAO0pC,eAAey1C,EAAW1zD,MAAO4yD,EAAS3/D,QAAQsvC,kBAG7D,MAEF,OACE,GAAIqwB,EAASzyB,YAAY1nD,GAAE,KAAuB,CAChDm6E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBACb,MAEEyxC,EAAab,EAASptD,gBAAgBjD,aAAaqwD,EAAS3/D,QAAQW,WAAW,GAC/E8/D,EAAad,EAASptD,gBAAgB1C,oBAAoB8vD,EAAS3/D,QAAQW,WAAW,GAC1Fg/D,EAASptD,gBAAgB3C,cAAc4wD,GACvCtrC,EAAM5zC,EAAO2sC,aACX3sC,EAAO4pC,eAAes1C,EAAWzzD,MAAO8O,GACxCv6B,EAAO4pC,eAAeu1C,EAAW1zD,MAAO+O,GACxCx6B,EAAOopC,aACLi1C,EAAS3/D,QAAQkB,SACb9F,EAAAsa,SAASY,MACTlb,EAAAsa,SAASU,MACb90B,EAAO0pC,eAAew1C,EAAWzzD,MAAO4yD,EAAS3/D,QAAQsvC,gBACzDhuD,EAAO0pC,eAAey1C,EAAW1zD,MAAO4yD,EAAS3/D,QAAQsvC,kBAG7D,MAEF,QACEpa,EAAM5zC,EAAOopC,aAAatvB,EAAAsa,SAASkrD,OAAQ/kD,EAAMC,GACjD,MAEF,QACEoZ,EAAM5zC,EAAOopC,aAAatvB,EAAAsa,SAASmrD,OAAQhlD,EAAMC,GACjD,MAEF,QACE6jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKa,IAAG,KAEzD,OAAQ6+D,EAASzyB,YAAY3oD,MAC3B,OACE,GAAIo7E,EAASzyB,YAAY1nD,GAAE,KAAuB,CAChDm6E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBACb,MAIJ,QACEmG,EAAMrZ,EACN,MAEF,QACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQkoD,QAASjlD,GAC1C,MAEF,QACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQmoD,QAASllD,GAC1C,MAEF,QACE8jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAET,IAAK,QACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKa,IAAG,KAEzD,OAAQ6+D,EAASzyB,YAAY3oD,MAC3B,OACE,GAAIo7E,EAASzyB,YAAY1nD,GAAE,KAAuB,CAChDm6E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBACb,MAIJ,QACEmG,EAAMrZ,EACN,MAEF,QACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQooD,SAAUnlD,GAC3C,MAEF,QACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQqoD,SAAUplD,GAC3C,MAEF,QACE8jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAET,IAAK,WACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKa,IAAG,KAGzD,OADAgb,EAAO6jD,EAASjuB,kBAAkB7mB,EAAS,GAAI80C,EAASzyB,YAAW,KAC3DyyB,EAASzyB,YAAY3oD,MAC3B,QACE2wC,EAAM5zC,EAAOopC,aAAatvB,EAAAsa,SAASwrD,YAAarlD,EAAMC,GACtD,MAEF,QACEoZ,EAAM5zC,EAAOopC,aAAatvB,EAAAsa,SAASyrD,YAAatlD,EAAMC,GACtD,MAEF,QACE6jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAET,IAAK,UACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKa,IAAG,KAEzD,OAAQ6+D,EAASzyB,YAAY3oD,MAC3B,OACE,GAAIo7E,EAASzyB,YAAY1nD,GAAE,KAAuB,CAChDm6E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBACb,MAIJ,QACEmG,EAAMrZ,EACN,MAEF,QACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQwoD,WAAYvlD,GAC7C,MAEF,QACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQyoD,WAAYxlD,GAC7C,MAEF,QACE8jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAET,IAAK,cACH,GAAuB,GAAnBrK,EAASriC,OAYX,OAXM3C,GAAyC,GAAxBA,EAAc2C,SAC/B3C,GAAiBA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAChF85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO+d,SAAS,IAAM,MAG/Eo5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,IAAMlpC,GAAyC,GAAxBA,EAAc2C,OAMnC,OALI3C,GAAiBA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAChF85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO+d,SAAS,IAAM,KAEtEjlB,EAAOytC,oBAEhB,OAAQlpC,EAAc,GAAGtB,MACvB,OACA,OACEs3B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKY,IAAG,KACvDq0B,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQ0oD,eAAgBzlD,GACjD,MAEF,OACA,OACEA,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKa,IAAG,KACvDo0B,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQ2oD,eAAgB1lD,GACjD,MAEF,OACE,GAAIh2B,EAAc,GAAGL,GAAE,KAMrB,OALAm6E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEb45E,EAASzyB,YAAcrnD,EAAc,GAC9BvE,EAAOytC,oBAIlB,OACElT,EAAO8jD,EAASjuB,kBACd7mB,EAAS,GACT80C,EAAS3/D,QAAQkB,SACbhG,EAAA+E,KAAKa,IACL5F,EAAA+E,KAAKY,IAAG,KAIdq0B,EAAM5zC,EAAOipC,YACXo1C,EAAS3/D,QAAQkB,SACb9F,EAAAwd,QAAQ2oD,eACRnmE,EAAAwd,QAAQ0oD,eACZzlD,GAEF,MAEF,QACEA,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKG,IAAG,KACvD80B,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQ4oD,eAAgB3lD,GACjD,MAEF,QACEA,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKI,IAAG,KACvD60B,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQ6oD,eAAgB5lD,GACjD,MAEF,QACE8jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAKjB,OADA4wC,EAASzyB,YAAcrnD,EAAc,GAC9BqvC,EAET,IAAK,OACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKa,IAAG,KAEzD,OAAQ6+D,EAASzyB,YAAY3oD,MAC3B,QACE2wC,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQ8oD,QAAS7lD,GAC1C,MAEF,QACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQ+oD,QAAS9lD,GAC1C,MAGF,QACE8jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAET,IAAK,QACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,GAAiBA,EAAc2C,OAAQ,CAEzC,GADAm3E,EAASzyB,YAAcrnD,EAAc,GACT,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKa,IAAG,KAEzD,OAAQ6+D,EAASzyB,YAAY3oD,MAC3B,OACE,GAAIo7E,EAASzyB,YAAY1nD,GAAE,KAAuB,CAChDm6E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBACb,MAIJ,QACEmG,EAAMrZ,EACN,MAGF,QACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQgpD,SAAU/lD,GAC3C,MAEF,QACEqZ,EAAM5zC,EAAOipC,YAAYnvB,EAAAwd,QAAQipD,SAAUhmD,GAC3C,MAEF,QACE8jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAKT,IAAK,OACH,OAAIrK,EAASriC,OAAS,GAAKqiC,EAASriC,OAAS,GACrC3C,GAAyC,GAAxBA,EAAc2C,QACnCm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO+d,SAAS,IAAM,KAG3EskB,EAASriC,OAAS,EACpBm3E,EAAS38D,MACP/H,EAAAgI,eAAe08C,wCACf3P,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAGlDo5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAG7CjlB,EAAOytC,qBAEVlpC,GAAyC,GAAxBA,EAAc2C,QAQrCqzB,EAAO8jD,EAASjuB,kBACd7mB,EAAS,GACT80C,EAAS3/D,QAAQW,UAAS,MAIxBsnB,EAA4B,GAAnB4C,EAASriC,OAAcs5E,EAAuBnC,EAAU90C,EAAS,IAAM,GACvE,EACJvpC,EAAOytC,qBAEhB4wC,EAASzyB,YAAcrnD,EAAc,GAC9BvE,EAAOgqC,WACZzlC,EAAc,GAAG6f,SACjB7f,EAAc,GAAGL,GAAG,GACpBq2B,EACAh2B,EAAc,GAAGL,GAAE,IACnBiyD,EAAejyD,GAAE,IACjBiyD,EAAer/B,KAAOvyB,EAAc,GAAGuyB,MAClCunD,EAASzyB,YAAcuK,GAAgBhoC,gBACvCkwD,EAASzyB,YAAcrnD,EAAc,IAAI4pB,eAC9CwY,MA3BIpiC,GAAiBA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAChF85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO+d,SAAS,IAAM,KAEtEjlB,EAAOytC,qBAyBlB,IAAK,QAEH,GADA4wC,EAASzyB,YAAchyC,EAAA+E,KAAKc,KACxB8pB,EAASriC,OAAS,GAAKqiC,EAASriC,OAAS,EAkB3C,OAjBM3C,GAAyC,GAAxBA,EAAc2C,QACnCm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO+d,SAAS,IAAM,KAG3EskB,EAASriC,OAAS,EACpBm3E,EAAS38D,MACP/H,EAAAgI,eAAe08C,wCACf3P,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAGlDo5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAG7CjlB,EAAOytC,oBAEhB,IAAMlpC,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJAm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO+d,SAAS,IAAM,KAEtEjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBACd7mB,EAAS,GACT80C,EAAS3/D,QAAQW,UAAS,KAI5Bmb,EAAO6jD,EAASjuB,kBACd7mB,EAAS,GACThlC,EAAc,GACdA,EAAc,GAAGL,GAAE,GAChB,EACA,EAAwB,GAGzBQ,OAAI,EAoBR,OAlBEH,EAAc,GAAGL,GAAE,MAEhBm6E,EAASzyB,YAAY1nD,GAAE,IACxBm6E,EAASzyB,YAAY90B,KAAOvyB,EAAc,GAAGuyB,OAG/C0D,EAAO6jD,EAAS5mB,kBACdj9B,EACA6jD,EAASzyB,YAAarnD,EAAc,GAAE,IAGtCglC,EAAS,IAEX7kC,EAAOH,EAAc,IAErBG,EAAO25E,EAASzyB,aAEdjlB,EAA4B,GAAnB4C,EAASriC,OAAcs5E,EAAuBnC,EAAU90C,EAAS,IAAM,GACvE,EACJvpC,EAAOytC,qBAEhB4wC,EAASzyB,YAAchyC,EAAA+E,KAAKc,KACrBzf,EAAOqqC,YAAY9lC,EAAc,GAAG6f,SAAUmW,EAAMC,EAAM91B,EAAKypB,eAAgBwY,IAExF,IAAK,SAEH,GADA03C,EAASzyB,YAAcyyB,EAAS3/D,QAAQW,UACjB,GAAnBkqB,EAASriC,OAWX,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnCm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO+d,SAAS,IAAM,KAG/Eo5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEVlpC,GAAyC,GAAxBA,EAAc2C,QACnCm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO+d,SAAS,IAAM,KAG/E,IAAIb,EAAoB7f,EAAe,GAAG6f,SAkB1C,OAjBIi6D,EAAS3/D,QAAQkB,SAEfu2C,EAAejyD,GAAE,IAAuBiyD,EAAer/B,MAAQ,IACjEunD,EAASzyB,YAAchyC,EAAA+E,KAAKQ,IAC5By0B,EAAM5zC,EAAOqoC,UAAUjkB,IAEvBwvB,EAAM5zC,EAAOyoC,UAAUrkB,EAAU,GAI/B+xC,EAAejyD,GAAE,IAA8C,IAAvBiyD,EAAer/B,MACzDunD,EAASzyB,YAAchyC,EAAA+E,KAAKS,IAC5Bw0B,EAAM5zC,EAAOyoC,UAAUrkB,EAAU,IAEjCwvB,EAAM5zC,EAAOqoC,UAAUjkB,GAGpBwvB,EAET,IAAK,UAEH,GADAyqC,EAASzyB,YAAcyyB,EAAS3/D,QAAQW,UACjB,GAAnBkqB,EAASriC,OAWX,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnCm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO+d,SAAS,IAAM,KAG/Eo5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,IAAMlpC,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJAm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO+d,SAAS,IAAM,KAEtEjlB,EAAOytC,oBAEhB,IACIgzC,OAAS,EACb,OAFIr8D,EAAoB7f,EAAe,GAAG6f,UAGxC,KAAK,EAAKq8D,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,QAA0B,OAAfnuE,QAAO,GAAetS,EAAOytC,oBAmB1C,OAjBI4wC,EAAS3/D,QAAQkB,SAEfu2C,EAAejyD,GAAE,IAAuBiyD,EAAer/B,MAAQ,IACjEunD,EAASzyB,YAAchyC,EAAA+E,KAAKQ,IAC5By0B,EAAM5zC,EAAOqoC,UAAUo4C,IAEvB7sC,EAAM5zC,EAAOyoC,UAAUg4C,EAAW,GAIhCtqB,EAAejyD,GAAE,IAA8C,IAAvBiyD,EAAer/B,MACzDunD,EAASzyB,YAAchyC,EAAA+E,KAAKS,IAC5Bw0B,EAAM5zC,EAAOyoC,UAAUg4C,EAAW,IAElC7sC,EAAM5zC,EAAOqoC,UAAUo4C,GAGpB7sC,EAET,IAAK,WAEH,GADAyqC,EAASzyB,YAAcyyB,EAAS3/D,QAAQW,UACpCkqB,EAASriC,OAAS,EAWpB,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnCm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO+d,SAAS,IAAM,KAG/Eo5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,IAAMlpC,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJAm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO+d,SAAS,IAAM,KAEtEjlB,EAAOytC,oBAEhB,IAAImQ,EACJ,KADIA,EAAYr5C,EAAc,GAAG44C,gBAM/B,OAJAkhC,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAENzE,EAAOytC,oBAEhB,IAAI9G,OAAM,EACV,GAAI4C,EAASriC,OAAQ,CACnB,GACEqiC,EAAS,GAAGtmC,MAAQ4W,EAAA/W,SAASI,SACTqmC,EAAS,GAAIz1B,aAAe+F,EAAAjG,YAAYmB,OAM5D,OAJAspE,EAAS38D,MACP/H,EAAAgI,eAAemG,wBACfyhB,EAAS,GAAG9kC,OAEPzE,EAAOytC,oBAEhB,IAAI9c,EAAsC4Y,EAAS,GAAI5nC,MACnDivB,EAAQgtB,EAAUvxC,QAAUuxC,EAAUvxC,QAAQ9K,IAAIovB,GAAa,KACnE,IAAMC,GAASA,EAAM3tB,MAAQ65C,EAAAzgC,YAAYmT,MAKvC,OAJA6uD,EAAS38D,MACP/H,EAAAgI,eAAe++D,yBACfn3C,EAAS,GAAG9kC,MAAOm5C,EAAUn9B,aAAckQ,GAEtC3wB,EAAOytC,oBAEhB9G,EAAiB/V,EAAOnB,kBAExBkX,EAASiX,EAAUhuB,oBAErB,OAAIyuD,EAAS3/D,QAAQkB,SAEfu2C,EAAejyD,GAAE,IAAuBiyD,EAAer/B,MAAQ,IACjEunD,EAASzyB,YAAchyC,EAAA+E,KAAKQ,IACrBnf,EAAOqoC,UAAU1B,IAEjB3mC,EAAOyoC,UAAU9B,GAItBwvB,EAAejyD,GAAE,IAA8C,IAAvBiyD,EAAer/B,MACzDunD,EAASzyB,YAAchyC,EAAA+E,KAAKS,IACrBpf,EAAOyoC,UAAU9B,IAEjB3mC,EAAOqoC,UAAU1B,GAO9B,IAAK,SACH,GAAuB,GAAnB4C,EAASriC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASvuB,4BAA4BvmB,EAAS,GAAI3vB,EAAA+E,KAAKG,IAAG,GAE/Dpa,EAAO25E,EAASzyB,YAOpB,OANApxB,EAAO6jD,EAASjuB,kBAAkB7mB,EAAS,GAAI7kC,EAAI,KACnD+1B,EAAO4jD,EAAS3qB,cACd2qB,EAASvuB,4BAA4BvmB,EAAS,GAAI3vB,EAAA+E,KAAKW,KAAI,GAC3D++D,EAASzyB,aAEXyyB,EAASzyB,YAAclnD,EACf25E,EAASzyB,YAAY3oD,MAC3B,OACA,OACA,OACA,OACA,QAIA,QACE2wC,EAAM5zC,EAAO2sC,aAAapS,EAAMC,EAAMC,GACtC,MAEF,QACE4jD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAM5zC,EAAOytC,oBAIjB,OAAOmG,EAET,IAAK,cAaH,OAZuB,GAAnBrK,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAGhD1gB,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGzBzgB,EAAOytC,oBAKhB,IAAK,cAcH,OAbA4wC,EAASzyB,YAAchyC,EAAA+E,KAAKG,IACL,GAAnByqB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAGhD1gB,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGzBzgB,EAAOspC,WAAWxvB,EAAA+rB,OAAO86C,eAElC,IAAK,cAiBH,OAhBAtC,EAASzyB,YAAchyC,EAAA+E,KAAKG,IACL,GAAnByqB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDsV,EAAOv6B,EAAOytC,qBAEdlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAI3vB,EAAA+E,KAAKG,IAAG,KAErDva,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGzBzgB,EAAOspC,WAAWxvB,EAAA+rB,OAAO+6C,WAAY,MAAQrmD,IAGtD,IAAK,cAOH,GANIh2B,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,OAMX,OALAm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAchyC,EAAA+E,KAAKc,KACrBzf,EAAOytC,oBAqBhB,MAnBAlT,EAAO8jD,EAASjuB,kBACd7mB,EAAS,GACT80C,EAAS3/D,QAAQW,UAAS,KAI5Bmb,EAAO6jD,EAASjuB,kBACd7mB,EAAS,GACT80C,EAAS3/D,QAAQW,UAAS,KAI5Bob,EAAO4jD,EAASjuB,kBACd7mB,EAAS,GACT80C,EAAS3/D,QAAQW,UAAS,KAI5Bg/D,EAASzyB,YAAchyC,EAAA+E,KAAKc,KACtB,IAAI6D,MAAM,mBAGlB,IAAK,cAOH,GANI/e,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,OAMX,OALAm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAchyC,EAAA+E,KAAKc,KACrBzf,EAAOytC,oBAqBhB,MAnBAlT,EAAO8jD,EAASjuB,kBACd7mB,EAAS,GACT80C,EAAS3/D,QAAQW,UAAS,KAI5Bmb,EAAO6jD,EAASjuB,kBACd7mB,EAAS,GACT3vB,EAAA+E,KAAKQ,IAAG,KAIVsb,EAAO4jD,EAASjuB,kBACd7mB,EAAS,GACT80C,EAAS3/D,QAAQW,UAAS,KAI5Bg/D,EAASzyB,YAAchyC,EAAA+E,KAAKc,KACtB,IAAI6D,MAAM,mBAMlB,IAAK,aACH,OAAM/e,GAAyC,GAAxBA,EAAc2C,OAQd,GAAnBqiC,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAcrnD,EAAc,GAC9BvE,EAAOytC,sBAEhBlT,EAAO8jD,EAASvuB,4BACdvmB,EAAS,GACThlC,EAAc,GAAE,GAGlB85E,EAASzyB,YAAcrnD,EAAc,GACjC85E,EAASzyB,YAAY90B,MAAQvyB,EAAc,GAAGuyB,MAChDunD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAENzE,EAAOytC,qBAITlT,IA9BDh2B,GAAiBA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAChF85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO+d,SAAS,IAAM,KAEtEjlB,EAAOytC,qBA2BlB,IAAK,SACH,GAAIlE,EAASriC,OAAS,GAAKqiC,EAASriC,OAAS,EAqB3C,OApBI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,GAAG64C,iBACtC,GAAxB74C,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAIvDskB,EAASriC,OAAS,EACpBm3E,EAAS38D,MACP/H,EAAAgI,eAAe08C,wCACf3P,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAEzCskB,EAASriC,OAAS,GAC3Bm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAG7CjlB,EAAOytC,oBAEhB,GAAIlpC,EAAe,CAEjB,GADIA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,GAAG64C,iBACtC,GAAxB74C,EAAc2C,OAKhB,OAJAm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBlT,EAAO8jD,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,UAE/Dg2B,EAAO8jD,EAASvuB,4BAA4BvmB,EAAS,GAAI3vB,EAAA+E,KAAKW,KAAI,GAGhE5a,EAAO25E,EAASzyB,YAIpB,GAHAyyB,EAASzyB,YAAclnD,EAAK04C,gBAGxBihC,EAAS3/D,QAAQoB,SACnB,OAAIq2C,GAAkBv8C,EAAA+E,KAAKc,MACzB4+D,EAASzyB,YAAchyC,EAAA+E,KAAKc,KACrBzf,EAAOusC,aAEThS,EAGT,IAAIsmD,EAAQlrB,EAAa0oB,EAA6B,GAAnB90C,EAASriC,OAAcqiC,EAAS,GAAK,KAAMmlB,GAI9E,GAFA2vB,EAASzyB,YAAclnD,EAAK04C,gBAExB+Y,GAAkBv8C,EAAA+E,KAAKc,KAAM,CAC/B,OAAQ4+D,EAASzyB,YAAY3oD,MAC3B,QACE2wC,EAAM5zC,EAAOqsC,SACXrsC,EAAOipC,YAAYnvB,EAAAwd,QAAQC,OACzBgD,GAEFsmD,GAEF,MAEF,OACA,OACEjtC,EAAM5zC,EAAOqsC,SACXrsC,EAAOipC,YAAYnvB,EAAAwd,QAAQE,OACzB+C,GAEFsmD,GAEF,MAEF,OACA,OACEjtC,EAAM5zC,EAAOqsC,SACXrsC,EAAOipC,YACLo1C,EAAS3/D,QAAQkB,SACb9F,EAAAwd,QAAQE,OACR1d,EAAAwd,QAAQC,OACZgD,GAEFsmD,GAEF,MAGF,QACEjtC,EAAM5zC,EAAOqsC,SACXrsC,EAAOopC,aAAatvB,EAAAsa,SAASG,MAC3BgG,EACAv6B,EAAO6oC,UAAU,IAEnBg4C,GAEF,MAEF,QACEjtC,EAAM5zC,EAAOqsC,SACXrsC,EAAOopC,aAAatvB,EAAAsa,SAASI,MAC3B+F,EACAv6B,EAAO+oC,UAAU,IAEnB83C,GAEF,MAEF,QACExC,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAMitC,EAIVxC,EAASzyB,YAAchyC,EAAA+E,KAAKc,UAE5B,OAAQ4+D,EAASzyB,YAAY3oD,MAC3B,OACA,OACA,OACA,OACA,QACM4qB,EAAOwwD,EAASptD,gBAAgBpD,KAChCinC,EAAYupB,EAASptD,gBAAgB1C,oBACvC8vD,EAASzyB,aACR/9B,EAAK2F,YAAY+G,EAAM8jD,EAASzyB,cAEnChY,EAAM5zC,EAAOqsC,SACXrsC,EAAO4pC,eAAekrB,EAAUrpC,MAAO8O,GACvCv6B,EAAO0pC,eAAeorB,EAAUrpC,MAAK,GACrCo1D,GAEF,MAEF,OACA,OACA,QACM/rB,EAAYupB,EAASptD,gBAAgB1C,oBAAoB3U,EAAA+E,KAAKG,KAAK,GACvE80B,EAAM5zC,EAAOqsC,SACXrsC,EAAO4pC,eAAekrB,EAAUrpC,MAAO8O,GACvCv6B,EAAO0pC,eAAeorB,EAAUrpC,MAAK,GACrCo1D,GAEF,MAEF,OACA,OACM/rB,EAAYupB,EAASptD,gBAAgB1C,oBAAoB3U,EAAA+E,KAAKI,KAAK,GACvE60B,EAAM5zC,EAAOqsC,SACXrsC,EAAOipC,YAAYnvB,EAAAwd,QAAQE,OACzBx3B,EAAO4pC,eAAekrB,EAAUrpC,MAAO8O,IAEzCsmD,EACA7gF,EAAO0pC,eAAeorB,EAAUrpC,MAAK,IAEvC,MAEF,OACA,OACMqpC,EAAYupB,EAASptD,gBAAgB1C,oBAAoB8vD,EAAS3/D,QAAQW,WAAW,GACzFu0B,EAAM5zC,EAAOqsC,SACXrsC,EAAOipC,YACLo1C,EAAS3/D,QAAQkB,SACb9F,EAAAwd,QAAQE,OACR1d,EAAAwd,QAAQC,OACZv3B,EAAO4pC,eAAekrB,EAAUrpC,MAAO8O,IAEzCsmD,EACA7gF,EAAO0pC,eAAeorB,EAAUrpC,MAAO4yD,EAAS3/D,QAAQsvC,iBAE1D,MAEF,QACM8G,EAAYupB,EAASptD,gBAAgB1C,oBAAoB3U,EAAA+E,KAAKY,KAAK,GACvEq0B,EAAM5zC,EAAOqsC,SACXrsC,EAAOopC,aAAatvB,EAAAsa,SAASG,MAC3Bv0B,EAAO4pC,eAAekrB,EAAUrpC,MAAO8O,GACvCv6B,EAAO6oC,UAAU,IAEnBg4C,EACA7gF,EAAO0pC,eAAeorB,EAAUrpC,MAAK,IAEvC,MAEF,QACMqpC,EAAYupB,EAASptD,gBAAgB1C,oBAAoB3U,EAAA+E,KAAKa,KAAK,GACvEo0B,EAAM5zC,EAAOqsC,SACXrsC,EAAOopC,aAAatvB,EAAAsa,SAASI,MAC3Bx0B,EAAO4pC,eAAekrB,EAAUrpC,MAAO8O,GACvCv6B,EAAO+oC,UAAU,IAEnB83C,EACA7gF,EAAO0pC,eAAeorB,EAAUrpC,MAAK,IAEvC,MAEF,QACE4yD,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAEbmvC,EAAMitC,EAKZ,OAAOjtC,EAET,IAAK,YAOH,OANIrvC,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,uBAEZ5f,EAAOwwD,EAASptD,gBAAgBpD,MAC/BxpB,IAAG,MACRuvC,EAAMyqC,EAASvuB,4BAA4BvmB,EAAS,GAAI4sB,EAAc,GACtEtoC,EAAK2D,MAAK,MACHoiB,GAET,IAAK,gBACH,GAAIrK,EAASriC,OAAS,EAcpB,OAbI3C,IACEA,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,MAI3Do5D,EAAS38D,MACP/H,EAAAgI,eAAe08C,wCACf3P,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3CjlB,EAAOytC,oBAEhB,IAAIhoC,OAAU,EACd,GAAIlB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQm3E,EAASzyB,YAAcrnD,EAAc,IAC/D85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhDjlB,EAAOytC,oBAEhBhoC,EAAalB,EAAc,QAE3BkB,EAAa0wD,EAGf,GADA57B,EAAO8jD,EAASvuB,4BAA4BvmB,EAAS,GAAI3vB,EAAA+E,KAAKQ,IAAG,GACpC,GAAzBk/D,EAASzyB,YAAY3oD,KAKvB,OAJAo7E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACf8hB,EAAS,GAAG9kC,OAEPzE,EAAOytC,oBAOhB,IALA,IAAI0yB,EAAc52B,EAASriC,OAAS,EAChC45E,EAAe,IAAIzqE,MAAqB8pD,GACxC4gB,EAAiB,IAAI1qE,MAAc8pD,EAAc,GACjDxD,EAAmBl3D,EAAW0oB,eAC9B6yD,EAAmB,IAAI3qE,MAAkB8pD,GACpCz/D,EAAI,EAAGA,EAAIy/D,IAAez/D,EAAG,CACpCogF,EAAapgF,GAAK29E,EAASvuB,4BAA4BvmB,EAAS,EAAI7oC,GAAIkZ,EAAA+E,KAAKG,IAAG,GAChF,IAAImiE,EAAc5C,EAASzyB,YAC3Bm1B,EAAergF,GAAKugF,EAAY7xD,oBAChC4xD,EAAiBtgF,GAAKugF,EAAY9yD,eAEpC4yD,EAAe5gB,GAAe16D,EAAW2pB,oBACzC,IAAIme,EAAWwzC,EAAen7D,KAAK,IAC/ByoB,EAAUruC,EAAOioC,2BAA2B00B,EAAkBqkB,GAKlE,OAJK3yC,IAASA,EAAUruC,EAAO2nC,gBAAgB4F,EAAUovB,EAAkBqkB,IAC3E3C,EAASzyB,YAAcnmD,EAGhBzF,EAAOstC,mBAAmB/S,EAAMumD,EAAcvzC,GAKvD,IAAK,QAKH,OAJA8wC,EAAS38D,MACP/H,EAAAgI,eAAeu/D,eACfxyB,EAAWjqD,OAAQ8kC,EAASriC,OAASqiC,EAAS,GAAKmlB,GAAYjqD,MAAMwgB,YAEhEjlB,EAAOytC,oBAEhB,IAAK,UAKH,OAJA4wC,EAASxiD,QACPliB,EAAAgI,eAAeu/D,eACfxyB,EAAWjqD,OAAQ8kC,EAASriC,OAASqiC,EAAS,GAAKmlB,GAAYjqD,MAAMwgB,YAEhEjlB,EAAOusC,YAEhB,IAAK,OAKH,OAJA8xC,EAASziD,KACPjiB,EAAAgI,eAAeu/D,eACfxyB,EAAWjqD,OAAQ8kC,EAASriC,OAASqiC,EAAS,GAAKmlB,GAAYjqD,MAAMwgB,YAEhEjlB,EAAOusC,YAKhB,IAAK,KAOH,OANIhoC,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAchyC,EAAA+E,KAAKC,GACrB5e,EAAOytC,qBAET4wC,EAASjuB,kBACd7mB,EAAS,GACT3vB,EAAA+E,KAAKC,GAAE,KAKX,IAAK,MAOH,OANIra,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAchyC,EAAA+E,KAAKE,IACrB7e,EAAOytC,qBAET4wC,EAASjuB,kBACd7mB,EAAS,GACT3vB,EAAA+E,KAAKE,IAAG,KAKZ,IAAK,MAOH,OANIta,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAchyC,EAAA+E,KAAKG,IACrB9e,EAAOytC,qBAET4wC,EAASjuB,kBACd7mB,EAAS,GACT3vB,EAAA+E,KAAKG,IAAG,KAKZ,IAAK,MAOH,OANIva,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAchyC,EAAA+E,KAAKI,IACrB/e,EAAOytC,qBAET4wC,EAASjuB,kBACd7mB,EAAS,GACT3vB,EAAA+E,KAAKI,IAAG,KAKZ,IAAK,QAOH,OANIxa,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAcyyB,EAAS3/D,QAAQkB,SACpChG,EAAA+E,KAAK0+B,QACLzjC,EAAA+E,KAAK2+B,QACFt9C,EAAOytC,qBAET4wC,EAASjuB,kBACd7mB,EAAS,GACT80C,EAAS3/D,QAAQkB,SACbhG,EAAA+E,KAAK0+B,QACLzjC,EAAA+E,KAAK2+B,QAAO,KAKpB,IAAK,KAOH,OANI/4C,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAchyC,EAAA+E,KAAKM,GACrBjf,EAAOytC,qBAET4wC,EAASjuB,kBACd7mB,EAAS,GACT3vB,EAAA+E,KAAKM,GAAE,KAKX,IAAK,MAOH,OANI1a,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAchyC,EAAA+E,KAAKO,IACrBlf,EAAOytC,qBAET4wC,EAASjuB,kBACd7mB,EAAS,GACT3vB,EAAA+E,KAAKO,IAAG,KAKZ,IAAK,MAOH,OANI3a,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAchyC,EAAA+E,KAAKQ,IACrBnf,EAAOytC,qBAET4wC,EAASjuB,kBACd7mB,EAAS,GACT3vB,EAAA+E,KAAKQ,IAAG,KAKZ,IAAK,MAOH,OANI5a,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAchyC,EAAA+E,KAAKS,IACrBpf,EAAOytC,qBAET4wC,EAASjuB,kBACd7mB,EAAS,GACT3vB,EAAA+E,KAAKS,IAAG,KAKZ,IAAK,QAOH,OANI7a,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAcyyB,EAAS3/D,QAAQW,UACjCrf,EAAOytC,qBAET4wC,EAASjuB,kBACd7mB,EAAS,GACT80C,EAAS3/D,QAAQW,UAAS,KAK9B,IAAK,OAOH,OANI9a,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAchyC,EAAA+E,KAAKW,KACrBtf,EAAOytC,qBAET4wC,EAASjuB,kBACd7mB,EAAS,GACT3vB,EAAA+E,KAAKW,KAAI,KAKb,IAAK,MAOH,OANI/a,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAchyC,EAAA+E,KAAKY,IACrBvf,EAAOytC,qBAET4wC,EAASjuB,kBACd7mB,EAAS,GACT3vB,EAAA+E,KAAKY,IAAG,KAKZ,IAAK,MAOH,OANIhb,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,QACXm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAchyC,EAAA+E,KAAKa,IACrBxf,EAAOytC,qBAET4wC,EAASjuB,kBACd7mB,EAAS,GACT3vB,EAAA+E,KAAKa,IAAG,KAQZ,IAAK,eAOH,GANIjb,GACF85E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGT,GAAnB8oB,EAASriC,OAMX,OALAm3E,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAElDo5D,EAASzyB,YAAchyC,EAAA+E,KAAKc,KACrBzf,EAAOytC,oBAEhB,IAAI0zC,EAAO9C,EAASvuB,4BAA4BvmB,EAAS,GAAI3vB,EAAA+E,KAAKQ,IAAG,GAEjEgF,GADAzf,EAAO25E,EAASzyB,aACUznC,mBAE9B,OADAk6D,EAASzyB,YAAchyC,EAAA+E,KAAKc,KAEzB/a,EAAKR,GAAE,MACPigB,GAC2C,GAA5CA,EAAmBD,eAAehd,QAClCid,EAAmBD,eAAe,IAAMm6D,EAAS3/D,QAAQW,WAQ3Dg/D,EAASzyB,YAAchyC,EAAA+E,KAAKc,KAE5B4+D,EAASnyB,mBAAoB,EACtBlsD,EAAOktC,WAAW,iBAAmBi0C,GAAM,KAThD9C,EAAS38D,MACP/H,EAAAgI,eAAeouC,mCACfrB,EAAWjqD,MAAOC,EAAKugB,WAAY,wBAE9BjlB,EAAOytC,qBAQpB,IAAIhnC,EAkBN,SACE43E,EACA/7E,EACAinC,EACA4sB,EACAzH,GAEA,OAAQpsD,EAAUme,cAOhB,IAAK,UAAW,OAAO2gE,EAAS,MAAO/C,EAAUzkE,EAAA+E,KAAKG,IAAKyqB,EAAU3vB,EAAA+E,KAAKG,IAAK4vC,GAC/E,IAAK,UAAW,OAAO0yB,EAAS,MAAO/C,EAAUzkE,EAAA+E,KAAKI,IAAKwqB,EAAU3vB,EAAA+E,KAAKI,IAAK2vC,GAE/E,IAAK,UAAW,OAAO0yB,EAAS,MAAO/C,EAAUzkE,EAAA+E,KAAKG,IAAKyqB,EAAU3vB,EAAA+E,KAAKG,IAAK4vC,GAC/E,IAAK,UAAW,OAAO0yB,EAAS,MAAO/C,EAAUzkE,EAAA+E,KAAKI,IAAKwqB,EAAU3vB,EAAA+E,KAAKI,IAAK2vC,GAE/E,IAAK,aAAc,OAAO0yB,EAAS,SAAU/C,EAAUzkE,EAAA+E,KAAKG,IAAKyqB,EAAU3vB,EAAA+E,KAAKG,IAAK4vC,GACrF,IAAK,aAAc,OAAO0yB,EAAS,SAAU/C,EAAUzkE,EAAA+E,KAAKI,IAAKwqB,EAAU3vB,EAAA+E,KAAKI,IAAK2vC,GAErF,IAAK,WAAY,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKG,IAAKyqB,EAAU3vB,EAAA+E,KAAKG,IAAK4vC,GACjF,IAAK,WAAY,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKI,IAAKwqB,EAAU3vB,EAAA+E,KAAKI,IAAK2vC,GAEjF,IAAK,WAAY,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKG,IAAKyqB,EAAU3vB,EAAA+E,KAAKG,IAAK4vC,GACjF,IAAK,WAAY,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKI,IAAKwqB,EAAU3vB,EAAA+E,KAAKI,IAAK2vC,GAEjF,IAAK,UAAW,OAAO0yB,EAAS,MAAO/C,EAAUzkE,EAAA+E,KAAKY,IAAKgqB,EAAU3vB,EAAA+E,KAAKY,IAAKmvC,GAC/E,IAAK,UAAW,OAAO0yB,EAAS,MAAO/C,EAAUzkE,EAAA+E,KAAKa,IAAK+pB,EAAU3vB,EAAA+E,KAAKa,IAAKkvC,GAE/E,IAAK,UAAW,OAAO0yB,EAAS,MAAO/C,EAAUzkE,EAAA+E,KAAKY,IAAKgqB,EAAU3vB,EAAA+E,KAAKY,IAAKmvC,GAC/E,IAAK,UAAW,OAAO0yB,EAAS,MAAO/C,EAAUzkE,EAAA+E,KAAKa,IAAK+pB,EAAU3vB,EAAA+E,KAAKa,IAAKkvC,GAE/E,IAAK,UAAW,OAAO0yB,EAAS,MAAO/C,EAAUzkE,EAAA+E,KAAKY,IAAKgqB,EAAU3vB,EAAA+E,KAAKY,IAAKmvC,GAC/E,IAAK,UAAW,OAAO0yB,EAAS,MAAO/C,EAAUzkE,EAAA+E,KAAKa,IAAK+pB,EAAU3vB,EAAA+E,KAAKa,IAAKkvC,GAE/E,IAAK,WAAY,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKY,IAAKgqB,EAAU3vB,EAAA+E,KAAKY,IAAKmvC,GACjF,IAAK,WAAY,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKa,IAAK+pB,EAAU3vB,EAAA+E,KAAKa,IAAKkvC,GAEjF,IAAK,YAAa,OAAO0yB,EAAS,QAAS/C,EAAUzkE,EAAA+E,KAAKY,IAAKgqB,EAAU3vB,EAAA+E,KAAKY,IAAKmvC,GACnF,IAAK,YAAa,OAAO0yB,EAAS,QAAS/C,EAAUzkE,EAAA+E,KAAKa,IAAK+pB,EAAU3vB,EAAA+E,KAAKa,IAAKkvC,GAEnF,IAAK,eAAgB,OAAO0yB,EAAS,WAAY/C,EAAUzkE,EAAA+E,KAAKY,IAAKgqB,EAAU3vB,EAAA+E,KAAKY,IAAKmvC,GACzF,IAAK,eAAgB,OAAO0yB,EAAS,WAAY/C,EAAUzkE,EAAA+E,KAAKa,IAAK+pB,EAAU3vB,EAAA+E,KAAKa,IAAKkvC,GAEzF,IAAK,cAAe,OAAO0yB,EAAS,UAAW/C,EAAUzkE,EAAA+E,KAAKY,IAAKgqB,EAAU3vB,EAAA+E,KAAKY,IAAKmvC,GACvF,IAAK,cAAe,OAAO0yB,EAAS,UAAW/C,EAAUzkE,EAAA+E,KAAKa,IAAK+pB,EAAU3vB,EAAA+E,KAAKa,IAAKkvC,GAEvF,IAAK,sBAAuB,OAAO0yB,EAAS,cAAe/C,EAAUzkE,EAAA+E,KAAKG,IAAKyqB,EAAU3vB,EAAA+E,KAAKY,IAAKmvC,GACnG,IAAK,sBAAuB,OAAO0yB,EAAS,cAAe/C,EAAUzkE,EAAA+E,KAAKI,IAAKwqB,EAAU3vB,EAAA+E,KAAKa,IAAKkvC,GACnG,IAAK,sBAAuB,OAAO0yB,EAAS,cAAe/C,EAAUzkE,EAAA+E,KAAKY,IAAKgqB,EAAU3vB,EAAA+E,KAAKG,IAAK4vC,GACnG,IAAK,sBAAuB,OAAO0yB,EAAS,cAAe/C,EAAUzkE,EAAA+E,KAAKa,IAAK+pB,EAAU3vB,EAAA+E,KAAKI,IAAK2vC,GAEnG,IAAK,WAAY,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKY,IAAKgqB,EAAU3vB,EAAA+E,KAAKY,IAAKmvC,GACjF,IAAK,WAAY,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKa,IAAK+pB,EAAU3vB,EAAA+E,KAAKa,IAAKkvC,GAEjF,IAAK,YAAa,OAAO0yB,EAAS,QAAS/C,EAAUzkE,EAAA+E,KAAKY,IAAKgqB,EAAU3vB,EAAA+E,KAAKY,IAAKmvC,GACnF,IAAK,YAAa,OAAO0yB,EAAS,QAAS/C,EAAUzkE,EAAA+E,KAAKa,IAAK+pB,EAAU3vB,EAAA+E,KAAKa,IAAKkvC,GAEnF,IAAK,cAAe,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKC,GAAI2qB,EAAU3vB,EAAA+E,KAAKG,IAAK4vC,GACnF,IAAK,cAAe,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKM,GAAIsqB,EAAU3vB,EAAA+E,KAAKQ,IAAKuvC,GACnF,IAAK,eAAgB,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKE,IAAK0qB,EAAU3vB,EAAA+E,KAAKG,IAAK4vC,GACrF,IAAK,eAAgB,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKO,IAAKqqB,EAAU3vB,EAAA+E,KAAKQ,IAAKuvC,GACrF,IAAK,WAAY,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKG,IAAKyqB,EAAU3vB,EAAA+E,KAAKG,IAAK4vC,GACjF,IAAK,cAAe,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKC,GAAI2qB,EAAU3vB,EAAA+E,KAAKI,IAAK2vC,GACnF,IAAK,cAAe,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKM,GAAIsqB,EAAU3vB,EAAA+E,KAAKS,IAAKsvC,GACnF,IAAK,eAAgB,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKE,IAAK0qB,EAAU3vB,EAAA+E,KAAKI,IAAK2vC,GACrF,IAAK,eAAgB,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKO,IAAKqqB,EAAU3vB,EAAA+E,KAAKS,IAAKsvC,GACrF,IAAK,eAAgB,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKG,IAAKyqB,EAAU3vB,EAAA+E,KAAKI,IAAK2vC,GACrF,IAAK,eAAgB,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKQ,IAAKoqB,EAAU3vB,EAAA+E,KAAKS,IAAKsvC,GACrF,IAAK,WAAY,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKI,IAAKwqB,EAAU3vB,EAAA+E,KAAKI,IAAK2vC,GACjF,IAAK,WAAY,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKY,IAAKgqB,EAAU3vB,EAAA+E,KAAKY,IAAKmvC,GACjF,IAAK,WAAY,OAAO0yB,EAAS,OAAQ/C,EAAUzkE,EAAA+E,KAAKa,IAAK+pB,EAAU3vB,EAAA+E,KAAKa,IAAKkvC,GAEjF,IAAK,aAAc,OAAO0yB,EAAS,QAAS/C,EAAUzkE,EAAA+E,KAAKC,GAAI2qB,EAAU3vB,EAAA+E,KAAKG,IAAK4vC,GACnF,IAAK,cAAe,OAAO0yB,EAAS,QAAS/C,EAAUzkE,EAAA+E,KAAKE,IAAK0qB,EAAU3vB,EAAA+E,KAAKG,IAAK4vC,GACrF,IAAK,YAAa,OAAO0yB,EAAS,QAAS/C,EAAUzkE,EAAA+E,KAAKG,IAAKyqB,EAAU3vB,EAAA+E,KAAKG,IAAK4vC,GACnF,IAAK,aAAc,OAAO0yB,EAAS,QAAS/C,EAAUzkE,EAAA+E,KAAKC,GAAI2qB,EAAU3vB,EAAA+E,KAAKI,IAAK2vC,GACnF,IAAK,cAAe,OAAO0yB,EAAS,QAAS/C,EAAUzkE,EAAA+E,KAAKE,IAAK0qB,EAAU3vB,EAAA+E,KAAKI,IAAK2vC,GACrF,IAAK,cAAe,OAAO0yB,EAAS,QAAS/C,EAAUzkE,EAAA+E,KAAKG,IAAKyqB,EAAU3vB,EAAA+E,KAAKI,IAAK2vC,GACrF,IAAK,YAAa,OAAO0yB,EAAS,QAAS/C,EAAUzkE,EAAA+E,KAAKI,IAAKwqB,EAAU3vB,EAAA+E,KAAKI,IAAK2vC,GACnF,IAAK,YAAa,OAAO0yB,EAAS,QAAS/C,EAAUzkE,EAAA+E,KAAKY,IAAKgqB,EAAU3vB,EAAA+E,KAAKY,IAAKmvC,GACnF,IAAK,YAAa,OAAO0yB,EAAS,QAAS/C,EAAUzkE,EAAA+E,KAAKa,IAAK+pB,EAAU3vB,EAAA+E,KAAKa,IAAKkvC,GAErF,OAAO,EAxGI2yB,CAAahD,EAAU/7E,EAAWinC,EAAU4sB,EAAgBzH,GACvE,OAAIjoD,GACElC,GAAiBA,EAAc2C,QACjCm3E,EAAS38D,MACP/H,EAAAgI,eAAeu7C,sBACfxO,EAAWjqD,MAAOnC,EAAUme,cAGzBha,IAET43E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfinC,EAAWjqD,OAENzE,EAAOytC,qBA8FhB,SAAS2zC,EACPngF,EACAo9E,EACAiD,EACA/3C,EACAg4C,EACA7yB,GAEA,IAAIpsD,EAAYgQ,OAAO+rE,EAASh0D,QAAQzN,eAAerb,IAAIN,IAE3D,OADAqR,OAAOhQ,EAAUW,MAAQ65C,EAAAzgC,YAAYuH,oBAC9Bq6C,EAAYogB,EAA6B/7E,GAAag/E,GAAgB/3C,EAAUg4C,EAAW7yB,GAIpG,SAAS4vB,EACPD,EACA95E,EACAglC,EACAmlB,GAEA,GAAuB,GAAnBnlB,EAASriC,OACX,OAAK3C,GAAyC,GAAxBA,EAAc2C,OAO7B3C,EAAc,IANnB85E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO+d,SAAS,IAAM,KAEtE,MAIX,GAAuB,GAAnBskB,EAASriC,OAAa,CACxB,GAAI3C,EACF,GAA4B,GAAxBA,EAAc2C,OAChBm3E,EAASjuB,kBAAkB7mB,EAAS,GAAIhlC,EAAc,GAAE,SACnD,CACL,GAAIA,EAAc2C,OAKhB,OAJAm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAEhD,KAETo5D,EAASvuB,4BAA4BvmB,EAAS,GAAI3vB,EAAA+E,KAAKG,IAAG,QAG5Du/D,EAASvuB,4BAA4BvmB,EAAS,GAAI3vB,EAAA+E,KAAKG,IAAG,GAE5D,OAAOu/D,EAASzyB,YAYlB,OAVIrnD,GAAiBA,EAAc2C,OAAS,GAC1Cm3E,EAAS38D,MACP/H,EAAAgI,eAAeytD,oCACf1gB,EAAWjqD,MAAO,IAAKF,EAAc2C,OAAO+d,SAAS,KAGzDo5D,EAAS38D,MACP/H,EAAAgI,eAAeoG,+BACf2mC,EAAWjqD,MAAO,IAAK8kC,EAASriC,OAAO+d,SAAS,KAE3C,KAIT,SAASu7D,EAAuBnC,EAAoB/2E,GAClD,IAAIb,EACA9E,EA6BJ,OA5BI08E,EAAS3/D,QAAQkB,UACnBnZ,EAAO43E,EAAS3rC,qBAAqBprC,EAAYsS,EAAA+E,KAAK4+B,QAAO,MAE3DzjC,EAAA2Z,gBAAgBhtB,IAASqT,EAAA4Z,aAAa6C,OACf,GAAvBzc,EAAA8d,kBAAkBnxB,IACY,GAA9BqT,EAAA68B,qBAAqBlwC,KACpB9E,EAAQmY,EAAA+d,oBAAoBpxB,IAAS,KAEtC43E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAEb9C,GAAS,KAGX8E,EAAO43E,EAAS3rC,qBAAqBprC,EAAYsS,EAAA+E,KAAK6+B,QAAO,MAE3D1jC,EAAA2Z,gBAAgBhtB,IAASqT,EAAA4Z,aAAa6C,OACf,GAAvBzc,EAAA8d,kBAAkBnxB,KACjB9E,EAAQmY,EAAA0c,iBAAiB/vB,IAAS,KAEnC43E,EAAS38D,MACP/H,EAAAgI,eAAe8F,wBACfngB,EAAW7C,OAEb9C,GAAS,IAGNA,EAwDT,SAAgBg0D,EACd0oB,EACA/jD,EACAo0B,GAEA,IAAIrkC,EAAUg0D,EAASh0D,QACnBrqB,EAASq+E,EAASr+E,OAElBwhF,EAAan3D,EAAQvN,YAAYvb,IAAI,UACzC,IAAKigF,EAAY,OAAOxhF,EAAOytC,oBAE/B,IAAInwB,EAAgB+M,EAAQ/M,cAC5B,IAAMA,IAAiB+gE,EAASrtB,gBAAgB1zC,GAAiB,OAAOtd,EAAOytC,oBAEnD,MAAXnT,EACb+jD,EAASjuB,kBAAkB91B,EAASknD,EAAU,KAC9CA,EAAWnjC,aAAar+C,GAEVq+E,EAASjc,mBAAmB1T,EAAWjqD,MAAMiJ,OAAOJ,gBAGtE,OADA+wE,EAASzyB,YAAchyC,EAAA+E,KAAKc,KACrBzf,EAAO4rC,YAAY,MACxB5rC,EAAOotC,iBACL9vB,EAAcmD,gBAAgB,GAGhCzgB,EAAOytC,sBAwDX,SAAgBk1B,EACd0b,EACAzZ,WAEIv6C,EAAUg0D,EAASh0D,QACvB/X,OAAOsyD,EAAclgE,KAAK+4C,UAAUpzB,IAIlC,IAAIo3D,EAAgB7c,EAAc90C,YAClC,IAA2B,GAAvB2xD,EAA0B,OAAOA,EAIvC,IAAIp1E,EAAUu4D,EAAcv4D,QAC5B,GAAIu4D,EAActiE,UAAU4F,YAAYzD,MAAMiJ,OAAOqX,WACnC,OAAZ1Y,GAAoBA,EAAQkX,IAAI,QAAS,CAC3C,IAAIm+D,EAAcpvE,OAAOjG,EAAQ9K,IAAI,SACrC+Q,OAAOovE,EAAYz+E,MAAQ65C,EAAAzgC,YAAYuH,oBACvC,IAAI+9D,EAAarvE,OAAO+X,EAAQvM,SAASmG,gBAAmCy9D,EAAa,OACzFpvE,OAAOqvE,EAAWz9E,GAAGxB,EAAAsB,YAAYu9C,QAAU7+C,EAAAsB,YAAYipB,WACvD3a,QAAQqvE,EAAWv9E,MAAM1B,EAAAsB,YAAY+f,QAAUrhB,EAAAsB,YAAY49E,UAC3DtvE,OAAqD,GAA9CqvE,EAAWlyE,UAAUyU,eAAehd,QAC3CoL,OAAOqvE,EAAWlyE,UAAUhK,YAAcmU,EAAA+E,KAAKc,MAC/CkiE,EAAWlhE,aAAemkD,EAAcnkD,aAAe,MACvDnO,OAAO+rE,EAASrtB,gBAAgB2wB,IAChC,IAAIl2D,EAAQ4yD,EAASjsB,yBAAyBuvB,GAE9C,OADA/c,EAAc90C,YAAcrE,EACrBA,EAIX,IAAIzrB,EAASq+E,EAASr+E,OAClB0e,EAAU2/D,EAAS3/D,QACnBsvC,EAAiBtvC,EAAQsvC,eACzB6zB,EAAiBnjE,EAAQW,UAAU+E,SACnC1U,EAAO,IAAI2G,MAGf3G,EAAKmW,KACH7lB,EAAOqsC,SACLrsC,EAAOipC,YACLvqB,EAAQkB,SACJ9F,EAAAwd,QAAQE,OACR1d,EAAAwd,QAAQC,OACZv3B,EAAO0pC,eAAe,EAAGskB,IAE3BhuD,EAAOysC,iBAKX,IAAIsf,EAAgBsyB,EAAStyB,cACzBj8B,EAAci8B,EAAc7kD,OAChC6kD,EAAclmC,KAAK,GACnB++C,EAAc90C,YAAcA,EAG5B,IAAIgyD,EAAeld,EAAcj1C,KAyBjC,GAxBImyD,GACFxvE,OAAOwvE,EAAap9E,KAAK+4C,UAAUpzB,IACnC3a,EAAKmW,KACH7lB,EAAOstC,mBACLttC,EAAOqoC,UACLs6B,EAAa0b,EAAiByD,EAAap9E,KAAKy4C,kBAGhDn9C,EAAO0pC,eAAe,EAAGskB,IAEb,GAAdA,EAAmC,KAAO,QAM9Ct+C,EAAKmW,KACH7lB,EAAOktC,WAAW56B,OAAO+X,EAAQ1M,gBAAgB8C,cAC/CzgB,EAAO0pC,eAAe,EAAGskB,IAC1B,IAKD3hD,MACF,IAAmB,IAAAkhB,EAAAzL,EAAAzV,EAAQtC,UAAQmY,EAAAqL,EAAAvL,QAAAE,EAAAD,KAAAC,EAAAqL,EAAAvL,OAAE,CAAhC,IAAI7K,EAAM+K,EAAAvgB,MACb,GAAIwV,EAAOlU,MAAQ65C,EAAAzgC,YAAYmT,MAC7B,GAAYrY,EAAQrT,SAAW8gE,EAE7B,GADmBztD,EAAQzS,KAClB+4C,UAAUpzB,GAAU,CAC3B,IAAIsc,EAAiBxvB,EAAQsY,aAC7Bnd,OAAOq0B,GAAU,GACjBj3B,EAAKmW,KACH7lB,EAAOktC,WAAW56B,OAAO+X,EAAQ1M,gBAAgB8C,cAC/CzgB,EAAOgqC,WACL63C,GACA,EACA7hF,EAAO0pC,eAAe,EAAGskB,GACzBA,EACArnB,IAEH,uGAeb,OANAolB,EAAcj8B,GAAe9vB,EAAO8tC,YAClC82B,EAAcnkD,aAAe,MAC7B49D,EAASxxB,mBAAmB,KAAMjzC,EAAA+E,KAAKc,KAAMf,EAAQW,WACrD,KACArf,EAAO4rC,YAAY,KAAMl8B,IAEpBogB,EAhgGT/vB,EAAAk+D,cAuwFAl+D,EAAA2kE,gBAAA,SACE2Z,EACAzZ,EACAlW,GAEA,IAAIrkC,EAAUg0D,EAASh0D,QACvB/X,OAAOsyD,EAAcv6C,SAAWA,GAChC,IAAIrqB,EAASq+E,EAASr+E,OAClB0e,EAAU2/D,EAAS3/D,QAGvB,GAAI2L,EAAQ7M,OAASonD,EAAclgE,KAAK+4C,UAAUpzB,GAAU,CAC1D,IAAI03D,EAAmBzvE,OAAO+X,EAAQ5M,oBACtC,OAAK4gE,EAASrtB,gBAAgB+wB,IAC9B1D,EAASzyB,YAAcgZ,EAAclgE,KAC9B1E,EAAOktC,WACZ60C,EAAiBthE,cACf/B,EAAQkB,SACJ5f,EAAOyoC,UAAUm8B,EAAch1C,qBAC/B5vB,EAAOqoC,UAAUu8B,EAAch1C,qBACnC5vB,EAAOqoC,UACLs6B,EAAa0b,EAAUzZ,KAG3BlmD,EAAQsvC,iBAX8ChuD,EAAOytC,oBAiB/D,OADIs0C,EAAmB13D,EAAQ9M,wBAQ1B8gE,EAASrtB,gBAAgB+wB,IAE9B1D,EAASzyB,YAAcgZ,EAAclgE,KAC9B1E,EAAOktC,WACZ60C,EAAiBthE,cACf/B,EAAQkB,SACJ5f,EAAOyoC,UAAUm8B,EAAch1C,qBAC/B5vB,EAAOqoC,UAAUu8B,EAAch1C,sBAErClR,EAAQsvC,iBAT8ChuD,EAAOytC,qBAN7DpjB,EAAQ3I,MACN/H,EAAAgI,eAAec,mBACfisC,EAAWjqD,MAAO,mBAEbzE,EAAOytC,sBAiBpB1tC,EAAA41D,eA+BA51D,EAAAqtD,oBAAA,SAAoCixB,WAC9Br+E,EAASq+E,EAASr+E,OAClBygE,EAAQ,IAAIpqD,UAEhB,IAAoB,IAAAkX,EAAAzL,EAAAu8D,EAASh0D,QAAQzN,eAAe7S,UAAQmY,EAAAqL,EAAAvL,QAAAE,EAAAD,KAAAC,EAAAqL,EAAAvL,OAAE,CAAzD,IAAItZ,EAAOwZ,EAAAvgB,MACd,GAAI+G,EAAQzF,MAAQ65C,EAAAzgC,YAAYzJ,OAAhC,CACA,IAAIqX,EAAiBvhB,EACjBy0C,EAAiBlzB,EAAOvlB,KAAKy4C,eACjC,GACElzB,EAAO/lB,GAAGxB,EAAAsB,YAAY6pD,WACH,OAAnB1Q,IACCA,EAAe93B,aAAay3B,EAAAxgC,eAAepJ,WAE5C,GAAI+W,EAAO/lB,GAAGxB,EAAAsB,YAAYqnB,SAAU,CAClC,IAAI1pB,EAAQsoB,EAAOmB,qBACnBq1C,EAAM56C,KACJ7lB,EAAOstC,mBACLttC,EAAO0pC,eAAe,EAAC,IAErB20C,EAAS3/D,QAAQkB,SACb5f,EAAOyoC,UAAUkI,QAAQhvC,GAAQivC,SAASjvC,IAC1C3B,EAAOqoC,UAAUsI,QAAQhvC,KAE/B,YAIJ8+D,EAAM56C,KACJ7lB,EAAOstC,mBACLttC,EAAO0pC,eAAe,EAAC,IAErB1pC,EAAO8pC,gBACL7f,EAAOxJ,aACP49D,EAAS3/D,QAAQsvC,iBAGrB,0GAMV,IAAI3f,EAAUgwC,EAASxxB,oBAAqBjzC,EAAA+E,KAAKG,KAAOlF,EAAA+E,KAAKc,MAC7Dzf,EAAO8tC,YAAY,gBAAiBO,KAClCoyB,EAAMv5D,OACFlH,EAAO4rC,YAAY,KAAM60B,GACzBzgE,EAAOusC,cAKfxsC,EAAA4iE,8FC18FA,SAAkBqf,GAEhBA,IAAA,eACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,8CACAA,IAAA,yBAEAA,IAAA,kBACAA,IAAA,yCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,oCACAA,IAAA,gCACAA,IAAA,0CACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,8CACAA,IAAA,2CACAA,IAAA,4CACAA,IAAA,oBAEAA,IAAA,UAEAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UAEAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,6BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,mBAEAA,IAAA,yBACAA,IAAA,wBACAA,IAAA,qCACAA,IAAA,aACAA,IAAA,8BAnIF,CAAkBjiF,EAAAiiF,WAAAjiF,EAAAiiF,cAuIlBjiF,EAAAw7B,YAAA,SAA4Bx6B,GAC1B,OAAQA,GACN,QACA,QACA,UACA,UACE,OAAO,EAET,QACE,OAAO,IAMbhB,EAAAgnD,aAAA,SAA6BhmD,GAC3B,OAAQA,GACN,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACE,OAAO,EAET,QACE,OAAOA,GAAC,MAAuBA,GAAC,OAMtChB,EAAAslD,eAAA,SAA+BtkD,GAC7B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAkpD,aAAA,SAA6BloD,GAC3B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAymD,kBAAA,SAAkCzlD,GAChC,OAAOA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACnB,IAADA,GACC,IAADA,GACAA,EAAI,KAiLb,SAAkCs5B,GAChC,QAAOA,EAAO,GAAKA,EAAO,QACnB4nD,EAAmB5nD,EAAa6nD,GAnLpBC,CAAyBphF,IAI9ChB,EAAA0mD,mBAAA,SAAmC1lD,GACjC,OAAOA,GAAC,IAAkBA,GAAC,KAI7BhB,EAAA4mD,iBAAA,SAAiC5lD,GAC/B,OAAOA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAmBA,GAAC,IACpB,IAADA,GACC,IAADA,GACAA,EAAI,KAuKb,SAAiCs5B,GAC/B,QAAOA,EAAO,GAAKA,EAAO,QACnB4nD,EAAmB5nD,EAAa+nD,GAzKpBC,CAAwBthF,IAI7C,IAAMmhF,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__17__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.SUPER: // TODO\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  IGNORE,\n  PRIMARYID,\n  EXTERNAL,\n  BUILTIN\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a: {\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.d: {\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        if (nameStr == \"ignore\") return DecoratorKind.IGNORE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.p: {\n        if (nameStr == \"primaryid\") return DecoratorKind.PRIMARYID;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is compiled. */\n  COMPILED = 1 << 21,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 22,\n  /** Is scoped. */\n  SCOPED = 1 << 23,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 24,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 25,\n  /** Is the main function. */\n  MAIN = 1 << 26,\n\n  // Other\n\n  QUOTED = 1 << 27\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Abi\n} from \"./abi\";\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents a module-level export. */\nclass ModuleExport {\n  element: Element;\n  identifier: IdentifierExpression;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n  toAbi(): Abi {\n    var abi = new Abi(this);\n    abi.resolve();\n    return abi;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let element = this.elementsLookup.get(name);\n          if (element) this.elementsLookup.set(alias, element);\n          else throw new Error(\"element not found: \" + name);\n        }\n      }\n    }\n\n    // register 'ArrayBuffer'\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n    }\n\n    // register 'Array'\n    if (this.elementsLookup.has(\"Array\")) {\n      let element = assert(this.elementsLookup.get(\"Array\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>element;\n    }\n\n    // register 'String'\n    if (this.elementsLookup.has(\"String\")) {\n      let element = assert(this.elementsLookup.get(\"String\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\n      if (instance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>element).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = instance;\n          this.typesLookup.set(\"string\", instance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n\n    // register 'abort' if present\n    if (this.elementsLookup.has(\"abort\")) {\n      let element = <Element>this.elementsLookup.get(\"abort\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      if (instance) this.abortInstance = instance;\n    }\n\n    // register 'memory.allocate' if present\n    if (this.elementsLookup.has(\"memory\")) {\n      let element = <Element>this.elementsLookup.get(\"memory\");\n      let members = element.members;\n      if (members) {\n        if (members.has(\"allocate\")) {\n          element = assert(members.get(\"allocate\"));\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.memoryAllocateInstance = instance;\n        }\n      }\n    }\n\n    // register GC hooks if present\n    if (\n      this.elementsLookup.has(\"__gc_allocate\") &&\n      this.elementsLookup.has(\"__gc_link\") &&\n      this.elementsLookup.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (flag == DecoratorFlags.BUILTIN) {\n          if (decorator.range.source.isLibrary) {\n            presentFlags |= flag;\n          } else {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          }\n        } else if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias globally if explicitly annotated @global or exported from a top-level library file\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n      }\n    }\n    // builtins use the global name directly\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\n      element.internalName = declaration.programLevelInternalName;\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          // this.warning( // TODO\n          //   DiagnosticCode.Operation_not_supported,\n          //   implementsTypes[i].range\n          // );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    externalIdentifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = externalIdentifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = externalIdentifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if a top-level export of a library file\n    var source = externalIdentifier.range.source;\n    if (source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          externalIdentifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n\n    // add module level export if a top-level export of an entry file\n    } else if (source.isEntry) {\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\n        element,\n        identifier: externalIdentifier\n      });\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (this.elementsLookup.has(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          <Element>this.elementsLookup.get(referencedName),\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          if (existingExport.element !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: namespace,\n            identifier: declaration.name\n          });\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.INLINE |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: global,\n            identifier: declaration.name\n          });\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is a database */\n  DATABASE = 1 << 9,\n  /** Is a action */\n  ACTION = 1 << 10,\n  /** Is a ignore */\n  IGNORE = 1 << 11\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    // case DecoratorKind.DATABASE: return DecoratorFlags.DATABASE;\n    // case DecoratorKind.IGNORE: return DecoratorFlags.IGNORE;\n    // case DecoratorKind.ACTION: return DecoratorFlags.ACTION;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  _internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this._internalName = internalName;\n  }\n\n  static replaceComma(str: string): string {\n    if (!str) return str;\n    var result  =  \"\";\n    for (let ch of str) {\n      result +=  ch == \",\" ? \"_\" : ch;\n    }\n    return result;\n  }\n\n  get internalName(): string {\n    return Element.replaceComma(this._internalName);\n  }\n\n  set internalName(internalName: string) {\n    this._internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(`duplicate local name: ${name}`);\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    if (category == DiagnosticCategory.ERROR) {\n      console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n      console.log(<string>new Error(\"stack\").stack);\n      throw <string>new Error(\"stack\").stack;\n    }\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport const enum NativeType {\n  None = 0,        // _BinaryenTypeNone(),\n  I32  = 1,        // _BinaryenTypeInt32(),\n  I64  = 2,        // _BinaryenTypeInt64(),\n  F32  = 3,        // _BinaryenTypeFloat32(),\n  F64  = 4,        // _BinaryenTypeFloat64(),\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\n  Auto = -1        // _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = memory.allocate(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n      memory.free(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocPtrArray(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0; // for free'ing\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    memory.free(this.cachedByValue);\n    memory.free(this.cachedTemporaryName);\n    memory.free(this.cachedPrecomputeName);\n    memory.free(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: FunctionRef[] = [];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      this.options.isWasm64\n        ? Module.MAX_MEMORY_WASM64\n        : Module.MAX_MEMORY_WASM32,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    var functionTableExported = false;\n    if (functionTableSize) {\n      module.setFunctionTable(functionTable);\n      module.addTableExport(\"0\", \"table\");\n      functionTableExported = true;\n    }\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\n    }\n\n    // set up module exports\n    for (let [name, moduleExport] of program.moduleLevelExports) {\n      this.makeModuleExport(name, moduleExport.element);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      }\n    }\n\n    switch (element.kind) {\n\n      // export global\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<Global>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<EnumValue>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n\n      // export function\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n\n      // export getter and setter\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>element).getterPrototype);\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterPrototype;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export a getter and a setter\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // skip prototype and export instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          let ctor = instance.constructorInstance;\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n\n      // all possible members already handled above\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE: break;\n\n      default: assert(false);\n    }\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration, global.parent);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (declaration !== null && declaration.initializer !== null) {\n      if (!initExpr) {\n        initExpr = this.compileExpression(\n          declaration.initializer,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        let initExpr: ExpressionRef;\n        if (valueDeclaration.value) {\n          initExpr = this.compileExpression(\n            <Expression>valueDeclaration.value,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueDeclaration.value.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              valueDeclaration.range\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          previousValueIsMut = true;\n        } else {\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration, instance.prototype.parent); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let element = fileLevelExports.get(\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\n      );\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.ref);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    try {\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        let exp = <CallExpression>expression;\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.SUPER: {\n        expr = this.compileNopExpression();\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n    } catch (exception) {\n      let normalizePath = expression.range.source.normalizedPath;\n      console.log(`Compile expression failure. The normalizePath: ${normalizePath} at line: ${expression.range.line} column: ${expression.range.column}.`);\n      throw exception;\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.resolver.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(\n            prototype,\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n      case ElementKind.CLASS: {\n        return module.createNop();\n      }\n      case ElementKind.PROPERTY: // TODO\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        this.currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\n    return ret;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  compileNopExpression(): ExpressionRef {\n    var module = this.module;\n    return module.createNop();\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expr = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(compiledValues[i]);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var currentFunction = this.currentFunction;\n    var tempLocal = currentFunction.getTempLocal(arrayType, false);\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      compileAllocate(this, classReference, expression)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the top-most visible constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance: Function | null = null;\n    do {\n      constructorInstance = currentClassInstance.constructorInstance;\n      if (constructorInstance) break; // TODO: check visibility\n    } while (currentClassInstance = currentClassInstance.base);\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>target).getterPrototype;\n        if (prototype) {\n          let instance = this.resolver.resolveFunction(prototype, null);\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.parent);\n            assert(parent.kind == ElementKind.CLASS);\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr, inline);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, 0, inline);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement,\n  parentElement: Element | null = null\n): void {\n  mangleImportName_moduleName = parentElement ? parentElement.simpleName : declaration.range.source.simplePath;\n  mangleImportName_elementName = element.simpleName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","import {\n  SerializeInserter,\n  InsertPoint,\n  TypeNodeInfo,\n  VarialbeKind,\n  SuperInserter\n} from \"./inserter\";\n\nimport {\n  Type,\n} from \"./types\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  DecoratorNode,\n  SignatureNode,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  NodeKind,\n  ParameterNode,\n  Expression,\n  VariableLikeDeclarationStatement,\n  StringLiteralExpression,\n  CommonTypeNode\n} from \"./ast\";\n\nimport {\n  AstUtil\n} from \"./util/astutil\";\n\nclass Struct {\n\n  name: string;\n  base: string;\n  fields: Array<Object> = new Array<Object>();\n}\n\nclass AbiTypeAlias {\n  new_type_name: string;\n  type: string;\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\nclass Action {\n\n  name: string;\n  type: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string) {\n    this.name = name;\n    this.type = type;\n  }\n}\n\nexport class AbiHelper {\n\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"bool\", \"uint8\"], // eos not support the bool\n    [\"f32\", \"float32\"],\n    [\"f64\", \"float64\"],\n    [\"boolean\", \"uint8\"], // eos not suppot the bool\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass Table {\n  name: string;\n  type: string;\n  index_type: string = \"i64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string, indexType:string = \"i64\") {\n    this.name = name;\n    this.type = type;\n    this.index_type = indexType;\n  }\n}\n\nexport class Abi {\n\n  abiInfo: {\n    version: string,\n    types: Array<AbiTypeAlias>,\n    structs: Array<Struct>,\n    actions: Array<Action>,\n    tables: Array<Table>\n  };\n\n  dispatch: string;\n\n  program: Program;\n\n  abiTypeLookup: Map<string, string> = new Map();\n\n  typeAliasSet: Set<string> = new Set<string>();\n\n  structsLookup: Map<string, Struct> = new Map();\n\n  elementLookup: Map<string, Element> = new Map();\n\n  insertPointsLookup: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n  constructor(program: Program) {\n\n    this.program = program;\n\n    this.abiInfo = {\n      version: \"ultraio:1.0\",\n      types: new Array<AbiTypeAlias>(),\n      structs: new Array<Struct>(),\n      actions: new Array<Action>(),\n      tables: new Array<Table>()\n    };\n\n    this.abiTypeLookup = AbiHelper.abiTypeLookup;\n  }\n\n  /**\n  *  Add abi struct for abi info.\n  */\n  resolveSignatureToAbiStruct(methodName: string, signature: SignatureNode): Struct {\n\n    var struct = new Struct();\n    struct.name = methodName;\n    struct.base = \"\";\n\n    var parameters: ParameterNode[] = signature.parameters; \n    for (let parameter of parameters) {\n      let type: CommonTypeNode = parameter.type;\n      let typeInfo = new TypeNodeInfo(this.program, type);\n      let abiType = typeInfo.isArray ? `${typeInfo.ascBasicType}[]` : typeInfo.declareType;\n      this.addAbiTypeAlias(typeInfo);\n      struct.fields.push({ \"name\" : parameter.name.range.toString(), \"type\": abiType });\n    }\n    return struct;\n  }\n\n  addAbiTypeAlias(typeNodeInfo: TypeNodeInfo): void {\n    var typeKindName = typeNodeInfo.ascBasicType;\n\n    var basicElement = typeNodeInfo.getAscBasicElement();\n    if (basicElement &&  basicElement.kind == ElementKind.CLASS_PROTOTYPE) {\n      let classPrototype = <ClassPrototype>basicElement;\n      this.parseClassPrototypeToStruct(classPrototype);\n    }\n\n    if (!this.typeAliasSet.has(typeKindName)) {\n      // It's the assemblyscript internal type\n      let originalTypeName = this.findContractOriginalType(typeKindName);\n      let wasmType = this.abiTypeLookup.get(originalTypeName);\n      // console.log(`addAbiTypeAlias: ${typeKindName}`);\n      if (wasmType) {\n        this.abiInfo.types.push(new AbiTypeAlias(typeKindName, wasmType));\n      }\n      this.typeAliasSet.add(typeKindName);\n    }\n  }\n\n  /**\n  * Find the original type name,\n  * eg: declare type account_name = u64;\n        declare type account_name_alias = account_name;\n\n    findContractOriginalType(\"account_name_alias\") return \"account_name\";\n  */\n  findContractOriginalType(typeKindName: string): string {\n\n    var abiType: string | null = this.abiTypeLookup.get(typeKindName);\n    if (abiType) {\n      return typeKindName;\n    }\n    var typeAlias = this.program.typeAliases.get(typeKindName);\n    if (typeAlias) {\n      let commonaTypeName = typeAlias.type.range.toString();\n      return this.findContractOriginalType(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find the script original type name\n  * @param typeKindName\n  */\n  findScriptOriginalTypeName(typeKindName: string): string {\n    var typeAlias = this.program.typeAliases.get(typeKindName);\n    if (typeAlias) {\n      let commonaTypeName = typeAlias.type.range.toString();\n      return this.findScriptOriginalTypeName(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find assemblyscript original type name\n  * eg: account_name return 'u64'\n  *\n  * @param typeKindName\n  */\n  findScriptOriginalType(typeKindName: string): Type | null {\n    var originalName = this.findScriptOriginalTypeName(typeKindName);\n    //Get the AssemblyScript original type\n    var scriptType: Type | null = this.program.typesLookup.get(originalName);\n    return scriptType;\n  }\n\n  isWrapWithQutation(str: string): bool {\n\n    if (str == undefined || str == null) {\n      return false;\n    }\n    return str.charAt(0) == \"\\\"\" && str.charAt(str.length - 1) == \"\\\"\"\n      ? true : false;\n  }\n\n  /**\n  *  Check that element whether is functionPrototype\n  *\n  */\n  isActionFuncPrototype(element: Element): bool {\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return AstUtil.haveSpecifyDecorator(funcType.declaration, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  /**\n  * Resolve the class database decoreator\n  */\n  resolveDatabaseDecorator(statement : DeclarationStatement): void {\n    if (!statement.decorators) {\n      return ;\n    }\n    for (let decorator of statement.decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments\n        if (decorator.arguments.length < 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n        let type = decorator.arguments[0].range.toString();\n        let name = this.getExprValue(decorator.arguments[1]);\n        this.checkDatabaseName(name);\n        this.abiInfo.tables.push(new Table(name, type));\n        this.resolveExpressionToStruct(decorator.arguments[0]);\n      }\n    }\n  }\n\n  /**\n   * Get the expression value\n   * @param expr\n   */\n  getExprValue(expr: Expression): string {\n    var argu: string = expr.range.toString();\n    if (this.isWrapWithQutation(argu)) {\n      return argu.substring(1, argu.length - 1);\n    }\n    var internalName = AstUtil.getInternalName(expr);\n    var element: Element | null = this.program.elementsLookup.get(internalName);\n    if (element) {\n      let declaration: VariableLikeDeclarationStatement | null = (<VariableLikeElement>element).declaration;\n      if (declaration && declaration.initializer) {\n        let literal: StringLiteralExpression = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Cann't find constant ${internalName}`);\n  }\n\n  resolveExpressionToElement(expr: Expression): Element {\n    var internalPath = expr.range.source.internalPath;\n    var name = expr.range.toString();\n    var internalName = `${internalPath}/${name}`;\n    var element = this.program.elementsLookup.get(internalName);\n    if (!element || element.kind != ElementKind.CLASS_PROTOTYPE) {\n      throw new Error(`Element ${internalName} not found, pleasure make sure that class ${internalName} was existed.`);\n    }\n    return element;\n  }\n\n  /**\n  *  Get struct from expression.\n  */\n  resolveExpressionToStruct(expr: Expression): void {\n    var internalName = AstUtil.getInternalName(expr);\n    this.retrieveStructByInternalName(internalName);\n  }\n\n  retrieveStructByInternalName(internalName: string): void {\n    var element = this.program.elementsLookup.get(internalName);\n    if (!element || element.kind != ElementKind.CLASS_PROTOTYPE) {\n      throw new Error(`Element ${internalName} not found, pleasure make sure that class ${internalName} was existed.`);\n    }\n    var classPrototype = <ClassPrototype>element;\n    this.parseClassPrototypeToStruct(classPrototype);\n  }\n\n  parseClassPrototypeToStruct(classPrototype: ClassPrototype): Struct | null {\n    var members: DeclarationStatement[] = classPrototype.declaration.members;\n    var struct = new Struct();\n    struct.name = classPrototype.simpleName;\n    if (this.abiTypeLookup.get(struct.name)) {\n      return null;\n    }\n    struct.base = \"\";\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let fieldDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let fieldName = member.name.range.toString();\n        let fieldType: CommonTypeNode | null = fieldDeclare.type;\n\n        if (fieldType && !AstUtil.haveSpecifyDecorator(fieldDeclare, DecoratorKind.IGNORE)) {\n          let declaration: TypeNodeInfo = new TypeNodeInfo(this.program, fieldType);\n          let fieldTypeName = fieldType.range.toString();\n          if (declaration.isIgnore()) {\n            continue;\n          }\n          let type =  declaration.isArray ? `${AstUtil.getBasicTypeName(fieldTypeName)}[]` : fieldTypeName;\n          struct.fields.push({\"name\": fieldName, \"type\": type });\n          this.addAbiTypeAlias(declaration);\n        }\n      }\n    }\n    this.addStruct(struct);\n    return struct;\n  }\n\n  addStruct(struct: Struct): void {\n\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n  checkName(str: string): void {\n    assert(str.length > 0, `Action name should not empty.`);\n    assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n  }\n\n  checkDatabaseName(name: string): void {\n    assert(name.length > 0, `Table name should not empty.`);\n    assert(name.length <= 12, `Table name Name:${name} should be less than 12 characters.`);\n    const chars = \"abcdefghijklmnopqrstuvwxyz12345.\";\n    \n    for (let aChar of name) {\n      assert(chars.includes(aChar), `Table name:${name} should only contain the below chars:${chars}`); \n    }\n  }\n\n  /**\n  *  Resolve ClassPrototype to dispatcher\n  */\n  resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n    if (clzPrototype.instanceMembers && AstUtil.extendedContract(clzPrototype)) {\n      let body = new Array<string>();\n      let hasActionDecorators = false;\n      let contractName = clzPrototype.simpleName; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  if (receiver == code) {`);\n      body.push(`    let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`    ${contractVarName}.setActionName(actH, actL);`);\n      body.push(`    ${contractVarName}.onInit();`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let instance of clzPrototype.instanceMembers.values()) {\n        // if (instance.kind == ElementKind.FUNCTION_PROTOTYPE && instance.hasDecorator(DecoratorFlags.ACTION)) {\n          if (instance.kind == ElementKind.FUNCTION_PROTOTYPE && this.isActionFuncPrototype(instance)) {\n          this.resolveFunctionPrototype(<FunctionPrototype>instance);\n          hasActionDecorators = true;\n          let declaration: FunctionDeclaration = (<FunctionPrototype>instance).declaration; // FunctionDeclaration\n\n          let funcName = declaration.name.range.toString();\n          let types = declaration.signature.parameters; // FunctionDeclaration parameter types\n\n          this.checkName(funcName);\n          body.push(`    if (${contractVarName}.isAction(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (let index = 0; index < types.length; index++) {\n            let type: ParameterNode = types[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n\n            let abiType: TypeNodeInfo = new TypeNodeInfo(this.program, type.type);\n\n            if (abiType.isArray) {\n              if (abiType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${abiType.ascFactType}>();`);\n              } else if (abiType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${parameterName} = ds.readVector<u8>();`);\n              } else if (abiType.kind == VarialbeKind.STRING) {\n                body.push(`      let ${parameterName} = ds.readStringVector();`);\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${abiType.ascBasicType}>();`);\n              }\n            } else {\n              if (abiType.kind == VarialbeKind.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${parameterName} = ds.read<u8>() != 0;`);\n              } else if (abiType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${abiType.ascFactType}>();`);\n              } else {\n                let internalName = AstUtil.getInternalName(type.type);\n                this.retrieveStructByInternalName(internalName);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n          body.push(`      ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n          body.push(\"    }\");\n        }\n      }\n      body.push(`    ${contractVarName}.onStop();`);\n      body.push(\"  }\");\n      this.resolveDatabaseDecorator(clzPrototype.declaration);\n      if (hasActionDecorators) {\n        return body;\n      }\n    }\n    return new Array();\n  }\n\n  /**\n   * Resolve funciton prototype to abi\n   */\n  resolveFunctionPrototype(funcPrototype: FunctionPrototype): void {\n\n    var declaration: FunctionDeclaration = funcPrototype.declaration;\n    var funcName = declaration.name.range.toString();\n    var signature = funcPrototype.declaration.signature;\n    var struct = this.resolveSignatureToAbiStruct(funcName, signature);\n\n    this.addStruct(struct);\n    this.abiInfo.actions.push(new Action(funcName, funcName));\n  }\n\n  printTypeAliasInfo(): void {\n\n    var typesLookupKeys = this.program.typesLookup.keys();\n    for (let key of typesLookupKeys) {\n      let value = this.program.typesLookup.get(key);\n      if (value) {\n        console.log(`type look up key: ${key}. value: ${value.kind}`);\n      }\n    }\n\n    var typesAliasKeys = this.program.typeAliases.keys();\n    for (let key of typesAliasKeys) {\n      let value = this.program.typeAliases.get(key);\n      if (value) {\n        console.log(`type alias key: ${key}. Value: ${value.type.range.toString()}`);\n      }\n    }\n  }\n\n  printElementLookUpInfo(): void {\n    var keys = this.program.elementsLookup.keys();\n    for (let key of keys) {\n      let value = this.program.elementsLookup.get(key);\n      if (value) {\n        console.log(`Element lookup key:${key}.Kind:${ElementKind[value.kind]}`);\n      }\n    }\n  }\n\n  private printClassProtoTypeInfo(): void {\n    var keys = this.program.elementsLookup.keys();\n    for (let key of keys) {\n      let value: Element | null = this.program.elementsLookup.get(key);\n      if (value && value.kind == ElementKind.CLASS_PROTOTYPE) {\n        // console.log(`Element lookup key:${key}.Kind:${value.kind}`);\n        let classPrototype: ClassPrototype = <ClassPrototype>value;\n        if (classPrototype.basePrototype) {\n          console.log(`Element lookup key:${key}. Base prototype:${classPrototype.basePrototype.simpleName}`);\n        }\n      }\n    }\n  }\n\n  resolve(): void {\n\n    // this.printTypeAliasInfo();\n    // this.printElementLookUpInfo();\n    // this.printClassProtoTypeInfo();\n\n    var serializeInserter: SerializeInserter = new SerializeInserter(this.program);\n    var superInserter: SuperInserter = new SuperInserter(this.program);\n    var serializePoints = serializeInserter.getInsertPoints();\n    var superPoints = superInserter.getInsertPoints();\n\n    for (let _points of superPoints) {\n      serializePoints.push(_points);\n    }\n\n    this.insertPointsLookup = InsertPoint.toSortedMap(serializePoints);\n    var dispatchBuffer = new Array<string>();\n\n    for (let element of this.program.elementsLookup.values()) {\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(clzPrototype.internalName)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          classDispatch.forEach((value: string, index: number): void => {\n            dispatchBuffer.push(value);\n          });\n          this.elementLookup.set(clzPrototype.internalName, element);\n        }\n      }\n    }\n\n    if (dispatchBuffer.length == 0) {\n      // throw new Error(`The smart contract must specify one action.`);\n    }\n\n    this.dispatch = this.assemblyDispatch(dispatchBuffer);\n  }\n\n  hasElement(name: string): bool {\n    var element: Element | null = this.program.elementsLookup.get(name);\n    return element ? true : false;\n  }\n\n  // Concat the dispatch message\n  private assemblyDispatch(body: Array<string>): string {\n\n    var sb = new Array<string>();\n    sb.push(\"export function apply(receiver: u64, code: u64, actH: u64, actL: u64): void {\");\n\n    body.forEach((value: string, index: number): void => {\n      sb.push(value);\n    });\n    sb.push(\"}\");\n\n    return sb.join(\"\\n\");\n  }\n}\n","import {\n    DeclarationStatement,\n    DecoratorKind,\n    Node,\n    ClassDeclaration\n} from \"../ast\";\n\nimport { \n    ClassPrototype\n} from \"../program\";\n\nexport class AstUtil {\n\n    /**\n     * Check the statment weather have the specify the decorator\n     * @param statement Ast declaration statement\n     * @param decorator The specify decorators\n     */\n    static haveSpecifyDecorator(statement: DeclarationStatement, decorator: DecoratorKind): bool {\n        var decorators = statement.decorators;\n        if (!decorators) {\n            return false;\n        }\n        for (let _decorator of decorators) {\n            if (_decorator.decoratorKind == decorator) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName;\n    }\n\n    /**\n     * Get the basic type name\n     * If the type name is string[], so the basic type name is string\n     * @param declareType\n     */\n    static getBasicTypeName(declareType: string): string {\n        var bracketIndex = declareType.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = declareType.indexOf(\" \") == -1 ? bracketIndex : declareType.indexOf(\" \");\n            return declareType.substring(0, index);\n        }\n        bracketIndex = declareType.indexOf(\"<\");\n        if (bracketIndex != -1) {\n            let endIndex = declareType.indexOf(\">\");\n            return declareType.substring(bracketIndex + 1, endIndex);\n        }\n        return declareType;\n    }\n\n    /**\n     * Whether the declare type is array or not\n     */\n    static isArray(declareType: string): bool {\n        return declareType.includes(\"[\") ||\n            (declareType.includes(\"Array\") && declareType.includes(\"<\") \n            && declareType.replace(\"Array\", \"\").trim().indexOf(\"<\") == 0);\n    }\n\n    /**\n     * Test the class whether to implments the Serializable interface\n     */\n    static impledSerializable(classDeclaration: ClassDeclaration): bool {\n        const interfaceName = \"Serializable\";\n        var implementsTypes = classDeclaration.implementsTypes;\n        if (implementsTypes) {\n            for (let _type of implementsTypes) {\n                if (_type.name.range.toString() == interfaceName) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static extendedContract(classPrototype: ClassPrototype): bool {\n        const contractName = \"Contract\";\n        var basePrototype: ClassPrototype | null = classPrototype.basePrototype;\n        if (basePrototype && basePrototype.simpleName == contractName) {\n            return true;\n        }\n        return false;\n    }\n\n}","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              contextualTypeArguments,\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    {\n      let typeArgumentNodes = typeNode.typeArguments;\n      if (typeArgumentNodes) {\n        let numTypeArguments = typeArgumentNodes.length;\n        let paramTypes = new Array<Type>(numTypeArguments);\n        for (let i = 0; i < numTypeArguments; ++i) {\n          let paramType = this.resolveType( // reports\n            typeArgumentNodes[i],\n            contextualTypeArguments,\n            reportMode\n          );\n          if (!paramType) return null;\n          paramTypes[i] = paramType;\n        }\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\n          let instanceKey = typesToString(paramTypes);\n          if (instanceKey.length) {\n            localName += \"<\" + instanceKey + \">\";\n            globalName += \"<\" + instanceKey + \">\";\n          }\n        } else if (contextualTypeArguments) {\n          let placeholderType = contextualTypeArguments.get(globalName);\n          if (placeholderType) return placeholderType;\n        }\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        return type;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          null,\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType(\n          (<AssertionExpression>expression).toType,\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this.program, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = prototype.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(prototype.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (prototype.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Copy contextual type arguments so we don't pollute the original map\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    if (prototype.constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        prototype.constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\n      } else {\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let typeParameterNodes = prototype.declaration.typeParameters;\n      let expectedTypeArguments = typeParameterNodes.length;\n      assert(expectedTypeArguments > 0);\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\n      if (expectedTypeArguments != actualTypeArguments) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\n          );\n        }\n        return null;\n      }\n      resolvedTypeArguments = this.resolveTypeArguments(\n        typeParameterNodes,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return new binaryen.Module(this.ref).emitText();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return new binaryen.Module(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__17__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[ptr + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[ptr + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags,\n  Global,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case \"isManaged\": { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"memory.size\": { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // user-defined diagnostic macros\n\n    case \"ERROR\": {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case \"WARNING\": {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case \"INFO\": {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n\n    // gc\n\n    case \"iterateRoots\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  // __gc_allocate(size, markFn)\n  if (program.hasGC && classInstance.type.isManaged(program)) {\n    let allocateInstance = assert(program.gcAllocateInstance);\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset),\n        module.createI32(\n          ensureGCHook(compiler, classInstance)\n        )\n      ],\n      options.nativeSizeType\n    );\n\n  // memory.allocate(size)\n  } else {\n    let allocateInstance = program.memoryAllocateInstance;\n    if (!allocateInstance) {\n      program.error(\n        DiagnosticCode.Cannot_find_name_0,\n        reportNode.range, \"memory.allocate\"\n      );\n      return module.createUnreachable();\n    }\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset)\n      ],\n      options.nativeSizeType\n    );\n  }\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\");\n  if (!stringType) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsLookup.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"iv\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"iv\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for internals)\n  var members = classInstance.members;\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(0);\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  functionTable[gcHookIndex] = module.addFunction(\n    classInstance.internalName + \"~gc\",\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  return gcHookIndex;\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","import {\n    AbiHelper\n} from \"./abi\";\n\nimport {\n    ClassDeclaration,\n    CommonTypeNode,\n    DecoratorKind,\n    FieldDeclaration,\n    NodeKind,\n    TypeNode,\n    BlockStatement,\n    Statement,\n    ExpressionStatement,\n    CallExpression,\n    FunctionDeclaration\n} from \"./ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    FieldPrototype,\n    FunctionPrototype,\n    Program,\n} from \"./program\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    Type,\n    TypeKind\n} from \"./types\";\n\nimport {\n    AstUtil\n} from \"./util/astutil\";\n\nexport enum VarialbeKind {\n    BOOL, // boolean and bool\n    NUMBER, // original type except boolean and bool\n    STRING, // string kind\n    ARRAY, // array kind\n    CLASS // class kind\n}\n\nexport class InsertPoint {\n\n    protected range: Range;\n    protected insertCode: string;\n    protected code: string[];\n\n    private static descComparator = (a: InsertPoint, b: InsertPoint): i32 => {\n        return (b.line - a.line);\n    }\n\n    static toSortedMap(insertPoints: Array<InsertPoint>): Map<string, Array<InsertPoint>> {\n\n        var map = new Map<string, Array<InsertPoint>>();\n        for (let insertPoint of insertPoints) {\n            let normalizedPath = insertPoint.normalizedPath;\n            let insertPointArr: Array<InsertPoint> | null = map.get(normalizedPath);\n\n            if (!insertPointArr) {\n                insertPointArr = new Array<InsertPoint>();\n                map.set(normalizedPath, insertPointArr);\n            }\n            insertPointArr.push(insertPoint);\n        }\n\n        for (let [_, values] of map) {\n            values.sort(InsertPoint.descComparator);\n        }\n        return map;\n    }\n\n    constructor(range: Range, insertCode: string = \"\") {\n        this.range = range;\n        this.insertCode = insertCode;\n        this.code = [];\n    }\n\n    get line(): i32 {\n        return (this.range.column == 0) ? this.range.atEnd.line - 1 : this.range.atEnd.line;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    toString(): string {\n        return this.range.toString();\n    }\n\n    addInsertCode(code: string): void {\n        this.code.push(code);\n    }\n\n    getInsertCode(): string {\n        return this.insertCode;\n    }\n}\n\n/**\n * Various type\n * 1. abi Type,\n * 2. declare type, account_name, u64, \n * 3. asc type, u64, u64[]\n * 4. asc basic type, u64\n */\nexport class TypeNodeInfo {\n\n    kind: VarialbeKind;\n\n    program: Program;\n\n    abiTypeLookup: Map<string, string> = new Map();\n\n    commonTypeNode: CommonTypeNode;\n    /** Parameter name, u64 */\n    declareType: string;\n    /** Base Parameter type */\n    ascBasicType: string;\n    /** The field fact type, eg: u64, u32 */\n    ascFactType: string;\n    /** Whether parameter or field is array  */\n    get isArray(): bool {\n        return AstUtil.isArray(this.declareType);\n    }\n\n    constructor(program: Program, commonTypeNode: CommonTypeNode) {\n        this.program = program;\n        this.commonTypeNode = commonTypeNode;\n        this.abiTypeLookup = AbiHelper.abiTypeLookup;\n        this.resolve();\n    }\n\n    /**\n     * string TypeKind is 9, and usize TypeKind is also 9.\n     * @param type\n     */\n    private resolve(): void {\n        var declareType = this.commonTypeNode.range.toString();\n        this.declareType = declareType;\n\n        var basicTypeName: string = AstUtil.getBasicTypeName(declareType);\n        this.ascBasicType = basicTypeName;\n        if (basicTypeName == \"string\" || basicTypeName == \"String\") {\n            this.kind = VarialbeKind.STRING;\n            this.ascFactType = \"string\";\n            return;\n        }\n\n        var _ascFactType: Type | null = this.findOriginalAscType(basicTypeName);\n        if (!_ascFactType) {\n            this.kind = VarialbeKind.CLASS;\n        } else if (_ascFactType.kind == TypeKind.BOOL) {\n            this.kind = VarialbeKind.BOOL;\n            this.ascFactType = _ascFactType.toString();\n        } else {\n            this.kind = VarialbeKind.NUMBER;\n            this.ascFactType = _ascFactType.toString();\n        }\n    }\n\n    getAscBasicElement(): Element | null {\n        var internalPath = this.commonTypeNode.range.source.internalPath;\n        var basicTypePath = `${internalPath}/${this.ascBasicType}`;\n        var basicElement = this.program.elementsLookup.get(basicTypePath);\n        return basicElement;\n    }\n\n    isIgnore(): boolean {\n        var basicType = this.declareType;\n        if (this.declareType.indexOf(\"<\") != -1) {\n            basicType = this.declareType.substr(0,this.declareType.indexOf(\"<\")).trim();\n        }\n\n        var internalPath = `${this.commonTypeNode.range.source.internalPath}/${basicType}`;\n        var element: Element | null = this.program.elementsLookup.get(internalPath);\n        // console.log(`isIgnore basictype: ${basicType} internalPath: ${internalPath}`);\n\n        if (element) {\n            if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let prototype = <ClassPrototype>element;\n                return AstUtil.haveSpecifyDecorator(prototype.declaration, DecoratorKind.IGNORE);\n            }\n        } else {\n            var libEle: Element | null = this.program.elementsLookup.get(basicType);\n            if (libEle && libEle.kind == ElementKind.CLASS_PROTOTYPE) {\n                let prototype = <ClassPrototype>libEle;\n                return AstUtil.haveSpecifyDecorator(prototype.declaration, DecoratorKind.IGNORE); \n            }\n        }\n        return false;\n    }\n\n    /**\n     *  Find the script original type name\n     *  @param typeKindName\n     *\n     */\n    private findOriginalAscTypeName(typeKindName: string): string {\n        var typeAlias = this.program.typeAliases.get(typeKindName);\n        if (typeAlias) {\n            let commonaTypeName = typeAlias.type.range.toString();\n            return this.findOriginalAscTypeName(commonaTypeName);\n        }\n        return typeKindName;\n    }\n\n    /**\n    * Find assemblyscript original type name\n    * eg: account_name return 'u64'\n    *\n    * @param typeKindName\n    */\n    private findOriginalAscType(typeKindName: string): Type | null {\n        var originalName = this.findOriginalAscTypeName(typeKindName);\n        //Get the AssemblyScript original type\n        var originalType: Type | null = this.program.typesLookup.get(originalName);\n        return originalType;\n    }\n}\n\n/**\n * Serialiize Generateor\n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needImplSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needImplDeSerialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needImplPrimary: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n    }\n\n    toGenerateFlag(): bool {\n\n        if (!this.classPrototype.instanceMembers) {\n            return false;\n        }\n\n        for (let [_, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                let functionPrototype = <FunctionPrototype>element;\n                if (functionPrototype.declaration.name.range.toString() == this.SERIALIZE_METHOD_NAME) {\n                    this.needImplSerialize = false;\n                }\n                if (functionPrototype.declaration.name.range.toString() == this.DESERIALIZE_METHOD_NAME) {\n                    this.needImplDeSerialize = false;\n                }\n                if (functionPrototype.declaration.name.range.toString() == this.PRIMARY_METHOD_NAME) {\n                    this.needImplPrimary = false;\n                }\n            }\n        }\n        return this.needImplDeSerialize || this.needImplPrimary || this.needImplSerialize;\n    }\n\n    checkFieldImplSerialize(typeNode: CommonTypeNode): bool {\n\n        var internalName = AstUtil.getInternalName(typeNode);\n        var element: Element | null = this.classPrototype.program.elementsLookup.get(internalName);\n\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = AstUtil.impledSerializable((<ClassPrototype>element).declaration);\n            if (!hasImpl) {\n                throw new Error(`Class ${internalName} has not implement the interface serializable`);\n            }\n        }\n        return true;\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoints(): SerializePoint {\n\n        var serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.classDeclaration = this.classPrototype.declaration;\n        serializePoint.needDeserialize = this.needImplDeSerialize;\n        serializePoint.needSerialize = this.needImplSerialize;\n        serializePoint.needPrimaryKey = this.needImplPrimary;\n\n        if (!this.classPrototype.instanceMembers) {\n            return serializePoint;\n        }\n\n        var hasPrimaryidDecorator = false;\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = fieldPrototype.declaration;\n                let commonType: CommonTypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.TYPE && \n                    !AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.IGNORE)) {\n                    let typeNode = <TypeNode>commonType;\n                    if (this.needImplDeSerialize && this.checkFieldImplSerialize(commonType)) {\n                        serializePoint.addSerializeExpr(this.serializeField(fieldName, typeNode));\n                    }\n\n                    if (this.needImplSerialize && this.checkFieldImplSerialize(commonType)) {\n                        serializePoint.addDeserializeExpr(this.deserializeField(fieldName, typeNode));\n                    }\n                }\n\n                if (commonType && commonType.kind == NodeKind.TYPE && AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.PRIMARYID) ) {\n                    if (hasPrimaryidDecorator) {\n                        throw new Error(`Class ${this.classPrototype.simpleName} should only have only one primaryid decorators.`);\n                    }\n                    hasPrimaryidDecorator = true;\n                    let  paramDeclaration: TypeNodeInfo = new TypeNodeInfo(this.classPrototype.program, commonType);\n                    if ( paramDeclaration.ascFactType != 'u64'){\n                        throw new Error(`Class ${this.classPrototype.simpleName} field ${fieldName}'s type should be id_type.`);\n                    }\n                    serializePoint.addPrimaryKeyExpr(`      return this.${fieldName};`)\n                }\n            }\n        }\n\n        if (!hasPrimaryidDecorator) {\n            serializePoint.addPrimaryKeyExpr(`      return 0;`);\n        }\n        serializePoint.addPrimaryKeyExpr(`   }`);\n        serializePoint.addDeserializeExpr(`   }`);\n        serializePoint.addSerializeExpr(`   }`);\n\n        return serializePoint;\n    }\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: TypeNode): string {\n\n        var paramDeclaration: TypeNodeInfo = new TypeNodeInfo(this.classPrototype.program, typeNode);\n        var body: Array<string> = new Array<string>();\n\n        if (paramDeclaration.isArray) {\n            if (paramDeclaration.kind == VarialbeKind.NUMBER) {\n                body.push(`      ds.writeVector<${paramDeclaration.ascBasicType}>(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.BOOL) {\n                body.push(`      ds.writeVector<u8>(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.STRING) {\n                body.push(`      ds.writeStringVector(this.${fieldName});`);\n            } else {\n                body.push(`      ds.writeComplexVector<${paramDeclaration.ascBasicType}>(this.${fieldName});`);\n            }\n        } else {\n            if (paramDeclaration.kind == VarialbeKind.STRING) {\n                body.push(`      ds.writeString(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.BOOL) {\n                body.push(`      ds.write<u8>(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.NUMBER) {\n                body.push(`      ds.write<${paramDeclaration.declareType}>(this.${fieldName});`);\n            } else {\n                body.push(`      this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return body.join(\"\\n\");\n    }\n\n    deserializeField(fieldName: string, type: TypeNode): string {\n\n        var variableType: TypeNodeInfo = new TypeNodeInfo(this.classPrototype.program, type);\n\n        var body: Array<string> = new Array<string>();\n\n        if (variableType.isArray) {\n            if (variableType.kind == VarialbeKind.NUMBER) {\n                body.push(`      this.${fieldName} = ds.readVector<${variableType.ascFactType}>();`);\n            } else if (variableType.kind == VarialbeKind.BOOL) {\n                body.push(`      this.${fieldName} = ds.readVector<u8>();`);\n            } else if (variableType.kind == VarialbeKind.STRING) {\n                body.push(`      this.${fieldName} = ds.readStringVector();`);\n            } else {\n                body.push(`      this.${fieldName} = ds.readComplexVector<${variableType.ascBasicType}>();`);\n            }\n        } else {\n            if (variableType.kind == VarialbeKind.STRING) {\n                body.push(`      this.${fieldName} = ds.readString();`);\n            } else if (variableType.kind == VarialbeKind.BOOL) {\n                body.push(`      this.${fieldName} = ds.read<u8>() != 0;`);\n            } else if (variableType.kind == VarialbeKind.NUMBER) {\n                body.push(`      this.${fieldName} = ds.read<${variableType.ascFactType}>();`);\n            } else {\n                body.push(`      this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return body.join(\"\\n\");\n    }\n}\n\nexport class SerializePoint extends InsertPoint {\n\n    private serialize: Array<string> = new Array<string>();\n\n    private deserialize: Array<string> = new Array<string>();\n\n    private primaryKey: Array<string> = new Array<string>();\n\n    needSerialize: bool;\n\n    needDeserialize: bool;\n\n    needPrimaryKey: bool;\n\n    classDeclaration: ClassDeclaration;\n\n    constructor(range: Range) {\n        super(range.atEnd);\n        this.serialize.push(`    serialize(ds: DataStream): void {`);\n        this.deserialize.push(`    deserialize(ds: DataStream): void {`);\n\n        this.primaryKey.push(`     primaryKey(): id_type {`);\n    }\n\n    addSerializeExpr(expr: string): void {\n        this.serialize.push(expr);\n    }\n\n    addDeserializeExpr(expr: string): void {\n        this.deserialize.push(expr);\n    }\n\n    addPrimaryKeyExpr(expr: string): void {\n        this.primaryKey.push(expr);\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString() + this.classDeclaration.name.range.toString();\n    }\n\n    getInsertCode(): string {\n        var insertData = [];\n\n        if (this.needDeserialize) {\n            insertData.push(this.deserialize.join(\"\\n\"));\n        }\n        if (this.needSerialize) {\n            insertData.push(this.serialize.join(\"\\n\"));\n        }\n        if (this.needPrimaryKey) {\n            insertData.push(this.primaryKey.join(\"\\n\"));\n        }\n        return insertData.join(\"\\n\");\n    }\n}\n\nexport class SerializeInserter {\n\n    program: Program;\n\n    private serializeClassname: Set<string> = new Set<string>();\n\n    private insertPoints: Array<InsertPoint> = [];\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    resolve(): void {\n        for (let [_, element] of this.program.elementsLookup) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let classDeclaration: ClassDeclaration = (<ClassPrototype>element).declaration;\n                if (AstUtil.impledSerializable(classDeclaration)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n                    if (!generator.toGenerateFlag()) {\n                        continue;\n                    }\n\n                    let serializePoint: SerializePoint = generator.getSerializePoints();\n\n                    if (!this.serializeClassname.has(serializePoint.indentity)) {\n                        this.insertPoints.push(serializePoint);\n                        this.serializeClassname.add(serializePoint.indentity);\n                    }\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n\n}\n\nexport class SuperInserter {\n\n    program: Program;\n\n    private insertPoints: Array<InsertPoint> = [];\n\n    private classNames: Set<string> = new Set<string>();\n\n    private baseClassNames: Set<string> = new Set<string>();\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n    resolve(): void {\n        for (let [_, element] of this.program.elementsLookup) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let classPrototype = <ClassPrototype>element;\n                let classDeclaration = classPrototype.declaration;\n                let identity = classDeclaration.range.source.normalizedPath + classDeclaration.range.toString() + classDeclaration.name.range.toString();\n                // console.log(`${classPrototype.simpleName}: atEnd line: ${classPrototype.declaration.range.atEnd.line} line: ${classPrototype.declaration.range.line} end: ${classPrototype.declaration.range.end} column:${classPrototype.declaration.range.column}`);\n                if (classPrototype.basePrototype && !this.classNames.has(identity)) {\n                    this.processSuper(classPrototype);\n                    this.classNames.add(identity);\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n\n    private processSuper(classPrototype: ClassPrototype): void {\n    \n        var constructorPrototype: FunctionPrototype | null = classPrototype.constructorPrototype;\n        if (!classPrototype.basePrototype) {\n            return;\n        }\n        var baseConstructorPrototype: FunctionPrototype | null = classPrototype.basePrototype.constructorPrototype;\n        if (!constructorPrototype) {\n            return;\n        }\n        var insertCallSuper = this.checkAndGetSuperCallExpr(classPrototype, constructorPrototype.declaration);\n        if (!baseConstructorPrototype) {\n            return;\n        }\n        this.insertPoints.push(insertCallSuper);\n        var baseFunctionDeclaration = baseConstructorPrototype.declaration;\n        var body: Statement | null = baseFunctionDeclaration.body;\n\n        if (body) {\n            // var content = body.range.toString();\n            let signature = baseFunctionDeclaration.signature.range.toString();\n            let method = this.createSuperCall(classPrototype.basePrototype.simpleName, signature, body);\n\n            let range = classPrototype.basePrototype.declaration.range;\n            let indentity =  range.source.normalizedPath + range.toString()        \n            if (!this.baseClassNames.has(indentity)) {\n                this.insertPoints.push(new InsertPoint(classPrototype.basePrototype.declaration.range, method));\n                this.baseClassNames.add(indentity);\n            }\n        }\n    }\n\n    /**\n     * \n     * @param classPrototype concrete class prototype\n     * @param concreteFunctionDeclaration base class constructor\n     */\n    private checkAndGetSuperCallExpr(classPrototype: ClassPrototype, concreteFunctionDeclaration: FunctionDeclaration): InsertPoint {\n        var className = classPrototype.simpleName;\n        if (!concreteFunctionDeclaration.body) {\n            throw new Error(`Class ${className}'s constructor should have super call.${this.location(concreteFunctionDeclaration.range)}`);\n        }\n        var stmt = concreteFunctionDeclaration.body;\n        if (stmt.kind == NodeKind.BLOCK) {\n            let blockStmt = <BlockStatement>stmt;\n            let superStmt: Statement | null = null;\n            for (let _stmt of blockStmt.statements) {\n                if (_stmt.kind != NodeKind.COMMENT) {\n                   superStmt = _stmt;\n                   break;\n                }\n            }\n            if (superStmt == null || superStmt.kind != NodeKind.EXPRESSION) {\n                throw new Error(`${className}'s constructor should have super call.${this.location(concreteFunctionDeclaration.range)}`);\n            }\n            let superExpr = <ExpressionStatement> superStmt;\n            if (superExpr.expression.kind != NodeKind.CALL) {\n                throw new Error(`Class ${className}'s constructor should have super call. ${this.location(concreteFunctionDeclaration.range)}`);\n            }\n            let superCallExpr = (<CallExpression> superExpr.expression).expression.range.toString();\n            if (superCallExpr != \"super\") {\n                throw new Error(`Class ${className}'s constructor should have super call. ${this.location(concreteFunctionDeclaration.range)}`);\n            }\n            let callexpr =  superExpr.range.toString();\n            if (classPrototype.basePrototype) {\n                let baseClassName = classPrototype.basePrototype.simpleName;\n                let _superCall = `        this._${baseClassName}_${callexpr};`;\n                return new InsertPoint(superStmt.range, _superCall);\n            }\n   \n        }\n        throw new Error(`${className}'s constructor should have super call.${this.location(concreteFunctionDeclaration.range)}`);\n    }\n\n    /**\n     * Create super call function \n     */\n    private createSuperCall(baseClassname: string, signature: string, body: Statement): string {\n        if (body.kind == NodeKind.BLOCK) {\n            let blockStmt = <BlockStatement>body;\n            let content = [];\n            for (let _stmt of blockStmt.statements) {\n                if (_stmt.kind == NodeKind.COMMENT) {\n                    //Do nothing\n                    continue;\n                } else if (_stmt.kind == NodeKind.EXPRESSION) {\n                     if ((<ExpressionStatement>_stmt).expression.kind == NodeKind.CALL) {\n                       let callIdentity = (<CallExpression>(<ExpressionStatement>_stmt).expression).expression.range.toString();\n                       if (callIdentity == \"super\") {\n                           // Do nothing\n                           continue;\n                       }\n                       content.push(_stmt.range.toString());\n                     }\n                }\n                content.push(_stmt.range.toString());\n            }\n            return `    _${baseClassname}_super${signature}: void { ${content.join(\"\\n\")} }`;\n        }\n        return `    _${baseClassname}_super${signature}: void ${body.range.toString()}`;\n    }\n\n    private location(range: Range): string {\n        return  \"in \" +\n        range.source.normalizedPath +\n        \":\" +\n        range.line.toString(10) +\n        \":\" +\n        range.column.toString(10);\n    }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\n      // FIXME: doesn't honor the actual externally visible name\n      this.visitElement(moduleExport.element);\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorator.range\n        );\n      }\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET | CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression?\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) return null;\n        expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos)); // is again callable\n      }\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n"],"sourceRoot":""}