{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/util/astutil.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/inserter.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__17__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","common_1","tokenizer_1","Token","Range","NodeKind","util_1","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","SUPER","ELEMENTACCESS","PROPERTYACCESS","nodeIsGenericCallable","Node","parent","flags","CommonFlags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","range","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","text","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","length","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizedPath","normalizePath","startsWith","resolvePath","source","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","LIBRARY_PREFIX","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","assert","charCodeAt","ACTION","BUILTIN","DATABASE","EXTERNAL","GLOBAL","INLINE","IGNORE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","PATH_DELIMITER","simplePath","substring","Array","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","STATIC_DELIMITER","INSTANCE_DELIMITER","endsWith","findDecorator","decorator","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INNER_DELIMITER","LIBRARY_SUBST","FILESPACE_PREFIX","OperatorKind","diagnostics_1","types_1","ast_1","module_1","abi_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnostics","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","toAbi","abi","Abi","resolve","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","globalName","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","toString","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","join","warning","Operation_not_supported","push","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","DiagnosticEmitter","Element","program","_internalName","replaceComma","str","result","str_1","str_1_1","ch","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","line","column","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","__export","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","g","eval","e","window","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","functionTableExported","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_e","_f","_g","_h","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_j","_k","fullName","_l","_m","ctor","compileSourceByPath","reportNode","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","resolveFunctionInclTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileNopExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","exception","console","log","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","retainConstantType","scopedThis","_this_cannot_be_referenced_in_current_location","superType","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","classInstance","currentClassInstance","makeAllocate","propertyAccess","resolvePropertyAccess","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","fieldType","nativeFieldType","fieldDeclaration","parentElement","inserter_1","astutil_1","Struct","fields","AbiTypeAlias","newTypeName","wasmType","new_type_name","Action","ricardian_contract","AbiHelper","abiTypeLookup","Table","indexType","index_type","keys_names","keys_types","typeAliasSet","structsLookup","elementLookup","insertPointsLookup","abiInfo","version","structs","actions","tables","resolveSignatureToAbiStruct","methodName","struct","parameters_1","parameters_1_1","parameter","typeInfo","TypeNodeInfo","abiType","isArray","ascBasicType","declareType","addAbiTypeAlias","typeNodeInfo","typeKindName","basicElement","getAscBasicElement","parseClassPrototypeToStruct","originalTypeName","findContractOriginalType","typeAlias","commonaTypeName","findScriptOriginalTypeName","findScriptOriginalType","isWrapWithQutation","undefined","charAt","isActionFuncPrototype","funcType","AstUtil","haveSpecifyDecorator","resolveDatabaseDecorator","getExprValue","resolveExpressionToStruct","argu","getInternalName","resolveExpressionToElement","retrieveStructByInternalName","members_1","members_1_1","fieldDeclare","fieldTypeName","isIgnore","getBasicTypeName","addStruct","checkName","resolveClassDispatcher","clzPrototype","extendedContract","hasActionDecorators","contractName","contractVarName","resolveFunctionPrototype","funcName","VarialbeKind","NUMBER","ascFactType","BOOL","funcPrototype","printTypeAliasInfo","typesLookupKeys","keys","typesLookupKeys_1","typesLookupKeys_1_1","typesAliasKeys","typesAliasKeys_1","typesAliasKeys_1_1","printElementLookUpInfo","keys_1","keys_1_1","printClassProtoTypeInfo","keys_2","keys_2_1","serializeInserter","SerializeInserter","superInserter","SuperInserter","serializePoints","getInsertPoints","superPoints","superPoints_1","superPoints_1_1","_points","InsertPoint","toSortedMap","dispatchBuffer","forEach","dispatch","assemblyDispatch","hasElement","decorators_1","decorators_1_1","bracketIndex","indexOf","endIndex","trim","impledSerializable","classDeclaration","implementsTypes_1","implementsTypes_1_1","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","contextualFunction","targetExpression","propertyName","elementAccess","explicitLocal","functionTarget","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","typeParameterNodes","binaryen","emitText","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","stack","AssertionError","ASC_TARGET","defineProperties","writable","Math","fround","MIN_POSITIVE_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","EPSILON","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","fromCodePoint","Number","isInteger","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","F64","Float64Array","F32","Float32Array","I32","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","gte","lte","minSafeF64","maxSafeF64","toNumber","i64_to_string","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","ClzI64","CtzI64","PopcntI64","RotlI32","RotlI64","RotrI32","RotrI64","AbsF32","AbsF64","tempLocal0","tempLocal1","MaxF32","MaxF64","MinF32","MinF64","CeilF32","CeilF64","FloorF32","FloorF64","CopysignF32","CopysignF64","NearestF32","NearestF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","SqrtF32","SqrtF64","TruncF32","TruncF64","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","CurrentMemory","GrowMemory","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","valueType","stringType","existingIndex","gcPrototype","gcInstance","VIRTUAL","nativeSizeSize","baseInstance","allocateInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","indent","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","insertCode","insertPoints","insertPoints_1","insertPoints_1_1","insertPoint","insertPointArr","map_1","map_1_1","sort","descComparator","addInsertCode","getInsertCode","commonTypeNode","basicTypeName","_ascFactType","findOriginalAscType","basicTypePath","basicType","substr","libEle","findOriginalAscTypeName","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needImplSerialize","needImplDeSerialize","needImplPrimary","toGenerateFlag","functionPrototype","checkFieldImplSerialize","getSerializePoints","serializePoint","SerializePoint","needDeserialize","needSerialize","needPrimaryKey","addSerializeExpr","serializeField","addDeserializeExpr","deserializeField","paramDeclaration","variableType","serialize","deserialize","primaryKey","insertData","serializeClassname","generator","indentity","classNames","baseClassNames","identity","processSuper","baseConstructorPrototype","insertCallSuper","checkAndGetSuperCallExpr","baseFunctionDeclaration","method","createSuperCall","concreteFunctionDeclaration","className","location","blockStmt","superStmt","_stmt","superExpr","_superCall","content","decompiler_1","definitions_1","formatDiagnostic","parser_1","parseFile","parser","Parser","nextFile","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","decompiler","Decompiler","decompile","buildIDL","IDLBuilder","build","buildTSD","TSDBuilder","functionId","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallImport","CallIndirect","SetGlobal","Store","Drop","Host","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","indentLevel","typeToString","visitInterface","numMembers","members_2","members_2_1","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","skipBlock","depth","Precedence"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,mBAAAC,eAAAC,IACAD,QAAA,YAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,UARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAZ,YAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA0DA,OArDAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,cAAiD4B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAnC,GACA,IAAAkB,EAAAlB,KAAA8B,WACA,WAA2B,OAAA9B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,ybC7EA,IAAAC,EAAAlC,EAAA,GAQAmC,EAAAnC,EAAA,GAYST,EAAA6C,MAXPD,EAAAC,MAWc7C,EAAA8C,MATdF,EAAAE,MAGF,IASYC,EATZC,EAAAvC,EAAA,IASA,SAAYsC,GAEVA,IAAA,mBAGAA,IAAA,eACAA,IAAA,iCACAA,IAAA,yBACAA,IAAA,yBAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,kBACAA,IAAA,kCACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,gBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,sBAvEF,CAAYA,EAAA/C,EAAA+C,WAAA/C,EAAA+C,cA2EZ/C,EAAAiD,oBAAA,SAAoCC,GAClC,OAAQA,GACN,KAAKH,EAASI,QACd,KAAKJ,EAASK,KACd,KAAKL,EAASM,KACd,KAAKN,EAASO,MAAO,OAAO,EAE9B,OAAO,GAITtD,EAAAuD,eAAA,SAA+BL,GAC7B,OAAQA,GACN,KAAKH,EAASS,WACd,KAAKT,EAASU,KACd,KAAKV,EAASW,MACd,KAAKX,EAASY,cACd,KAAKZ,EAASa,eAAgB,OAAO,EAEvC,OAAO,GAIT5D,EAAA6D,sBAAA,SAAsCX,GACpC,OAAQA,GACN,KAAKH,EAASS,WACd,KAAKT,EAASa,eAAgB,OAAO,EAEvC,OAAO,GAIT,IAAAE,EAAA,oBAAAA,IAOExD,KAAAyD,OAAsB,KAEtBzD,KAAA0D,MAAqBrB,EAAAsB,YAAYC,KAm4BnC,OAh4BEJ,EAAAvB,UAAA4B,GAAA,SAAGC,GAA2B,OAAQ9D,KAAK0D,MAAQI,IAASA,GAE5DN,EAAAvB,UAAA8B,MAAA,SAAMD,GAA2B,OAA8B,IAAtB9D,KAAK0D,MAAQI,IAEtDN,EAAAvB,UAAA+B,IAAA,SAAIF,GAA2B9D,KAAK0D,OAASI,GAItCN,EAAAS,WAAP,SACErD,EACAsD,EACAC,EACAC,GAEA,IAAIC,EAAO,IAAIC,EAKf,OAJAD,EAAKD,MAAQA,EACbC,EAAKzD,KAAOA,EAAMA,EAAK6C,OAASY,EAChCA,EAAKH,cAAgBA,EAAmBA,GAAeK,GAAUL,EAAeG,GAChFA,EAAKF,WAAaA,EACXE,GAGFb,EAAAgB,kBAAP,SACEJ,GAEA,OAAOZ,EAAKS,WACVT,EAAKiB,2BAA2B,GAAIL,GACpC,MACA,EACAA,IAIGZ,EAAAkB,oBAAP,SACE9D,EACA+D,EACAP,GAEA,IAAIQ,EAAO,IAAIC,EAIf,OAHAD,EAAKR,MAAQA,EACbQ,EAAKhE,KAAOA,EAAMA,EAAK6C,OAASmB,EAChCA,EAAKD,YAAcA,EAAiBA,IAAaA,EAAYlB,OAASmB,GAC/DA,GAGFpB,EAAAsB,gBAAP,SACElE,EACAyD,EACAU,EACAnC,EACAwB,GAEA,IAAIQ,EAAO,IAAII,EAMf,OALAJ,EAAKR,MAAQA,EACbQ,EAAKhE,KAAOA,EAAMA,EAAK6C,OAASmB,EAChCA,EAAKP,KAAOA,EAAUA,IAAMA,EAAKZ,OAASmB,GAC1CA,EAAKG,YAAcA,EAAiBA,IAAaA,EAAYtB,OAASmB,GACtEA,EAAKK,cAAgBrC,EACdgC,GAGFpB,EAAA0B,gBAAP,SACEC,EACAC,EACAC,EACAlB,EACAC,GAEA,IAAIkB,EAAM,IAAIC,EAMd,OALAD,EAAIlB,MAAQA,EACZkB,EAAIH,WAAaA,EAAYZ,GAAUY,EAAYG,GACnDA,EAAIF,WAAaA,EAAYA,EAAW3B,OAAS6B,EACjDA,EAAID,iBAAmBA,EAAsBA,IAAkBA,EAAiB5B,OAAS6B,GACzFA,EAAInB,WAAaA,EACVmB,GAKF9B,EAAAgC,gBAAP,SACE5E,EACA6E,EACArB,GAEA,IAAIsB,EAAO,IAAIC,EAKf,OAJAD,EAAKtB,MAAQA,EACbsB,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKE,UAAYH,EAAUA,GAAMlB,GAAUkB,EAAMC,GACjDA,EAAKG,cAAgBC,EAAoBlF,GAClC8E,GAGFlC,EAAAuC,cAAP,SACEC,EACApD,EACAwB,GAEA,IAAI6B,EAAO,IAAIC,EAIf,OAHAD,EAAK7B,MAAQA,EACb6B,EAAKE,YAAcvD,EACnBqD,EAAKD,KAAOA,EACLC,GAKFzC,EAAAiB,2BAAP,SACE7D,EACAwD,GAEA,IAAIgC,EAAO,IAAIC,EAGf,OAFAD,EAAKhC,MAAQA,EACbgC,EAAKJ,KAAOpF,EACLwF,GAGF5C,EAAA8C,gCAAP,SACElC,GAEA,IAAIgC,EAAO,IAAIC,EAGf,OAFAD,EAAKhC,MAAQA,EACbgC,EAAKJ,KAAO,GACLI,GAGF5C,EAAA+C,6BAAP,SACEC,EACApC,GAEA,IAAIgC,EAAO,IAAIK,EAGf,OAFAL,EAAKhC,MAAQA,EACbgC,EAAKM,mBAAqBF,EAusD9B,SAA4BG,EAAwBlD,GAClD,IAAK,IAAIpD,EAAI,EAAGuG,EAAID,EAAME,OAAQxG,EAAIuG,IAAKvG,EAAG,CAC5C,IAAI4F,EAAOU,EAAMtG,GACb4F,IAAMA,EAAKxC,OAASA,IA1sDYqD,CAAmBN,EAAUJ,GAC1DA,GAGF5C,EAAAuD,0BAAP,SACEC,EACAC,EACAC,EACA9C,GAEA,IAAIgC,EAAO,IAAIe,EAKf,OAJAf,EAAKhC,MAAQA,EACbgC,EAAKY,cAAgBA,EACrBZ,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKc,OAASA,EAAQA,EAAOzD,OAAS2C,EAC/BA,GAGF5C,EAAA4D,uBAAP,SACEC,EACAC,EACAC,EACAnD,GAEA,IAAIgC,EAAO,IAAIoB,EAKf,OAJApB,EAAKhC,MAAQA,EACbgC,EAAKiB,SAAWA,EAChBjB,EAAKkB,KAAOA,EAAMA,EAAK7D,OAAS2C,EAChCA,EAAKmB,MAAQA,EAAOA,EAAM9D,OAAS2C,EAC5BA,GAGF5C,EAAAiE,qBAAP,SACER,EACAS,EACAjC,EACArB,GAEA,IAAIgC,EAAO,IAAIuB,EAKf,OAJAvB,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKlC,cAAgBwD,EAAcA,GAAUnD,GAAUmD,EAAUtB,GACjEA,EAAKR,UAAYH,EAAMlB,GAAUkB,EAAMW,GAChCA,GAGF5C,EAAAoE,sBAAP,SACEC,GAEA,IAAIzB,EAAO,IAAI0B,EAGf,OAFA1B,EAAKhC,MAAQyD,EAAYzD,MACzBgC,EAAKyB,YAAcA,EACZzB,GAGF5C,EAAAuE,sBAAP,SACEC,EACA5D,GAEA,IAAIgC,EAAO,IAAI6B,EAGf,OAFA7B,EAAKhC,MAAQA,EACbgC,EAAK4B,YAAcA,EAAazD,GAAUyD,EAAa5B,GAChDA,GAGF5C,EAAA0E,4BAAP,SACE9D,GAEA,IAAIgC,EAAO,IAAI+B,EAEf,OADA/B,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAA4E,8BAAP,SACEnB,EACAoB,EACAjE,GAEA,IAAIgC,EAAO,IAAIkC,EAIf,OAHAlC,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKmC,kBAAoBF,EAASA,EAAQ5E,OAAS2C,EAC5CA,GAGF5C,EAAAgF,sBAAP,SACEpE,GAEA,IAAIgC,EAAO,IAAIqC,EAEf,OADArC,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAkF,6BAAP,SACEpH,EACA8C,GAEA,IAAIgC,EAAO,IAAIuC,EAGf,OAFAvC,EAAKhC,MAAQA,EACbgC,EAAK9E,MAAQA,EACN8E,GAGF5C,EAAAoF,yBAAP,SACEf,GAEA,IAAIzB,EAAO,IAAIyC,EAIf,OAHAzC,EAAK1C,MAAQmE,EAAYnE,MAAQrB,EAAAsB,YAAYmF,MAC7C1C,EAAKhC,MAAQyD,EAAYzD,MACzBgC,EAAKyB,YAAcA,EACZzB,GAGF5C,EAAAuF,2BAAP,SACE9B,EACA+B,EACA5E,GAEA,IAAIgC,EAAO,IAAI6C,EAIf,OAHA7C,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAK4C,OAASA,EAAQA,EAAOvF,OAAS2C,EAC/BA,GAGF5C,EAAA0F,+BAAP,SACE5H,EACA8C,GAEA,IAAIgC,EAAO,IAAI+C,EAGf,OAFA/C,EAAKhC,MAAQA,EACbgC,EAAK9E,MAAQA,EACN8E,GAGF5C,EAAA4F,oBAAP,SACEnC,EACAS,EACAjC,EACArB,GAEA,IAAIgC,EAAO,IAAIiD,EAKf,OAJAjD,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKlC,cAAgBwD,EAAcA,GAAUnD,GAAUmD,EAAUtB,GACjEA,EAAKR,UAAYH,EAAMlB,GAAUkB,EAAMW,GAChCA,GAGF5C,EAAA8F,qBAAP,SACElF,GAEA,IAAIgC,EAAO,IAAImD,EAEf,OADAnD,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAgG,8BAAP,SACEC,EACAC,EACAtF,GAEA,IAAIgC,EAAO,IAAIuD,EAIf,OAHAvD,EAAKhC,MAAQA,EACbgC,EAAKqD,MAAQA,EACbrD,EAAKsD,OAASA,EACPtD,GAGF5C,EAAAoG,8BAAP,SACE3C,EACA7C,GAEA,IAAIgC,EAAO,IAAIyD,EAGf,OAFAzD,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAC3CA,GAGF5C,EAAAsG,+BAAP,SACE7C,EACAjF,EACAoC,GAEA,IAAIgC,EAAO,IAAI2D,EAIf,OAHA3D,EAAKhC,MAAQA,EACbgC,EAAKa,WAAaA,EAAYA,EAAWxD,OAAS2C,EAClDA,EAAKpE,SAAWA,EAAUA,EAASyB,OAAS2C,EACrCA,GAGF5C,EAAAwG,8BAAP,SACEC,EACAvG,EACAU,GAEA,IAAIgC,EAAO,IAAI8D,EAIf,OAHA9D,EAAKhC,MAAQA,EACbgC,EAAK6D,QAAUA,EACf7D,EAAK+D,aAAezG,EACb0C,GAGF5C,EAAA4G,wBAAP,SACEC,EACAC,EACAC,EACAnG,GAEA,IAAIgC,EAAO,IAAIoE,EAKf,OAJApE,EAAKhC,MAAQA,EACbgC,EAAKiE,UAAYA,EAAWA,EAAU5G,OAAS2C,EAC/CA,EAAKkE,OAASA,EAAQA,EAAO7G,OAAS2C,EACtCA,EAAKmE,OAASA,EAAQA,EAAO9G,OAAS2C,EAC/BA,GAGF5C,EAAAiH,8BAAP,SACEnJ,EACA8C,GAEA,IAAIgC,EAAO,IAAIsE,EAGf,OAFAtE,EAAKhC,MAAQA,EACbgC,EAAK9E,MAAQA,EACN8E,GAGF5C,EAAAmH,sBAAP,SACEvG,GAEA,IAAIgC,EAAO,IAAIwE,EAEf,OADAxE,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAqH,qBAAP,SACEzG,GAEA,IAAIgC,EAAO,IAAI0E,EAEf,OADA1E,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAuH,qBAAP,SACE3G,GAEA,IAAIgC,EAAO,IAAI4E,EAEf,OADA5E,EAAKhC,MAAQA,EACNgC,GAGF5C,EAAAyH,6BAAP,SACE5D,EACA6D,EACA9G,GAEA,IAAIgC,EAAO,IAAI+E,EAIf,OAHA/E,EAAKhC,MAAQA,EACbgC,EAAKiB,SAAWA,EAChBjB,EAAK8E,QAAUA,EAASA,EAAQzH,OAAS2C,EAClCA,GAGF5C,EAAA4H,4BAAP,SACE/D,EACA6D,EACA9G,GAEA,IAAIgC,EAAO,IAAIiF,EAIf,OAHAjF,EAAKhC,MAAQA,EACbgC,EAAKiB,SAAWA,EAChBjB,EAAK8E,QAAUA,EAASA,EAAQzH,OAAS2C,EAClCA,GAKF5C,EAAA8H,qBAAP,SACEC,EACAnH,GAEA,IAAIsB,EAAO,IAAI8F,GAGf,OAFA9F,EAAKtB,MAAQA,EACbsB,EAAK6F,WAAaA,EAAYhH,GAAUgH,EAAY7F,GAC7CA,GAGFlC,EAAAiI,qBAAP,SACEC,EACAtH,GAEA,IAAIsB,EAAO,IAAIiG,GAGf,OAFAjG,EAAKtB,MAAQA,EACbsB,EAAKgG,MAAQA,EAAWA,IAAOA,EAAMjI,OAASiC,GACvCA,GAGFlC,EAAAoI,uBAAP,SACEC,EACAC,EACAnH,EACAoH,EACAC,EACAC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIwG,GASf,OARAxG,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOiL,EAAYA,EAAWpI,OAASiC,EAC5CA,EAAKoG,eAAiBA,EAAgBvH,GAAUuH,EAAgBpG,GAChEA,EAAKf,YAAcA,EAAiBA,IAAaA,EAAYlB,OAASiC,GACtEA,EAAKqG,gBAAkBA,EAAqBA,GAAiBxH,GAAUwH,EAAiBrG,GACxFA,EAAKsG,QAAUA,EAASzH,GAAUyH,EAAStG,GAC3CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAA2I,wBAAP,SACET,EACAtH,GAEA,IAAIsB,EAAO,IAAI0G,GAGf,OAFA1G,EAAKtB,MAAQA,EACbsB,EAAKgG,MAAQA,EAAWA,IAAOA,EAAMjI,OAASiC,GACvCA,GAGFlC,EAAA6I,kBAAP,SACEC,EACAjC,EACAjG,GAEA,IAAIsB,EAAO,IAAI6G,GAIf,OAHA7G,EAAKtB,MAAQA,EACbsB,EAAK4G,UAAYA,EAAWA,EAAU7I,OAASiC,EAC/CA,EAAK2E,UAAYA,EAAWA,EAAU5G,OAASiC,EACxCA,GAGFlC,EAAAgJ,qBAAP,SACEpI,GAEA,IAAIsB,EAAO,IAAI+G,GAEf,OADA/G,EAAKtB,MAAQA,EACNsB,GAGFlC,EAAAkJ,sBAAP,SACE9L,EACAoL,EACAC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIiH,GAMf,OALAjH,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKgE,OAASsC,EAASzH,GAAUyH,EAAStG,GAC1CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAoJ,2BAAP,SACEhM,EACAU,EACAoC,EACAU,GAEA,IAAIsB,EAAO,IAAImH,GAKf,OAJAnH,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKpE,MAAQA,EAAWA,IAAOA,EAAMmC,OAASiC,GACvCA,GAGFlC,EAAAsJ,sBAAP,SACEd,EACAe,EACArJ,EACAU,GAEA,IAAIsB,EAAO,IAAIsH,GAKf,GAJAtH,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAKsG,QAAUA,EAAaA,GAASzH,GAAUyH,EAAStG,GACxDA,EAAKqH,KAAOA,EACRA,EAAM,CACR,IAAIE,EAAiBvK,EAAAwK,cAAcH,EAAKzL,OACpCyL,EAAKzL,MAAM6L,WAAW,KACxBzH,EAAKuH,eAAiBvK,EAAA0K,YACpBH,EACA7I,EAAMiJ,OAAOJ,gBAGfvH,EAAKuH,eAAiBA,EAExBvH,EAAK4H,aAAeC,GAAmB7H,EAAKuH,qBAE5CvH,EAAKuH,eAAiB,KACtBvH,EAAK4H,aAAe,KAEtB,OAAO5H,GAGFlC,EAAAgK,4BAAP,SACE5M,EACA6M,EACArJ,GAEA,IAAIsB,EAAO,IAAIgI,GAIf,OAHAhI,EAAKtB,MAAQA,EACbsB,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAK+H,aAAeA,EAAcA,EAAahK,OAASiC,EACjDA,GAGFlC,EAAAmK,mBAAP,SACE/M,EACA6M,EACArJ,GAEA,IAAIQ,EAAO,IAAIgJ,GASf,OARAhJ,EAAKR,MAAQA,EACbQ,EAAKhE,KAAOA,EAAMA,EAAK6C,OAASmB,EAC3B6I,EAGHA,EAAahK,OAASmB,EAFtB6I,EAAe7M,EAIjBgE,EAAK6I,aAAeA,EACb7I,GAGFpB,EAAAqK,0BAAP,SACE5G,GAEA,IAAIvB,EAAO,IAAIoI,GAGf,OAFApI,EAAKtB,MAAQ6C,EAAW7C,MACxBsB,EAAKuB,WAAaA,EAAYA,EAAWxD,OAASiC,EAC3CA,GAGFlC,EAAAuK,kBAAP,SACE1D,EACA2D,EACAC,EACA7J,GAEA,IAAIsB,EAAO,IAAIwI,GAKf,OAJAxI,EAAKtB,MAAQA,EACbsB,EAAK2E,UAAYA,EAAWA,EAAU5G,OAASiC,EAC/CA,EAAKsI,OAASA,EAAQA,EAAOvK,OAASiC,EACtCA,EAAKuI,QAAUA,EAAaA,IAASA,EAAQxK,OAASiC,GAC/CA,GAGFlC,EAAA2K,sBAAP,SACEC,EACArB,EACA3I,GAEA,IAAIsB,EAAO,IAAI2I,GACf3I,EAAKtB,MAAQA,EACbsB,EAAK4I,aAAeF,EAAWA,GAAO7J,GAAU6J,EAAO1I,GACvDA,EAAK6I,cAAgB,KACrB7I,EAAKqH,KAAOA,EACZ,IAAIE,EAAiBvK,EAAAwK,cAAcH,EAAKzL,OAaxC,OAZIyL,EAAKzL,MAAM6L,WAAW,KACxBzH,EAAKuH,eAAiBvK,EAAA0K,YACpBH,EACA7I,EAAMiJ,OAAOJ,iBAGVA,EAAeE,WAAW9K,EAAAmM,kBAC7BvB,EAAiB5K,EAAAmM,eAAiBvB,GAEpCvH,EAAKuH,eAAiBA,GAExBvH,EAAK4H,aAAeC,GAAmB7H,EAAKuH,gBACrCvH,GAGFlC,EAAAiL,kCAAP,SACE5C,EACAkB,EACA3I,GAEA,IAAIsB,EAAO,IAAI2I,GAUf,OATA3I,EAAKtB,MAAQA,EACbsB,EAAK4I,aAAe,KACpB5I,EAAK6I,cAAgB1C,EACrBnG,EAAKqH,KAAOA,EACZrH,EAAKuH,eAAiBvK,EAAA0K,YACpB1K,EAAAwK,cAAcH,EAAKzL,OACnB8C,EAAMiJ,OAAOJ,gBAEfvH,EAAK4H,aAAeC,GAAmB7H,EAAKuH,gBACrCvH,GAGFlC,EAAAkL,wBAAP,SACEjB,EACA7M,EACAwD,GAEA,IAAIQ,EAAO,IAAI+J,GASf,OARA/J,EAAKR,MAAQA,EACbQ,EAAK6I,aAAeA,EAAcA,EAAahK,OAASmB,EACnDhE,EAGHA,EAAK6C,OAASmB,EAFdhE,EAAO6M,EAIT7I,EAAKhE,KAAOA,EACLgE,GAGFpB,EAAAoL,2BAAP,SACEhO,EACAkL,EACAnH,EACAqH,EACAC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAImJ,GAQf,OAPAnJ,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKoG,eAAiBA,EAAoBA,GAAgBvH,GAAUuH,EAAgBpG,GACpFA,EAAKf,YAAcA,EAAiBA,IAAaA,EAAYlB,OAASiC,GACtEA,EAAKsG,QAAUA,EAASzH,GAAUyH,EAAStG,GAC3CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAsL,uBAAP,SACElO,EACAyD,EACAU,EACAkH,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIqJ,GAOf,OANArJ,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKrB,KAAOA,EAAUA,IAAMA,EAAKZ,OAASiC,GAC1CA,EAAKX,YAAcA,EAAiBA,IAAaA,EAAYtB,OAASiC,GACtEA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAwL,mBAAP,SACEjK,EACAsF,EACA4E,EACA3C,EACAlI,GAEA,IAAIsB,EAAO,IAAIwJ,GAMf,OALAxJ,EAAKtB,MAAQA,EACbsB,EAAKX,YAAcA,EAAiBA,IAAaA,EAAYtB,OAASiC,GACtEA,EAAK2E,UAAYA,EAAeA,IAAWA,EAAU5G,OAASiC,GAC9DA,EAAKuJ,YAAcA,EAAiBA,IAAaA,EAAYxL,OAASiC,GACtEA,EAAK4G,UAAYA,EAAWA,EAAU7I,OAASiC,EACxCA,GAGFlC,EAAA2L,0BAAP,SACEvO,EACAkL,EACAsD,EACAC,EACApD,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAI4J,GAQf,OAPA5J,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKoG,eAAiBA,EAAoBA,GAAgBvH,GAAUuH,EAAgBpG,GACpFA,EAAK0J,UAAYA,EAAWA,EAAU3L,OAASiC,EAC/CA,EAAK2J,KAAOA,EAAUA,IAAMA,EAAK5L,OAASiC,GAC1CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAA+L,wBAAP,SACE3O,EACAkL,EACAsD,EACAC,EACApD,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAI8J,GAQf,OAPA9J,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKoG,eAAiBA,EAAoBA,GAAgBvH,GAAUuH,EAAgBpG,GACpFA,EAAK0J,UAAYA,EAAWA,EAAU3L,OAASiC,EAC/CA,EAAK2J,KAAOA,EAAUA,IAAMA,EAAK5L,OAASiC,GAC1CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAiM,2BAAP,SACE7O,EACAoL,EACAC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIgK,GAMf,OALAhK,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKsG,QAAUA,EAASzH,GAAUyH,EAAStG,GAC3CA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAmM,sBAAP,SACErO,EACA8C,GAEA,IAAIsB,EAAO,IAAIkK,GAGf,OAFAlK,EAAKtB,MAAQA,EACbsB,EAAKpE,MAAQA,EAAWA,IAAOA,EAAMmC,OAASiC,GACvCA,GAGFlC,EAAAqM,sBAAP,SACExF,EACAyF,EACA1L,GAEA,IAAIsB,EAAO,IAAIqK,GAIf,OAHArK,EAAKtB,MAAQA,EACbsB,EAAK2E,UAAYA,EAAWA,EAAU5G,OAASiC,EAC/CA,EAAKoK,MAAQA,EAAOvL,GAAUuL,EAAOpK,GAC9BA,GAGFlC,EAAAwM,iBAAP,SACEtE,EACAH,EACAnH,GAEA,IAAIQ,EAAO,IAAIqL,GAIf,OAHArL,EAAKR,MAAQA,EACbQ,EAAK8G,MAAQA,EAAWA,IAAOA,EAAMjI,OAASmB,GAC9CA,EAAK2G,WAAaA,EAAYhH,GAAUgH,EAAY3G,GAC7CA,GAGFpB,EAAA0M,qBAAP,SACE5O,EACA8C,GAEA,IAAIsB,EAAO,IAAIyK,GAGf,OAFAzK,EAAKtB,MAAQA,EACbsB,EAAKpE,MAAQA,EAAOA,EAAMmC,OAASiC,EAC5BA,GAGFlC,EAAA4M,mBAAP,SACE7E,EACA8E,EACAC,EACAC,EACAnM,GAEA,IAAIsB,EAAO,IAAI8K,GASf,OARA9K,EAAKtB,MAAQA,EACbsB,EAAK6F,WAAaA,EAAYhH,GAAUgH,EAAY7F,GACpDA,EAAK2K,cAAgBA,EACjBA,IAAeA,EAAc5M,OAASiC,GAC1CA,EAAK4K,gBAAkBA,EACnBA,GAAiB/L,GAAU+L,EAAiB5K,GAChDA,EAAK6K,kBAAoBA,EACrBA,GAAmBhM,GAAUgM,EAAmB7K,GAC7CA,GAGFlC,EAAAiN,sBAAP,SACE7P,EACAkL,EACA4E,EACAzE,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAIiL,GAOf,OANAjL,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK9E,KAAOA,EAAMA,EAAK6C,OAASiC,EAChCA,EAAKoG,eAAiBA,EAAoBA,GAAgBvH,GAAUuH,EAAgBpG,GACpFA,EAAKrB,KAAOqM,EAAOA,EAAMjN,OAASiC,EAClCA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAoN,wBAAP,SACEtC,EACArC,EACAvI,EACAU,GAEA,IAAIsB,EAAO,IAAImL,GAKf,OAJAnL,EAAKtB,MAAQA,EACbsB,EAAKhC,MAAQA,EACbgC,EAAK4I,aAAeA,EAAc/J,GAAU+J,EAAc5I,GAC1DA,EAAKuG,WAAaA,EAAgBA,GAAY1H,GAAU0H,EAAYvG,GAC7DA,GAGFlC,EAAAsN,0BAAP,SACElQ,EACAyD,EACAU,EACAkH,EACAvI,EACAU,GAEA,IAAIQ,EAAO,IAAImM,GAOf,OANAnM,EAAKR,MAAQA,EACbQ,EAAKlB,MAAQA,EACbkB,EAAKhE,KAAOA,EAAMA,EAAK6C,OAASmB,EAChCA,EAAKP,KAAOA,EAAUA,IAAMA,EAAKZ,OAASmB,GAC1CA,EAAKG,YAAcA,EAAiBA,IAAaA,EAAYtB,OAASmB,GACtEA,EAAKqH,WAAaA,EACXrH,GAGFpB,EAAAwN,oBAAP,SACE/J,EACA7C,GAEA,IAAIsB,EAAO,IAAIuL,GAGf,OAFAvL,EAAKtB,MAAQA,EACbsB,EAAKuB,WAAaA,EACXvB,GAGFlC,EAAA0N,qBAAP,SACE7G,EACAiC,EACAlI,GAEA,IAAIsB,EAAO,IAAIyL,GAIf,OAHAzL,EAAKtB,MAAQA,EACbsB,EAAK2E,UAAYA,EAAWA,EAAU5G,OAASiC,EAC/CA,EAAK4G,UAAYA,EAAWA,EAAU7I,OAASiC,EACxCA,GAEXlC,EA54BA,GAAsB9D,EAAA8D,OAg5BtB,IAAA4N,EAAA,SAAAC,GAAA,SAAAD,mDAKA,OAL6CE,EAAAF,EAAAC,GAK7CD,EALA,CAA6C5N,GAAvB9D,EAAA0R,iBAQtB,IAAA9M,EAAA,SAAA+M,GAAA,SAAA/M,IAAA,IAAAiN,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASgP,OAMlB,OAP8BH,EAAAhN,EAAA+M,GAO9B/M,EAPA,CAA8B8M,GAAjB1R,EAAA4E,WAUb,IAAAO,EAAA,SAAAwM,GAAA,SAAAxM,IAAA,IAAA0M,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASiP,gBAMlB,OAPuCJ,EAAAzM,EAAAwM,GAOvCxM,EAPA,CAAuCrB,GAA1B9D,EAAAmF,oBAUb,SAAY8M,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,eANF,CAAYjS,EAAAiS,gBAAAjS,EAAAiS,mBAUZ,IAAA3M,EAAA,SAAAqM,GAAA,SAAArM,IAAA,IAAAuM,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASmP,UAWhBL,EAAAM,yBAAoD,OACtD,OAbmCP,EAAAtM,EAAAqM,GAanCrM,EAbA,CAAmCxB,GAAtB9D,EAAAsF,gBAgBb,IAcY8M,EAdZvM,EAAA,SAAA8L,GAAA,SAAA9L,IAAA,IAAAgM,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASsP,YAQlB,OATmCT,EAAA/L,EAAA8L,GASnC9L,EATA,CAAmC6L,GAgCnC,SAAgBtL,EAAoBlF,GAElC,GAAIA,EAAKgC,MAAQH,EAASS,WAAY,CACpC,IAAI8O,EAAiCpR,EAAMoF,KAE3C,OADAiM,OAAOD,EAAQnL,QACPmL,EAAQE,WAAW,IACzB,QACE,GAAe,UAAXF,EAAqB,OAAOF,EAAcK,OAC9C,MAEF,QACE,GAAe,WAAXH,EAAsB,OAAOF,EAAcM,QAC/C,MAEF,SACE,GAAe,YAAXJ,EAAuB,OAAOF,EAAcO,SAElD,SACE,GAAe,YAAXL,EAAuB,OAAOF,EAAcQ,SAChD,MAEF,SACE,GAAe,UAAXN,EAAqB,OAAOF,EAAcS,OAC9C,MAEF,SACE,GAAe,UAAXP,EAAqB,OAAOF,EAAcU,OAC9C,GAAe,UAAXR,EAAqB,OAAOF,EAAcW,OAC9C,MAEF,SACE,GAAe,YAAXT,EAAuB,OAAOF,EAAcY,SAChD,MAEF,SACE,GAAe,UAAXV,EAAqB,OAAOF,EAAca,OAC9C,MAEF,SACE,GAAe,aAAXX,EAAwB,OAAOF,EAAcc,gBAIhD,GACLhS,EAAKgC,MAAQH,EAASa,gBACK1C,EAAMqG,WAAWrE,MAAQH,EAASS,WAC7D,CACI8O,EAA4DpR,EAAMqG,WAAYjB,KAClFiM,OAAOD,EAAQnL,QACf,IAAIgM,EAAqCjS,EAAMoB,SAASgE,KAGxD,GAFAiM,OAAOY,EAAQhM,QAEA,YAAXmL,EACF,OAAQa,EAAQX,WAAW,IACzB,QACE,GAAe,UAAXW,EAAqB,OAAOf,EAAcgB,gBAC9C,MAEF,SACE,OAAQD,GACN,IAAK,SAAU,OAAOf,EAAciB,gBACpC,IAAK,UAAW,OAAOjB,EAAckB,mBAO/C,OAAOlB,EAAcmB,OApGVvT,EAAA6F,gBAcb,SAAYuM,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,uCACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,sBAdF,CAAYA,EAAApS,EAAAoS,gBAAApS,EAAAoS,mBAkBZpS,EAAAoG,sBAwEA,IAAAH,EAAA,SAAA0L,GAAA,SAAA1L,IAAA,IAAA4L,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASyQ,YAQlB,OATmC5B,EAAA3L,EAAA0L,GASnC1L,EATA,CAAmCnC,GAAtB9D,EAAAiG,gBAYb,SAAYwN,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,iBANF,CAAYzT,EAAAyT,cAAAzT,EAAAyT,iBAUZ,IAAAjN,EAAA,SAAAmL,GAAA,SAAAnL,IAAA,IAAAqL,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS2Q,UAMlB,OAPiC9B,EAAApL,EAAAmL,GAOjCnL,EAPA,CAAiC1C,GAApB9D,EAAAwG,cAYb,IAAAmN,EAAA,SAAAhC,GAAA,SAAAgC,mDAAgD,OAAP/B,EAAA+B,EAAAhC,GAAOgC,EAAhD,CAAyC7P,GAAnB9D,EAAA2T,aAGtB,IAQYC,EARZjN,EAAA,SAAAgL,GAAA,SAAAhL,IAAA,IAAAkL,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASS,aAIlB,OAL0CoO,EAAAjL,EAAAgL,GAK1ChL,EALA,CAA0CgN,GAA7B3T,EAAA2G,uBAQb,SAAYiN,GACVA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,mBANF,CAAYA,EAAA5T,EAAA4T,cAAA5T,EAAA4T,iBAUZ,IAAAC,EAAA,SAAAlC,GAAA,SAAAkC,IAAA,IAAAhC,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASI,UAIlB,OALgDyO,EAAAiC,EAAAlC,GAKhDkC,EALA,CAAgDF,GAA1B3T,EAAA6T,oBAQtB,IAAA9M,EAAA,SAAA4K,GAAA,SAAA5K,IAAA,IAAA8K,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAAiC,YAAcF,EAAYG,QAI5B,OAL4CnC,EAAA7K,EAAA4K,GAK5C5K,EALA,CAA4C8M,GAA/B7T,EAAA+G,yBAQb,SAAYiN,GACVA,IAAA,mBACAA,IAAA,WAFF,CAAYhU,EAAAgU,gBAAAhU,EAAAgU,mBAMZ,IAAAvM,EAAA,SAAAkK,GAAA,SAAAlK,IAAA,IAAAoK,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASkR,YAQlB,OATyCrC,EAAAnK,EAAAkK,GASzClK,EATA,CAAyCkM,GAA5B3T,EAAAyH,sBAYb,IAAAK,EAAA,SAAA6J,GAAA,SAAA7J,IAAA,IAAA+J,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASmR,SAQlB,OATsCtC,EAAA9J,EAAA6J,GAStC7J,EATA,CAAsC6L,GAAzB3T,EAAA8H,mBAYb,IAAAG,EAAA,SAAA0J,GAAA,SAAA1J,IAAA,IAAA4J,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASU,OAQlB,OAToCmO,EAAA3J,EAAA0J,GASpC1J,EATA,CAAoC0L,GAAvB3T,EAAAiI,iBAYb,IAAAG,EAAA,SAAAuJ,GAAA,SAAAvJ,IAAA,IAAAyJ,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASoR,QAIlB,OALqCvC,EAAAxJ,EAAAuJ,GAKrCvJ,EALA,CAAqCuL,GAAxB3T,EAAAoI,kBAQb,IAAAG,EAAA,SAAAoJ,GAAA,SAAApJ,IAAA,IAAAsJ,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASqR,QAIlB,OALqCxC,EAAArJ,EAAAoJ,GAKrCpJ,EALA,CAAqCoL,GAAxB3T,EAAAuI,kBAQb,IAAAE,EAAA,SAAAkJ,GAAA,SAAAlJ,IAAA,IAAAoJ,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASsR,YAChBxC,EAAAvL,KAAO,gBACT,OAH2CsL,EAAAnJ,EAAAkJ,GAG3ClJ,EAHA,CAA2C9B,GAA9B3G,EAAAyI,wBAMb,IAAAG,EAAA,SAAA+I,GAAA,SAAA/I,IAAA,IAAAiJ,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASY,gBAMlB,OAP6CiO,EAAAhJ,EAAA+I,GAO7C/I,EAPA,CAA6C+K,GAAhC3T,EAAA4I,0BAUb,IAAAK,EAAA,SAAA0I,GAAA,SAAA1I,IAAA,IAAA4I,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAAiC,YAAcF,EAAYU,QAI5B,OAL4C1C,EAAA3I,EAAA0I,GAK5C1I,EALA,CAA4C4K,GAA/B7T,EAAAiJ,yBAQb,IAAAE,EAAA,SAAAwI,GAAA,SAAAxI,IAAA,IAAA0I,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASwR,WAIlB,OALwC3C,EAAAzI,EAAAwI,GAKxCxI,EALA,CAAwCwK,GAA3B3T,EAAAmJ,qBAQb,IAAAI,EAAA,SAAAoI,GAAA,SAAApI,IAAA,IAAAsI,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASyR,aAMlB,OAP0C5C,EAAArI,EAAAoI,GAO1CpI,EAPA,CAA0CoK,GAA7B3T,EAAAuJ,uBAUb,IAAAE,EAAA,SAAAkI,GAAA,SAAAlI,IAAA,IAAAoI,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAAiC,YAAcF,EAAYa,UAI5B,OAL8C7C,EAAAnI,EAAAkI,GAK9ClI,EALA,CAA8CoK,GAAjC7T,EAAAyJ,2BAQb,IAAAE,EAAA,SAAAgI,GAAA,SAAAhI,IAAA,IAAAkI,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS2R,MAClB,OAFmC9C,EAAAjI,EAAAgI,GAEnChI,EAFA,CAAmC1B,GAAtBjI,EAAA2J,gBAKb,IAAAE,EAAA,SAAA8H,GAAA,SAAA9H,IAAA,IAAAgI,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASK,KAChByO,EAAAvL,KAAO,SACT,OAHoCsL,EAAA/H,EAAA8H,GAGpC9H,EAHA,CAAoClD,GAAvB3G,EAAA6J,iBAMb,IAAAI,EAAA,SAAA0H,GAAA,SAAA1H,IAAA,IAAA4H,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAAiC,YAAcF,EAAYe,SAM5B,OAP6C/C,EAAA3H,EAAA0H,GAO7C1H,EAPA,CAA6C4J,GAAhC7T,EAAAiK,0BAUb,IAAAE,EAAA,SAAAwH,GAAA,SAAAxH,IAAA,IAAA0H,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS6R,gBAIlB,OAL6ChD,EAAAzH,EAAAwH,GAK7CxH,EALA,CAA6CwJ,GAAhC3T,EAAAmK,0BAQb,IAAAE,EAAA,SAAAsH,GAAA,SAAAtH,IAAA,IAAAwH,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASa,iBAMlB,OAP8CgO,EAAAvH,EAAAsH,GAO9CtH,EAPA,CAA8CsJ,GAAjC3T,EAAAqK,2BAUb,IAAAG,EAAA,SAAAmH,GAAA,SAAAnH,IAAA,IAAAqH,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAAiC,YAAcF,EAAYiB,SAM5B,OAP6CjD,EAAApH,EAAAmH,GAO7CnH,EAPA,CAA6CqJ,GAAhC7T,EAAAwK,0BAUb,IAAAM,EAAA,SAAA6G,GAAA,SAAA7G,IAAA,IAAA+G,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS+R,UAQlB,OATuClD,EAAA9G,EAAA6G,GASvC7G,EATA,CAAuC6I,GAA1B3T,EAAA8K,oBAYb,IAAAE,EAAA,SAAA2G,GAAA,SAAA3G,IAAA,IAAA6G,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAAiC,YAAcF,EAAYmB,SAI5B,OAL6CnD,EAAA5G,EAAA2G,GAK7C3G,EALA,CAA6C6I,GAAhC7T,EAAAgL,0BAQb,IAAAE,EAAA,SAAAyG,GAAA,SAAAzG,IAAA,IAAA2G,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASW,MAChBmO,EAAAvL,KAAO,UAOT,OATqCsL,EAAA1G,EAAAyG,GASrCzG,EATA,CAAqCvE,GAAxB3G,EAAAkL,kBAYb,IAAAE,EAAA,SAAAuG,GAAA,SAAAvG,IAAA,IAAAyG,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASiS,KAChBnD,EAAAvL,KAAO,SACT,OAHoCsL,EAAAxG,EAAAuG,GAGpCvG,EAHA,CAAoCzE,GAAvB3G,EAAAoL,iBAMb,IAAAE,EAAA,SAAAqG,GAAA,SAAArG,IAAA,IAAAuG,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASM,KAChBwO,EAAAvL,KAAO,SACT,OAHoCsL,EAAAtG,EAAAqG,GAGpCrG,EAHA,CAAoC3E,GAAvB3G,EAAAsL,iBAMb,IAAAvC,EAAA,SAAA4I,GAAA,SAAA5I,IAAA,IAAA8I,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASO,MAChBuO,EAAAvL,KAAO,UACT,OAHqCsL,EAAA7I,EAAA4I,GAGrC5I,EAHA,CAAqCpC,GAAxB3G,EAAA+I,kBAMb,IAAAkM,EAAA,SAAAtD,GAAA,SAAAsD,mDAMA,OAN8CrD,EAAAqD,EAAAtD,GAM9CsD,EANA,CAA8CtB,GAAxB3T,EAAAiV,kBAStB,IAAAxJ,EAAA,SAAAkG,GAAA,SAAAlG,IAAA,IAAAoG,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASmS,eAClB,OAF4CtD,EAAAnG,EAAAkG,GAE5ClG,EAFA,CAA4CwJ,GAA/BjV,EAAAyL,yBAKb,IAAAE,EAAA,SAAAgG,GAAA,SAAAhG,IAAA,IAAAkG,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASoS,cAClB,OAF2CvD,EAAAjG,EAAAgG,GAE3ChG,EAFA,CAA2CsJ,GAA9BjV,EAAA2L,wBAMb3L,EAAAoV,gBAAA,SAAgCxI,GAC9B,IAAI7I,EAASwO,OAAO3F,EAAU7I,QAC9B,GAAIA,EAAOb,MAAQH,EAASsS,MAAO,CACjC,IAAIxJ,EAA8B9H,EAAQ8H,WAC1C,GAAIA,EAAWA,EAAW1E,OAAS,KAAOyF,EACxC,OAAQ2F,OAAOxO,EAAOA,QAAQb,MAC5B,KAAKH,EAASuS,oBACd,KAAKvS,EAASwS,kBAAmB,OAAO,GAI9C,OAAO,GAIT,IAGYC,EAHZC,EAAA,SAAA9D,GAAA,SAAA8D,mDAA+C,OAAP7D,EAAA6D,EAAA9D,GAAO8D,EAA/C,CAAwC3R,GAAlB9D,EAAAyV,YAGtB,SAAYD,GAEVA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,qBANF,CAAYA,EAAAxV,EAAAwV,aAAAxV,EAAAwV,gBAUZ,IAAAE,EAAA,SAAA/D,GAwBE,SAAA+D,EAAYnI,EAAwBjH,EAAcpD,GAAlD,IAAA2O,EACEF,EAAA7Q,KAAAR,OAAOA,KAxBTuR,EAAA3O,KAAOH,EAAS4S,OAChB9D,EAAA9N,OAAS,KAeT8N,EAAA+D,UAA8B,KAE9B/D,EAAAgE,gBAAuB,EAEvBhE,EAAAiE,YAAkC,KAKhCjE,EAAKkE,WAAa7S,EAClB2O,EAAKtE,eAAiBA,EACtB,IAAIK,EAAeC,GAAmBgE,EAAKtE,gBAC3CsE,EAAKjE,aAAeA,EACpB,IAAIoI,EAAMpI,EAAaqI,YAAYtT,EAAAuT,uBACnCrE,EAAKsE,WAAaH,GAAO,EAAIpI,EAAawI,UAAUJ,EAAM,GAAKpI,EAC/DiE,EAAKhG,WAAa,IAAIwK,MACtBxE,EAAKnN,MAAQ,IAAI9B,EAAAE,MAAM+O,EAAM,EAAGvL,EAAKa,QACrC0K,EAAKvL,KAAOA,IAOhB,OAzC4BsL,EAAA8D,EAAA/D,GAsC1BtQ,OAAAC,eAAIoU,EAAAnT,UAAA,eAAJ,WAAsB,OAAOjC,KAAKyV,YAAcP,EAAWc,uCAE3DjV,OAAAC,eAAIoU,EAAAnT,UAAA,iBAAJ,WAAwB,OAAOjC,KAAKyV,YAAcP,EAAWe,yCAC/Db,EAzCA,CAA4B5R,GAAf9D,EAAA0V,SA4Cb,IAAAc,EAAA,SAAA7E,GAAA,SAAA6E,IAAA,IAAA3E,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YAKEuR,EAAAtF,WAAqC,KAE3BsF,EAAA4E,+BAAgD,KAChD5E,EAAA6E,4BAA6C,OAwDzD,OAhEmD9E,EAAA4E,EAAA7E,GAWjDtQ,OAAAC,eAAIkV,EAAAjU,UAAA,gCAAJ,WAIE,OAHKjC,KAAKmW,iCACRnW,KAAKmW,+BAAiCE,GAAmBrW,MAAM,IAE1DA,KAAKmW,gEAIdpV,OAAAC,eAAIkV,EAAAjU,UAAA,6BAAJ,WAIE,OAHKjC,KAAKoW,8BACRpW,KAAKoW,4BAA8BC,GAAmBrW,MAAM,IAEvDA,KAAKoW,6DAIdrV,OAAAC,eAAIkV,EAAAjU,UAAA,kBAAJ,WACE,IAAIwB,EAASzD,KAAKyD,OAClB,QAAKA,MAGDA,EAAOb,MAAQH,EAAS6T,YAAc7S,EAASA,EAAOA,UAGnDA,EAAOb,MAAQH,EAAS4S,yCAIjCtU,OAAAC,eAAIkV,EAAAjU,UAAA,wBAAJ,WACE,IAAIwB,EAASzD,KAAKyD,OAClB,SAAKA,GAAWA,EAAOb,MAAQH,EAAS6T,YAAc7S,EAASA,EAAOA,WAGlEA,EAAOb,MAAQH,EAAS8T,qBACnBvW,KAAK6D,GAAGxB,EAAAsB,YAAY6S,SAAkC/S,EAAQgT,iBAEnEhT,EAAOb,MAAQH,EAASiU,iBACnB1W,KAAK6D,GAAGxB,EAAAsB,YAAYgT,SAA8BlT,EAAQgT,iBAE5DhT,EAAOb,MAAQH,EAAS4S,QAAUrV,KAAK6D,GAAGxB,EAAAsB,YAAY6S,0CAI/DN,EAAAjU,UAAA2U,oBAAA,SAAoBC,GAIlB,OACEA,EAAOjW,KAAKoF,MAAQ6Q,EAAOpJ,aAAazH,MACxChG,KAAKoE,MAAMiJ,QAAUwJ,EAAOzS,MAAMiJ,SACjCrN,KAAKyW,kBAGZP,EAhEA,CAAmDf,GAA7BzV,EAAAwW,uBAmEtB,IAAAY,EAAA,SAAAzF,GAAA,SAAAyF,mDAMA,OAN+DxF,EAAAwF,EAAAzF,GAM/DyF,EANA,CAA+DZ,GAAzCxW,EAAAoX,mCAStB,IAAAtL,GAAA,SAAA6F,GAAA,SAAA7F,IAAA,IAAA+F,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASsS,QAIlB,OALoCzD,EAAA9F,EAAA6F,GAKpC7F,EALA,CAAoC2J,GAAvBzV,EAAA8L,kBAQb,IAAAG,GAAA,SAAA0F,GAAA,SAAA1F,IAAA,IAAA4F,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASsU,QAIlB,OALoCzF,EAAA3F,EAAA0F,GAKpC1F,EALA,CAAoCwJ,GAAvBzV,EAAAiM,kBAQb,IAAAO,GAAA,SAAAmF,GAAA,SAAAnF,IAAA,IAAAqF,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASiU,mBAelB,OAhBsCpF,EAAApF,EAAAmF,GAYpCtQ,OAAAC,eAAIkL,EAAAjK,UAAA,iBAAJ,WACE,IAAI6J,EAAiB9L,KAAK8L,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAejF,OAAS,mCAE7DqF,EAhBA,CAAsCgK,GAAzBxW,EAAAwM,oBAmBb,IAAAE,GAAA,SAAAiF,GAAA,SAAAjF,IAAA,IAAAmF,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASuU,WAIlB,OALuC1F,EAAAlF,EAAAiF,GAKvCjF,EALA,CAAuC+I,GAA1BzV,EAAA0M,qBAQb,IAAAG,GAAA,SAAA8E,GAAA,SAAA9E,IAAA,IAAAgF,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASwU,KAMlB,OAPiC3F,EAAA/E,EAAA8E,GAOjC9E,EAPA,CAAiC4I,GAApBzV,EAAA6M,eAUb,IAAAE,GAAA,SAAA4E,GAAA,SAAA5E,IAAA,IAAA8E,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASyU,QAClB,OAFoC5F,EAAA7E,EAAA4E,GAEpC5E,EAFA,CAAoC0I,GAAvBzV,EAAA+M,kBAKb,IAAAE,GAAA,SAAA0E,GAAA,SAAA1E,IAAA,IAAA4E,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS0U,kBAIlB,OALqC7F,EAAA3E,EAAA0E,GAKrC1E,EALA,CAAqCuJ,GAAxBxW,EAAAiN,mBAQb,IAAAE,GAAA,SAAAwE,GAAA,SAAAxE,IAAA,IAAA0E,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS2U,uBAKlB,OAN0C9F,EAAAzE,EAAAwE,GAM1CxE,EANA,CAA0CqJ,GAA7BxW,EAAAmN,wBASb,IAAAa,GAAA,SAAA2D,GAAA,SAAA3D,IAAA,IAAA6D,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS4U,eAMlB,OAP2C/F,EAAA5D,EAAA2D,GAO3C3D,EAPA,CAA2ClK,GAA9B9D,EAAAgO,yBAUb,IAAAE,GAAA,SAAAyD,GAAA,SAAAzD,IAAA,IAAA2D,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS6U,eAMlB,OAPkChG,EAAA1D,EAAAyD,GAOlCzD,EAPA,CAAkCpK,GAArB9D,EAAAkO,gBAUb,IAAAZ,GAAA,SAAAqE,GAAA,SAAArE,IAAA,IAAAuE,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS+T,SAUlB,OAXqClF,EAAAtE,EAAAqE,GAWrCrE,EAXA,CAAqCmI,GAAxBzV,EAAAsN,mBAcb,IAAAc,GAAA,SAAAuD,GAAA,SAAAvD,IAAA,IAAAyD,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS8U,aAIlB,OALyCjG,EAAAxD,EAAAuD,GAKzCvD,EALA,CAAyCqH,GAA5BzV,EAAAoO,uBAQb,IAAAiB,GAAA,SAAAsC,GAAA,SAAAtC,IAAA,IAAAwC,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS+U,iBAGhBjG,EAAAkG,gBAAuB,IACzB,OALsCnG,EAAAvC,EAAAsC,GAKtCtC,EALA,CAAsC+H,GAAzBpX,EAAAqP,oBAQb,IAAAG,GAAA,SAAAmC,GAAA,SAAAnC,IAAA,IAAAqC,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASiV,MAalB,OAdkCpG,EAAApC,EAAAmC,GAclCnC,EAdA,CAAkCiG,GAArBzV,EAAAwP,gBAiBb,IAAAI,GAAA,SAAA+B,GAAA,SAAA/B,IAAA,IAAAiC,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASuS,sBAalB,OAdyC1D,EAAAhC,EAAA+B,GAUvCtQ,OAAAC,eAAIsO,EAAArN,UAAA,iBAAJ,WACE,IAAI6J,EAAiB9L,KAAK8L,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAejF,OAAS,mCAE7DyI,EAdA,CAAyC4G,GAA5BxW,EAAA4P,uBAiBb,IAAApB,GAAA,SAAAmD,GAAA,SAAAnD,IAAA,IAAAqD,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASkV,KAQlB,OATiCrG,EAAApD,EAAAmD,GASjCnD,EATA,CAAiCiH,GAApBzV,EAAAwO,eAYb,IAAAS,GAAA,SAAA0C,GAAA,SAAA1C,IAAA,IAAA4C,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASmV,oBAIlB,OALuCtG,EAAA3C,EAAA0C,GAKvC1C,EALA,CAAuCuH,GAA1BxW,EAAAiP,qBAQb,IAAAN,GAAA,SAAAgD,GAAA,SAAAhD,IAAA,IAAAkD,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASoV,SAYlB,OAbqCvG,EAAAjD,EAAAgD,GAarChD,EAbA,CAAqC8G,GAAxBzV,EAAA2O,mBAgBb,IAAAQ,GAAA,SAAAwC,GAAA,SAAAxC,IAAA,IAAA0C,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASqV,uBAClB,OAF0CxG,EAAAzC,EAAAwC,GAE1CxC,EAFA,CAA0C3C,IAA7BxM,EAAAmP,wBAKb,IAAAW,GAAA,SAAA6B,GAAA,SAAA7B,IAAA,IAAA+B,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASwS,oBAClB,OAFuC3D,EAAA9B,EAAA6B,GAEvC7B,EAFA,CAAuCF,IAA1B5P,EAAA8P,qBAKb,IAAAE,GAAA,SAAA2B,GAAA,SAAA3B,IAAA,IAAA6B,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS8T,uBAIlB,OAL0CjF,EAAA5B,EAAA2B,GAK1C3B,EALA,CAA0CwG,GAA7BxW,EAAAgQ,wBAQb,IAAAE,GAAA,SAAAyB,GAAA,SAAAzB,IAAA,IAAA2B,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASsV,SAIlB,OALqCzG,EAAA1B,EAAAyB,GAKrCzB,EALA,CAAqCuF,GAAxBzV,EAAAkQ,mBAQb,IAAAK,GAAA,SAAAoB,GAAA,SAAApB,IAAA,IAAAsB,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASuV,aAMlB,OAPgC1G,EAAArB,EAAAoB,GAOhCpB,EAPA,CAAgCzM,GAAnB9D,EAAAuQ,cAUb,IAAAF,GAAA,SAAAsB,GAAA,SAAAtB,IAAA,IAAAwB,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASwV,SAMlB,OAPqC3G,EAAAvB,EAAAsB,GAOrCtB,EAPA,CAAqCoF,GAAxBzV,EAAAqQ,mBAUb,IAAAI,GAAA,SAAAkB,GAAA,SAAAlB,IAAA,IAAAoB,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAASyV,QAIlB,OALoC5G,EAAAnB,EAAAkB,GAKpClB,EALA,CAAoCgF,GAAvBzV,EAAAyQ,kBAQb,IAAAK,GAAA,SAAAa,GAAA,SAAAb,IAAA,IAAAe,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS0V,MAUlB,OAXkC7G,EAAAd,EAAAa,GAWlCb,EAXA,CAAkC2E,GAArBzV,EAAA8Q,gBAcb,IAAAG,GAAA,SAAAU,GAAA,SAAAV,IAAA,IAAAY,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS2V,kBAMlB,OAPqC9G,EAAAX,EAAAU,GAOrCV,EAPA,CAAqCuF,GAAxBxW,EAAAiR,mBAUb,IAAAI,GAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAQ,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS4V,sBAClB,OAFyC/G,EAAAP,EAAAM,GAEzCN,EAFA,CAAyC+F,GAA5BpX,EAAAqR,uBAKb,IAAAF,GAAA,SAAAQ,GAAA,SAAAR,IAAA,IAAAU,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS6T,WAMlB,OAPuChF,EAAAT,EAAAQ,GAOvCR,EAPA,CAAuCsE,GAA1BzV,EAAAmR,qBAUb,IAAAI,GAAA,SAAAI,GAAA,SAAAJ,IAAA,IAAAM,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS6V,OAIlB,OALmChH,EAAAL,EAAAI,GAKnCJ,EALA,CAAmCkE,GAAtBzV,EAAAuR,iBAQb,IAAAE,GAAA,SAAAE,GAAA,SAAAF,IAAA,IAAAI,EAAA,OAAAF,KAAAG,MAAAxR,KAAA4F,YAAA5F,YACEuR,EAAA3O,KAAOH,EAAS8V,QAMlB,OAPoCjH,EAAAH,EAAAE,GAOpCF,EAPA,CAAoCgE,GAqBpC,SAAgBkB,GAAmBxO,EAAmC2Q,QAAA,IAAAA,OAAA,GACpE,IAAI5X,EAAOiH,EAAYjH,KAAKoF,KACxBvC,EAASoE,EAAYpE,OACzB,OAAKA,IAEHoE,EAAYjF,MAAQH,EAAS4V,qBAC7B5U,EAAOb,MAAQH,EAAS6T,WAElB7S,EAASA,EAAOA,SAEpBA,EAAOb,MAAQH,EAASiU,iBACnBL,GAAqC5S,EAAQ+U,IAClD3Q,EAAYhE,GAAGxB,EAAAsB,YAAYgT,QACvBtU,EAAAoW,iBACApW,EAAAqW,oBACF9X,EAGJ6C,EAAOb,MAAQH,EAAS8T,sBACxB9S,EAAOb,MAAQH,EAAS0U,gBAEjBd,GAAyC5S,EAAQ+U,GACjDnW,EAAAoW,iBAAmB7X,EAErB4X,EACH5X,EACAiH,EAAYzD,MAAMiJ,OAAOC,aAAejL,EAAAuT,eAAiBhV,EAvBzCA,EA2BtB,SAAgB2M,GAAmBR,GAEjC,OADIA,EAAK4L,SAAS,SAAQ5L,EAAOA,EAAK+I,UAAU,EAAG/I,EAAKlG,OAAS,IAC1DkG,EAMT,SAASxI,GAAUoC,EAAelD,GAChC,IAAK,IAAIpD,EAAI,EAAGuG,EAAID,EAAME,OAAQxG,EAAIuG,IAAKvG,EACzCsG,EAAMtG,GAAGoD,OAASA,EA7DT/D,EAAAyR,kBAUbzR,EAAAkZ,cAAA,SAA8BhW,EAAqBqJ,GACjD,GAAIA,EACF,IAAK,IAAI5L,EAAI,EAAGuG,EAAIqF,EAAWpF,OAAQxG,EAAIuG,IAAKvG,EAAG,CACjD,IAAIwY,EAAY5M,EAAW5L,GAC3B,GAAIwY,EAAUhT,eAAiBjD,EAAM,OAAOiW,EAGhD,OAAO,MAITnZ,EAAA2W,sBA8BA3W,EAAA6N,qGCx8DA,SAAY5J,GAEVA,IAAA,eAKAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,cAEAA,IAAA,oBAEAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,4BAEAA,IAAA,gBAEAA,IAAA,gBAKAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,yCAEAA,IAAA,2BAEAA,IAAA,kCAEAA,IAAA,sBAEAA,IAAA,sCAEAA,IAAA,uCAKAA,IAAA,6BAEAA,IAAA,2BAEAA,IAAA,yBAEAA,IAAA,kCAEAA,IAAA,4BAEAA,IAAA,sBAIAA,IAAA,2BArEF,CAAYjE,EAAAiE,cAAAjE,EAAAiE,iBAyECjE,EAAAkW,eAAiB,IAEjBlW,EAAAoZ,aAAe,KAEfpZ,EAAAqZ,cAAgB,OAEhBrZ,EAAAsZ,cAAgB,OAEhBtZ,EAAAgZ,mBAAqB,IAErBhZ,EAAA+Y,iBAAmB,IAEnB/Y,EAAAuZ,gBAAkB,IAElBvZ,EAAAwZ,cAAgB,OAEhBxZ,EAAA8O,eAAiB9O,EAAAwZ,cAAgBxZ,EAAAkW,eAEjClW,EAAAyZ,iBAAmB,u6BC5FhC,IA4IYC,EA5IZ/W,EAAAlC,EAAA,GAgBAkZ,EAAAlZ,EAAA,GAMAmZ,EAAAnZ,EAAA,GAOAoZ,EAAApZ,EAAA,GAsCAqZ,EAAArZ,EAAA,GAsCAsZ,EAAAtZ,EAAA,IAGAuZ,EAAAvZ,EAAA,IAKAwZ,EAAA,WAKA,OALA,gBAQAC,EAAA,WAIA,OAJA,gBAOAC,EAAA,WAGA,OAHA,gBA4DA,SAASC,EAA0BjU,EAA8BkU,GAE/D,OADA9H,OAAO8H,EAAIlT,QACHhB,GACN,KAAK0T,EAAAzH,cAAcY,SACnB,KAAK6G,EAAAzH,cAAcgB,gBACjB,OAAQiH,EAAI7H,WAAW,IACrB,QACE,GAAW,MAAP6H,EAAa,OAAOX,EAAaY,YACrC,GAAW,OAAPD,EAAc,OAAOX,EAAaa,YACtC,MAEF,SACE,GAAW,MAAPF,EAAa,OAAOX,EAAac,sBACrC,GAAW,OAAPH,EAAc,OAAOX,EAAae,sBACtC,MAEF,QACE,GAAW,KAAPJ,EAAY,OAAOX,EAAagB,IACpC,MAEF,QACE,GAAW,KAAPL,EAAY,OAAOX,EAAaiB,IACpC,MAEF,QACE,GAAW,KAAPN,EAAY,OAAOX,EAAakB,IACpC,GAAW,MAAPP,EAAa,OAAOX,EAAamB,IACrC,MAEF,QACE,GAAW,KAAPR,EAAY,OAAOX,EAAaoB,IACpC,MAEF,QACE,GAAW,KAAPT,EAAY,OAAOX,EAAaqB,IACpC,MAEF,QACE,GAAW,KAAPV,EAAY,OAAOX,EAAasB,YACpC,MAEF,SACE,GAAW,KAAPX,EAAY,OAAOX,EAAauB,WACpC,MAEF,QACE,GAAW,KAAPZ,EAAY,OAAOX,EAAawB,YACpC,MAEF,QACE,GAAW,MAAPb,EAAa,OAAOX,EAAayB,GACrC,MAEF,QACE,GAAW,MAAPd,EAAa,OAAOX,EAAa0B,GACrC,MAEF,QACE,GAAW,KAAPf,EAAY,OAAOX,EAAa2B,GACpC,GAAW,MAAPhB,EAAa,OAAOX,EAAa4B,GACrC,GAAW,MAAPjB,EAAa,OAAOX,EAAa6B,YACrC,GAAW,OAAPlB,EAAc,OAAOX,EAAa8B,cACtC,MAEF,QACE,GAAW,KAAPnB,EAAY,OAAOX,EAAa+B,GACpC,GAAW,MAAPpB,EAAa,OAAOX,EAAagC,GACrC,GAAW,MAAPrB,EAAa,OAAOX,EAAaiC,YAIzC,MAEF,KAAK9B,EAAAzH,cAAciB,gBACjB,OAAQgH,EAAI7H,WAAW,IACrB,QACE,GAAW,KAAP6H,EAAY,OAAOX,EAAakC,KACpC,GAAW,MAAPvB,EAAa,OAAOX,EAAamC,WACrC,MAEF,QACE,GAAW,KAAPxB,EAAY,OAAOX,EAAaoC,MACpC,GAAW,MAAPzB,EAAa,OAAOX,EAAaqC,WACrC,MAEF,QACE,GAAW,KAAP1B,EAAY,OAAOX,EAAasC,IACpC,MAEF,SACE,GAAW,KAAP3B,EAAY,OAAOX,EAAauC,YAIxC,MAEF,KAAKpC,EAAAzH,cAAckB,iBACjB,OAAQ+G,EAAI7H,WAAW,IACrB,QACE,GAAW,MAAP6H,EAAa,OAAOX,EAAawC,YACrC,MAEF,QACE,GAAW,MAAP7B,EAAa,OAAOX,EAAayC,aAO7C,OAAOzC,EAAa0C,SA9JtB,SAAY1C,GACVA,IAAA,qBAGAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,iDACAA,IAAA,iDAGAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,kCACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAGAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,4BAGAA,IAAA,8BACAA,IAAA,8BAvCF,CAAYA,EAAA1Z,EAAA0Z,eAAA1Z,EAAA0Z,kBAiKZ,IAqvDY2C,EAmCAC,EAxxDNC,EAAa,IAAIC,IAGvBC,EAAA,SAAA9K,GAwDE,SAAA8K,EAAYC,QAAA,IAAAA,MAAA,MAAZ,IAAA7K,EACEF,EAAA7Q,KAAAR,KAAMoc,IAAYpc,YAlDpBuR,EAAA8K,kBAAyB,EAKzB9K,EAAA+K,eAAsC,IAAIJ,IAE1C3K,EAAAgL,gBAAuC,IAAIL,IAE3C3K,EAAAiL,YAAgCP,EAEhC1K,EAAAkL,YAAqC,IAAIP,IAEzC3K,EAAAmL,iBAAwC,IAAIR,IAE5C3K,EAAAoL,mBAA+C,IAAIT,IAGnD3K,EAAAqL,oBAAoC,KAEpCrL,EAAAsL,eAAwC,KAExCtL,EAAAuL,eAA+B,KAI/BvL,EAAAwL,aAAyC,KAEzCxL,EAAAyL,cAAiC,KAEjCzL,EAAA0L,uBAA0C,KAG1C1L,EAAA2L,OAAc,EAEd3L,EAAA4L,mBAAsC,KAEtC5L,EAAA6L,eAAkC,KAElC7L,EAAA8L,eAAkC,KAElC9L,EAAA+L,aAAoB,EAEpB/L,EAAAgM,aAAoB,EAQlBhM,EAAKiM,SAAW,IAAI9D,EAAA+D,SAASlM,GAC7BA,EAAKmM,aAorDT,OA/uD6BpM,EAAA6K,EAAA9K,GA8D3B8K,EAAAla,UAAA0b,MAAA,WACE,IAAIC,EAAM,IAAInE,EAAAoE,IAAI7d,MAElB,OADA4d,EAAIE,UACGF,GAITzB,EAAAla,UAAA8b,UAAA,SAAU9Q,GAER,IADA,IAAIyQ,EAAU1d,KAAK0d,QACVrd,EAAI,EAAGuG,EAAI8W,EAAQ7W,OAAQxG,EAAIuG,IAAKvG,EAAG,CAC9C,IAAIgN,EAASqQ,EAAQrd,GACrB,GAAIgN,EAAOJ,gBAAkBA,EAAgB,OAAOI,EAEtD,OAAO,MAIT8O,EAAAla,UAAA+b,mBAAA,SAAmBC,GACjB,IAAIC,EACJ,OACEle,KAAK+d,UAAUE,EAAiC,QAChDje,KAAK+d,UAAUE,EAAiC,cAChDje,KAAK+d,WAAWG,EAAM7b,EAAAmM,eAAiByP,GAAkC,QACzEje,KAAK+d,UAAWG,EAAyD,cAK7E/B,EAAAla,UAAAkc,WAAA,SAAWC,eACTpe,KAAKoe,QAAUA,EAGfpe,KAAKwc,YAAc,IAAIN,MACpB,KAAM5C,EAAA+E,KAAKC,KACX,MAAOhF,EAAA+E,KAAKE,MACZ,MAAOjF,EAAA+E,KAAKG,MACZ,MAAOlF,EAAA+E,KAAKI,MACZ,QAASL,EAAQM,YACjB,KAAMpF,EAAA+E,KAAKM,KACX,MAAOrF,EAAA+E,KAAKO,MACZ,MAAOtF,EAAA+E,KAAKQ,MACZ,MAAOvF,EAAA+E,KAAKS,MACZ,QAASV,EAAQW,YACjB,OAAQzF,EAAA+E,KAAKW,OACb,MAAO1F,EAAA+E,KAAKY,MACZ,MAAO3F,EAAA+E,KAAKa,MACZ,OAAQ5F,EAAA+E,KAAKc,OACb,SAAU7F,EAAA+E,KAAKa,MACf,UAAW5F,EAAA+E,KAAKW,QAInBhf,KAAKof,mBAAmB,aAAc9F,EAAA+E,KAAKG,IACzCa,QAAQjB,EAAQkB,SAAW,EAAI,IACjCtf,KAAKof,mBAAmB,qBAAsB9F,EAAA+E,KAAKW,KACjDK,QAAQjB,EAAQmB,cAAgB,EAAI,EAAG,IACzCvf,KAAKof,mBAAmB,gBAAiB9F,EAAA+E,KAAKW,KAC5CK,QAAQjB,EAAQoB,SAAW,EAAI,EAAG,IACpCxf,KAAKof,mBAAmB,kBAAmB9F,EAAA+E,KAAKG,IAC9Ca,QAAQjB,EAAQqB,WAAY,IAC9Bzf,KAAKof,mBAAmB,qBAAsB9F,EAAA+E,KAAKG,IACjDa,QAAQjB,EAAQsB,kBAAmB,IACrC1f,KAAKof,mBAAmB,mBAAoB9F,EAAA+E,KAAKG,IAC/Ca,QAAQjB,EAAQuB,gBAAiB,IACnC3f,KAAKof,mBAAmB,6BAA8B9F,EAAA+E,KAAKW,KACzDK,QAAQjB,EAAQwB,WAAU,GAA2B,EAAI,EAAG,IAC9D5f,KAAKof,mBAAmB,6BAA8B9F,EAAA+E,KAAKW,KACzDK,QAAQjB,EAAQwB,WAAU,GAA2B,EAAI,EAAG,IAS9D,IANA,IAAIC,EAAgB,IAAI9J,MACpB+J,EAAgB,IAAI5D,IACpB6D,EAAgB,IAAIhK,MACpBiK,EAAmB,IAAIjK,MAGlB1V,EAAI,EAAGuG,EAAI5G,KAAK0d,QAAQ7W,OAAQxG,EAAIuG,IAAKvG,EAAG,CACnD,IAAIgN,EAASrN,KAAK0d,QAAQrd,GAGtB4f,EAAY,IAAIC,EAAUlgB,KAAMqN,GACpCrN,KAAKsc,eAAetY,IAAIic,EAAUE,aAAcF,GAChDjgB,KAAKogB,iBAAmBH,EAIxB,IADA,IAAI1U,EAAa8B,EAAO9B,WACf8U,EAAI,EAAG/f,EAAIiL,EAAW1E,OAAQwZ,EAAI/f,IAAK+f,EAAG,CACjD,IAAI/T,EAAYf,EAAW8U,GAC3B,OAAQ/T,EAAU1J,MAChB,KAAK2W,EAAA9W,SAASiU,iBACZ1W,KAAKsgB,gBAAkChU,EAAWyT,EAAeC,GACjE,MAEF,KAAKzG,EAAA9W,SAAS0U,gBACZnX,KAAKugB,eAAgCjU,GACrC,MAEF,KAAKiN,EAAA9W,SAAS+T,OACZxW,KAAKwgB,kBAAmClU,EAAWwT,GACnD,MAEF,KAAKvG,EAAA9W,SAASuS,oBACZhV,KAAKygB,mBAAwCnU,GAC7C,MAEF,KAAKiN,EAAA9W,SAASoV,OACZ7X,KAAK0gB,kBAAmCpU,EAAWwT,EAAeD,GAClE,MAEF,KAAKtG,EAAA9W,SAASqV,qBACZ9X,KAAK2gB,oBAA0CrU,GAC/C,MAEF,KAAKiN,EAAA9W,SAAS8T,qBACZvW,KAAK4gB,oBAA0CtU,EAAWyT,EAAeC,GACzE,MAEF,KAAKzG,EAAA9W,SAAS2V,gBACZpY,KAAK6gB,oBAAqCvU,GAC1C,MAEF,KAAKiN,EAAA9W,SAAS6T,SACZtW,KAAK8gB,oBAAuCxU,KAQpD,IAASjM,EAAI,EAAGA,EAAIwf,EAAchZ,QAAS,CACzC,IAAIka,EAAelB,EAAcxf,GAEjC,GADIwH,EAAckZ,EAAalZ,aAEzBQ,EAAUrI,KAAKghB,gBAAgBD,EAAatT,aAAcqS,KAE5D9f,KAAKsc,eAAetY,IAAI+c,EAAaE,UAAW5Y,GAChDwX,EAAcqB,OAAO7gB,EAAG,KAEpBgI,EAAUrI,KAAKghB,gBAAgBD,EAAaI,gBAAiBrB,KAC/D9f,KAAKsc,eAAetY,IAAI+c,EAAaE,UAAW5Y,GAChDwX,EAAcqB,OAAO7gB,EAAG,KAExBL,KAAKohB,MACH/H,EAAAgI,eAAeC,kCACfzZ,EAAYzD,MACMyD,EAAYpE,OAAQsJ,KAAKzL,MAC3CuG,EAAY4F,aAAazH,QAEzB3F,QAIFgI,EAAUrI,KAAKsc,eAAepb,IAAI6f,EAAatT,gBAEjDzN,KAAKsc,eAAetY,IAAI+c,EAAaE,UAAW5Y,GAChDwX,EAAcqB,OAAO7gB,EAAG,KAEpBgI,EAAUrI,KAAKsc,eAAepb,IAAI6f,EAAaI,mBACjDnhB,KAAKsc,eAAetY,IAAI+c,EAAaE,UAAW5Y,GAChDwX,EAAcqB,OAAO7gB,EAAG,KAExB4R,QAAO,KACL5R,OAOV,IAAuC,IAAAkhB,EAAAC,EAAA1B,GAAa2B,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAE,CAA7C,IAAAE,EAAAC,EAAAJ,EAAAngB,MAAA,GAACwgB,EAAAF,EAAA,GAAYG,EAAAH,EAAA,GAChBI,EAAqCD,EACrC1Z,OAAO,EACX,EAAG,CACD,IAAI2Z,EAAcC,WAkBX,EAGF5Z,EAAUrI,KAAKsc,eAAepb,IAAI8gB,EAAcvU,iBAEhDpF,EAAUrI,KAAKsc,eAAepb,IAAI8gB,EAAcnL,OAAOjW,KAAKoF,OAE7DhG,KAAKkiB,yBACHJ,EACAzZ,EACA2Z,EAAcnL,OAAOpJ,cAGvBzN,KAAKohB,MACH/H,EAAAgI,eAAec,mBACfJ,EAAalL,OAAOzS,MAAO2d,EAAalL,OAAOjW,KAAKoF,MAGxD,MAnCA,GAAIqC,EAAUrI,KAAK0c,iBAAiBxb,IAAI8gB,EAAcvU,cAAe,CACnEzN,KAAKkiB,yBACHJ,EACAzZ,EACA2Z,EAAcnL,OAAOpJ,cAEvB,OAEFuU,EAAgBlC,EAAc5e,IAAI8gB,EAAcvU,gBAE9CzN,KAAKohB,MACH/H,EAAAgI,eAAeC,kCACfS,EAAalL,OAAOpJ,aAAarJ,MACW2d,EAAalL,OAAOpT,OAAQsJ,KAAMzL,MAC9EygB,EAAalL,OAAOpJ,aAAazH,YAuBhCgc,qGAIX,IAAIxE,EAAWxd,KAAKwd,SACpB,IAASnd,EAAI,EAAGuG,EAAImZ,EAAclZ,OAAQxG,EAAIuG,IAAKvG,EAAG,CACpD,IAAI+hB,EAAmBrC,EAAc1f,GACjCgiB,EAAqBD,EAAiBva,YACtCya,EAAcrQ,OAAOoQ,EAAmB1d,aACxC4d,EAAc/E,EAASgF,kBAAkBF,EAAY1hB,KAAM,MAC/D,GAAK2hB,EACL,GAAIA,EAAY3f,MAAQmZ,EAAY0G,gBAAiB,CACnD,IAAIC,EAAgCH,EACpCH,EAAiBM,cAAgBA,OAEjC1iB,KAAKohB,MACH/H,EAAAgI,eAAesB,sCACfL,EAAYle,OAOhB,IAAIwe,EAAgBxE,EAAQwE,cAC5B,GAAIA,MACF,IAA0B,IAAAC,EAAArB,EAAAoB,GAAaE,EAAAD,EAAAnB,QAAAoB,EAAAnB,KAAAmB,EAAAD,EAAAnB,OAAE,CAAhC,IAAAqB,EAAAlB,EAAAiB,EAAAxhB,MAAA,GAACoP,EAAAqS,EAAA,GAAOniB,EAAAmiB,EAAA,GACf,GAAKniB,EAAKiG,OAAV,CAEA,KADIwB,EAAUrI,KAAKsc,eAAepb,IAAIN,IAEjC,MAAM,IAAIoiB,MAAM,sBAAwBpiB,GADhCZ,KAAKsc,eAAetY,IAAI0M,EAAOrI,sGAOlD,GAAIrI,KAAKsc,eAAe2G,IAAI,eAAgB,CACtC5a,EAAU4J,OAAOjS,KAAKsc,eAAepb,IAAI,gBAC7C+Q,OAAO5J,EAAQzF,MAAQmZ,EAAY0G,iBACnCziB,KAAK4c,oBAAsBY,EAAS0F,aAA6B7a,EAAS,MAI5E,GAAIrI,KAAKsc,eAAe2G,IAAI,SAAU,CAChC5a,EAAU4J,OAAOjS,KAAKsc,eAAepb,IAAI,UAC7C+Q,OAAO5J,EAAQzF,MAAQmZ,EAAY0G,iBACnCziB,KAAK6c,eAAiCxU,EAIxC,GAAIrI,KAAKsc,eAAe2G,IAAI,UAAW,CACjC5a,EAAU4J,OAAOjS,KAAKsc,eAAepb,IAAI,WAG7C,GAFA+Q,OAAO5J,EAAQzF,MAAQmZ,EAAY0G,iBAC/BU,EAAW3F,EAAS0F,aAA6B7a,EAAS,MAE5D,GAAIrI,KAAKwc,YAAYyG,IAAI,UAAW,CAClC,IAAIpb,EAA+BQ,EAASR,YAC5C7H,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAOyD,EAAYwb,+BAGtCrjB,KAAK8c,eAAiBqG,EACtBnjB,KAAKwc,YAAYxY,IAAI,SAAUmf,EAAS9e,MAOxCgE,EAAU4J,OAAOjS,KAAKsc,eAAepb,IAAI,WAC7C+Q,OAAO5J,EAAQzF,MAAQmZ,EAAYuH,oBACnCtjB,KAAKujB,cAAmClb,EAItCrI,KAAK2c,mBAAmBsG,IAAI,YAC1B5a,EAAyBrI,KAAK2c,mBAAmBzb,IAAI,QAASmH,SAExDzF,MAAQmZ,EAAYuH,oBACPjb,EAAStE,MAAM1B,EAAAsB,YAAY6f,QAAUnhB,EAAAsB,YAAY8f,WAElDpb,EAASrE,IAAI3B,EAAAsB,YAAY+f,MAC7C1jB,KAAK+c,aAAkC1U,IAK3C,GAAIrI,KAAKsc,eAAe2G,IAAI,SAAU,CAChC5a,EAAmBrI,KAAKsc,eAAepb,IAAI,SAC/C+Q,OAAO5J,EAAQzF,MAAQmZ,EAAYuH,qBAC/BH,EAAWnjB,KAAKwd,SAASmG,gBAAmCtb,EAAS,SAC3DrI,KAAKgd,cAAgBmG,GAIrC,GAAInjB,KAAKsc,eAAe2G,IAAI,UAAW,CACrC,IAMQE,EALJnX,GADA3D,EAAmBrI,KAAKsc,eAAepb,IAAI,WACzB8K,QACtB,GAAIA,EACF,GAAIA,EAAQiX,IAAI,YACd5a,EAAU4J,OAAOjG,EAAQ9K,IAAI,aAC7B+Q,OAAO5J,EAAQzF,MAAQmZ,EAAYuH,qBAC/BH,EAAWnjB,KAAKwd,SAASmG,gBAAmCtb,EAAS,SAC3DrI,KAAKid,uBAAyBkG,GAMlD,GACEnjB,KAAKsc,eAAe2G,IAAI,kBACxBjjB,KAAKsc,eAAe2G,IAAI,cACxBjjB,KAAKsc,eAAe2G,IAAI,aACxB,CAEI5a,EAAmBrI,KAAKsc,eAAepb,IAAI,iBAC/C+Q,OAAO5J,EAAQzF,MAAQmZ,EAAYuH,oBACnC,IAAInG,EAAqBlL,OAAOjS,KAAKwd,SAASmG,gBAAmCtb,EAAS,OACtF+G,EAAY+N,EAAmB/N,UACnC6C,OAA0C,GAAnC7C,EAAUwU,eAAe/c,QAChCoL,OAAO7C,EAAUwU,eAAe,IAAM5jB,KAAKoe,QAAQW,WACnD9M,OAAO7C,EAAUwU,eAAe,GAAGC,oBACnC5R,OAAO7C,EAAUhK,YAAcpF,KAAKoe,QAAQW,WAG5C1W,EAAmBrI,KAAKsc,eAAepb,IAAI,aAC3C+Q,OAAO5J,EAAQzF,MAAQmZ,EAAYuH,oBACnC,IAAIlG,EAAiBnL,OAAOjS,KAAKwd,SAASmG,gBAAmCtb,EAAS,OACtF+G,EAAYgO,EAAehO,UAC3B6C,OAA0C,GAAnC7C,EAAUwU,eAAe/c,QAChCoL,OAAO7C,EAAUwU,eAAe,IAAM5jB,KAAKoe,QAAQW,WACnD9M,OAAO7C,EAAUwU,eAAe,IAAM5jB,KAAKoe,QAAQW,WACnD9M,OAAO7C,EAAUhK,YAAckU,EAAA+E,KAAKc,MAGpC9W,EAAmBrI,KAAKsc,eAAepb,IAAI,aAC3C+Q,OAAO5J,EAAQzF,MAAQmZ,EAAYuH,oBACnC,IAAIjG,EAAiBpL,OAAOjS,KAAKwd,SAASmG,gBAAmCtb,EAAS,OACtF+G,EAAYiO,EAAejO,UAC3B6C,OAA0C,GAAnC7C,EAAUwU,eAAe/c,QAChCoL,OAAO7C,EAAUwU,eAAe,IAAM5jB,KAAKoe,QAAQW,WACnD9M,OAAO7C,EAAUhK,YAAckU,EAAA+E,KAAKc,MAEpCnf,KAAKmd,mBAAqBA,EAC1Bnd,KAAKod,eAAiBA,EACtBpd,KAAKqd,eAAiBA,EACtB,IAAIE,EAAe,EAAIa,EAAQW,UAAU+E,SACzC9jB,KAAKud,aAAgBA,EACrBvd,KAAKsd,aAAgBC,EAAe,EAAI,GAAK,EAC7Cvd,KAAKkd,OAAQ,IAKjBf,EAAAla,UAAAmd,mBAAA,SAAmB2E,EAAoB1f,EAAY/C,GACjD2Q,OAAO5N,EAAKR,GAAE,IACd7D,KAAKsc,eAAetY,IAAI+f,EACtB,IAAIC,EAAOhkB,KAAM+jB,EAAYA,EAAY1f,EAAM,KAAM2X,EAAepY,MACjEqgB,yBAAyB3iB,KAKhC6a,EAAAla,UAAAiiB,iBAAA,SAAiBH,EAAoB1f,EAAY/C,GAC/C2Q,OAAO5N,EAAKR,GAAE,IACd7D,KAAKsc,eAAetY,IAAI+f,EACtB,IAAIC,EAAOhkB,KAAM+jB,EAAYA,EAAY1f,EAAM,KAAM2X,EAAepY,MACjEugB,uBAAuB7iB,KAKtB6a,EAAAla,UAAA+e,gBAAR,SACEvT,EACA2W,GAIA,IAFA,IAAI/b,EACAqU,EAAmB1c,KAAK0c,mBACzB,CACD,GAAIrU,EAAUqU,EAAiBxb,IAAIuM,GAAe,OAAOpF,EACzD,IAAI0Z,EAAeqC,EAAmBljB,IAAIuM,GAC1C,IAAKsU,EAAc,MACnB,IAAIA,EAAaE,WAIjB,OAAOjiB,KAAKsc,eAAepb,IAAI6gB,EAAatU,cAH1CA,EAAesU,EAAatU,aAKhC,OAAO,MAID0O,EAAAla,UAAAoiB,gBAAR,SACEpY,EACAqY,GAGA,IADA,IAAIC,EAAevI,EAAepY,KACzBvD,EAAI,EAAGuG,EAAIqF,EAAWpF,OAAQxG,EAAIuG,IAAKvG,EAAG,CACjD,IAAIwY,EAAY5M,EAAW5L,GAEvByD,EAAO0gB,EADAjL,EAAAzT,oBAAoB+S,EAAUjY,OAErCkD,IACEA,GAAQkY,EAAe5J,QACrByG,EAAUzU,MAAMiJ,OAAOoX,UACzBF,GAAgBzgB,EAEhB9D,KAAKohB,MACH/H,EAAAgI,eAAeqD,8BACf7L,EAAUzU,MAAOyU,EAAUjY,KAAKwD,MAAMugB,YAG/BL,EAAgBxgB,EAKlBygB,EAAezgB,EACxB9D,KAAKohB,MACH/H,EAAAgI,eAAeuD,oBACf/L,EAAUzU,MAAOyU,EAAUjY,KAAKwD,MAAMugB,YAGxCJ,GAAgBzgB,EAVhB9D,KAAKohB,MACH/H,EAAAgI,eAAeqD,8BACf7L,EAAUzU,MAAOyU,EAAUjY,KAAKwD,MAAMugB,aAY9C,OAAOJ,GAIDpI,EAAAla,UAAA4iB,YAAR,SACExc,EACAR,GAEA,IAAIid,EAAajd,EAAYpE,OAE7B,GACG4E,EAAQ0c,aAAa/I,EAAezJ,SAEnC1K,EAAYzD,MAAMiJ,OAAOoX,WACzBpc,EAAQxE,GAAGxB,EAAAsB,YAAY6S,UAErBvE,OAAO6S,GAAYliB,MAAQ2W,EAAA9W,SAAS4S,QAE5ByP,EAAYliB,MAAQ2W,EAAA9W,SAAS6T,UACnCrE,OAAc6S,EAAYrhB,QAAQb,MAAQ2W,EAAA9W,SAAS4S,QAGzD,CACA,IAAI0O,EAAalc,EAAYwb,yBACzBrjB,KAAKsc,eAAe2G,IAAIc,GAC1B/jB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAOiE,EAAQ8X,cAGlCngB,KAAKsc,eAAetY,IAAI+f,EAAY1b,GAIpCA,EAAQ0c,aAAa/I,EAAe5J,WACtC/J,EAAQ8X,aAAetY,EAAYwb,2BAK/BlH,EAAAla,UAAAqe,gBAAR,SACEzY,EACAkY,EACAC,EACAgF,QAAA,IAAAA,MAAA,MAEA,IAAI7E,EAAetY,EAAYod,sBAC/B,GAAIjlB,KAAKsc,eAAe2G,IAAI9C,GAC1BngB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,OAH5B,CAQA,IAAIlU,EAAapE,EAAYoE,WACzBiZ,EAAard,EAAYjH,KAAKoF,KAC9B/D,EAAY,IAAIkjB,EAClBnlB,KACAklB,EACA/E,EACAtY,EACAoE,EACIjM,KAAKqkB,gBAAgBpY,EACnB+P,EAAezJ,OACfyJ,EAAerJ,OACfqJ,EAAepJ,WAEjBoJ,EAAepY,MAErB3B,EAAUwB,OAASuhB,EACnBhlB,KAAKsc,eAAetY,IAAImc,EAAcle,GAEtC,IAAI8J,EAAkBlE,EAAYkE,gBAClC,GAAIA,EAAiB,CACnB,IAAIqZ,EAAqBrZ,EAAgBlF,OACzC,GAAI5E,EAAU8iB,aAAa/I,EAAepJ,WACpCwS,GACFplB,KAAKohB,MACH/H,EAAAgI,eAAegE,8CACf9L,EAAA/W,MAAM8iB,KACJzd,EAAYjH,KAAKwD,MACjB2H,EAAgBqZ,EAAqB,GAAGhhB,aAMzC,GAAIghB,EAAoB,CAC7B,IAAK,IAAI/kB,EAAI,EAAGA,EAAI+kB,IAAsB/kB,EACxCL,KAAKulB,QACHlM,EAAAgI,eAAemE,wBACfzZ,EAAgB1L,GAAG+D,OAGvB4b,EAAiByF,KAAKxjB,IAQ1B,GAHI4F,EAAYlD,aAAaob,EAAc0F,KAAKxjB,GAG5C+iB,EAAW,CACb,GAAIA,EAAUhZ,SACZ,GAAIgZ,EAAUhZ,QAAQiX,IAAIiC,GAKxB,YAJAllB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,QAK5B6E,EAAUhZ,QAAU,IAAIkQ,IAE1B8I,EAAUhZ,QAAQhI,IAAIkhB,EAAYjjB,GAC9B+iB,EAAUnhB,GAAGxB,EAAAsB,YAAY+hB,gBAAkBzjB,EAAU4B,GAAGxB,EAAAsB,YAAY6S,SACtEvU,EAAU+B,IAAI3B,EAAAsB,YAAY+hB,oBAIvB,GAAIzjB,EAAU4B,GAAGxB,EAAAsB,YAAY6S,QAAS,CAC3C,GAAIxW,KAAK0c,iBAAiBuG,IAAI9C,GAK5B,YAJAngB,KAAKohB,MACH/H,EAAAgI,eAAesE,4DACf9d,EAAYjH,KAAKwD,MAAO+b,GAM5B,GAFAngB,KAAK0c,iBAAiB1Y,IAAImc,EAAcle,GACxCjC,KAAKogB,iBAAiBpU,QAAQhI,IAAIkhB,EAAYjjB,GAC1CA,EAAU4B,GAAGxB,EAAAsB,YAAY6S,SAAW3O,EAAYzD,MAAMiJ,OAAOuY,QAAS,CACxE,GAAI5lB,KAAK2c,mBAAmBsG,IAAIiC,GAAa,CAC3C,IAAIW,EAA+B7lB,KAAK2c,mBAAmBzb,IAAIgkB,GAK/D,YAJAllB,KAAKohB,MACH/H,EAAAgI,eAAesE,4DACf9d,EAAYjH,KAAKwD,MAAOyhB,EAAexd,QAAQ8X,cAInDle,EAAU+B,IAAI3B,EAAAsB,YAAY+hB,eAC1B1lB,KAAK2c,mBAAmB3Y,IAAIkhB,GAC1B7c,QAASpG,EACT4J,WAAYhE,EAAYjH,QAO9B,IADA,IAAIklB,EAAqBje,EAAYmE,QACrBpF,GAAPvG,EAAI,EAAOylB,EAAmBjf,QAAQxG,EAAIuG,IAAKvG,EAAG,CACzD,IAAI0lB,EAAoBD,EAAmBzlB,GAC3C,OAAQ0lB,EAAkBnjB,MACxB,KAAK2W,EAAA9W,SAAS+U,iBACZxX,KAAKgmB,gBAAkCD,EAAmB9jB,GAC1D,MAEF,KAAKsX,EAAA9W,SAASwS,kBACR8Q,EAAkBhiB,MAAM1B,EAAAsB,YAAYsiB,IAAM5jB,EAAAsB,YAAYuiB,KACxDlmB,KAAKmmB,mBAAsCJ,EAAmB9jB,GAE9DjC,KAAKomB,iBAAoCL,EAAmB9jB,GAE9D,MAEF,QAEE,YADAgQ,QAAO,IAMbjS,KAAK6kB,YAAY5iB,EAAW4F,KAItBsU,EAAAla,UAAA+jB,gBAAR,SACEne,EACAwe,GAEA,IAAIzlB,EAAOiH,EAAYjH,KAAKoF,KACxBma,EAAetY,EAAYod,sBAC3BhZ,EAAapE,EAAYoE,WACzBqa,EAAcD,EAAezjB,MAAQmZ,EAAYwK,oBAGrD,GAAI1e,EAAYhE,GAAGxB,EAAAsB,YAAYgT,QAAS,CAKtC,GAJI2P,GAEFrU,QAAO,GAELjS,KAAKsc,eAAe2G,IAAI9C,GAK1B,YAJAngB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,GAI5B,GAAIkG,EAAera,SACjB,GAAIqa,EAAera,QAAQiX,IAAIriB,GAK7B,YAJAZ,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,QAK5BkG,EAAera,QAAU,IAAIkQ,IAE/B,IAAIsK,EAAc,IAAIxC,EACpBhkB,KACAY,EACAuf,EACA7G,EAAA+E,KAAKc,KACLtX,EACAoE,EACIjM,KAAKqkB,gBAAgBpY,EAAY+P,EAAexJ,QAChDwJ,EAAepY,MAErB4iB,EAAY/iB,OAAS4iB,EACrBA,EAAera,QAAQhI,IAAIpD,EAAM4lB,GACjCxmB,KAAKsc,eAAetY,IAAImc,EAAcqG,GAClCH,EAAexiB,GAAGxB,EAAAsB,YAAY+hB,gBAChCc,EAAYxiB,IAAI3B,EAAAsB,YAAY+hB,eAG1Bc,EAAYzB,aAAa/I,EAAexJ,UAAYgU,EAAY3iB,GAAGxB,EAAAsB,YAAY8iB,WACjFzmB,KAAKohB,MACH/H,EAAAgI,eAAeqD,8BACfzS,OAAOsH,EAAAX,cAAcW,EAAAzH,cAAcU,OAAQvG,IAAa7H,MAAO,cAK9D,CAKL,GAJIkiB,GAEFrU,QAAQpK,EAAY9D,MAAM1B,EAAAsB,YAAY+iB,SAAWrkB,EAAAsB,YAAYsiB,IAAM5jB,EAAAsB,YAAYuiB,MAE7EG,EAAeM,iBACjB,GAAIN,EAAeM,gBAAgB1D,IAAIriB,GAKrC,YAJAZ,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,QAK5BkG,EAAeM,gBAAkB,IAAIzK,IAEvC,IAAI0K,EAAgB,IAAIC,EACtBR,EACAzlB,EACAuf,EACAtY,GAEEoE,GAAYjM,KAAKqkB,gBAAgBpY,EAAY+P,EAAepY,MAChEyiB,EAAeM,gBAAgB3iB,IAAIpD,EAAMgmB,KAKrCzK,EAAAla,UAAAmkB,iBAAR,SACEve,EACAwe,GAEA,IAAInB,EAAard,EAAYjH,KAAKoF,KAC9Bma,EAAetY,EAAYod,sBAC3BhjB,EAAsC,KAEtCgK,EAAapE,EAAYoE,WACzB6a,EAAiB9K,EAAepY,KAWpC,GAVIqI,IACF6a,EAAiB9mB,KAAKqkB,gBAAgBpY,EACpC+P,EAAelJ,gBACfkJ,EAAejJ,gBACfiJ,EAAehJ,iBACfgJ,EAAexJ,SAKf3K,EAAYhE,GAAGxB,EAAAsB,YAAYgT,QAAS,CAGtC,GAFA1E,OAAOpK,EAAYjH,KAAKgC,MAAQ2W,EAAA9W,SAASsR,aAErC/T,KAAKsc,eAAe2G,IAAI9C,GAK1B,YAJAngB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBAAwBvb,EAAYjH,KAAKwD,MACxD+b,GAIJ,GAAIkG,EAAera,SACjB,GAAIqa,EAAera,QAAQiX,IAAIiC,GAK7B,YAJAllB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,QAK5BkG,EAAera,QAAU,IAAIkQ,IAE/Bja,EAAY,IAAI8kB,EACd/mB,KACAklB,EACA/E,EACAtY,EACAwe,EACAS,GAEFT,EAAera,QAAQhI,IAAIkhB,EAAYjjB,GACvCjC,KAAKsc,eAAetY,IAAImc,EAAcle,GAClCokB,EAAexiB,GAAGxB,EAAAsB,YAAY+hB,gBAChCzjB,EAAU+B,IAAI3B,EAAAsB,YAAY+hB,mBAIvB,CACL,GAAIW,EAAeM,iBACjB,GAAIN,EAAeM,gBAAgB1D,IAAIiC,GAKrC,YAJAllB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,QAK5BkG,EAAeM,gBAAkB,IAAIzK,IAEvCja,EAAY,IAAI8kB,EACd/mB,KACAklB,EACA/E,EACAtY,EACAwe,EACAS,GAKEjf,EAAYjH,KAAKgC,MAAQ2W,EAAA9W,SAASsR,YAChCsS,EAAeW,qBACjBhnB,KAAKohB,MACH/H,EAAAgI,eAAe4F,qDACfpf,EAAYjH,KAAKwD,QAGnBnC,EAAU+B,IAAI3B,EAAAsB,YAAYoQ,aAC1BsS,EAAeW,qBAAuB/kB,GAGxCokB,EAAeM,gBAAgB3iB,IAAIkhB,EAAYjjB,GAE7CokB,EAAexiB,GAAGxB,EAAAsB,YAAY+hB,gBAChCzjB,EAAU+B,IAAI3B,EAAAsB,YAAY+hB,eAI9B1lB,KAAKknB,uBAAuBrf,EAAYoE,WAAYhK,EAAWokB,IAGzDlK,EAAAla,UAAAilB,uBAAR,SACEjb,EACAhK,EACAokB,GAEA,GAAIpa,EACF,IAAK,IAAI5L,EAAI,EAAGuG,EAAIqF,EAAWpF,OAAQxG,EAAIuG,IAAKvG,EAAG,CACjD,IAAIwY,EAAY5M,EAAW5L,GAC3B,OAAQwY,EAAUhT,eAChB,KAAK0T,EAAAzH,cAAcY,SACnB,KAAK6G,EAAAzH,cAAcgB,gBACnB,KAAKyG,EAAAzH,cAAciB,gBACnB,KAAKwG,EAAAzH,cAAckB,iBACjB,IAAImU,EAAUtO,EAAUjT,WAAaiT,EAAUjT,UAAUiB,QAAU,EACnE,GAAe,GAAXsgB,EAAc,CAChB,IAAIC,EAA0BvO,EAAUjT,UAAW,GACnD,GACEwhB,EAASxkB,MAAQ2W,EAAA9W,SAASI,SACNukB,EAAU5T,aAAe+F,EAAAjG,YAAYmB,OACzD,CACA,IAAI7R,EAAOkX,EACTjB,EAAUhT,cACgBuhB,EAAU9lB,OAEtC,GAAIsB,GAAQwW,EAAa0C,QACvB9b,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACf4B,EAAShjB,WAEN,CACL,IAAIijB,EAAYhB,EAAeiB,mBAC3BD,EAAUpE,IAAIrgB,GAChB5C,KAAKohB,MACH/H,EAAAgI,eAAekG,kCACfH,EAAShjB,QAGXnC,EAAUulB,aAAe5kB,EACzBykB,EAAUrjB,IAAIpB,EAAMX,UAIxBjC,KAAKohB,MACH/H,EAAAgI,eAAeoG,wBACfL,EAAShjB,YAIbpE,KAAKohB,MACH/H,EAAAgI,eAAeqG,+BACf7O,EAAUzU,MAAO,IAAK+iB,EAAQxC,SAAS,OAS7CxI,EAAAla,UAAAkkB,mBAAR,SACEte,EACAwe,GAEA,IAAInB,EAAard,EAAYjH,KAAKoF,KAC9B2hB,EAAuB9f,EAAYod,sBACnC2C,EAAkB5nB,KAAKsc,eAAepb,IAAIymB,GAC1CE,EAAWhgB,EAAYhE,GAAGxB,EAAAsB,YAAYsiB,KACtC6B,GAAQ,EACZ,GAAIF,GACF,GACEA,EAAgBhlB,MAAQmZ,EAAYgM,UAI/B,OAHJF,EACcD,EAAiBI,gBACjBJ,EAAiBK,iBAOhC,YAJAjoB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAOujB,QAK5BC,EAAkB,IAAIM,EACpBloB,KACAklB,EACAyC,EACAtB,GAEFyB,GAAQ,EAGV,IAAI7b,EAAapE,EAAYoE,WACzB6a,EAAiB9K,EAAepY,KAChCqI,IACF6a,EAAiB9mB,KAAKqkB,gBAAgBpY,EACpC+P,EAAexJ,SAInB,IAAI2V,GAAYN,EAAWxlB,EAAA0W,cAAgB1W,EAAA2W,eAAiBkM,EAG5D,GAAIrd,EAAYhE,GAAGxB,EAAAsB,YAAYgT,QAAS,CACtC,IAAIyR,EAAa/B,EAAelG,aAAe9d,EAAAoW,iBAAmB0P,EAClE,GAAInoB,KAAKsc,eAAe2G,IAAImF,GAK1B,YAJApoB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAOgkB,GAI5B,IAAIC,EAAkB,IAAItB,EACxB/mB,KACAmoB,EACAC,EACAvgB,EACA,KACAif,GAOF,GALIe,EACSD,EAAiBI,gBAAkBK,EAEnCT,EAAiBK,gBAAkBI,EAE5CP,EAAO,CACT,GAAIzB,EAAera,SACjB,GAAIqa,EAAera,QAAQiX,IAAIiC,GAK7B,YAJAllB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAOgkB,QAK5B/B,EAAera,QAAU,IAAIkQ,IAE/BmK,EAAera,QAAQhI,IAAIkhB,EAAY0C,QAEvC3V,OAAOoU,EAAera,SAAWqa,EAAera,QAAQiX,IAAIiC,IAE9DllB,KAAKsc,eAAetY,IAAI2jB,EAAsBC,GAC1CvB,EAAexiB,GAAGxB,EAAAsB,YAAY+hB,gBAChCkC,EAAgB5jB,IAAI3B,EAAAsB,YAAY+hB,mBAI7B,CACL,IAAI4C,EAAejC,EAAelG,aAAe9d,EAAAqW,mBAAqByP,EACtE,GAAI9B,EAAeM,iBACjB,GAAIN,EAAeM,gBAAgB1D,IAAIkF,GAKrC,YAJAnoB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAOujB,QAK5BtB,EAAeM,gBAAkB,IAAIzK,IAEvC,IAAIqM,EAAoB,IAAIxB,EAC1B/mB,KACAmoB,EACAG,EACAzgB,EACAwe,EACAS,GAEEe,EACSD,EAAiBI,gBAAkBO,EAEnCX,EAAiBK,gBAAkBM,EAEhDlC,EAAeM,gBAAgB3iB,IAAImkB,EAAUP,GAC7C5nB,KAAKsc,eAAetY,IAAI2jB,EAAsBC,GAC1CvB,EAAexiB,GAAGxB,EAAAsB,YAAY+hB,iBAChCkC,EAAgB5jB,IAAI3B,EAAAsB,YAAY+hB,eAChC6C,EAAkBvkB,IAAI3B,EAAAsB,YAAY+hB,kBAKhCvJ,EAAAla,UAAAse,eAAR,SACE1Y,EACAmd,QAAA,IAAAA,MAAA,MAEA,IAAI7E,EAAetY,EAAYod,sBAC/B,GAAIjlB,KAAKsc,eAAe2G,IAAI9C,GAC1BngB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,OAH5B,CAOA,IAAI+E,EAAard,EAAYjH,KAAKoF,KAC9BqC,EAAU,IAAImgB,EAAKxoB,KAAMklB,EAAY/E,EAActY,GAIvD,GAHAQ,EAAQ5E,OAASuhB,EACjBhlB,KAAKsc,eAAetY,IAAImc,EAAc9X,GAElC2c,EAAW,CACb,GAAIA,EAAUhZ,SACZ,GAAIgZ,EAAUhZ,QAAQiX,IAAIiC,GAKxB,YAJAllB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,QAK5B6E,EAAUhZ,QAAU,IAAIkQ,IAE1B8I,EAAUhZ,QAAQhI,IAAIkhB,EAAY7c,GAC9B2c,EAAUnhB,GAAGxB,EAAAsB,YAAY+hB,gBAAkBrd,EAAQxE,GAAGxB,EAAAsB,YAAY6S,SACpEnO,EAAQrE,IAAI3B,EAAAsB,YAAY+hB,oBAErB,GAAIrd,EAAQxE,GAAGxB,EAAAsB,YAAY6S,QAAS,CACzC,GAAIxW,KAAK0c,iBAAiBuG,IAAI9C,GAK5B,YAJAngB,KAAKohB,MACH/H,EAAAgI,eAAesE,4DACf9d,EAAYjH,KAAKwD,MAAO+b,GAM5B,GAFAngB,KAAK0c,iBAAiB1Y,IAAImc,EAAc9X,GACxCrI,KAAKogB,iBAAiBpU,QAAQhI,IAAIkhB,EAAY7c,GAC1CR,EAAYzD,MAAMiJ,OAAOuY,QAAS,CACpC,GAAI5lB,KAAK2c,mBAAmBsG,IAAIiC,GAAa,CAC3C,IAAIW,EAA+B7lB,KAAK2c,mBAAmBzb,IAAIgkB,GAK/D,YAJAllB,KAAKohB,MACH/H,EAAAgI,eAAesE,4DACf9d,EAAYjH,KAAKwD,MAAOyhB,EAAexd,QAAQ8X,cAInD9X,EAAQrE,IAAI3B,EAAAsB,YAAY+hB,eACxB1lB,KAAK2c,mBAAmB3Y,IAAIkhB,GAC1B7c,QAAOA,EACPwD,WAAYhE,EAAYjH,QAM9B,IADA,IAAI8I,EAAS7B,EAAY6B,OAChBrJ,EAAI,EAAGuG,EAAI8C,EAAO7C,OAAQxG,EAAIuG,IAAKvG,EAC1CL,KAAKyoB,oBAAoB/e,EAAOrJ,GAAIgI,GAGtCrI,KAAK6kB,YAAYxc,EAASR,KAGpBsU,EAAAla,UAAAwmB,oBAAR,SACE5gB,EACA6gB,GAEA,IAAI9nB,EAAOiH,EAAYjH,KAAKoF,KACxBma,EAAetY,EAAYod,sBAC/B,GAAIyD,EAAI1c,SACN,GAAI0c,EAAI1c,QAAQiX,IAAIriB,GAKlB,YAJAZ,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,QAK5BuI,EAAI1c,QAAU,IAAIkQ,IAEpB,IAAI5a,EAAQ,IAAIqnB,EAAUD,EAAK1oB,KAAMY,EAAMuf,EAActY,GACzD6gB,EAAI1c,QAAQhI,IAAIpD,EAAMU,GAClBonB,EAAI7kB,GAAGxB,EAAAsB,YAAY+hB,gBACrBpkB,EAAM0C,IAAI3B,EAAAsB,YAAY+hB,gBAIlBvJ,EAAAla,UAAAue,kBAAR,SACElU,EACAwT,GAEA,IAAI9T,EAAUM,EAAUN,QACxB,GAAIA,EACF,IAAK,IAAI3L,EAAI,EAAGuG,EAAIoF,EAAQnF,OAAQxG,EAAIuG,IAAKvG,EAC3CL,KAAK4oB,iBAAiB5c,EAAQ3L,GAAIiM,EAAUgB,aAAcwS,QAG5D9f,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACflZ,EAAUlI,QAKR+X,EAAAla,UAAAigB,yBAAR,SACE/B,EACA9X,EACAwgB,GAGA7oB,KAAK0c,iBAAiB1Y,IAAImc,EAAc9X,GAGxC,IAAIiF,EAAeub,EAAmBzkB,MAAMiJ,OAAOC,aAC/Cwb,EAASzmB,EAAA8W,iBAAmB7L,EAC5B2S,EAAYjgB,KAAKsc,eAAepb,IAAI4nB,GACnC7I,IAAWA,EAAYhO,OAAOjS,KAAKsc,eAAepb,IAAI4nB,EAASzmB,EAAAuT,eAAiB,WACrF3D,OAAOgO,EAAUrd,MAAQmZ,EAAYgN,WACrC,IAAI7D,EAAa2D,EAAmB7iB,KACxBia,EAAWjU,QAAQhI,IAAIkhB,EAAY7c,GAG/C,IAAIgF,EAASwb,EAAmBzkB,MAAMiJ,OAClCA,EAAOoX,UACLzkB,KAAKsc,eAAe2G,IAAIiC,GAC1BllB,KAAKohB,MACH/H,EAAAgI,eAAesE,4DACfkD,EAAmBzkB,MAAO8gB,IAG5B7c,EAAQ8X,aAAe+E,EACvBllB,KAAKsc,eAAetY,IAAIkhB,EAAY7c,IAI7BgF,EAAOuY,SAChB5lB,KAAK2c,mBAAmB3Y,IAAI6kB,EAAmB7iB,MAC7CqC,QAAOA,EACPwD,WAAYgd,KAKV1M,EAAAla,UAAA2mB,iBAAR,SACE/R,EACAvJ,EACAwS,GAEA,IAQIkJ,EACAC,EACAlH,EAVAtU,EAAeoJ,EAAOzS,MAAMiJ,OAAOC,aAAejL,EAAAuT,eAAiBiB,EAAOpJ,aAAazH,KAC3F,GAAIhG,KAAK0c,iBAAiBuG,IAAIxV,GAC5BzN,KAAKohB,MACH/H,EAAAgI,eAAesE,4DACf9O,EAAOpJ,aAAarJ,MAAOqJ,QAS/B,GAAoB,MAAhBH,EAAsB,CAIxB,GAHA0b,EAAiBnS,EAAOzS,MAAMiJ,OAAOC,aAAejL,EAAAuT,eAAiBiB,EAAOjW,KAAKoF,KAG7EhG,KAAKsc,eAAe2G,IAAI+F,GAM1B,YALAhpB,KAAKkiB,yBACHzU,EACSzN,KAAKsc,eAAepb,IAAI8nB,GACjCnS,EAAOpJ,cAMX,GAAIqS,EAAcmD,IAAIxV,GAKpB,YAJAzN,KAAKohB,MACH/H,EAAAgI,eAAesE,4DACf9O,EAAOpJ,aAAarJ,MAAOqJ,IAI/BsU,EAAe,IAAInI,GACNqI,YAAa,EAC1BF,EAAatU,aAAeub,EAC5BjH,EAAalL,OAASA,EACtBiJ,EAAc9b,IAAIyJ,EAAcsU,OAG3B,CAKL,GAJAiH,EAAiB1b,EAAejL,EAAAuT,eAAiBiB,EAAOjW,KAAKoF,KAG7DijB,EAAoBjpB,KAAKsc,eAAepb,IAAI8nB,GAO1C,YALAhpB,KAAKkiB,yBACHzU,EACAwb,EACApS,EAAOpJ,cAOX,IADA,IAAIyb,EAAO,IAAIC,IACRpH,EAAejC,EAAc5e,IAAI8nB,IAAiB,CACvD,IAAIjH,EAAaE,WAaV,CAEL,GADAgH,EAAoBjpB,KAAKsc,eAAepb,IAAI6gB,EAAatU,cAOvD,YALAzN,KAAKkiB,yBACHzU,EACAwb,EACApS,EAAOpJ,cAIX,MArBA,GADAwb,EAAoBjpB,KAAK0c,iBAAiBxb,IAAI6gB,EAAatU,cAOzD,YALAzN,KAAKkiB,yBACHzU,EACAwb,EACApS,EAAOpJ,cAKX,GADAub,EAAiBjH,EAAatU,aAC1Byb,EAAKjG,IAAIlB,GAAe,MAC5BmH,EAAKE,IAAIrH,GAgBb,GAAIjC,EAAcmD,IAAIxV,GAKpB,YAJAzN,KAAKohB,MACH/H,EAAAgI,eAAesE,4DACf9O,EAAOpJ,aAAarJ,MAAOqJ,IAI/BsU,EAAe,IAAInI,GACNqI,YAAa,EAC1BF,EAAatU,aAAeub,EAC5BjH,EAAalL,OAASA,EACtBiJ,EAAc9b,IAAIyJ,EAAcsU,KAI5B5F,EAAAla,UAAAwe,mBAAR,SACE5Y,EACAmd,QAAA,IAAAA,MAAA,MAEA,IAAI7E,EAAetY,EAAYod,sBAC/B,GAAIjlB,KAAKsc,eAAe2G,IAAI9C,GAC1BngB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,OAH5B,CAOA,IAAI+E,EAAard,EAAYjH,KAAKoF,KAC9BiG,EAAapE,EAAYoE,WACzBhK,EAAY,IAAI8kB,EAClB/mB,KACAklB,EACA/E,EACAtY,EACA,KACAoE,EACIjM,KAAKqkB,gBAAgBpY,EACnB+P,EAAezJ,OACfyJ,EAAexJ,OACfwJ,EAAe1J,UAEjB0J,EAAepY,MAKrB,GAHA3B,EAAUwB,OAASuhB,EACnBhlB,KAAKsc,eAAetY,IAAImc,EAAcle,GAElC+iB,EAAW,CACb,GAAIA,EAAUhZ,SACZ,GAAIgZ,EAAUhZ,QAAQiX,IAAIiC,GAKxB,YAJAllB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,QAK5B6E,EAAUhZ,QAAU,IAAIkQ,IAE1B8I,EAAUhZ,QAAQhI,IAAIkhB,EAAYjjB,GAC9B+iB,EAAUnhB,GAAGxB,EAAAsB,YAAY+hB,gBAAkBzjB,EAAU4B,GAAGxB,EAAAsB,YAAY6S,UACtEvU,EAAUwB,OAASuhB,EACnB/iB,EAAU+B,IAAI3B,EAAAsB,YAAY+hB,qBAEvB,GAAIzjB,EAAU4B,GAAGxB,EAAAsB,YAAY6S,QAAS,CAC3C,GAAIxW,KAAK0c,iBAAiBuG,IAAI9C,GAK5B,YAJAngB,KAAKohB,MACH/H,EAAAgI,eAAesE,4DACf9d,EAAYjH,KAAKwD,MAAO+b,GAM5B,GAFAngB,KAAK0c,iBAAiB1Y,IAAImc,EAAcle,GACxCjC,KAAKogB,iBAAiBpU,QAAQhI,IAAIkhB,EAAYjjB,GAC1C4F,EAAYzD,MAAMiJ,OAAOuY,QAAS,CACpC,GAAI5lB,KAAK2c,mBAAmBsG,IAAIiC,GAAa,CAC3C,IAAIW,EAA+B7lB,KAAK2c,mBAAmBzb,IAAIgkB,GAK/D,YAJAllB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAOyhB,EAAexd,QAAQ8X,cAInDle,EAAU+B,IAAI3B,EAAAsB,YAAY+hB,eAC1B1lB,KAAK2c,mBAAmB3Y,IAAIkhB,GAC1B7c,QAASpG,EACT4J,WAAYhE,EAAYjH,QAK9BZ,KAAK6kB,YAAY5iB,EAAW4F,KAGtBsU,EAAAla,UAAAye,kBAAR,SACEpU,EACAwT,EACAD,GAEA,IAAIvR,EAAehC,EAAUgC,aAC7B,GAAIA,EACF,IAAK,IAAIjO,EAAI,EAAGuG,EAAI0H,EAAazH,OAAQxG,EAAIuG,IAAKvG,EAChDL,KAAKqpB,iBACH/a,EAAajO,GACbiM,EAAUgB,aACVwS,EAAeD,QAGd,GAAIvT,EAAUiC,cAAe,CAClC,IAAI2W,EAAa5Y,EAAUiC,cAAcvI,KACrCma,EACF7T,EAAUlI,MAAMiJ,OAAOC,aACvBjL,EAAAuT,eACAsP,EAEF,GAAIllB,KAAKsc,eAAe2G,IAAI9C,GAM1B,YALAngB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACf9W,EAAUiC,cAAcnK,MACxB+b,GAMJ,IAAIF,EAAYjgB,KAAKsc,eAAepb,IAAIoL,EAAUgB,cAClD,GAAI2S,EAEF,YADAjgB,KAAKsc,eAAetY,IAAImc,EAAcF,GAKxC,IAAIc,EAAe,IAAIpH,EACvBoH,EAAaE,UAAYd,EACzB,IAAI1S,EAAepL,EAAA8W,iBAAmB7M,EAAUgB,aAChDyT,EAAatT,aAAeA,EAC5BsT,EAAaI,gBAAkB1T,EAAepL,EAAAuT,eAAiB,QAC/DmL,EAAalZ,YAAc,KAC3BgY,EAAc4F,KAAK1E,KAIf5E,EAAAla,UAAAonB,iBAAR,SACExhB,EACAyF,EACA8W,EACAvE,GAEA,IAAIoB,EAAYpZ,EAAYod,sBAC5B,GAAIjlB,KAAKsc,eAAe2G,IAAIhC,GAC1BjhB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO6c,OAH5B,CAQA,IAGI5Y,EAHAoF,EAAeH,EAAejL,EAAAuT,eAAiB/N,EAAY4F,aAAazH,KAI5E,GAAIqC,EAAUrI,KAAK0c,iBAAiBxb,IAAIuM,GACtCzN,KAAKsc,eAAetY,IAAIid,EAAW5Y,OADrC,CAMA,IAAMihB,EAAYjnB,EAAAuT,eAAiB,QAC/BmL,EAAe,IAAIpH,EACvBoH,EAAaE,UAAYA,EACrB3T,EAAaqL,SAAS2Q,IACxBvI,EAAatT,aAAeA,EAC5BsT,EAAaI,gBACX7T,EAAawI,UAAU,EAAGxI,EAAazG,OAASyiB,EAAUziB,OAAS,GACnEgB,EAAY4F,aAAazH,OAG3B+a,EAAatT,aAAeA,EAC5BsT,EAAaI,gBACX7T,EACAgc,EACAjnB,EAAAuT,eACA/N,EAAY4F,aAAazH,MAG7B+a,EAAalZ,YAAcA,EAC3BgY,EAAc4F,KAAK1E,MAGb5E,EAAAla,UAAA0e,oBAAR,SAA4B9Y,EAAmCmd,QAAA,IAAAA,MAAA,MAC7D,IAAI7E,EAAetY,EAAYod,sBAC/B,GAAIjlB,KAAKsc,eAAe2G,IAAI9C,GAC1BngB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,OAH5B,CAQA,IAAIlU,EAAapE,EAAYoE,WACzBiZ,EAAard,EAAYjH,KAAKoF,KAC9B/D,EAAY,IAAIsnB,EAClBvpB,KACAklB,EACA/E,EACAtY,EACAoE,EACIjM,KAAKqkB,gBAAgBpY,EAAY+P,EAAezJ,QAChDyJ,EAAepY,MAKrB,GAHA3B,EAAUwB,OAASuhB,EACnBhlB,KAAKsc,eAAetY,IAAImc,EAAcle,GAElC+iB,EAAW,CACb,GAAIA,EAAUhZ,SACZ,GAAIgZ,EAAUhZ,QAAQiX,IAAIhhB,EAAUke,cAKlC,YAJAngB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,QAK5B6E,EAAUhZ,QAAU,IAAIkQ,IAE1B8I,EAAUhZ,QAAQhI,IAAI/B,EAAUke,aAAcle,GAC1C+iB,EAAUnhB,GAAGxB,EAAAsB,YAAY+hB,gBAAkBzjB,EAAU4B,GAAGxB,EAAAsB,YAAY6S,SACtEvU,EAAU+B,IAAI3B,EAAAsB,YAAY+hB,oBAEvB,GAAIzjB,EAAU4B,GAAGxB,EAAAsB,YAAY6S,QAAS,CAC3C,GAAIxW,KAAK0c,iBAAiBuG,IAAI9C,GAK5B,YAJAngB,KAAKohB,MACH/H,EAAAgI,eAAesE,4DACf9d,EAAYjH,KAAKwD,MAAO+b,GAM5B,GAFAngB,KAAK0c,iBAAiB1Y,IAAImc,EAAcle,GACxCjC,KAAKogB,iBAAiBpU,QAAQhI,IAAIkhB,EAAYjjB,GAC1C4F,EAAYzD,MAAMiJ,OAAOuY,QAAS,CACpC,GAAI5lB,KAAK2c,mBAAmBsG,IAAIiC,GAAa,CAC3C,IAAIW,EAA+B7lB,KAAK2c,mBAAmBzb,IAAIgkB,GAK/D,YAJAllB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAOyhB,EAAexd,QAAQ8X,cAInDle,EAAU+B,IAAI3B,EAAAsB,YAAY+hB,eAC1B1lB,KAAK2c,mBAAmB3Y,IAAIkhB,GAC1B7c,QAASpG,EACT4J,WAAYhE,EAAYjH,QAM9B,IADA,IAAIklB,EAAqBje,EAAYmE,QAC5B3L,EAAI,EAAGuG,EAAIkf,EAAmBjf,OAAQxG,EAAIuG,IAAKvG,EAAG,CACzD,IAAI0lB,EAAoBD,EAAmBzlB,GAC3C,OAAQ0lB,EAAkBnjB,MAExB,KAAK2W,EAAA9W,SAAS+U,iBACZxX,KAAKgmB,gBAAkCD,EAAmB9jB,GAC1D,MAEF,KAAKsX,EAAA9W,SAASwS,kBACR8Q,EAAkBhiB,MAAM1B,EAAAsB,YAAYsiB,IAAM5jB,EAAAsB,YAAYuiB,KACxDlmB,KAAKmmB,mBAAsCJ,EAAmB9jB,GAE9DjC,KAAKomB,iBAAoCL,EAAmB9jB,GAE9D,MAEF,QACE,MAAM,IAAI+gB,MAAM,8BAKtBhjB,KAAK6kB,YAAY5iB,EAAW4F,KAGtBsU,EAAAla,UAAA2e,oBAAR,SACE/Y,EACAkY,EACAC,EACAwJ,QAAA,IAAAA,MAAA,MAEA,IAAIrJ,EAAetY,EAAYod,sBAC3BC,EAAard,EAAYjH,KAAKoF,KAC9Bgf,EAAYhlB,KAAKsc,eAAepb,IAAIif,GAQxC,GAPK6E,KACHA,EAAY,IAAIyE,EAAUzpB,KAAMklB,EAAY/E,EAActY,IAChDpE,OAAS+lB,EACnBxpB,KAAKsc,eAAetY,IAAImc,EAAc6E,GACtChlB,KAAK6kB,YAAYG,EAAWnd,IAG1B2hB,EAAiB,CACnB,GAAIA,EAAgBxd,SAClB,GAAIwd,EAAgBxd,QAAQiX,IAAIiC,GAK9B,YAJAllB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,QAK5BqJ,EAAgBxd,QAAU,IAAIkQ,IAEhCsN,EAAgBxd,QAAQhI,IAAIkhB,EAAYF,GACpCwE,EAAgB3lB,GAAGxB,EAAAsB,YAAY+hB,gBAAkBV,EAAUnhB,GAAGxB,EAAAsB,YAAY6S,SAC5EwO,EAAUhhB,IAAI3B,EAAAsB,YAAY+hB,oBAEvB,GAAIV,EAAUnhB,GAAGxB,EAAAsB,YAAY6S,QAAS,CAC3C,IAAIqP,EAAiB7lB,KAAK0c,iBAAiBxb,IAAIif,GAa/C,GAZI0F,GACGA,EAAehiB,GAAGxB,EAAAsB,YAAY6S,SACjCxW,KAAKohB,MACH/H,EAAAgI,eAAeqI,kFACf7hB,EAAYjH,KAAKwD,MAAO4gB,EAAU7E,cAGtC6E,EAAYa,GAEZ7lB,KAAK0c,iBAAiB1Y,IAAImc,EAAc6E,GAE1ChlB,KAAKogB,iBAAiBpU,QAAQhI,IAAIkhB,EAAYF,GAC1Cnd,EAAYzD,MAAMiJ,OAAOuY,QAAS,CACpC,GAAI5lB,KAAK2c,mBAAmBsG,IAAIiC,GAAa,CAC3C,IAAIyE,EAA+B3pB,KAAK2c,mBAAmBzb,IAAIgkB,GAC/D,GAAIyE,EAAethB,UAAY2c,EAK7B,YAJAhlB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAOulB,EAAethB,QAAQ8X,mBAKnDngB,KAAK2c,mBAAmB3Y,IAAIkhB,GAC1B7c,QAAS2c,EACTnZ,WAAYhE,EAAYjH,OAG5BokB,EAAUhhB,IAAI3B,EAAAsB,YAAY+hB,gBAK9B,IADA,IAAI1Z,EAAUnE,EAAYmE,QACjB3L,EAAI,EAAGuG,EAAIoF,EAAQnF,OAAQxG,EAAIuG,IAAKvG,EAC3C,OAAQ2L,EAAQ3L,GAAGuC,MACjB,KAAK2W,EAAA9W,SAASiU,iBACZ1W,KAAKsgB,gBAAkCtU,EAAQ3L,GAAI0f,EAAeC,EAAkBgF,GACpF,MAEF,KAAKzL,EAAA9W,SAAS0U,gBACZnX,KAAKugB,eAAgCvU,EAAQ3L,GAAI2kB,GACjD,MAEF,KAAKzL,EAAA9W,SAASuS,oBACZhV,KAAKygB,mBAAwCzU,EAAQ3L,GAAI2kB,GACzD,MAEF,KAAKzL,EAAA9W,SAASqV,qBACZ9X,KAAK2gB,oBAA0C3U,EAAQ3L,GAAI2kB,GAC3D,MAEF,KAAKzL,EAAA9W,SAAS8T,qBACZvW,KAAK4gB,oBAA0C5U,EAAQ3L,GAAI0f,EAAeC,EAAkBgF,GAC5F,MAEF,KAAKzL,EAAA9W,SAAS2V,gBAGZpY,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfxZ,EAAQ3L,GAAG+D,OAEb,MAEF,KAAKmV,EAAA9W,SAAS6T,SACZtW,KAAK8gB,oBAAuC9U,EAAQ3L,GAAI2kB,GACxD,MAEF,QACE,MAAM,IAAIhC,MAAM,+BAMhB7G,EAAAla,UAAA4e,oBAAR,SAA4BhZ,EAA8Bmd,QAAA,IAAAA,MAAA,MAGxD,IAAIpkB,EAAOiH,EAAYjH,KAAKoF,KAC5B,GAAIhG,KAAKwc,YAAYyG,IAAIriB,IAASZ,KAAKyc,YAAYwG,IAAIriB,GACrDZ,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAOxD,OAH5B,CAOA,IAAI8P,EAAQ,IAAImJ,EAChBnJ,EAAM5E,eAAiBjE,EAAYiE,eACnC4E,EAAMrM,KAAOwD,EAAYxD,KAEzBrE,KAAKyc,YAAYzY,IAAIpD,EAAM8P,KAGrByL,EAAAla,UAAA6e,oBAAR,SAA4BxU,EAA8B0Y,QAAA,IAAAA,MAAA,MAExD,IADA,IAAI1W,EAAehC,EAAUgC,aACpBjO,EAAI,EAAGuG,EAAI0H,EAAazH,OAAQxG,EAAIuG,IAAKvG,EAAG,CACnD,IAAIwH,EAAcyG,EAAajO,GAC3B4L,EAAapE,EAAYoE,WACzBkU,EAAetY,EAAYod,sBAC/B,GAAIjlB,KAAKsc,eAAe2G,IAAI9C,GAC1BngB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,OAH5B,CAOA,IAAI+E,EAAard,EAAYjH,KAAKoF,KAC9B4jB,EAAS,IAAI5F,EACfhkB,KACAklB,EACA/E,EACA7G,EAAA+E,KAAKc,KACLtX,EACAoE,EACIjM,KAAKqkB,gBAAgBpY,EACnB+P,EAAezJ,OACfyJ,EAAexJ,OACfwJ,EAAe1J,UAEjB0J,EAAepY,MAYrB,GAVAgmB,EAAOnmB,OAASuhB,EAChBhlB,KAAKsc,eAAetY,IAAImc,EAAcyJ,GAElCA,EAAO7E,aAAa/I,EAAexJ,UAAYoX,EAAO/lB,GAAGxB,EAAAsB,YAAYkmB,QACvE7pB,KAAKohB,MACH/H,EAAAgI,eAAeqD,8BACfzS,OAAOsH,EAAAX,cAAcW,EAAAzH,cAAcU,OAAQvG,IAAa7H,MAAO,UAI/D4gB,EAAW,CACb,GAAIA,EAAUhZ,SACZ,GAAIgZ,EAAUhZ,QAAQiX,IAAIiC,GAAa,CACrCllB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,GAE1B,eAGF6E,EAAUhZ,QAAU,IAAIkQ,IAE1B8I,EAAUhZ,QAAQhI,IAAIkhB,EAAY0E,GAC9B5E,EAAUnhB,GAAGxB,EAAAsB,YAAY+hB,gBAAkBkE,EAAO/lB,GAAGxB,EAAAsB,YAAY6S,SACnEoT,EAAO5lB,IAAI3B,EAAAsB,YAAY+hB,oBAEpB,GAAIkE,EAAO/lB,GAAGxB,EAAAsB,YAAY6S,UAC3BxW,KAAK0c,iBAAiBuG,IAAI9C,GAC5BngB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAO+b,GAG1BngB,KAAK0c,iBAAiB1Y,IAAImc,EAAcyJ,GAE1C5pB,KAAKogB,iBAAiBpU,QAAQhI,IAAIkhB,EAAY0E,GAC1C/hB,EAAYzD,MAAMiJ,OAAOuY,SAAS,CACpC,GAAI5lB,KAAK2c,mBAAmBsG,IAAIiC,GAAa,CAC3C,IAAIW,EAA+B7lB,KAAK2c,mBAAmBzb,IAAIgkB,GAC/DllB,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAOyhB,EAAexd,QAAQ8X,cAEjD,SAEFyJ,EAAO5lB,IAAI3B,EAAAsB,YAAY+hB,eACvB1lB,KAAK2c,mBAAmB3Y,IAAIkhB,GAC1B7c,QAASuhB,EACT/d,WAAYhE,EAAYjH,OAI9BZ,KAAK6kB,YAAY+E,EAAQ/hB,MAG/BsU,EA/uDA,CAA6B9C,EAAAyQ,mBAkzD7B,SAAgBtF,EAAoB5hB,GAClC,OAAQA,GACN,KAAK2W,EAAAzH,cAAcS,OAAQ,OAAOyJ,EAAezJ,OACjD,KAAKgH,EAAAzH,cAAcY,SACnB,KAAK6G,EAAAzH,cAAcgB,gBAAiB,OAAOkJ,EAAelJ,gBAC1D,KAAKyG,EAAAzH,cAAciB,gBAAiB,OAAOiJ,EAAejJ,gBAC1D,KAAKwG,EAAAzH,cAAckB,iBAAkB,OAAOgJ,EAAehJ,iBAC3D,KAAKuG,EAAAzH,cAAcc,UAAW,OAAOoJ,EAAepJ,UACpD,KAAK2G,EAAAzH,cAAca,OAAQ,OAAOqJ,EAAerJ,OACjD,KAAK4G,EAAAzH,cAAcU,OAAQ,OAAOwJ,EAAexJ,OACjD,KAAK+G,EAAAzH,cAAcQ,SAAU,OAAO0J,EAAe1J,SACnD,KAAKiH,EAAAzH,cAAcM,QAAS,OAAO4J,EAAe5J,QAIlD,QAAS,OAAO4J,EAAepY,MAj0DtBlE,EAAAyc,UAkvDb,SAAYJ,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,0BAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,wBAEAA,IAAA,0BAEAA,IAAA,0BAhCF,CAAYA,EAAArc,EAAAqc,cAAArc,EAAAqc,iBAmCZ,SAAYC,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,uCAEAA,IAAA,0BAEAA,IAAA,oBAEAA,IAAA,oBAEAA,IAAA,yBAEAA,IAAA,uBAEAA,IAAA,yBAEAA,IAAA,sBAEAA,IAAA,sBA1BF,CAAYA,EAAAtc,EAAAsc,iBAAAtc,EAAAsc,oBA6BZtc,EAAA8kB,sBAoBA,IAAAuF,EAAA,WAoBE,SAAAA,EAAsBC,EAAkB9E,EAAoB/E,GAT5DngB,KAAA0D,MAAqBrB,EAAAsB,YAAYC,KAEjC5D,KAAA8mB,eAAiC9K,EAAepY,KAEhD5D,KAAAgM,QAAsC,KAEtChM,KAAAyD,OAAyB,KAIvBzD,KAAKgqB,QAAUA,EACfhqB,KAAKklB,WAAaA,EAClBllB,KAAKiqB,cAAgB9J,EA4BzB,OAzBS4J,EAAAG,aAAP,SAAoBC,WAClB,IAAKA,EAAK,OAAOA,EACjB,IAAIC,EAAW,OACf,IAAe,IAAAC,EAAA7I,EAAA2I,GAAGG,EAAAD,EAAA3I,QAAA4I,EAAA3I,KAAA2I,EAAAD,EAAA3I,OAAE,CAAf,IAAI6I,EAAED,EAAAhpB,MACT8oB,GAAiB,KAANG,EAAY,IAAMA,oGAE/B,OAAOH,GAGTrpB,OAAAC,eAAI+oB,EAAA9nB,UAAA,oBAAJ,WACE,OAAO8nB,EAAQG,aAAalqB,KAAKiqB,oBAGnC,SAAiB9J,GACfngB,KAAKiqB,cAAgB9J,mCAIvB4J,EAAA9nB,UAAA4B,GAAA,SAAGC,GAA2B,OAAQ9D,KAAK0D,MAAQI,IAASA,GAE5DimB,EAAA9nB,UAAA8B,MAAA,SAAML,GAA4B,OAA+B,IAAvB1D,KAAK0D,MAAQA,IAEvDqmB,EAAA9nB,UAAA+B,IAAA,SAAIF,GAA2B9D,KAAK0D,OAASI,GAE7CimB,EAAA9nB,UAAA8iB,aAAA,SAAajhB,GAA8B,OAAQ9D,KAAK8mB,eAAiBhjB,IAASA,GACpFimB,EAnDA,GAAsBrqB,EAAAqqB,UAsDtB,IAAA7J,EAAA,SAAA7O,GAQE,SAAA6O,EACE8J,EACA3c,GAFF,IAAAkE,EAIEF,EAAA7Q,KAAAR,KAAMgqB,EAAS3c,EAAOC,aAAcjL,EAAA8W,iBAAmB9L,EAAOC,eAAatN,YAV7EuR,EAAA3O,KAAOmZ,EAAYgN,UAWjBxX,EAAKvF,QAAU,IAAIkQ,MAEvB,OAf+B5K,EAAA4O,EAAA7O,GAe/B6O,EAfA,CAA+B6J,GAAlBrqB,EAAAwgB,YAkBb,IAAAuJ,EAAA,SAAApY,GASE,SAAAoY,EACEO,EACA9E,EACA/E,EACAtY,GAJF,IAAA0J,EAMEF,EAAA7Q,KAAAR,KAAMgqB,EAAS9E,EAAY/E,IAAangB,YAZ1CuR,EAAA3O,KAAOmZ,EAAYyO,UAajBjZ,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,QAE7B,OAnB+B4N,EAAAmY,EAAApY,GAmB/BoY,EAnBA,CAA+BM,GAAlBrqB,EAAA+pB,YAsBb,IAAAjB,EAAA,SAAAnX,GAQE,SAAAmX,EACEwB,EACA9E,EACA/E,EACAtY,GAJF,IAAA0J,EAMEF,EAAA7Q,KAAAR,KAAMgqB,EAAS9E,EAAY/E,IAAangB,YAZ1CuR,EAAA3O,KAAOmZ,EAAY0O,KAajBlZ,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,QAE7B,OAlB0B4N,EAAAkX,EAAAnX,GAkB1BmX,EAlBA,CAA0BuB,GAAbrqB,EAAA8oB,OAqBb,IAAAG,EAAA,SAAAtX,GASE,SAAAsX,EACED,EACAsB,EACA9E,EACA/E,EACAtY,GALF,IAAA0J,EAOEF,EAAA7Q,KAAAR,KAAMgqB,EAAS9E,EAAY/E,IAAangB,YAd1CuR,EAAA3O,KAAOmZ,EAAY2O,UAKnBnZ,EAAAoZ,cAAqB,EAUnBpZ,EAAK9N,OAASilB,EACdnX,EAAK1J,YAAcA,IAEvB,OApB+ByJ,EAAAqX,EAAAtX,GAoB/BsX,EApBA,CAA+BoB,GAAlBrqB,EAAAipB,YAsBb,SAAkBiC,GAChBA,IAAA,eACAA,IAAA,qBACAA,IAAA,iBAHF,CAAkBlrB,EAAAkrB,oBAAAlrB,EAAAkrB,uBAMlB,IAAAC,EAAA,SAAAxZ,GAeE,SAAAwZ,EACEb,EACA9E,EACA/E,EACA9b,EACAwD,GALF,IAAA0J,EAOEF,EAAA7Q,KAAAR,KAAMgqB,EAAS9E,EAAY/E,IAAangB,YAb1CuR,EAAAuZ,kBAAiB,EAcfvZ,EAAKlN,KAAOA,EACZkN,EAAK1J,YAAcA,IAgBvB,OAxCyCyJ,EAAAuZ,EAAAxZ,GA2BvCwZ,EAAA5oB,UAAAgiB,yBAAA,SAAyB3iB,GAIvB,OAHAtB,KAAK8qB,kBAAiB,EACtB9qB,KAAK+qB,qBAAuBzpB,EAC5BtB,KAAKgE,IAAI3B,EAAAsB,YAAYkmB,MAAQxnB,EAAAsB,YAAYqnB,SAClChrB,MAGT6qB,EAAA5oB,UAAAkiB,uBAAA,SAAuB7iB,GAIrB,OAHAtB,KAAK8qB,kBAAiB,EACtB9qB,KAAKirB,mBAAqB3pB,EAC1BtB,KAAKgE,IAAI3B,EAAAsB,YAAYkmB,MAAQxnB,EAAAsB,YAAYqnB,SAClChrB,MAEX6qB,EAxCA,CAAyCd,GAA5BrqB,EAAAmrB,sBA2Cb,IAAA7G,EAAA,SAAA3S,GAIE,SAAA2S,EACEgG,EACA9E,EACA/E,EACA9b,EACAwD,EACAif,GANF,IAAAvV,EAQEF,EAAA7Q,KAAAR,KAAMgqB,EAAS9E,EAAY/E,EAAc9b,EAAMwD,IAAY7H,YAV7DuR,EAAA3O,KAAOmZ,EAAYxJ,OAWjBhB,EAAK7N,MAAQmE,EAAcA,EAAYnE,MAAQrB,EAAAsB,YAAYC,KAC3D2N,EAAKuV,eAAiBA,EACtBvV,EAAKlN,KAAOA,IAEhB,OAjB4BiN,EAAA0S,EAAA3S,GAiB5B2S,EAjBA,CAA4B6G,GAAfnrB,EAAAskB,SAoBb,IAAAkH,EAAA,WAiBA,OALE,SAAYtqB,EAAcyD,EAAYU,QAAA,IAAAA,MAAA,MACpC/E,KAAKY,KAAOA,EACZZ,KAAKqE,KAAOA,EACZrE,KAAK+E,YAAcA,GAfvB,GAAarF,EAAAwrB,YAoBb,IAAAC,EAAA,SAAA9Z,GASE,SAAA8Z,EACEnB,EACA9E,EACAkG,EACA/mB,EACAwD,QAAA,IAAAA,MAAA,MALF,IAAA0J,EAOEF,EAAA7Q,KAAAR,KAAMgqB,EAAS9E,EAAYA,EAAY7gB,EAAMwD,IAAY7H,YAd3DuR,EAAA3O,KAAOmZ,EAAYsP,MAKnB9Z,EAAA+Z,aAA8B,KAU5B/Z,EAAK6Z,MAAQA,IAEjB,OAnB2B9Z,EAAA6Z,EAAA9Z,GAmB3B8Z,EAnBA,CAA2BN,GAAdnrB,EAAAyrB,QAsBb,IAAApE,EAAA,SAAA1V,GAgBE,SAAA0V,EACEiD,EACA9E,EACA/E,EACAtY,EACAwe,EACAS,QADA,IAAAT,MAAA,WACA,IAAAS,MAAiC9K,EAAepY,MANlD,IAAA2N,EAQEF,EAAA7Q,KAAAR,KAAMgqB,EAAS9E,EAAY/E,IAAangB,YAtB1CuR,EAAA3O,KAAOmZ,EAAYuH,mBAOnB/R,EAAAga,UAAkC,IAAIrP,IAEtC3K,EAAAia,mBAAoC,KAEpCja,EAAAiW,aAA6BpO,EAAa0C,QAYxCvK,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,MACzB6N,EAAK8U,eAAiBA,EACtB9U,EAAKuV,eAAiBA,IAI1B,OAhCuCxV,EAAAyV,EAAA1V,GA+BrC0V,EAAA9kB,UAAA0iB,SAAA,WAAqB,OAAO3kB,KAAKklB,YACnC6B,EAhCA,CAAuCgD,GAA1BrqB,EAAAqnB,oBAmCb,IAAA0E,EAAA,SAAApa,GAoCE,SAAAoa,EACExpB,EACAke,EACA/Q,EACA3L,EACAioB,gBADA,IAAAjoB,MAAA,WACA,IAAAioB,MAAA,MALF,IAAAna,EAOEF,EAAA7Q,KAAAR,KAAMiC,EAAU+nB,QAAS/nB,EAAUijB,WAAY/E,IAAangB,KAO5D,GAhDFuR,EAAA3O,KAAOmZ,EAAY9H,SAOnB1C,EAAAoa,aAAkC,IAAIzP,IAEtC3K,EAAAqa,iBAEAra,EAAAsa,oBAEAta,EAAAua,aAA8B,KAM9Bva,EAAAwa,kBAEAxa,EAAAya,IAAmB,EAEnBza,EAAA0a,oBAA2B,EAE3B1a,EAAA2a,WAA8B,KAE9B3a,EAAA4a,WAA0B,KAElB5a,EAAA6a,YAAmB,EACnB7a,EAAA8a,WAA2B,KACnC9a,EAAA+a,aAAoB,EAkFZ/a,EAAAgb,SAA2B,KAC3Bhb,EAAAib,SAA2B,KAC3Bjb,EAAAkb,SAA2B,KAC3Blb,EAAAmb,SAA2B,KA1EjCnb,EAAKtP,UAAYA,EACjBsP,EAAKnC,UAAYA,EACjBmC,EAAK9N,OAASA,EACd8N,EAAK7N,MAAQzB,EAAUyB,MACvB6N,EAAKuV,eAAiB7kB,EAAU6kB,eAChCvV,EAAKma,wBAA0BA,GACzBzpB,EAAU4B,GAAGxB,EAAAsB,YAAY8f,SAAW,CACxC,IAAIkJ,EAAa,EACjB,GAAIlpB,GAAUA,EAAOb,MAAQmZ,EAAYlI,MAAO,CAC9C5B,OAAOV,EAAK1N,GAAGxB,EAAAsB,YAAYipB,WAC3B,IAAIC,EAAQ,IAAI1B,EACdlpB,EAAU+nB,QACV,OACA2C,IACA1a,OAAO7C,EAAU0d,WAEnBvb,EAAKoa,aAAa3nB,IAAI,OAAQ6oB,GAC9Btb,EAAKqa,cAAciB,EAAMzB,OAASyB,EAClC,IAAIE,EAAiCtpB,EAAQioB,wBAC7C,GAAIqB,EAAwB,CACrBxb,EAAKma,0BAAyBna,EAAKma,wBAA0B,IAAIxP,SACtE,IAA2C,IAAA8Q,EAAAxL,EAAAuL,GAAsBE,EAAAD,EAAAtL,QAAAuL,EAAAtL,KAAAsL,EAAAD,EAAAtL,OAAE,CAA1D,IAAAwL,EAAArL,EAAAoL,EAAA3rB,MAAA,GAAC6rB,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GAClB3b,EAAKma,wBAAwBzI,IAAIkK,IACpC5b,EAAKma,wBAAwB1nB,IAAImpB,EAAeC,4GAKtDnb,QAAQV,EAAK1N,GAAGxB,EAAAsB,YAAYipB,WAG9B,IADA,IAAIhJ,EAAiBxU,EAAUwU,eACtBvjB,EAAI,EAAGuG,EAAIgd,EAAe/c,OAAQxG,EAAIuG,IAAKvG,EAAG,CACrD,IAAIgtB,EAAgBzJ,EAAevjB,GAC/BitB,EAAgBle,EAAUme,iBAAiBltB,GAC3CwsB,EAAQ,IAAI1B,EACdlpB,EAAU+nB,QACVsD,EACAX,IACAU,GAGF9b,EAAKoa,aAAa3nB,IAAIspB,EAAeT,GACrCtb,EAAKqa,cAAciB,EAAMzB,OAASyB,UAGtCtb,EAAKic,KAAOC,EAAK9rB,OAAO4P,KAkL5B,OA3Q8BD,EAAAma,EAAApa,GA6F5Boa,EAAAxpB,UAAAyrB,SAAA,SAASrpB,EAAYzD,EAA4BiH,QAA5B,IAAAjH,MAAA,WAA4B,IAAAiH,MAAA,MAE/C,IAAI8kB,EAAa3sB,KAAKoP,UAAUwU,eAAe/c,OAAS7G,KAAK6rB,iBAAiBhlB,OAC1E7G,KAAK6D,GAAGxB,EAAAsB,YAAYipB,aAAaD,EACrC,IAAIE,EAAQ,IAAI1B,EACdnrB,KAAKiC,UAAU+nB,QACfppB,GAEI,OAAS+rB,EAAWhI,SAAS,IACjCgI,EACAtoB,EACAwD,GAEF,GAAIjH,EAAM,CACR,GAAIZ,KAAK2rB,aAAa1I,IAAIriB,GAAO,MAAM,IAAIoiB,MAAM,wBACjDhjB,KAAK2rB,aAAa3nB,IAAIpD,EAAMisB,GAI9B,OAFA7sB,KAAK4rB,cAAciB,EAAMzB,OAASyB,EAClC7sB,KAAK6rB,iBAAiBpG,KAAKphB,GACpBwoB,GASTpB,EAAAxpB,UAAA0rB,aAAA,SAAatpB,EAAYupB,GACvB,IAAIC,EAoBAhB,EAnBJ,YAFuB,IAAAe,OAAA,GAEfvpB,EAAKypB,gBACX,OACED,EAAQ7tB,KAAKusB,SACb,MAEF,OACEsB,EAAQ7tB,KAAKwsB,SACb,MAEF,OACEqB,EAAQ7tB,KAAKysB,SACb,MAEF,OACEoB,EAAQ7tB,KAAK0sB,SACb,MAEF,QAAS,MAAM,IAAI1J,MAAM,0BAa3B,OAVI6K,GAASA,EAAMhnB,SACjBgmB,EAAQgB,EAAME,OACR1pB,KAAOA,EACbwoB,EAAMnpB,MAAQrB,EAAAsB,YAAYC,MAE1BipB,EAAQ7sB,KAAK0tB,SAASrpB,GAEpBA,EAAKR,GAAG,KACV7D,KAAKwtB,KAAKQ,gBAAgBnB,EAAMzB,MAAOwC,GAElCf,GAITpB,EAAAxpB,UAAAgsB,cAAA,SAAcpB,GACZ,IAAIA,EAAMhpB,GAAGxB,EAAAsB,YAAYqnB,SAAzB,CAEA,IAAI6C,EAEJ,OAHA5b,OAAO4a,EAAMzB,OAAS,GAEtBnZ,OAAqB,MAAd4a,EAAMxoB,MACEwoB,EAAMxoB,KAAMypB,gBACzB,OACED,EAAQ7tB,KAAKusB,WAAavsB,KAAKusB,aAC/B,MAEF,OACEsB,EAAQ7tB,KAAKwsB,WAAaxsB,KAAKwsB,aAC/B,MAEF,OACEqB,EAAQ7tB,KAAKysB,WAAazsB,KAAKysB,aAC/B,MAEF,OACEoB,EAAQ7tB,KAAK0sB,WAAa1sB,KAAK0sB,aAC/B,MAEF,QAAS,MAAM,IAAI1J,MAAM,0BAE3B/Q,OAAO4a,EAAMzB,OAAS,GACtByC,EAAMpI,KAAKoH,KAIbpB,EAAAxpB,UAAAisB,oBAAA,SAAoB7pB,EAAYupB,GAC9B,IAAIC,EAoBAhB,EAnBJ,OAAQxoB,EAAKypB,gBACX,OACED,EAAQ7tB,KAAKusB,WAAavsB,KAAKusB,aAC/B,MAEF,OACEsB,EAAQ7tB,KAAKwsB,WAAaxsB,KAAKwsB,aAC/B,MAEF,OACEqB,EAAQ7tB,KAAKysB,WAAazsB,KAAKysB,aAC/B,MAEF,OACEoB,EAAQ7tB,KAAK0sB,WAAa1sB,KAAK0sB,aAC/B,MAEF,QAAS,MAAM,IAAI1J,MAAM,0BAa3B,OAVI6K,EAAMhnB,QACRgmB,EAAQgB,EAAMA,EAAMhnB,OAAS,IACvBxC,KAAOA,GAEbwoB,EAAQ7sB,KAAK0tB,SAASrpB,GACtBwpB,EAAMpI,KAAKoH,IAETxoB,EAAKR,GAAG,KACV7D,KAAKwtB,KAAKQ,gBAAgBnB,EAAMzB,MAAOwC,GAElCf,GAITpB,EAAAxpB,UAAAksB,kBAAA,WACE,IAAIC,EAAKpuB,KAAKosB,cAGd,OAFKpsB,KAAKqsB,WACLrsB,KAAKqsB,WAAW5G,KAAK2I,GADJpuB,KAAKqsB,YAAe+B,GAEnCpuB,KAAK8rB,aAAesC,EAAGzJ,SAAS,KAIzC8G,EAAAxpB,UAAAosB,kBAAA,WACEpc,OAA0B,MAAnBjS,KAAKqsB,YACZ,IAAIxlB,EAAiB7G,KAAKqsB,WAAYxlB,OACtCoL,OAAOpL,EAAS,GACR7G,KAAKqsB,WAAY0B,MACrBlnB,EAAS,EACX7G,KAAK8rB,aAAuB9rB,KAAKqsB,WAAYxlB,EAAS,GAAG8d,SAAS,KAElE3kB,KAAK8rB,aAAe,KACpB9rB,KAAKqsB,WAAa,OAKtBZ,EAAAxpB,UAAAqsB,SAAA,SAAS3uB,EAAgBqsB,GAMvB,GALAhsB,KAAKgsB,IAAMA,EACX/Z,QAAQjS,KAAKqsB,aAAersB,KAAKqsB,WAAWxlB,QAC5C7G,KAAKqsB,WAAa,KAClBrsB,KAAK8rB,aAAe,KACpB9rB,KAAKusB,SAAWvsB,KAAKwsB,SAAWxsB,KAAKysB,SAAWzsB,KAAK0sB,SAAW,KAC5D1sB,KAAKgqB,QAAQ5L,QAAQmQ,UAEvB,IADA,IAAIxC,EAAiB/rB,KAAK+rB,eACjB1rB,EAAI,EAAGuG,EAAImlB,EAAellB,OAAQxG,EAAIuG,IAAKvG,EAAG,CACrD,IAAImuB,EAAgBzC,EAAe1rB,GACnCV,EAAO8uB,iBACLzC,EACAwC,EAAcE,aACdF,EAAcnhB,OAAOkI,eACrBiZ,EAAcG,KACdH,EAAcI,UAOtBnD,EAAAxpB,UAAA0iB,SAAA,WAAqB,OAAO3kB,KAAKiC,UAAUijB,YAC7CuG,EA3QA,CAA8B1B,GAAjBrqB,EAAA+rB,WA8Qb,IAAAoD,EAAA,SAAAxd,GAUE,SAAAwd,EAAY7E,EAAkB5a,GAA9B,IAAAmC,EACEF,EAAA7Q,KAAAR,KAAMgqB,EAAS,GAAI,KAAGhqB,KATxBuR,EAAA3O,KAAOmZ,EAAY+S,gBAUjB,IAAI5J,EAAa9V,EAAU2f,2BAC3Bxd,EAAK2T,WAAaA,EAClB3T,EAAK4O,aAAe+E,EACpB3T,EAAKnC,UAAYA,EACjBmC,EAAKlN,KAAOiV,EAAA+E,KAAKQ,IAAImQ,WAAW5f,KAEpC,OAlBoCkC,EAAAud,EAAAxd,GAkBpCwd,EAlBA,CAAoC9E,GAAvBrqB,EAAAmvB,iBAqBb,IAAAhI,EAAA,SAAAxV,GAUE,SAAAwV,EACER,EACAnB,EACA/E,EACAtY,GAJF,IAAA0J,EAMEF,EAAA7Q,KAAAR,KAAMqmB,EAAe2D,QAAS9E,EAAY/E,IAAangB,YAdzDuR,EAAA3O,KAAOmZ,EAAYkT,gBAejB1d,EAAK8U,eAAiBA,EACtB9U,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,QAE7B,OArBoC4N,EAAAuV,EAAAxV,GAqBpCwV,EArBA,CAAoCkD,GAAvBrqB,EAAAmnB,iBAwBb,IAAAqI,EAAA,SAAA7d,GAUE,SAAA6d,EACEjtB,EACAke,EACA9b,EACAwD,EACApE,GALF,IAAA8N,EAOEF,EAAA7Q,KAAAR,KAAMiC,EAAU+nB,QAAS/nB,EAAUijB,WAAY/E,EAAc9b,EAAMwD,IAAY7H,YAfjFuR,EAAA3O,KAAOmZ,EAAYoT,MAKnB5d,EAAA6d,cAAqB,EAWnB7d,EAAKtP,UAAYA,EACjBsP,EAAK7N,MAAQzB,EAAUyB,MACvB6N,EAAKlN,KAAOA,EACZkN,EAAK9N,OAASA,IAElB,OAvB2B6N,EAAA4d,EAAA7d,GAuB3B6d,EAvBA,CAA2BrE,GAAdnrB,EAAAwvB,QA0Bb,IAAAhH,EAAA,SAAA7W,GAYE,SAAA6W,EACE8B,EACA9E,EACA/E,EACA1c,GAJF,IAAA8N,EAMEF,EAAA7Q,KAAAR,KAAMgqB,EAAS9E,EAAY/E,IAAangB,YAhB1CuR,EAAA3O,KAAOmZ,EAAYgM,SAKnBxW,EAAAyW,gBAA4C,KAE5CzW,EAAA0W,gBAA4C,KAU1C1W,EAAK9N,OAASA,IAElB,OArB8B6N,EAAA4W,EAAA7W,GAqB9B6W,EArBA,CAA8B6B,GAAjBrqB,EAAAwoB,WAwBb,IAAA/C,EAAA,SAAA9T,GAiBE,SAAA8T,EACE6E,EACA9E,EACA/E,EACAtY,EACAif,GALF,IAAAvV,EAOEF,EAAA7Q,KAAAR,KAAMgqB,EAAS9E,EAAY/E,IAAangB,YAtB1CuR,EAAA3O,KAAOmZ,EAAY0G,gBAKnBlR,EAAAga,UAA+B,IAAIrP,IAEnC3K,EAAAoV,gBAA8C,KAE9CpV,EAAAmR,cAAuC,KAEvCnR,EAAAyV,qBAAiD,KAEjDzV,EAAA+V,mBAA2D,IAAIpL,IAU7D3K,EAAK1J,YAAcA,EACnB0J,EAAK7N,MAAQmE,EAAYnE,MACzB6N,EAAKuV,eAAiBA,IAM1B,OAjCoCxV,EAAA6T,EAAA9T,GA8BlC8T,EAAAljB,UAAA0iB,SAAA,WACE,OAAO3kB,KAAKklB,YAEhBC,EAjCA,CAAoC4E,GAAvBrqB,EAAAylB,iBAoCb,IAAAkK,EAAA,SAAAhe,GAwBE,SAAAge,EACEptB,EACAijB,EACA/E,EACAjc,EACAorB,gBADA,IAAAprB,MAAA,WACA,IAAAorB,MAAA,MALF,IAAA/d,EAOEF,EAAA7Q,KAAAR,KAAMiC,EAAU+nB,QAAS9E,EAAY/E,IAAangB,KASlD,GAtCFuR,EAAA3O,KAAOmZ,EAAYlI,MAWnBtC,EAAAma,wBAAmD,KAEnDna,EAAAge,oBAA2B,EAE3Bhe,EAAAie,oBAAuC,KAEvCje,EAAA8V,UAA+C,KAE/C9V,EAAAke,aAAyB,EAWvBle,EAAKtP,UAAYA,EACjBsP,EAAK7N,MAAQzB,EAAUyB,MACvB6N,EAAKuV,eAAiB7kB,EAAU6kB,eAChCvV,EAAKrN,cAAgBA,EACrBqN,EAAKlN,KAAOpC,EAAU+nB,QAAQ5L,QAAQW,UAAU2Q,QAAQne,GACxDA,EAAK+d,KAAOA,EAGRA,EAAM,CACR,IAAIvC,EAAyBuC,EAAK5D,wBAClC,GAAIqB,EAAwB,CACrBxb,EAAKma,0BAAyBna,EAAKma,wBAA0B,IAAIxP,SACtE,IAAiC,IAAAyT,EAAAnO,EAAAuL,GAAsB6C,EAAAD,EAAAjO,QAAAkO,EAAAjO,KAAAiO,EAAAD,EAAAjO,OAAE,CAAhD,IAAAwL,EAAArL,EAAA+N,EAAAtuB,MAAA,GAAC6mB,EAAA+E,EAAA,GAAU2C,EAAA3C,EAAA,GAClB3b,EAAKma,wBAAwB1nB,IAAImkB,EAAU0H,uGAMjD,IACIxvB,EAAQuG,EADRiB,EAAc0J,EAAKtP,UAAU4F,YAEjC,GAAIA,EAAa,CACf,IAAIiE,EAAiBjE,EAAYiE,eACjC,GAAI5H,EAAe,CACjB,IAAK0C,EAAI1C,EAAc2C,SAAWiF,EAAejF,OAC/C,MAAM,IAAImc,MAAM,gCAElB,GAAIpc,EAEF,IADK2K,EAAKma,0BAAyBna,EAAKma,wBAA0B,IAAIxP,KACjE7b,EAAI,EAAGA,EAAIuG,IAAKvG,EACnBkR,EAAKma,wBAAwB1nB,IAAI8H,EAAezL,GAAGO,KAAKoF,KAAM9B,EAAc7D,SAG3E,GAAIyL,EAAejF,OACxB,MAAM,IAAImc,MAAM,yCAoDxB,OAtH2B1R,EAAA+d,EAAAhe,GAwEzBge,EAAAptB,UAAA6tB,eAAA,SAAeC,GACb,IAAIC,EAAwBhwB,KAC5B,GAAG,GAAIgwB,GAAWD,EAAQ,OAAO,QAC1BC,EAAUA,EAAQV,MACzB,OAAO,GAITD,EAAAptB,UAAAguB,eAAA,SAAertB,EAAoBstB,GACjC,QADiC,IAAAA,OAAA,GAC7BA,EACF,OAAQttB,GACN,KAAKwW,EAAaY,YAEhB,GADImW,EAAoBnwB,KAAKiwB,eAAe7W,EAAac,uBAClC,OAAOiW,EAC9B,MAEF,KAAK/W,EAAaa,YAChB,IAAIkW,EACJ,GADIA,EAAoBnwB,KAAKiwB,eAAe7W,EAAae,uBAClC,OAAOgW,EAC9B,MAEF,QAASle,QAAO,GAGpB,IAAIkR,EAAyBnjB,KAC7B,EAAG,CACD,IAAIqnB,EAAYlE,EAASkE,UACzB,GAAIA,EAAW,CACb,IAAI+I,EAAW/I,EAAUnmB,IAAI0B,GAC7B,GAAIwtB,EAAU,OAAOA,SAEhBjN,EAAWA,EAASmM,MAC7B,OAAO,MAGTD,EAAAptB,UAAAouB,SAAA,SAASC,GACP,IAAItkB,EAAUiG,OAAOjS,KAAKgM,SAC1BiG,OAAOjG,EAAQiX,IAAIqN,IACnB,IAAIC,EAAiBvkB,EAAQ9K,IAAIovB,GAEjC,OADAre,OAAOse,EAAM3tB,MAAQmZ,EAAYoT,OAClBoB,EAAOnB,cAGxBC,EAAAptB,UAAA0iB,SAAA,WACE,OAAO3kB,KAAKklB,YAEhBmK,EAtHA,CAA2BtF,GAAdrqB,EAAA2vB,QAyHb,IAAA9F,EAAA,SAAAlY,GAQE,SAAAkY,EACES,EACA9E,EACA/E,EACAtY,EACAif,GALF,IAAAvV,EAOEF,EAAA7Q,KAAAR,KAAMgqB,EAAS9E,EAAY/E,EAActY,EAAaif,IAAe9mB,YAbvEuR,EAAA3O,KAAOmZ,EAAYwK,sBAerB,OAjBwCjV,EAAAiY,EAAAlY,GAiBxCkY,EAjBA,CAAwCpE,GAA3BzlB,EAAA6pB,qBAoBb,IAAAiH,EAAA,SAAAnf,GAUE,SAAAmf,EACEvuB,EACAijB,EACA/E,EACAjc,EACAorB,QADA,IAAAprB,eACA,IAAAorB,MAAA,MALF,IAAA/d,EAOEF,EAAA7Q,KAAAR,KAAMiC,EAAWijB,EAAY/E,EAAcjc,EAAeorB,IAAKtvB,YAfjEuR,EAAA3O,KAAOmZ,EAAY0U,YAiBrB,OAnB+Bnf,EAAAkf,EAAAnf,GAmB/Bmf,EAnBA,CAA+BnB,GAAlB3vB,EAAA8wB,YAsBb,SAAkBE,GAEhBA,IAAA,eAKAA,IAAA,qBAEAA,IAAA,qCAEAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,0BAEAA,IAAA,0BAKAA,IAAA,kDAEAA,IAAA,iDAEAA,IAAA,iDAEAA,IAAA,uDAEAA,IAAA,wDAKAA,IAAA,sCAEAA,IAAA,4CAKAA,IAAA,sCAMAA,IAAA,sCAQAA,IAAA,wCAxDF,CAAkBhxB,EAAAgxB,YAAAhxB,EAAAgxB,eAgElB,IAAAjD,EAAA,WAyCE,SAAAA,IAtBAztB,KAAA2wB,aAAyC,KAof3C,OA7eSlD,EAAA9rB,OAAP,SAAcivB,GACZ,IAAIC,EAAa,IAAIpD,EAWrB,OAVAoD,EAAWptB,OAAS,KACpBotB,EAAWntB,MAAK,EAChBmtB,EAAWD,gBAAkBA,EAC7BC,EAAWC,cAAgB,KAC3BD,EAAWE,WAAa,KACxBF,EAAWG,YAAc,KACzBH,EAAWzrB,WAAawrB,EAAgBxhB,UAAUhK,WAClDyrB,EAAWnF,wBAA0BkF,EAAgBlF,wBACrDmF,EAAWI,cAAgB5R,QAAQ,GACnCwR,EAAWK,iBAAmB,KACvBL,GAMTpD,EAAAxrB,UAAA4B,GAAA,SAAGC,GAAyB,OAAQ9D,KAAK0D,MAAQI,IAASA,GAE1D2pB,EAAAxrB,UAAA8B,MAAA,SAAMD,GAAyB,OAA8B,IAAtB9D,KAAK0D,MAAQI,IAEpD2pB,EAAAxrB,UAAA+B,IAAA,SAAIF,GAAyB9D,KAAK0D,OAASI,GAE3C2pB,EAAAxrB,UAAAkvB,MAAA,SAAMrtB,GAAyB9D,KAAK0D,QAAUI,GAG9C2pB,EAAAxrB,UAAAmvB,KAAA,WACE,IAAIC,EAAS,IAAI5D,EAWjB,OAVA4D,EAAO5tB,OAASzD,KAChBqxB,EAAO3tB,MAAQ1D,KAAK0D,MACpB2tB,EAAOT,gBAAkB5wB,KAAK4wB,gBAC9BS,EAAOP,cAAgB9wB,KAAK8wB,cAC5BO,EAAON,WAAa/wB,KAAK+wB,WACzBM,EAAOL,YAAchxB,KAAKgxB,YAC1BK,EAAOjsB,WAAapF,KAAKoF,WACzBisB,EAAO3F,wBAA0B1rB,KAAK0rB,wBACtC2F,EAAOJ,cAAgBjxB,KAAKixB,cAC5BI,EAAOH,iBAAmBlxB,KAAKkxB,iBAAmBlxB,KAAKkxB,iBAAiBI,QAAU,KAC3ED,GAIT5D,EAAAxrB,UAAAsvB,KAAA,mBACM9tB,EAASwO,OAAOjS,KAAKyD,QACzB,GAAIzD,KAAK2wB,aAAc,KACrB,IAAwB,IAAAzD,EAAA1L,EAAAxhB,KAAK2wB,aAAajnB,UAAQkY,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAA/C,IAAI8P,EAAW5P,EAAAtgB,MACdkwB,EAAY3tB,GAAGxB,EAAAsB,YAAY8tB,SAC7BzxB,KAAK4wB,gBAAgB3C,cAAcuD,qGAGvCxxB,KAAK2wB,aAAe,KAEtB,OAAOltB,GAITgqB,EAAAxrB,UAAAyvB,eAAA,SAAertB,EAAYzD,EAAcgtB,EAAe/lB,GACtD,IAAI2pB,EAAcxxB,KAAK4wB,gBAAgBjD,aAAatpB,GAAM,GAC1D,GAAKrE,KAAK2wB,aACL,CACH,IAAIgB,EAAgB3xB,KAAK2wB,aAAazvB,IAAIN,GAC1C,GAAI+wB,EAOF,OANI9pB,EACF7H,KAAK4wB,gBAAgB5G,QAAQ5I,MAC3B/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,OAEd6N,QAAO,GACP0f,OAVa3xB,KAAK2wB,aAAe,IAAIzU,IAkBhD,OALAsV,EAAYxtB,IAAI3B,EAAAsB,YAAY8tB,QAC5BzxB,KAAK2wB,aAAa3sB,IAAIpD,EAAM4wB,GACxBntB,EAAKR,GAAG,KACV7D,KAAKguB,gBAAgBwD,EAAYpG,MAAOwC,GAEnC4D,GAIT/D,EAAAxrB,UAAA2vB,oBAAA,SAAoBxG,EAAY/mB,EAAYzD,GAC1C,GAAKZ,KAAK2wB,aACL,CACH,IAAIgB,EAAgB3xB,KAAK2wB,aAAazvB,IAAIN,GAC1C,GAAI+wB,EAAe,CACjB,IAAI9pB,EAAc8pB,EAAc9pB,YAOhC,OANIA,EACF7H,KAAK4wB,gBAAgB5G,QAAQ5I,MAC3B/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,OAEd6N,QAAO,GACP0f,QAXa3xB,KAAK2wB,aAAe,IAAIzU,IAchDjK,OAAOmZ,EAAQprB,KAAK4wB,gBAAgBhF,cAAc/kB,QAClD,IAAIgrB,EAAc,IAAI1G,EACpBnrB,KAAK4wB,gBAAgB5G,QACrBppB,EACAwqB,EACA/mB,EACA,MAGF,OADArE,KAAK2wB,aAAa3sB,IAAIpD,EAAMixB,GACrBA,GAITpE,EAAAxrB,UAAA6vB,eAAA,SAAelxB,GACb,IAAIisB,EACAmD,EAAuBhwB,KAC3B,GACE,GAAIgwB,EAAQW,eAAiB9D,EAAQmD,EAAQW,aAAazvB,IAAIN,IAC5D,OAAOisB,QAEFmD,EAAUA,EAAQvsB,QAC3B,OAAOzD,KAAK4wB,gBAAgBjF,aAAazqB,IAAIN,IAI/C6sB,EAAAxrB,UAAA8vB,eAAA,SAAe3G,GACb,IAAI4G,EACAC,EACJ,GAAI7G,EAAQ,GAAI,CACd,GAAIA,EAAQ,EAAG,OAAO,EACtB4G,EAAMhyB,KAAKixB,kBACN,MAAIgB,EAAMjyB,KAAKkxB,kBAMpB,OAAO,EALP,IAAI7wB,GAAM+qB,EAAQ,IAAM,GAAM,EAC9B,GAAI/qB,GAAK4xB,EAAIprB,OAAQ,OAAO,EAC5BmrB,EAAMC,EAAI5xB,GACV+qB,GAAmB,IAAT/qB,EAAI,GAIhB,OAAO6xB,OACLC,QACEH,EACAI,QACEC,QACAhT,QAAQ+L,KAGZkH,WAKJ7E,EAAAxrB,UAAA+rB,gBAAA,SAAgB5C,EAAYwC,GAC1B,IAAIoE,EACAO,GAAY,EAChB,GAAInH,EAAQ,GAAI,CACd,GAAIA,EAAQ,EAAG,OACf4G,EAAMhyB,KAAKixB,kBACN,CACL,IAAIgB,EAAMjyB,KAAKkxB,iBAMf,IALAqB,GAAQnH,EAAQ,IAAM,GAAM,EACvB6G,IACHjyB,KAAKkxB,iBAAmBe,EAAM,IAAIlc,MAAMwc,EAAM,GAC9CN,EAAIprB,OAAS,GAERorB,EAAIprB,QAAU0rB,GAAKN,EAAIxM,KAAKpG,QAAQ,IAC3C2S,EAAMC,EAAIM,GACVnH,GAAqB,IAAXmH,EAAM,GAElBP,EAAMpE,EACF4E,OACER,EACAI,QACEC,QACAhT,QAAQ+L,KAGZ+G,QACEH,EACAS,QACEL,QACEC,QACAhT,QAAQ+L,MAIdmH,GAAO,EAAWvyB,KAAKkxB,iBAAkBqB,GAAOP,EAC/ChyB,KAAKixB,cAAgBe,GAI5BvE,EAAAxrB,UAAAywB,QAAA,SAAQC,GACN3yB,KAAK0D,OAAuB,KAAdivB,EAAMjvB,MACpB1D,KAAKixB,cAAgB0B,EAAM1B,cAC3BjxB,KAAKkxB,iBAAmByB,EAAMzB,kBAIhCzD,EAAAxrB,UAAA2wB,mBAAA,SAAmBD,GACbA,EAAM9uB,GAAE,IACV7D,KAAKgE,IAAG,IAEN2uB,EAAM9uB,GAAE,IACV7D,KAAKgE,IAAG,KAEN2uB,EAAM9uB,GAAE,IAAsB8uB,EAAM5B,YAAc/wB,KAAK+wB,YACzD/wB,KAAKgE,IAAG,KAEN2uB,EAAM9uB,GAAE,KAAyB8uB,EAAM7B,eAAiB9wB,KAAK8wB,eAC/D9wB,KAAKgE,IAAG,KAEN2uB,EAAM9uB,GAAE,KACV7D,KAAKgE,IAAG,OAKZypB,EAAAxrB,UAAA4wB,cAAA,SAAcvrB,EAAYC,GAExBvH,KAAK0D,OAAS4D,EAAK5D,MAAQ6D,EAAM7D,MAAK,GAGtC1D,KAAK0D,OAAmB,KAAV4D,EAAK5D,MACnB1D,KAAK0D,OAAoB,KAAX6D,EAAM7D,MAGpB1D,KAAKixB,cAAgBkB,QAAQ7qB,EAAK2pB,cAAe1pB,EAAM0pB,eACvD,IAAI6B,EAAUxrB,EAAK4pB,iBACf6B,EAAWxrB,EAAM2pB,iBACrB,GAAe,MAAX4B,GAA+B,MAAZC,EAAkB,CACvC,IAAIC,EAAUhzB,KAAKkxB,iBACf+B,EAAYC,IAAIJ,EAAQjsB,OAAQksB,EAASlsB,QAC7C,GAAIosB,EAAW,CACb,GAAKD,EACA,KAAOA,EAAQnsB,OAASosB,GAAWD,EAAQvN,KAAKpG,QAAQ,SAD/C2T,EAAU,IAAIjd,MAAMkd,GAElC,IAAK,IAAI5yB,EAAI,EAAGA,EAAI4yB,IAAa5yB,EAC/B2yB,EAAQ3yB,GAAK8xB,QACXW,EAAQzyB,GACR0yB,EAAS1yB,OAYnBotB,EAAAxrB,UAAAkxB,YAAA,SAAY/sB,EAAqB/B,GAM/B,GAHA4N,OAAO5N,GAAQiV,EAAA+E,KAAKc,OAGf9a,EAAKR,GAAG,IAAsC,OAAO,EAE1D,IAAIqH,EACJ,OAAQsO,EAAA4Z,gBAAgBhtB,IAGtB,KAAKoT,EAAA6Z,aAAaC,SAChB,IAAI1C,EAAkB5wB,KAAK4wB,gBACvB/D,EAAQ+D,EAAgBhF,cAAcpS,EAAA+Z,iBAAiBntB,IAC3D,OAAQwqB,EAAgBpD,KAAKuE,eAAelF,EAAMzB,QAC3CoI,EAAsB3G,EAAMxoB,KAAMA,GAI3C,KAAKmV,EAAA6Z,aAAaI,SAEhB,OADAxhB,OAAOuH,EAAAka,WAAWttB,IACXpG,KAAKmzB,YAAY3Z,EAAAma,iBAAiBvtB,GAAO/B,GAIlD,KAAKmV,EAAA6Z,aAAaO,UAAW,OAAO,EAEpC,KAAKpa,EAAA6Z,aAAaQ,OAChB,OAAQra,EAAAsa,YAAY1tB,IAGlB,KAAKoT,EAAAua,SAASC,MACd,KAAKxa,EAAAua,SAASE,MACd,KAAKza,EAAAua,SAASG,MACd,KAAK1a,EAAAua,SAASI,MACd,KAAK3a,EAAAua,SAASK,MACd,KAAK5a,EAAAua,SAASM,MACd,KAAK7a,EAAAua,SAASO,MACd,KAAK9a,EAAAua,SAASQ,MACd,KAAK/a,EAAAua,SAASS,MACd,KAAKhb,EAAAua,SAASU,MACd,KAAKjb,EAAAua,SAASW,MACd,KAAKlb,EAAAua,SAASY,MACd,KAAKnb,EAAAua,SAASa,MACd,KAAKpb,EAAAua,SAASc,MACd,KAAKrb,EAAAua,SAASe,MACd,KAAKtb,EAAAua,SAASgB,MACd,KAAKvb,EAAAua,SAASiB,MACd,KAAKxb,EAAAua,SAASkB,MACd,KAAKzb,EAAAua,SAASmB,MACd,KAAK1b,EAAAua,SAASoB,MACd,KAAK3b,EAAAua,SAASqB,MACd,KAAK5b,EAAAua,SAASsB,MACd,KAAK7b,EAAAua,SAASuB,MACd,KAAK9b,EAAAua,SAASwB,MACd,KAAK/b,EAAAua,SAASyB,MACd,KAAKhc,EAAAua,SAAS0B,MACd,KAAKjc,EAAAua,SAAS2B,MACd,KAAKlc,EAAAua,SAAS4B,MACd,KAAKnc,EAAAua,SAAS6B,MACd,KAAKpc,EAAAua,SAAS8B,MACd,KAAKrc,EAAAua,SAAS+B,MACd,KAAKtc,EAAAua,SAASgC,MAAO,OAAO,EAG5B,KAAKvc,EAAAua,SAASiC,OACZ,QAEIxc,EAAA4Z,gBAAgBloB,EAAUsO,EAAAyc,cAAc7vB,KAAUoT,EAAA6Z,aAAa6C,QAEhC,GAA7B1c,EAAA2c,iBAAiBjrB,IAEc,GAA7BsO,EAAA2c,iBAAiBjrB,KAChBlL,KAAKmzB,YAAY3Z,EAAA4c,eAAehwB,GAAO/B,KAI5CmV,EAAA4Z,gBAAgBloB,EAAUsO,EAAA4c,eAAehwB,KAAUoT,EAAA6Z,aAAa6C,QAEjC,GAA7B1c,EAAA2c,iBAAiBjrB,IAEc,GAA7BsO,EAAA2c,iBAAiBjrB,KAChBlL,KAAKmzB,YAAY3Z,EAAAyc,cAAc7vB,GAAO/B,KASjD,KAAKmV,EAAAua,SAASsC,OAGZ,QAGM7c,EAAA4Z,gBAAgBloB,EAAUsO,EAAAyc,cAAc7vB,KAAUoT,EAAA6Z,aAAa6C,OAC/D1c,EAAA2c,iBAAiBjrB,IAAY7G,EAAKiyB,wBAAwBhd,EAAA+E,KAAKG,OAC3Dxe,KAAKmzB,YAAYjoB,EAAS7G,IAG9BmV,EAAA4Z,gBAAgBloB,EAAUsO,EAAA4c,eAAehwB,KAAUoT,EAAA6Z,aAAa6C,OAChE1c,EAAA2c,iBAAiBjrB,IAAY7G,EAAKiyB,wBAAwBhd,EAAA+E,KAAKG,OAC3Dxe,KAAKmzB,YAAYjoB,EAAS7G,IAMtC,KAAKmV,EAAAua,SAASwC,OACZ,IAAIC,EAAQ,GAAKnyB,EAAKoyB,KACtB,OAAOjd,EAAA4Z,gBAAgBloB,EAAUsO,EAAA4c,eAAehwB,KAAUoT,EAAA6Z,aAAa6C,OAChE1c,EAAA2c,iBAAiBjrB,GAAWsrB,EAIrC,KAAKhd,EAAAua,SAAS2C,OACRF,EAAQ,GAAKnyB,EAAKoyB,KACtB,OAAOz2B,KAAKmzB,YAAY3Z,EAAAyc,cAAc7vB,GAAO/B,KAC3CmV,EAAA4Z,gBAAgBloB,EAAUsO,EAAA4c,eAAehwB,KAAUoT,EAAA6Z,aAAa6C,OAChE1c,EAAA2c,iBAAiBjrB,GAAWsrB,GAMhC,KAAKhd,EAAAua,SAAS4C,OACRH,EAAQ,GAAKnyB,EAAKoyB,KACtB,OAAOpyB,EAAKR,GAAE,KAER2V,EAAA4Z,gBAAgBloB,EAAUsO,EAAA4c,eAAehwB,KAAUoT,EAAA6Z,aAAa6C,OAChE1c,EAAA2c,iBAAiBjrB,GAAWsrB,GAE9Bx2B,KAAKmzB,YAAY3Z,EAAAyc,cAAc7vB,GAAO/B,MACpCmV,EAAA4Z,gBAAgBloB,EAAUsO,EAAA4c,eAAehwB,KAAUoT,EAAA6Z,aAAa6C,OAChE1c,EAAA2c,iBAAiBjrB,IAAYsrB,GAKrC,KAAKhd,EAAAua,SAAS6C,OACd,KAAKpd,EAAAua,SAAS8C,OACd,KAAKrd,EAAAua,SAAS+C,OACZ,OAAO92B,KAAKmzB,YAAY3Z,EAAAyc,cAAc7vB,GAAO/B,IACtCrE,KAAKmzB,YAAY3Z,EAAA4c,eAAehwB,GAAO/B,GAGlD,MAGF,KAAKmV,EAAA6Z,aAAa0D,MAChB,OAAQvd,EAAAwd,WAAW5wB,IAGjB,KAAKoT,EAAAyd,QAAQC,OACb,KAAK1d,EAAAyd,QAAQE,OAAQ,OAAO,EAG5B,KAAK3d,EAAAyd,QAAQG,OACb,KAAK5d,EAAAyd,QAAQI,OACb,KAAK7d,EAAAyd,QAAQK,UAAW,OAAOjzB,EAAKoyB,KAAO,EAE7C,MAIF,KAAKjd,EAAA6Z,aAAa6C,MAChB,IAAI50B,EAAa,EACjB,OAAQkY,EAAA+d,kBAAkBnxB,IACxB,OAAuB9E,EAAQkY,EAAA2c,iBAAiB/vB,GAAO,MACvD,OAAuB9E,EAAQkY,EAAAge,oBAAoBpxB,GAAO,MAC1D,OAAuB9E,EAAQkd,IAAIhF,EAAAie,iBAAiBrxB,IAAQ,MAC5D,OAAuB9E,EAAQkd,IAAIhF,EAAAke,iBAAiBtxB,IAAQ,MAC5D,QAAS6L,QAAO,GAElB,OAAQ5N,EAAKzB,MACX,OAAkB,OAAOtB,EAAQgd,GAAGqZ,WAAar2B,EAAQgd,GAAGsZ,UAC5D,OAAmB,OAAOt2B,EAAQid,IAAIoZ,WAAar2B,EAAQid,IAAIqZ,UAC/D,OAAkB,OAAOt2B,EAAQ,GAAKA,EAAQqd,GAAGiZ,UACjD,OAAmB,OAAOt2B,EAAQ,GAAKA,EAAQsd,IAAIgZ,UACnD,QAAoB,OAAuB,KAAP,EAARt2B,GAE9B,MAIF,KAAKkY,EAAA6Z,aAAawE,KAChB,IAAIC,OAAQ,EACZ,OAAQte,EAAAue,aAAa3xB,IACnB,KAAK,EAAM0xB,EAAWte,EAAAwe,aAAa5xB,GAAQkT,EAAA+E,KAAKC,GAAKhF,EAAA+E,KAAKM,GAAI,MAC9D,KAAK,EAAMmZ,EAAWte,EAAAwe,aAAa5xB,GAAQkT,EAAA+E,KAAKE,IAAMjF,EAAA+E,KAAKO,IAAK,MAChE,QAAWkZ,EAAWte,EAAAwe,aAAa5xB,GAAQkT,EAAA+E,KAAKG,IAAMlF,EAAA+E,KAAKQ,IAE7D,OAAO2U,EAAsBsE,EAAUzzB,GAMzC,KAAKmV,EAAA6Z,aAAa4E,MAChB,IAAKze,EAAA0e,aAAa9xB,GAAO,CACvB,IAAIqwB,EAAOxkB,OAAOuH,EAAA2e,mBAAmB/xB,IACjCgyB,EAAO5e,EAAA6e,cAAcjyB,EAAMqwB,EAAO,GACtC,OAAOz2B,KAAKmzB,YAAYiF,EAAM/zB,GAGhC,MAIF,KAAKmV,EAAA6Z,aAAaiF,GAChB,OAAOt4B,KAAKmzB,YAAY3Z,EAAA+e,UAAUnyB,GAAO/B,IAClCrE,KAAKmzB,YAAYlhB,OAAOuH,EAAAgf,WAAWpyB,IAAQ/B,GAIpD,KAAKmV,EAAA6Z,aAAaoF,OAChB,OAAOz4B,KAAKmzB,YAAY3Z,EAAAkf,cAActyB,GAAO/B,IACtCrE,KAAKmzB,YAAY3Z,EAAAmf,cAAcvyB,GAAO/B,GAI/C,KAAKmV,EAAA6Z,aAAauF,KAChB,IAAI5O,EAAUhqB,KAAK4wB,gBAAgB5G,QAC/B7G,EAAWlR,OAAO+X,EAAQzN,gBAAgBrb,IAAI+Q,OAAOuH,EAAAqf,cAAczyB,MACvE6L,OAAOkR,EAASvgB,MAAQmZ,EAAY9H,UACpC,IAAI7O,EAAwB+d,EAAU/T,UAAUhK,WAChD,OAAmB+d,EAAUqK,KAAK3pB,GAAE,IAC7B2vB,EAAsBpuB,EAAYf,GAI3C,KAAKmV,EAAA6Z,aAAayF,YAAa,OAAO,EAExC,OAAO,GAITrL,EAAAxrB,UAAAqsB,SAAA,WACErc,OAAsB,MAAfjS,KAAKyD,QACZzD,KAAK8wB,cAAgB,KACrB9wB,KAAK+wB,WAAa,KAClB/wB,KAAKgxB,YAAc,KACnBhxB,KAAK0rB,wBAA0B,MAEnC+B,EAvgBA,GA0gBA,SAAS+F,EAAsBsE,EAAgB5wB,GAC7C,IAAI6xB,EAAWjB,EAAShU,SACpBkV,EAAS9xB,EAAO4c,SACpB,OAAQgU,EAASj0B,GAAE,IACZk1B,EAAWC,GACXlB,EAASj0B,GAAE,IAAsBqD,EAAOrD,GAAE,GA/gBtCnE,EAAA+tB,sFChgGb,IAeYwL,EAfZC,EAAA/4B,EAAA,IAKAuC,EAAAvC,EAAA,GAIAg5B,EAAAh5B,EAAA,IAgBA,SAAgBi5B,EAA2BC,GACzC,OAAQA,GACN,KAAKJ,EAAmBK,KAAM,MAAO,OACrC,KAAKL,EAAmBM,QAAS,MAAO,UACxC,KAAKN,EAAmBO,MAAO,MAAO,QACtC,QAEE,OADAvnB,QAAO,GACA,IAeb,SAAgBwnB,EAA0BJ,GACxC,OAAQA,GACN,KAAKJ,EAAmBK,KAAM,OAAO55B,EAAAg6B,WACrC,KAAKT,EAAmBM,QAAS,OAAO75B,EAAAi6B,aACxC,KAAKV,EAAmBO,MAAO,OAAO95B,EAAAk6B,UACtC,QAEE,OADA3nB,QAAO,GACA,IA5CXvS,EAAA2hB,eAAA8X,EAAA9X,eACA3hB,EAAAm6B,uBAAAV,EAAAU,uBAIF,SAAYZ,GAEVA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAYA,EAAAv5B,EAAAu5B,qBAAAv5B,EAAAu5B,wBAUZv5B,EAAA05B,6BAaa15B,EAAAg6B,WAAqB,QAErBh6B,EAAAi6B,aAAuB,QAEvBj6B,EAAAk6B,UAAoB,QAEpBl6B,EAAAo6B,YAAsB,OAGnCp6B,EAAA+5B,4BAaA,IAAAM,EAAA,WAYE,SAAAA,EAAoBC,EAAWX,EAA8BY,GAH7Dj6B,KAAAoE,MAAsB,KAIpBpE,KAAKg6B,KAAOA,EACZh6B,KAAKq5B,SAAWA,EAChBr5B,KAAKi6B,QAAUA,EA4EnB,OAxESF,EAAAp4B,OAAP,SACEq4B,EACAX,EACAa,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIH,EAAUf,EAAAW,uBAAuBG,GAIrC,OAHY,MAARE,IAAcD,EAAUA,EAAQI,QAAQ,MAAOH,IACvC,MAARC,IAAcF,EAAUA,EAAQI,QAAQ,MAAOF,IACvC,MAARC,IAAcH,EAAUA,EAAQI,QAAQ,MAAOD,IAC5C,IAAIL,EAAkBC,EAAMX,EAAUY,IAIxCF,EAAAO,WAAP,SACEN,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkBp4B,OAAOq4B,EAAMf,EAAmBK,KAAMY,EAAMC,IAIhEJ,EAAAQ,cAAP,SACEP,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkBp4B,OAAOq4B,EAAMf,EAAmBM,QAASW,EAAMC,IAInEJ,EAAAS,YAAP,SACER,EACAE,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOJ,EAAkBp4B,OAAOq4B,EAAMf,EAAmBO,MAAOU,EAAMC,IAIxEJ,EAAA93B,UAAAw4B,UAAA,SAAUr2B,GAER,OADApE,KAAKoE,MAAQA,EACNpE,MAIT+5B,EAAA93B,UAAA0iB,SAAA,WACE,OAAI3kB,KAAKoE,MAELg1B,EAA2Bp5B,KAAKq5B,UAChC,IACAr5B,KAAKg6B,KAAKrV,SAAS,IACnB,MACA3kB,KAAKi6B,QACL,QACAj6B,KAAKoE,MAAMiJ,OAAOJ,eAClB,IACAjN,KAAKoE,MAAMuqB,KAAKhK,SAAS,IACzB,IACA3kB,KAAKoE,MAAMwqB,OAAOjK,SAAS,IAI7ByU,EAA2Bp5B,KAAKq5B,UAChC,IACAr5B,KAAKg6B,KAAKrV,SAAS,IACnB,KACA3kB,KAAKi6B,SAGXF,EA3FA,GAqIA,SAAgBW,EAAwBt2B,EAAcu2B,QAAA,IAAAA,OAAA,GAKpD,IAJA,IAAI30B,EAAO5B,EAAMiJ,OAAOrH,KACpB40B,EAAM50B,EAAKa,OACXg0B,EAAQz2B,EAAMy2B,MACdC,EAAM12B,EAAM02B,IACTD,EAAQ,IAAMn4B,EAAAq4B,YAAY/0B,EAAKkM,WAAW2oB,EAAQ,KAAKA,IAC9D,KAAOC,EAAMF,IAAQl4B,EAAAq4B,YAAY/0B,EAAKkM,WAAW4oB,KAAOA,IAMxD,IALA,IAAIE,GACF,MACAh1B,EAAK8P,UAAU+kB,EAAOC,GACtB,OAEKD,EAAQz2B,EAAMy2B,OACnBG,EAAGvV,KAAK,KACRoV,IAGF,GADIF,GAAWK,EAAGvV,KAAK/lB,EAAAk6B,WACnBx1B,EAAMy2B,OAASz2B,EAAM02B,IACvBE,EAAGvV,KAAK,UAER,KAAOoV,IAAUz2B,EAAM02B,KAAKE,EAAGvV,KAAK,KAGtC,OADIkV,GAAWK,EAAGvV,KAAK/lB,EAAAo6B,aAChBkB,EAAG1V,KAAK,IA5JJ5lB,EAAAq6B,oBA8Fbr6B,EAAAu7B,wBAAA,SACEhB,EACAU,EACAO,QADA,IAAAP,OAAA,QACA,IAAAO,OAAA,GAIA,IAAIF,KAUJ,GATIL,GAAWK,EAAGvV,KAAKgU,EAA0BQ,EAAQZ,WACzD2B,EAAGvV,KAAK2T,EAA2Ba,EAAQZ,WACvCsB,GAAWK,EAAGvV,KAAK/lB,EAAAo6B,aACvBkB,EAAGvV,KAAKwU,EAAQD,KAAO,IAAO,MAAQ,OACtCgB,EAAGvV,KAAKwU,EAAQD,KAAKrV,SAAS,KAC9BqW,EAAGvV,KAAK,MACRuV,EAAGvV,KAAKwU,EAAQA,SAGZA,EAAQ71B,MAAO,CAGjB,IAAIA,EAAQ61B,EAAQ71B,MAChB82B,IACFF,EAAGvV,KAAK,MACRuV,EAAGvV,KAAKiV,EAAwBT,EAAQ71B,MAAOu2B,KAGjDK,EAAGvV,KAAK,MACRuV,EAAGvV,KAAK,QACRuV,EAAGvV,KAAKrhB,EAAMiJ,OAAOJ,gBACrB+tB,EAAGvV,KAAK,KACRuV,EAAGvV,KAAKrhB,EAAMuqB,KAAKhK,SAAS,KAC5BqW,EAAGvV,KAAK,KACRuV,EAAGvV,KAAKrhB,EAAMwqB,OAAOjK,SAAS,KAC9BqW,EAAGvV,KAAK,KAEV,OAAOuV,EAAG1V,KAAK,KAIjB5lB,EAAAg7B,0BA2BA,IAAA5Q,EAAA,WAME,SAAAA,EAAsB1N,QAAA,IAAAA,MAAA,MACpBpc,KAAKoc,YAAcA,GAAiD,IAAIrG,MAkD5E,OA9CE+T,EAAA7nB,UAAAk5B,eAAA,SACEnB,EACAX,EACAj1B,EACA81B,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIH,EAAUF,EAAkBp4B,OAAOq4B,EAAMX,EAAUa,EAAMC,EAAMC,GAAMK,UAAUr2B,GACnFpE,KAAKoc,YAAYqJ,KAAKwU,IAMxBnQ,EAAA7nB,UAAAm5B,KAAA,SACEpB,EACA51B,EACA81B,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAp6B,KAAKm7B,eAAenB,EAAMf,EAAmBK,KAAMl1B,EAAO81B,EAAMC,EAAMC,IAIxEtQ,EAAA7nB,UAAAsjB,QAAA,SACEyU,EACA51B,EACA81B,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAp6B,KAAKm7B,eAAenB,EAAMf,EAAmBM,QAASn1B,EAAO81B,EAAMC,EAAMC,IAI3EtQ,EAAA7nB,UAAAmf,MAAA,SACE4Y,EACA51B,EACA81B,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAp6B,KAAKm7B,eAAenB,EAAMf,EAAmBO,MAAOp1B,EAAO81B,EAAMC,EAAMC,IAE3EtQ,EAzDA,GAAsBpqB,EAAAoqB,iKChOtBuR,EAAAl7B,EAAA,KACAk7B,EAAAl7B,EAAA,KACAk7B,EAAAl7B,EAAA,KACAk7B,EAAAl7B,EAAA,oFCJA,IAqBYkzB,EArBZiI,EAAAn7B,EAAA,IAWA,SAAkBo7B,GAChBA,IAAA,eACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,6BACAA,IAAA,gBAPF,CAAkB77B,EAAA67B,aAAA77B,EAAA67B,gBAUlB,SAAYlI,GACVA,IAAA,QAAUmI,sBAAoB,UAC9BnI,IAAA,MAAQoI,oBAAkB,QAC1BpI,IAAA,GAAKqI,iBAAe,KACpBrI,IAAA,KAAOsI,mBAAiB,OACxBtI,IAAA,MAAQuI,oBAAkB,QAC1BvI,IAAA,OAASwI,qBAAmB,SAC5BxI,IAAA,KAAOyI,mBAAiB,OACxBzI,IAAA,WAAa0I,yBAAuB,aACpC1I,IAAA,aAAe2I,2BAAyB,eACxC3I,IAAA,SAAW4I,uBAAqB,WAChC5I,IAAA,SAAW6I,uBAAqB,WAChC7I,IAAA,UAAY8I,wBAAsB,YAClC9I,IAAA,UAAY+I,wBAAsB,YAClC/I,IAAA,KAAOgJ,mBAAiB,OACxBhJ,IAAA,MAAQiJ,oBAAkB,QAC1BjJ,IAAA,MAAQkJ,oBAAkB,QAC1BlJ,IAAA,MAAQmJ,oBAAkB,QAC1BnJ,IAAA,OAASoJ,qBAAmB,SAC5BpJ,IAAA,OAASqJ,qBAAmB,SAC5BrJ,IAAA,KAAOsJ,mBAAiB,OACxBtJ,IAAA,OAASuJ,qBAAmB,SAC5BvJ,IAAA,KAAOwJ,mBAAiB,OACxBxJ,IAAA,IAAMyJ,kBAAgB,MACtBzJ,IAAA,YAAc0J,0BAAwB,cACtC1J,IAAA,cAAgB2J,4BAA0B,gBAC1C3J,IAAA,UAAY4J,wBAAsB,YAClC5J,IAAA,WAAa6J,yBAAuB,aACpC7J,IAAA,WAAa8J,yBAAuB,aA5BtC,CAAY9J,EAAA3zB,EAAA2zB,eAAA3zB,EAAA2zB,kBA+BZ,SAAY4D,GACVA,IAAA,OAASmG,qBAAmB,SAC5BnG,IAAA,OAASoG,qBAAmB,SAC5BpG,IAAA,UAAYqG,wBAAsB,YAClCrG,IAAA,OAASsG,uBAAqB,SAC9BtG,IAAA,OAASuG,uBAAqB,SAC9BvG,IAAA,QAAUwG,wBAAsB,UAChCxG,IAAA,SAAWyG,yBAAuB,WAClCzG,IAAA,SAAW0G,yBAAuB,WAClC1G,IAAA,WAAa2G,2BAAyB,aACtC3G,IAAA,QAAU4G,wBAAsB,UAChC5G,IAAA,OAAS6G,qBAAmB,SAC5B7G,IAAA,OAAS8G,qBAAmB,SAC5B9G,IAAA,OAAS+G,qBAAmB,SAC5B/G,IAAA,UAAYgH,wBAAsB,YAClChH,IAAA,OAASiH,uBAAqB,SAC9BjH,IAAA,OAASkH,uBAAqB,SAC9BlH,IAAA,QAAUmH,wBAAsB,UAChCnH,IAAA,SAAWoH,yBAAuB,WAClCpH,IAAA,SAAWqH,yBAAuB,WAClCrH,IAAA,WAAasH,2BAAyB,aACtCtH,IAAA,QAAUuH,wBAAsB,UAChCvH,IAAA,OAASwH,qBAAmB,SAC5BxH,IAAA,UAAYyH,yBAAuB,YACnCzH,IAAA,UAAY0H,yBAAuB,YACnC1H,IAAA,QAAU2H,sBAAoB,UAC9B3H,IAAA,cAAgB4H,iCAA+B,gBAC/C5H,IAAA,cAAgB6H,iCAA+B,gBAC/C7H,IAAA,cAAgB8H,iCAA+B,gBAC/C9H,IAAA,cAAgB+H,iCAA+B,gBAC/C/H,IAAA,cAAgBgI,iCAA+B,gBAC/ChI,IAAA,cAAgBiI,iCAA+B,gBAC/CjI,IAAA,cAAgBkI,iCAA+B,gBAC/ClI,IAAA,cAAgBmI,iCAA+B,gBAC/CnI,IAAA,eAAiBoI,+BAA6B,iBAC9CpI,IAAA,eAAiBqI,+BAA6B,iBAC9CrI,IAAA,gBAAkBsI,mCAAiC,kBACnDtI,IAAA,gBAAkBuI,mCAAiC,kBACnDvI,IAAA,gBAAkBwI,mCAAiC,kBACnDxI,IAAA,gBAAkByI,mCAAiC,kBACnDzI,IAAA,gBAAkB0I,mCAAiC,kBACnD1I,IAAA,gBAAkB2I,mCAAiC,kBACnD3I,IAAA,gBAAkB4I,mCAAiC,kBACnD5I,IAAA,gBAAkB6I,mCAAiC,kBACnD7I,IAAA,WAAa8I,2BAAyB,aACtC9I,IAAA,UAAY+I,0BAAwB,YACpC/I,IAAA,eAAiBgJ,6BAA2B,iBAC5ChJ,IAAA,eAAiBiJ,6BAA2B,iBAG5CjJ,IAAA,cAAgBkJ,0BAAwB,gBACxClJ,IAAA,eAAiBmJ,2BAAyB,iBAC1CnJ,IAAA,cAAgBoJ,0BAAwB,gBACxCpJ,IAAA,eAAiBqJ,2BAAyB,iBAC1CrJ,IAAA,eAAiBsJ,2BAAyB,iBAtD5C,CAAY7gC,EAAAu3B,UAAAv3B,EAAAu3B,aAmEZ,SAAYlD,GACVA,IAAA,OAASyM,qBAAmB,SAC5BzM,IAAA,OAAS0M,qBAAmB,SAC5B1M,IAAA,OAAS2M,qBAAmB,SAC5B3M,IAAA,OAAS4M,sBAAoB,SAC7B5M,IAAA,OAAS6M,sBAAoB,SAC7B7M,IAAA,OAAS8M,sBAAoB,SAC7B9M,IAAA,OAAS+M,sBAAoB,SAC7B/M,IAAA,OAASgN,qBAAmB,SAC5BhN,IAAA,MAAQiN,oBAAkB,QAC1BjN,IAAA,OAASkN,qBAAmB,SAC5BlN,IAAA,OAASmN,qBAAmB,SAC5BnN,IAAA,OAASoN,sBAAoB,SAC7BpN,IAAA,OAASqN,sBAAoB,SAC7BrN,IAAA,QAAUsN,sBAAoB,UAC9BtN,IAAA,QAAUuN,sBAAoB,UAC9BvN,IAAA,MAAQwN,oBAAkB,QAC1BxN,IAAA,MAAQyN,oBAAkB,QAC1BzN,IAAA,MAAQ0N,qBAAmB,QAC3B1N,IAAA,MAAQ2N,qBAAmB,QAC3B3N,IAAA,MAAQ4N,qBAAmB,QAC3B5N,IAAA,MAAQ6N,qBAAmB,QAC3B7N,IAAA,MAAQ8N,qBAAmB,QAC3B9N,IAAA,MAAQ+N,qBAAmB,QAC3B/N,IAAA,MAAQgO,qBAAmB,QAC3BhO,IAAA,MAAQiO,qBAAmB,QAC3BjO,IAAA,OAASkO,qBAAmB,SAC5BlO,IAAA,OAASmO,qBAAmB,SAC5BnO,IAAA,OAASoO,qBAAmB,SAC5BpO,IAAA,OAASqO,sBAAoB,SAC7BrO,IAAA,OAASsO,sBAAoB,SAC7BtO,IAAA,OAASuO,sBAAoB,SAC7BvO,IAAA,OAASwO,sBAAoB,SAC7BxO,IAAA,OAASyO,qBAAmB,SAC5BzO,IAAA,MAAQ0O,oBAAkB,QAC1B1O,IAAA,OAAS2O,qBAAmB,SAC5B3O,IAAA,OAAS4O,qBAAmB,SAC5B5O,IAAA,OAAS6O,sBAAoB,SAC7B7O,IAAA,OAAS8O,sBAAoB,SAC7B9O,IAAA,QAAU+O,sBAAoB,UAC9B/O,IAAA,QAAUgP,sBAAoB,UAC9BhP,IAAA,MAAQiP,oBAAkB,QAC1BjP,IAAA,MAAQkP,oBAAkB,QAC1BlP,IAAA,MAAQmP,qBAAmB,QAC3BnP,IAAA,MAAQoP,qBAAmB,QAC3BpP,IAAA,MAAQqP,qBAAmB,QAC3BrP,IAAA,MAAQsP,qBAAmB,QAC3BtP,IAAA,MAAQuP,qBAAmB,QAC3BvP,IAAA,MAAQwP,qBAAmB,QAC3BxP,IAAA,MAAQyP,qBAAmB,QAC3BzP,IAAA,MAAQ0P,qBAAmB,QAC3B1P,IAAA,OAAS2P,uBAAqB,SAC9B3P,IAAA,OAAS4P,uBAAqB,SAC9B5P,IAAA,OAAS6P,uBAAqB,SAC9B7P,IAAA,OAAS8P,uBAAqB,SAC9B9P,IAAA,YAAc+P,4BAA0B,cACxC/P,IAAA,OAASgQ,uBAAqB,SAC9BhQ,IAAA,OAASiQ,uBAAqB,SAC9BjQ,IAAA,MAAQkQ,sBAAoB,QAC5BlQ,IAAA,MAAQmQ,sBAAoB,QAC5BnQ,IAAA,MAAQoQ,sBAAoB,QAC5BpQ,IAAA,MAAQqQ,sBAAoB,QAC5BrQ,IAAA,MAAQsQ,sBAAoB,QAC5BtQ,IAAA,MAAQuQ,sBAAoB,QAC5BvQ,IAAA,OAASwQ,uBAAqB,SAC9BxQ,IAAA,OAASyQ,uBAAqB,SAC9BzQ,IAAA,OAAS0Q,uBAAqB,SAC9B1Q,IAAA,OAAS2Q,uBAAqB,SAC9B3Q,IAAA,YAAc4Q,4BAA0B,cACxC5Q,IAAA,OAAS6Q,uBAAqB,SAC9B7Q,IAAA,OAAS8Q,uBAAqB,SAC9B9Q,IAAA,MAAQ+Q,sBAAoB,QAC5B/Q,IAAA,MAAQgR,sBAAoB,QAC5BhR,IAAA,MAAQiR,sBAAoB,QAC5BjR,IAAA,MAAQkR,sBAAoB,QAC5BlR,IAAA,MAAQmR,sBAAoB,QAC5BnR,IAAA,MAAQoR,sBAAoB,QA5E9B,CAAYzlC,EAAAq0B,WAAAr0B,EAAAq0B,cA+EZ,SAAYqR,GACVA,IAAA,SAAWC,qBAAmB,WAC9BD,IAAA,cAAgBE,0BAAwB,gBACxCF,IAAA,WAAaG,uBAAqB,aAClCH,IAAA,WAAaI,uBAAqB,aAJpC,CAAY9lC,EAAA0lC,SAAA1lC,EAAA0lC,YAWZ,SAAYK,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,OANjC,CAAYrmC,EAAA+lC,cAAA/lC,EAAA+lC,iBASZ,IAAAO,EAAA,oBAAAA,KAWA,OANSA,EAAArkC,OAAP,SAAcskC,EAAoBC,GAChC,IAAIC,EAAU,IAAIH,EAGlB,OAFAG,EAAQF,OAASA,EACjBE,EAAQD,OAASA,EACVC,GAEXH,EAXA,GAAatmC,EAAAsmC,gBAab,IAAAI,EAAA,WA+BE,SAAAA,IAsZQpmC,KAAAqmC,oBAA6B,EAC7BrmC,KAAAsmC,sBAA6B,EAqQ7BtmC,KAAAumC,qBAA8B,EAC9BvmC,KAAAwmC,sBAA+B,EAgMzC,OAh3BSJ,EAAAzkC,OAAP,WACE,IAAIhC,EAAS,IAAIymC,EAGjB,OAFAzmC,EAAOqsB,IAAMya,wBACb9mC,EAAO+mC,cAAgBC,OAAOC,SAAS,IAChCjnC,GAGFymC,EAAAS,WAAP,SAAkBZ,GAChB,IAAIa,EAAOC,EAAad,GACxB,IACE,IAAItmC,EAAS,IAAIymC,EAGjB,OAFAzmC,EAAOqsB,IAAMgb,oBAAoBF,EAAMb,EAAOp/B,QAC9ClH,EAAO+mC,cAAgBC,OAAOC,SAAS,IAChCjnC,UAEPgnC,OAAOpV,KAAK0V,WAAkBH,MAQlCV,EAAAnkC,UAAAilC,gBAAA,SACEtmC,EACAwpB,EACA+c,GAEA,IAAIC,EAAOC,EAAYzmC,GACnBkmC,EAAOQ,EAAcH,GACzB,IACE,OAAOI,yBAAyBvnC,KAAKgsB,IAAKob,EAAMhd,EAAQ0c,EAAMK,EAAaA,EAAWtgC,OAAS,WAE/F8/B,OAAOpV,KAAKuV,GACZH,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAAulC,2BAAA,SACEpd,EACA+c,GAEA,IAAIL,EAAOQ,EAAcH,GACzB,IACE,OAAOM,oCAAoCznC,KAAKgsB,IAAK5B,EAAQ0c,EAAMK,EAAaA,EAAWtgC,OAAS,WAEpG8/B,OAAOpV,KAAKuV,KAIhBV,EAAAnkC,UAAAylC,mBAAA,SAAmB9mC,GACjB,IAAIwmC,EAAOC,EAAYzmC,GACvB,IACE+mC,4BAA4B3nC,KAAKgsB,IAAKob,WAEtCT,OAAOpV,KAAK6V,KAMhBhB,EAAAnkC,UAAA2lC,UAAA,SAAUtmC,GACR,IAAIumC,EAAM7nC,KAAK0mC,cAEf,OADAoB,sBAAsBD,EAAKvmC,GACpBymC,eAAe/nC,KAAKgsB,IAAK6b,IAGlCzB,EAAAnkC,UAAA+lC,UAAA,SAAUC,EAAeC,QAAA,IAAAA,MAAA,GACvB,IAAIL,EAAM7nC,KAAK0mC,cAEf,OADAyB,sBAAsBN,EAAKI,EAAUC,GAC9BH,eAAe/nC,KAAKgsB,IAAK6b,IAGlCzB,EAAAnkC,UAAAmmC,UAAA,SAAU9mC,GACR,IAAIumC,EAAM7nC,KAAK0mC,cAEf,OADA2B,wBAAwBR,EAAKvmC,GACtBymC,eAAe/nC,KAAKgsB,IAAK6b,IAGlCzB,EAAAnkC,UAAAqmC,UAAA,SAAUhnC,GACR,IAAIumC,EAAM7nC,KAAK0mC,cAEf,OADA6B,wBAAwBV,EAAKvmC,GACtBymC,eAAe/nC,KAAKgsB,IAAK6b,IAKlCzB,EAAAnkC,UAAAumC,YAAA,SACEC,EACAriC,GAEA,OAAOsiC,eAAe1oC,KAAKgsB,IAAKyc,EAAIriC,IAGtCggC,EAAAnkC,UAAA0mC,aAAA,SACEF,EACAnhC,EACAC,GAEA,OAAOqhC,gBAAgB5oC,KAAKgsB,IAAKyc,EAAInhC,EAAMC,IAG7C6+B,EAAAnkC,UAAA4mC,WAAA,SACEJ,EACA7nC,EACAkoC,QADA,IAAAloC,MAAA,WACA,IAAAkoC,MAAA,MAEA,IAAI1B,EAAOC,EAAYzmC,GACnBkmC,EAAOiC,EAAcD,GACzB,IACE,OAAOE,cAAchpC,KAAKgsB,IAAKyc,EAAIrB,EAAMN,EAAMgC,EAA6BA,EAAUjiC,OAAS,WAE/F8/B,OAAOpV,KAAKuV,GACZH,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAAgnC,eAAA,SACE7d,EACA/mB,GAEA,OAAO6kC,kBAAkBlpC,KAAKgsB,IAAKZ,EAAO/mB,IAG5C+hC,EAAAnkC,UAAAknC,eAAA,SACE/d,EACA9pB,GAEA,OAAO8nC,kBAAkBppC,KAAKgsB,IAAKZ,EAAO9pB,IAG5C8kC,EAAAnkC,UAAAonC,gBAAA,SACEzoC,EACAyD,GAEA,IAAI+iC,EAAOC,EAAYzmC,GACvB,IACE,OAAO0oC,mBAAmBtpC,KAAKgsB,IAAKob,EAAM/iC,WAE1CsiC,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAAsnC,WAAA,SACEC,EACAC,EACAC,EACArlC,EACA6hC,GAEA,YAFA,IAAAA,MAAA,GAEOyD,cAAc3pC,KAAKgsB,IAAKwd,EAAOC,EAAS,EAAI,EAAGvD,EAA6BsD,EAAOnlC,EAAMqlC,IAGlGtD,EAAAnkC,UAAA2nC,YAAA,SACEJ,EACAE,EACApoC,EACA+C,EACA6hC,GAEA,YAFA,IAAAA,MAAA,GAEO2D,eAAe7pC,KAAKgsB,IAAKwd,EAAOtD,EAA6BsD,EAAOE,EAAKpoC,EAAO+C,IAGzF+hC,EAAAnkC,UAAA6nC,iBAAA,SACEN,EACAE,EACArlC,EACA6hC,GAEA,YAFA,IAAAA,MAAA,GAEO6D,oBAAoB/pC,KAAKgsB,IAAKwd,EAAOtD,EAAQ7hC,EAAMqlC,IAG5DtD,EAAAnkC,UAAA+nC,kBAAA,SACER,EACAE,EACApoC,EACA+C,EACA6hC,GAEA,YAFA,IAAAA,MAAA,GAEO+D,qBAAqBjqC,KAAKgsB,IAAKwd,EAAOtD,EAAQwD,EAAKpoC,EAAO+C,IAGnE+hC,EAAAnkC,UAAAioC,gBAAA,SACEzB,EACAe,EACAtD,EACAwD,EACApoC,EACA+C,GAEA,OAAO8lC,mBAAmBnqC,KAAKgsB,IAAKyc,EAAIe,EAAOtD,EAAQwD,EAAKpoC,EAAO+C,IAGrE+hC,EAAAnkC,UAAAmoC,oBAAA,SACEZ,EACAtD,EACAwD,EACAW,EACAC,EACAjmC,GAEA,OAAOkmC,uBAAuBvqC,KAAKgsB,IAAKwd,EAAOtD,EAAQwD,EAAKW,EAAUC,EAAajmC,IAGrF+hC,EAAAnkC,UAAAuoC,iBAAA,SACEd,EACAW,EACAI,EACAC,GAEA,OAAOC,oBAAoB3qC,KAAKgsB,IAAK0d,EAAKW,EAAUI,EAASC,IAG/DtE,EAAAnkC,UAAA2oC,iBAAA,SACElB,EACAmB,GAEA,OAAOC,oBAAoB9qC,KAAKgsB,IAAK0d,EAAKmB,IAK5CzE,EAAAnkC,UAAA8oC,eAAA,SACE3f,EACA9pB,GAEA,OAAO0pC,kBAAkBhrC,KAAKgsB,IAAKZ,EAAO9pB,IAG5C8kC,EAAAnkC,UAAAgpC,gBAAA,SACErqC,EACAU,GAEA,IAAI8lC,EAAOC,EAAYzmC,GACvB,IACE,OAAOsqC,mBAAmBlrC,KAAKgsB,IAAKob,EAAM9lC,WAE1CqlC,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAAkpC,YAAA,SACEz/B,EACA0/B,EACA/mC,QAAA,IAAAA,MAAA,GAEA,IAAI+iC,EAAOC,EAAY37B,GACnBo7B,EAAOiC,EAAcqC,GACzB,IACE,OAAOC,eAAerrC,KAAKgsB,IAAKob,EAAMN,EAAMsE,EAASvkC,OAAQxC,WAE7DsiC,OAAOpV,KAAKuV,GACZH,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAAqpC,YAAA,SACE5/B,EACArB,EACA/I,QADA,IAAA+I,MAAA,QACA,IAAA/I,MAAA,GAEA,IAAI8lC,EAAOC,EAAY37B,GACvB,IACE,OAAO6/B,eAAevrC,KAAKgsB,IAAKob,EAAM/8B,EAAW/I,WAEjDqlC,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAAupC,WAAA,SACEvkC,GAEA,OAAOwkC,cAAczrC,KAAKgsB,IAAK/kB,IAGjCm/B,EAAAnkC,UAAAypC,WAAA,SACEhgC,EACA2D,GAEA,IAAI+3B,EAAOC,EAAY37B,GACvB,IACE,OAAOigC,cAAc3rC,KAAKgsB,IAAKob,EAAM/3B,WAErCs3B,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAA2pC,SAAA,SACEvhC,EACA2D,EACAC,GAEA,YAFA,IAAAA,MAAA,GAEO49B,YAAY7rC,KAAKgsB,IAAK3hB,EAAW2D,EAAQC,IAGlDm4B,EAAAnkC,UAAA6pC,UAAA,WACE,OAAOC,aAAa/rC,KAAKgsB,MAG3Boa,EAAAnkC,UAAA+pC,aAAA,SACE/kC,GAEA,YAFA,IAAAA,MAAA,GAEOglC,gBAAgBjsC,KAAKgsB,IAAK/kB,IAGnCm/B,EAAAnkC,UAAAiqC,aAAA,SACEl+B,EACAC,EACA5D,GAEA,OAAO8hC,gBAAgBnsC,KAAKgsB,IAAK3hB,EAAW2D,EAAQC,IAGtDm4B,EAAAnkC,UAAAmqC,aAAA,SACE3iC,EACA4iC,EACAhiC,EACA/I,QAAA,IAAAA,MAAA,GAIA,IAFA,IAAIgrC,EAAW7iC,EAAM5C,OACjB0lC,EAAO,IAAIx2B,MAAau2B,GACnBjsC,EAAI,EAAGA,EAAIisC,IAAYjsC,EAC9BksC,EAAKlsC,GAAKgnC,EAAY59B,EAAMpJ,IAE9B,IAAIymC,EAAOQ,EAAciF,GACrBnF,EAAOC,EAAYgF,GACvB,IACE,OAAOG,gBAAgBxsC,KAAKgsB,IAAK8a,EAAMwF,EAAUlF,EAAM/8B,EAAW/I,WAElEqlC,OAAOpV,KAAK6V,GACZT,OAAOpV,KAAKuV,GACZ,IAASzmC,EAAIisC,EAAW,EAAGjsC,GAAK,IAAKA,EAAGsmC,OAAOpV,KAAKgb,EAAKlsC,MAI7D+lC,EAAAnkC,UAAAwqC,WAAA,SACE1c,EACA+Y,EACA1jC,GAEA,IAAIgiC,EAAOC,EAAYtX,GACnB+W,EAAOiC,EAAcD,GACzB,IACE,OAAO4D,cAAc1sC,KAAKgsB,IAAKob,EAAMN,EAAMgC,GAAYA,EAASjiC,QAAU,EAAGzB,WAE7EuhC,OAAOpV,KAAKuV,GACZH,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAA0qC,iBAAA,SACE5c,EACA+Y,EACA1jC,GAEA,IAAIgiC,EAAOC,EAAYtX,GACnB+W,EAAOiC,EAAcD,GACzB,IACE,OAAO8D,oBAAoB5sC,KAAKgsB,IAAKob,EAAMN,EAAMgC,GAAYA,EAASjiC,QAAU,EAAGzB,WAEnFuhC,OAAOpV,KAAKuV,GACZH,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAA4qC,mBAAA,SACEzhB,EACA0d,EACAgE,GAEA,IAAIhG,EAAOiC,EAAcD,GACrB1B,EAAOC,EAAYyF,GACvB,IACE,OAAOC,sBAAsB/sC,KAAKgsB,IAAKZ,EAAO0b,EAAMgC,GAAYA,EAASjiC,QAAU,EAAGugC,WAEtFT,OAAOpV,KAAK6V,GACZT,OAAOpV,KAAKuV,KAIhBV,EAAAnkC,UAAA+qC,kBAAA,WACE,OAAOC,qBAAqBjtC,KAAKgsB,MAKnCoa,EAAAnkC,UAAAirC,UAAA,SACEtsC,EACAyD,EACA8oC,EACApoC,GAEA,IAAIqiC,EAAOC,EAAYzmC,GACvB,IACE,OAAOwsC,mBAAmBptC,KAAKgsB,IAAKob,EAAM/iC,EAAM8oC,EAAU,EAAI,EAAGpoC,WAEjE4hC,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAAorC,YAAA,SACEzsC,EACAyD,EACAipC,EACAj+B,GAEA,IAAI+3B,EAAOC,EAAYzmC,GACnBkmC,EAAOQ,EAAcgG,GACzB,IACE,OAAOC,qBAAqBvtC,KAAKgsB,IAAKob,EAAM/iC,EAAMyiC,EAAMwG,EAAWA,EAASzmC,OAAS,EAAGwI,WAExFs3B,OAAOpV,KAAKuV,GACZH,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAAurC,eAAA,SAAe5sC,GACb,IAAIwmC,EAAOC,EAAYzmC,GACvB,IACE6sC,wBAAwBztC,KAAKgsB,IAAKob,WAElCT,OAAOpV,KAAK6V,KAOhBhB,EAAAnkC,UAAAyrC,qBAAA,SAAqBtjB,EAAoB+c,EAAiC93B,GACxErP,KAAKsmC,qBAAuBr0B,QAAQjS,KAAKsmC,sBACzC,IAAIqH,EAAW3tC,KAAKqmC,oBACfsH,IAAU3tC,KAAKqmC,oBAAsBsH,EAAWtG,EAAY,KACjE,IAAIP,EAAOQ,EAAcH,GACzB,IACE,IAAIyG,EAAUrG,yBAAyBvnC,KAAKgsB,IAAK2hB,EAAUvjB,EAAQ0c,EAAMK,EAAaA,EAAWtgC,OAAS,GAC1G,OAAO0mC,qBAAqBvtC,KAAKgsB,IAAK2hB,EAAUC,EAAS,EAAG,EAAGv+B,WAE/Ds3B,OAAOpV,KAAKuV,KAIhBV,EAAAnkC,UAAA4rC,wBAAA,WACE7tC,KAAKsmC,sBAAwBr0B,OAAOjS,KAAKsmC,sBACzC,IAAIqH,EAAW17B,OAAOjS,KAAKqmC,qBAC3BoH,wBAAwBztC,KAAKgsB,IAAK2hB,GAClChG,4BAA4B3nC,KAAKgsB,IAAK2hB,IAGxCvH,EAAAnkC,UAAA6rC,kBAAA,SACE3tB,EACA1S,GAEA,IAAIsgC,EAAQ1G,EAAYlnB,GACpB6tB,EAAQ3G,EAAY55B,GACxB,IACE,OAAOwgC,2BAA2BjuC,KAAKgsB,IAAK+hB,EAAOC,WAEnDrH,OAAOpV,KAAKyc,GACZrH,OAAOpV,KAAKwc,KAIhB3H,EAAAnkC,UAAAisC,eAAA,SACE/tB,EACA1S,GAEA,IAAIsgC,EAAQ1G,EAAYlnB,GACpB6tB,EAAQ3G,EAAY55B,GACxB,IACE,OAAO0gC,wBAAwBnuC,KAAKgsB,IAAK+hB,EAAOC,WAEhDrH,OAAOpV,KAAKyc,GACZrH,OAAOpV,KAAKwc,KAIhB3H,EAAAnkC,UAAAmsC,gBAAA,SACEjuB,EACA1S,GAEA,IAAIsgC,EAAQ1G,EAAYlnB,GACpB6tB,EAAQ3G,EAAY55B,GACxB,IACE,OAAO4gC,yBAAyBruC,KAAKgsB,IAAK+hB,EAAOC,WAEjDrH,OAAOpV,KAAKyc,GACZrH,OAAOpV,KAAKwc,KAIhB3H,EAAAnkC,UAAAqsC,gBAAA,SACEnuB,EACA1S,GAEA,IAAIsgC,EAAQ1G,EAAYlnB,GACpB6tB,EAAQ3G,EAAY55B,GACxB,IACE,OAAO8gC,yBAAyBvuC,KAAKgsB,IAAK+hB,EAAOC,WAEjDrH,OAAOpV,KAAKyc,GACZrH,OAAOpV,KAAKwc,KAIhB3H,EAAAnkC,UAAAusC,aAAA,SAAa/gC,GACX,IAAI25B,EAAOC,EAAY55B,GACvB,IACEghC,sBAAsBzuC,KAAKgsB,IAAKob,WAEhCT,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAAysC,kBAAA,SACEvuB,EACAwuB,EACAC,EACAC,GAEA,IAAId,EAAQ1G,EAAYlnB,GACpB6tB,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOG,2BAA2B/uC,KAAKgsB,IAAK+hB,EAAOC,EAAOc,EAAOD,WAEjElI,OAAOpV,KAAKud,GACZnI,OAAOpV,KAAKyc,GACZrH,OAAOpV,KAAKwc,KAIhB3H,EAAAnkC,UAAA+sC,eAAA,SACE7uB,EACAwuB,EACAC,GAEA,IAAIb,EAAQ1G,EAAYlnB,GACpB6tB,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOK,wBAAwBjvC,KAAKgsB,IAAK+hB,EAAOC,EAAOc,WAEvDnI,OAAOpV,KAAKud,GACZnI,OAAOpV,KAAKyc,GACZrH,OAAOpV,KAAKwc,KAIhB3H,EAAAnkC,UAAAitC,gBAAA,SACE/uB,EACAwuB,EACAC,GAEA,IAAIb,EAAQ1G,EAAYlnB,GACpB6tB,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOO,yBAAyBnvC,KAAKgsB,IAAK+hB,EAAOC,EAAOc,WAExDnI,OAAOpV,KAAKud,GACZnI,OAAOpV,KAAKyc,GACZrH,OAAOpV,KAAKwc,KAIhB3H,EAAAnkC,UAAAmtC,gBAAA,SACEjvB,EACAwuB,EACAC,EACAS,GAEA,IAAItB,EAAQ1G,EAAYlnB,GACpB6tB,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOU,yBAAyBtvC,KAAKgsB,IAAK+hB,EAAOC,EAAOc,EAAOO,WAE/D1I,OAAOpV,KAAKud,GACZnI,OAAOpV,KAAKyc,GACZrH,OAAOpV,KAAKwc,KAIhB3H,EAAAnkC,UAAAstC,aAAA,SAAapvB,GACX,IAAIinB,EAAOC,EAAYlnB,GACvB,IACEqvB,sBAAsBxvC,KAAKgsB,IAAKob,WAEhCT,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAAwtC,UAAA,SACEC,EACAC,EACAC,EACA7f,EACAjO,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIslB,EAAOC,EAAYvlB,GACnBlb,EAAIgpC,EAAS/oC,OACbgpC,EAAO,IAAI95B,MAAanP,GACxBkpC,EAAO,IAAI/5B,MAAqBnP,GAChCmpC,EAAO,IAAIh6B,MAAanP,GACnBvG,EAAI,EAAGA,EAAIuG,IAAKvG,EAAG,CAC1B,IAAI4lC,EAAS2J,EAASvvC,GAAG4lC,OACrBC,EAAS0J,EAASvvC,GAAG6lC,OACzB2J,EAAKxvC,GAAK0mC,EAAad,GACvB6J,EAAKzvC,GAAK0vB,GAAUuL,EAAA0U,OAAOC,OACvBjwC,KAAKgoC,UAAUkI,QAAQhK,GAASiK,SAASjK,IACzClmC,KAAK4nC,UAAUsI,QAAQhK,IAC3B6J,EAAK1vC,GAAK4lC,EAAOp/B,OAEnB,IAAIupC,EAAQ9I,EAAcuI,GACtBQ,EAAQ/I,EAAcwI,GACtBQ,EAAQhJ,EAAcyI,GAC1B,IACEQ,mBAAmBvwC,KAAKgsB,IAAK0jB,EAASC,EAASvI,EAAMgJ,EAAOC,EAAOC,EAAO1pC,WAE1E+/B,OAAOpV,KAAK+e,GACZ3J,OAAOpV,KAAK8e,GACZ1J,OAAOpV,KAAK6e,GACZ,IAAS/vC,EAAIuG,EAAI,EAAGvG,GAAK,IAAKA,EAAGsmC,OAAOpV,KAAKse,EAAKxvC,IAClDsmC,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAAuuC,iBAAA,SAAiBC,GACf,IAAI3J,EAAOiC,EAAc0H,GACzB,IACEC,0BAA0B1wC,KAAKgsB,IAAK8a,EAAM2J,EAAM5pC,gBAEhD8/B,OAAOpV,KAAKuV,KAIhBV,EAAAnkC,UAAA0uC,SAAA,SAASC,GACPC,kBAAkB7wC,KAAKgsB,IAAK4kB,IAG9BxK,EAAAnkC,UAAA6uC,iBAAA,WACE,OAAOC,6BAGT3K,EAAAnkC,UAAA+uC,iBAAA,SAAiBC,QAAA,IAAAA,MAAA,GACfC,0BAA0BD,IAG5B7K,EAAAnkC,UAAAkvC,eAAA,WACE,OAAOC,2BAGThL,EAAAnkC,UAAAovC,eAAA,SAAeJ,QAAA,IAAAA,MAAA,GACbK,wBAAwBL,IAG1B7K,EAAAnkC,UAAAsvC,aAAA,SAAaC,QAAA,IAAAA,OAAA,GACXC,sBAAsBD,IAGxBpL,EAAAnkC,UAAAyvC,SAAA,SAASd,QAAA,IAAAA,MAAA,GACHA,EACFe,0BAA0Bf,EAAM5wC,KAAKgsB,KAErC4lB,wBAAwB5xC,KAAKgsB,MAIjCoa,EAAAnkC,UAAA4vC,UAAA,SAAUC,EAAkBlB,QAAA,IAAAA,MAAA,GAG1B,IAFA,IAAItE,EAAWwF,EAAOjrC,OAClB4C,EAAQ,IAAIsM,MAAau2B,GACpBjsC,EAAI,EAAGA,EAAIisC,IAAYjsC,EAC9BoJ,EAAMpJ,GAAKgnC,EAAYyK,EAAOzxC,IAEhC,IAAIymC,EAAOQ,EAAc79B,GACzB,IACMmnC,EACFmB,2BAA2BnB,EAAM5wC,KAAKgsB,IAAK8a,EAAMwF,GAEjD0F,yBAAyBhyC,KAAKgsB,IAAK8a,EAAMwF,WAG3C3F,OAAOpV,KAAKuV,GACZ,IAASzmC,EAAIisC,EAAUjsC,GAAK,IAAKA,EAAGsmC,OAAOpV,KAAK9nB,EAAMpJ,MAO1D+lC,EAAAnkC,UAAAgwC,qBAAA,SAAqB7rC,GAEnB,IAAI8rC,EAAwBnB,4BACxBoB,EAAsBf,0BACtBgB,EAAoBC,wBACxBnB,0BAA0B,GAC1BI,wBAAwB,GACxBG,uBAAsB,GAGtB,IAAIptC,EAAOiuC,2BAA2BlsC,GAClCwqC,EAAO5wC,KAAK0tC,qBAAqBrpC,EAAM,KAAM+B,GAC7CqD,EAAQzJ,KAAKwmC,sBACjB,IAAK/8B,EAAO,CACV,IAAI7I,EAAOymC,EAAY,cACvBrnC,KAAKumC,qBAAuB3lC,EAC5BZ,KAAKwmC,sBAAwB/8B,EAAQ69B,GAAgB1mC,IAUvD,OARAmxC,2BAA2BnB,EAAM5wC,KAAKgsB,IAAKviB,EAAO,GAClDrD,EAAOmsC,yBAAyB3B,GAChC5wC,KAAK6tC,0BAGLqD,0BAA0BgB,GAC1BZ,wBAAwBa,GACxBV,sBAAsBW,GACfhsC,GAGTggC,EAAAnkC,UAAAuwC,SAAA,WACE,OAA4C,GAArCC,wBAAwBzyC,KAAKgsB,MAGtCoa,EAAAnkC,UAAAywC,UAAA,WACEC,yBAAyB3yC,KAAKgsB,MAGhCoa,EAAAnkC,UAAA2wC,SAAA,SAASC,GACP,IAAIhL,EAAM7nC,KAAK0mC,cACXU,EAAOC,EAAYwL,GACnBC,EAAmB,EACnBC,EAAsB,EAC1B,IACEC,gCAAgCnL,EAAK7nC,KAAKgsB,IAAKob,GAC/C0L,EAAYG,EAAQpL,GACpB,IAAIqL,EAAcD,EAAQpL,EAAM,GAChCkL,EAAeE,EAAQpL,EAAM,GAC7B,IAAIsL,EAAM,IAAIC,EAGd,OAFAD,EAAIE,OAqhBV,SAAoB3J,EAAY7iC,GAE9B,IADA,IAAIssC,EAAM,IAAIG,WAAWzsC,GAChBxG,EAAW,EAAGA,EAAIwG,IAAUxG,EACnC8yC,EAAI9yC,GAAKkzC,KAAS7J,EAAMrpC,GAE1B,OAAO8yC,EA1hBUK,CAAWV,EAAWI,GACnCC,EAAI5kB,UAAYklB,EAAWV,GACpBI,UAEH/L,GAAMT,OAAOpV,KAAK6V,GAClB0L,GAAWnM,OAAOpV,KAAKuhB,GACvBC,GAAcpM,OAAOpV,KAAKwhB,KAIlC3M,EAAAnkC,UAAAyxC,OAAA,WACE,MAAM,IAAI1wB,MAAM,oBAGlBojB,EAAAnkC,UAAA0xC,QAAA,WACE,MAAM,IAAI3wB,MAAM,oBAGlBojB,EAAAnkC,UAAA2xC,QAAA,WACE3hC,OAAOjS,KAAKgsB,KACZ2a,OAAOpV,KAAKvxB,KAAK0mC,eACjBC,OAAOpV,KAAKvxB,KAAKqmC,qBACjBM,OAAOpV,KAAKvxB,KAAKumC,sBACjBI,OAAOpV,KAAKvxB,KAAKwmC,uBACjBqN,uBAAuB7zC,KAAKgsB,KAC5BhsB,KAAKgsB,IAAM,GAGboa,EAAAnkC,UAAA6xC,eAAA,WACE,OAAOC,EAASpyC,OAAO3B,OAGzBomC,EAAAnkC,UAAA+xC,gBAAA,SACE5tC,EACA6tC,EACAC,GAEA,QAHA,IAAAD,OAAA,QACA,IAAAC,MAAgB11B,IAAIoZ,WAEhBsc,EAAW,EAAG,OAAO,EAGzB,IAAIC,EACAC,EAEA,OALJF,GAAY,EAKAG,yBAAyBjuC,IACnC,KAAKitB,EAAa6C,MAChB,OAAQoc,2BAA2BlsC,IACjC,OACE,OAAOpG,KAAK4nC,UAAU0M,0BAA0BluC,IAElD,OACE,OAAOpG,KAAKgoC,UACVuM,6BAA6BnuC,GAC7BouC,8BAA8BpuC,IAGlC,OACE,OAAOpG,KAAKooC,UAAUqM,0BAA0BruC,IAElD,OACE,OAAOpG,KAAKsoC,UAAUoM,0BAA0BtuC,IAElD,QACE,MAAM,IAAI4c,MAAM,0BAItB,KAAKqQ,EAAaC,SAChB,OAAO4V,kBAAkBlpC,KAAKgsB,IAC5B2oB,0BAA0BvuC,GAC1BksC,2BAA2BlsC,IAG/B,KAAKitB,EAAaO,UAChB,IAAI7P,EAAa6wB,0BAA0BxuC,GAC3C,IAAK2d,EAAY,MACjB,OAAOulB,mBAAmBtpC,KAAKgsB,IAAKjI,EAAYuuB,2BAA2BlsC,IAE7E,KAAKitB,EAAawE,KAChB,KAAMsc,EAAUn0C,KAAKg0C,gBAAgBa,oBAAoBzuC,GAAO6tC,EAAeC,IAC7E,MAEF,OACEY,sBAAsB1uC,GAClB2jC,oBAAoB/pC,KAAKgsB,IACvB+oB,sBAAsB3uC,GACtB4uC,uBAAuB5uC,GACvBksC,2BAA2BlsC,GAC3B+tC,GAEFxK,cAAc3pC,KAAKgsB,IACjB+oB,sBAAsB3uC,GACtB6uC,sBAAsB7uC,GAAQ,EAAI,EAClC4uC,uBAAuB5uC,GACvB8uC,sBAAsB9uC,GACtBksC,2BAA2BlsC,GAC3B+tC,GAIV,KAAK9gB,EAAa0D,MAChB,KAAMod,EAAUn0C,KAAKg0C,gBAAgBmB,uBAAuB/uC,GAAO6tC,EAAeC,IAChF,MAEF,OAAOxL,eAAe1oC,KAAKgsB,IAAKopB,oBAAoBhvC,GAAO+tC,GAE7D,KAAK9gB,EAAaQ,OAChB,KAAMsgB,EAAUn0C,KAAKg0C,gBAAgBqB,uBAAuBjvC,GAAO6tC,EAAeC,IAChF,MAEF,KAAME,EAAUp0C,KAAKg0C,gBAAgBsB,wBAAwBlvC,GAAO6tC,EAAeC,IACjF,MAEF,OAAOtL,gBAAgB5oC,KAAKgsB,IAAKupB,qBAAqBnvC,GAAO+tC,EAASC,GAG1E,OAAO,GAKThO,EAAAnkC,UAAAuzC,iBAAA,SAAiB50C,GACf,IAAIwmC,EAAOC,EAAYzmC,GACvB,IACE,OAAO60C,oCAAoCz1C,KAAKgsB,IAAKob,WAErDT,OAAOpV,KAAK6V,KAIhBhB,EAAAnkC,UAAAyzC,iBAAA,SAAiBtqB,GACf,OAAOqoB,EAAWkC,oCAAoC31C,KAAKgsB,IAAKZ,KAGlEgb,EAAAnkC,UAAAwsB,iBAAA,SACEmiB,EACAxqC,EACAwvC,EACAC,EACAC,GAEAC,kCAAkCnF,EAAMxqC,EAAMwvC,EAAWC,EAAYC,IAn3BvD1P,EAAA4P,kBAA2B,MAG3B5P,EAAA6P,kBAA2B,MAk3B7C7P,EA53BA,GAAa1mC,EAAA0mC,SAg4Bb1mC,EAAA0zB,gBAAA,SAAgChtB,GAC9B,OAAOiuC,yBAAyBjuC,IAGlC1G,EAAA63B,kBAAA,SAAkCnxB,GAChC,OAAOksC,2BAA2BlsC,IAGpC1G,EAAAy2B,iBAAA,SAAiC/vB,GAC/B,OAAOkuC,0BAA0BluC,IAGnC1G,EAAA83B,oBAAA,SAAoCpxB,GAClC,OAAOmuC,6BAA6BnuC,IAGtC1G,EAAAw2C,qBAAA,SAAqC9vC,GACnC,OAAOouC,8BAA8BpuC,IAGvC1G,EAAA+3B,iBAAA,SAAiCrxB,GAC/B,OAAOquC,0BAA0BruC,IAGnC1G,EAAAg4B,iBAAA,SAAiCtxB,GAC/B,OAAOsuC,0BAA0BtuC,IAGnC1G,EAAA6zB,iBAAA,SAAiCntB,GAC/B,OAAOuuC,0BAA0BvuC,IAGnC1G,EAAAy2C,iBAAA,SAAiC/vC,GAC/B,OAAOgwC,0BAA0BhwC,IAGnC1G,EAAAi0B,iBAAA,SAAiCvtB,GAC/B,OAAOiwC,0BAA0BjwC,IAGnC1G,EAAAg0B,WAAA,SAA2BttB,GACzB,OAAOkwC,uBAAuBlwC,IAGhC1G,EAAAo0B,YAAA,SAA4B1tB,GAC1B,OAAOmvC,qBAAqBnvC,IAG9B1G,EAAAu2B,cAAA,SAA8B7vB,GAC5B,OAAOivC,uBAAuBjvC,IAGhC1G,EAAA02B,eAAA,SAA+BhwB,GAC7B,OAAOkvC,wBAAwBlvC,IAGjC1G,EAAAs3B,WAAA,SAA2B5wB,GACzB,OAAOgvC,oBAAoBhvC,IAG7B1G,EAAA62C,cAAA,SAA8BnwC,GAC5B,OAAO+uC,uBAAuB/uC,IAGhC1G,EAAAq4B,aAAA,SAA6B3xB,GAC3B,OAAO2uC,sBAAsB3uC,IAG/B1G,EAAA82C,cAAA,SAA8BpwC,GAC5B,OAAO4uC,uBAAuB5uC,IAGhC1G,EAAA+2C,WAAA,SAA2BrwC,GACzB,OAAOyuC,oBAAoBzuC,IAG7B1G,EAAAs4B,aAAA,SAA6B5xB,GAC3B,OAAO6uC,sBAAsB7uC,IAG/B1G,EAAAg3C,cAAA,SAA8BtwC,GAC5B,OAAOuwC,uBAAuBvwC,IAGhC1G,EAAAk3C,eAAA,SAA+BxwC,GAC7B,OAAOywC,wBAAwBzwC,IAGjC1G,EAAAo3C,YAAA,SAA4B1wC,GAC1B,OAAO2wC,qBAAqB3wC,IAG9B1G,EAAAs3C,cAAA,SAA8B5wC,GAC5B,OAAO6wC,uBAAuB7wC,IAGhC1G,EAAAw4B,aAAA,SAA6B9xB,GAC3B,OAAOqtC,EAAWyD,sBAAsB9wC,KAG1C1G,EAAAy4B,mBAAA,SAAmC/xB,GACjC,OAAO+wC,6BAA6B/wC,IAGtC1G,EAAA24B,cAAA,SAA8BjyB,EAAqBglB,GACjD,OAAOgsB,uBAAuBhxC,EAAMglB,IAGtC1rB,EAAA23C,eAAA,SAA+BjxC,GAC7B,OAAOkxC,wBAAwBlxC,IAGjC1G,EAAA64B,UAAA,SAA0BnyB,GACxB,OAAOmxC,qBAAqBnxC,IAG9B1G,EAAA84B,WAAA,SAA2BpyB,GACzB,OAAOoxC,sBAAsBpxC,IAG/B1G,EAAA+3C,YAAA,SAA4BrxC,GAC1B,OAAOqtC,EAAWiE,qBAAqBtxC,KAGzC1G,EAAAi4C,YAAA,SAA4BvxC,GAC1B,OAAOwxC,qBAAqBxxC,IAG9B1G,EAAAm4C,aAAA,SAA6BzxC,GAC3B,OAAOqtC,EAAWqE,sBAAsB1xC,KAG1C1G,EAAAq4C,kBAAA,SAAkC3xC,GAChC,OAAO4xC,2BAA2B5xC,IAGpC1G,EAAAg5B,cAAA,SAA8BtyB,GAC5B,OAAO6xC,yBAAyB7xC,IAGlC1G,EAAAi5B,cAAA,SAA8BvyB,GAC5B,OAAO8xC,0BAA0B9xC,IAGnC1G,EAAAy4C,mBAAA,SAAmC/xC,GACjC,OAAOgyC,4BAA4BhyC,IAGrC1G,EAAA24C,aAAA,SAA6BjyC,GAC3B,OAAOkyC,sBAAsBlyC,IAG/B1G,EAAA64C,eAAA,SAA+BnyC,GAC7B,OAAOoyC,wBAAwBpyC,IAGjC1G,EAAAm5B,cAAA,SAA8BzyB,GAC5B,OAAOqtC,EAAWgF,uBAAuBryC,KAG3C1G,EAAAg5C,UAAA,SAA0BtyC,GACxB,OAAOuyC,mBAAmBvyC,IAG5B1G,EAAAk5C,oBAAA,SAAoCxyC,GAClC,OAAOyyC,4BAA4BzyC,IAGrC1G,EAAAo5C,eAAA,SAA+B1yC,EAAqBglB,GAClD,OAAO2tB,wBAAwB3yC,EAAMglB,IAGvC1rB,EAAAs5C,YAAA,SAA4B5yC,GAC1B,OAAOqtC,EAAWwF,4BAA4B7yC,KAKhD1G,EAAAw5C,gBAAA,SAAgCtI,GAC9B,OAAO2B,yBAAyB3B,IAGlClxC,EAAAy5C,gBAAA,SAAgCvI,GAC9B,OAAO6C,EAAW2F,yBAAyBxI,KAG7ClxC,EAAA25C,sBAAA,SAAsCzI,GACpC,OAAO0I,8BAA8B1I,IAGvClxC,EAAA65C,qBAAA,SAAqC3I,EAAmBxlB,GACtD,OAAOouB,0BAA0B5I,EAAMxlB,IAGzC1rB,EAAA+5C,sBAAA,SAAsC7I,GACpC,OAAO8I,2BAA2B9I,IAGpC,IAAAmD,EAAA,WAYE,SAAAA,KA0BF,OAjCSA,EAAApyC,OAAP,SAAchC,GACZ,IAAIg6C,EAAW,IAAI5F,EAGnB,OAFA4F,EAASh6C,OAASA,EAClBg6C,EAAS3tB,IAAM4tB,kBACRD,GAKT5F,EAAA9xC,UAAA43C,SAAA,SAAS7f,GACP,OAAO8f,kBAAkB95C,KAAKgsB,IAAKgO,IAGrC+Z,EAAA9xC,UAAA83C,UAAA,SAAUC,EAAwBC,EAAsB5vC,EAA8B2vB,QAA9B,IAAA3vB,MAAA,QAA8B,IAAA2vB,MAAA,GACpFkgB,mBAAmBF,EAAMC,EAAI5vC,EAAW2vB,IAG1C+Z,EAAA9xC,UAAAk4C,mBAAA,SAAmBngB,EAAqB3vB,GACtC,OAAO+vC,4BAA4Bp6C,KAAKgsB,IAAKgO,EAAM3vB,IAGrD0pC,EAAA9xC,UAAAo4C,mBAAA,SAAmBL,EAAwBC,EAAsBK,EAAgBtgB,QAAA,IAAAA,MAAA,GAC/E,IAAI8M,EAAOQ,EAAcgT,GACzB,IACEC,4BAA4BP,EAAMC,EAAInT,EAAMwT,EAAQzzC,OAAQmzB,WAE5D2M,OAAOpV,KAAKuV,KAIhBiN,EAAA9xC,UAAAu4C,iBAAA,SAAiBC,EAAyBC,GACxC,OAAOC,0BAA0B36C,KAAKgsB,IAAKyuB,EAAOC,EAAa16C,KAAKL,OAAOqsB,MAE/E+nB,EAtCA,GAkFA,SAAShN,EAAa6T,GACpB,IAAKA,EAAK,OAAO,EAIjB,IAHA,IAAIC,EAAYD,EAAI/zC,OAChB6iC,EAAM/C,OAAOC,SAASiU,GACtBC,EAAMpR,EACDrpC,EAAI,EAAGA,EAAIw6C,IAAax6C,EAC/B06C,MAAUD,IAAOF,EAAIv6C,IAEvB,OAAOqpC,EAGT,SAASpC,EAAc0T,GACrB,IAAKA,EAAM,OAAO,EAGlB,IAFA,IAAItR,EAAM/C,OAAOC,SAASoU,EAAKn0C,QAAU,GACrCi0C,EAAMpR,EACDrpC,EAAI,EAAGuG,EAAIo0C,EAAKn0C,OAAQxG,EAAIuG,IAAKvG,EAAG,CAC3C,IAAI46C,EAAMD,EAAK36C,GAEf06C,MAAUD,EAAyB,IAAdG,GACrBF,MAAUD,EAAM,EAAKG,GAAS,EAAK,KACnCF,MAAUD,EAAM,EAAKG,GAAQ,GAAM,KACnCF,MAAUD,EAAM,EAAKG,IAAQ,IAC7BH,GAAO,EAET,OAAOpR,EAGT,SAASX,EAAcmS,GACrB,OAAO5T,EAAc4T,GA2BvB,SAAS7T,EAAYld,GACnB,GAAW,MAAPA,EAAa,OAAO,EAIxB,IAHA,IAAIuf,EAAM/C,OAAOC,SA1BnB,SAA0Bzc,GAExB,IADA,IAAIyQ,EAAM,EACDv6B,EAAI,EAAGuG,EAAIujB,EAAItjB,OAAQxG,EAAIuG,IAAKvG,EAAG,CAC1C,IAAI86C,EAAIhxB,EAAIjY,WAAW7R,GACnB86C,GAAK,OAAUA,GAAK,OAAU96C,EAAI,EAAIuG,IACxCu0C,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBhxB,EAAIjY,aAAa7R,IAEpD86C,GAAK,MACLvgB,EAEFA,GADSugB,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAOvgB,EAKmBwgB,CAAiBjxB,GAAO,GAE9C2wB,EAAMpR,EACDrpC,EAAI,EAAGuG,EAAIujB,EAAItjB,OAAQxG,EAAIuG,IAAKvG,EAAG,CAC1C,IAAI86C,EAAIhxB,EAAIjY,WAAW7R,GACnB86C,GAAK,OAAUA,GAAK,OAAU96C,EAAI,EAAIuG,IACxCu0C,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBhxB,EAAIjY,aAAa7R,IAEpD86C,GAAK,IACPJ,MAAUD,IAAOK,GACRA,GAAK,MACdJ,MAAUD,IAAQ,IAASK,IAAM,GACjCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,OACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,SACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAClBA,GAAK,UACdJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,KAE3BJ,MAAUD,IAAQ,IAASK,IAAM,IACjCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAM,GAAM,IACvCJ,MAAUD,IAAQ,IAASK,IAAO,EAAK,IACvCJ,MAAUD,IAAQ,IAAqB,GAAZK,IAI/B,OADAJ,MAAUD,EAAK,GACRpR,EAGT,SAASuJ,EAAQvJ,GACf,OACG6J,KAAS7J,GACT6J,KAAS7J,EAAM,IAAO,EACtB6J,KAAS7J,EAAM,IAAM,GACrB6J,KAAS7J,EAAM,IAAM,GAY1B,SAAgB+J,EAAW/J,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEI2R,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAI3lC,MAIPslC,EAAK9H,KAAS7J,MACR,IAAL2R,GAINC,EAAuB,GAAlB/H,KAAS7J,KACK,MAAT,IAAL2R,IAILE,EAAuB,GAAlBhI,KAAS7J,KACK,MAAT,IAAL2R,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlBjI,KAAS7J,KACK,MAAT,IAAL2R,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlBlI,KAAS7J,KAEZ2R,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAD/C,GAAlBlI,KAAS7J,OAKpBgS,EAAIj2B,KAAK41B,IApBPK,EAAIj2B,MAAY,GAAL41B,IAAY,EAAKC,IAL5BI,EAAIj2B,KAAK41B,GAmCb,OAAOM,OAAOC,eAAeF,GAhPlBh8C,EAAAq0C,WAqMbr0C,EAAA+zC,aA+CA,IAAAL,EAAA,WAKA,OALA,gBAAa1zC,EAAA0zC,eAQb1zC,EAAAm8C,yBAAA,SAAgBA,EAAyBz1C,GAEvC,OAAQksC,2BAA2BlsC,IACjC,OACA,OACA,OACA,OAAqB,OAAO,EAE9B,OAAQiuC,yBAAyBjuC,IAC/B,KAAKitB,EAAayF,YAClB,KAAKzF,EAAayoB,OAAQ,OAAO,EACjC,KAAKzoB,EAAa0oB,MAAO,OAA2C,GAApC/D,2BAA2B5xC,GAC3D,KAAKitB,EAAa4E,MAChB,IAAKif,sBAAsB9wC,GAAO,CAChC,IAAI41C,EAAc7E,6BAA6B/wC,GAC/C,OAAO41C,EAAc,GAAKH,EAAyBzE,uBAAuBhxC,EAAM41C,EAAc,KAIpG,OAAO,kBCjkDT,IAAAC,EAGAA,EAAA,WACA,OAAAj8C,KADA,GAIA,IAEAi8C,KAAAxwB,SAAA,cAAAA,KAAA,EAAAywB,MAAA,QACC,MAAAC,GAED,iBAAAC,SAAAH,EAAAG,QAOAz8C,EAAAD,QAAAu8C,iFCdA,IAAAI,EAAAl8C,EAAA,IAcA,SAAkBm8C,GAKhBA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAKAA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAEAA,IAAA,gBAKAA,IAAA,cAEAA,IAAA,cAKAA,IAAA,gBAxCF,CAAkB58C,EAAA48C,WAAA58C,EAAA48C,cA4ClB,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,sBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,yBArBF,CAAkB78C,EAAA68C,YAAA78C,EAAA68C,eAyBlB,IAAAl+B,EAAA,WAoBE,SAAAA,EAAYzb,EAAgBc,EAAkB+yB,GAHtCz2B,KAAAw8C,mBAAkC,KAIxCx8C,KAAK4C,KAAOA,EACZ5C,KAAK0D,MAAQA,EACb1D,KAAKy2B,KAAOA,EACZz2B,KAAK8jB,SAAgB24B,KAAehmB,EAAO,GAC3Cz2B,KAAK08C,eAAiB,KACtB18C,KAAK6jB,mBAAqB,KAC1B7jB,KAAK28C,gBAAkB38C,KAmW3B,OA/VEe,OAAAC,eAAIqd,EAAApc,UAAA,eAAJ,WACE,OAAQjC,KAAK4C,MACX,OAAkB,OAAOyb,EAAKC,GAC9B,OAAmB,OAAOD,EAAKE,IAC/B,QACA,OAAmB,OAAOF,EAAKG,IAC/B,QACA,OAAmB,OAAOH,EAAKI,IAC/B,OAAqB,OAAoB,IAAbze,KAAKy2B,KAAapY,EAAKu+B,QAAUv+B,EAAKw+B,QAClE,OAAkB,OAAOx+B,EAAKM,GAC9B,OAAmB,OAAON,EAAKO,IAC/B,OAAmB,OAAOP,EAAKQ,IAC/B,OAAmB,OAAOR,EAAKS,IAC/B,OAAqB,OAAoB,IAAb9e,KAAKy2B,KAAapY,EAAKy+B,QAAUz+B,EAAK0+B,QAClE,QACA,QAAS,OAAO1+B,EAAKG,sCAKzBH,EAAApc,UAAA+6C,UAAA,SAAUhzB,GACR,GAAIA,EAAQ9M,MAAO,CACjB,IAAIw/B,EAAiB18C,KAAK08C,eAC1B,OAA0B,OAAnBA,IAA4BA,EAAe33B,aAAas3B,EAAArgC,eAAepJ,WAEhF,OAAO,GAITyL,EAAApc,UAAAg7C,yBAAA,SAAyBC,GACvB,OAAOA,EAAWzmB,KAAOz2B,KAAKy2B,MAIhCpY,EAAApc,UAAAq0B,wBAAA,SAAwB4mB,GACtB,IAAIzmB,EAAOz2B,KAAK6D,GAAE,GAAuB7D,KAAKy2B,KAAOz2B,KAAKy2B,KAAO,EACjE,OAAO,IAAQymB,EAAWzmB,KAAOA,GAInCpY,EAAApc,UAAA4B,GAAA,SAAGH,GAA0B,OAAQ1D,KAAK0D,MAAQA,IAAUA,GAE5D2a,EAAApc,UAAA8B,MAAA,SAAML,GAA0B,OAA+B,IAAvB1D,KAAK0D,MAAQA,IAGrD2a,EAAApc,UAAAytB,QAAA,SAAQytB,GACNlrC,OAAgB,GAATjS,KAAK4C,OAA2B5C,KAAK08C,gBAC5C,IAAIvJ,EAAM,IAAI90B,EAAKre,KAAK4C,MAAmB,IAAb5C,KAAK0D,MAAwB,IAAwB1D,KAAKy2B,MAExF,OADA0c,EAAIuJ,eAAiBS,EACdhK,GAIT90B,EAAApc,UAAA+sB,WAAA,SAAW5f,GACT6C,OAAgB,GAATjS,KAAK4C,OAAyB5C,KAAK6jB,oBAC1C,IAAIsvB,EAAM,IAAI90B,EAAKre,KAAK4C,MAAmB,IAAb5C,KAAK0D,MAAwB,IAAwB1D,KAAKy2B,MAExF,OADA0c,EAAItvB,mBAAqBzU,EAClB+jC,GAIT90B,EAAApc,UAAAm7C,WAAA,WASE,OARAnrC,OAAOjS,KAAK6D,GAAE,MACT7D,KAAKw8C,qBACRvqC,QAAQjS,KAAK6D,GAAE,MACf7D,KAAKw8C,mBAAqB,IAAIn+B,EAAKre,KAAK4C,KAAgB,IAAV5C,KAAK0D,MAA4B1D,KAAKy2B,MACpFz2B,KAAKw8C,mBAAmBG,gBAAkB38C,KAC1CA,KAAKw8C,mBAAmBE,eAAiB18C,KAAK08C,eAC9C18C,KAAKw8C,mBAAmB34B,mBAAqB7jB,KAAK6jB,oBAE7C7jB,KAAKw8C,oBAIdn+B,EAAApc,UAAA6tB,eAAA,SAAeC,EAAcstB,GAC3B,IAAIC,EACAC,EACA3sB,EACA4sB,EACJ,QAL2B,IAAAH,OAAA,GAKvBr9C,KAAK6D,GAAE,MACT,GAAIksB,EAAOlsB,GAAE,QACN7D,KAAK6D,GAAE,MAAwBksB,EAAOlsB,GAAE,MAC3C,GAAIy5C,EAAet9C,KAAK08C,gBACtB,GAAIa,EAAcxtB,EAAO2sB,eACvB,OAAOY,EAAaxtB,eAAeytB,QAEhC,IAAI3sB,EAAkB5wB,KAAK6jB,sBAC5B25B,EAAiBztB,EAAOlM,oBAC1B,OAAO+M,EAAgBd,eAAe0tB,QAKzC,IAAKztB,EAAOlsB,GAAE,KACnB,GAAI7D,KAAK6D,GAAE,GACT,GAAIksB,EAAOlsB,GAAE,IACX,IAAKw5C,GAAwBr9C,KAAK6D,GAAE,IAAsBksB,EAAOlsB,GAAE,GACjE,OAAO7D,KAAKy2B,MAAQ1G,EAAO0G,SAExB,IAAe,IAAX1G,EAAOntB,KAChB,OAAO5C,KAAKy2B,MAAQ,GACf,GAAe,IAAX1G,EAAOntB,KAChB,OAAO5C,KAAKy2B,MAAQ,QAEjB,GAAIz2B,KAAK6D,GAAE,IACZksB,EAAOlsB,GAAE,GACX,OAAO7D,KAAKy2B,MAAQ1G,EAAO0G,KAIjC,OAAO,GAIFpY,EAAAo/B,iBAAP,SAAwBn2C,EAAYC,EAAam2C,GAC/C,OAAIn2C,EAAMuoB,eAAexoB,EAAMo2C,GAA+Bp2C,EACrDA,EAAKwoB,eAAevoB,EAAOm2C,GAA+Bn2C,EAC5D,MAIT8W,EAAApc,UAAA0iB,SAAA,SAASg5B,GACP,QADO,IAAAA,OAAA,IACFA,GAAY39C,KAAK6D,GAAE,KAAuB,CAC7C,IAAI64C,EAAiB18C,KAAK08C,eAC1B,GAAIA,EACF,OAAO18C,KAAK6D,GAAE,KACV64C,EAAe/3B,WAAa,UAC5B+3B,EAAe/3B,WAErB,IAAId,EAAqB7jB,KAAK6jB,mBAC9B,GAAIA,EACF,OAAO7jB,KAAK6D,GAAE,KACV,IAAMggB,EAAmBc,UAAS,GAAQ,WAC1Cd,EAAmBc,UAAS,GAElC1S,QAAO,GAET,OAAQjS,KAAK4C,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAASqP,QAAO,GAChB,QAAoB,MAAO,SAO/BoM,EAAApc,UAAA6rB,aAAA,WACE,OAAQ9tB,KAAK4C,MACX,QAAS,SACT,OACA,OAAmB,SACnB,OACA,OAAqB,OAAoB,IAAb5C,KAAKy2B,KAAY,EAAiB,EAC9D,QAAmB,SACnB,QAAmB,SACnB,QAAqB,WAKzBpY,EAAApc,UAAA27C,aAAA,SAAaj+C,GACX,OAAQK,KAAK4C,MACX,QAAoBqP,QAAO,GAC3B,QAAS,OAAOtS,EAAOioC,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAb5nC,KAAKy2B,KAAY,OAAO92B,EAAOioC,UAAU,GAClE,OACA,OAAmB,OAAOjoC,EAAOqoC,UAAU,GAC3C,QAAmB,OAAOroC,EAAOyoC,UAAU,GAC3C,QAAmB,OAAOzoC,EAAO2oC,UAAU,KAK/CjqB,EAAApc,UAAA47C,YAAA,SAAYl+C,GACV,OAAQK,KAAK4C,MACX,QAAoBqP,QAAO,GAC3B,QAAS,OAAOtS,EAAOioC,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAb5nC,KAAKy2B,KAAY,OAAO92B,EAAOioC,UAAU,GAClE,OACA,OAAmB,OAAOjoC,EAAOqoC,UAAU,GAC3C,QAAmB,OAAOroC,EAAOyoC,UAAU,GAC3C,QAAmB,OAAOzoC,EAAO2oC,UAAU,KAK/CjqB,EAAApc,UAAA67C,eAAA,SAAen+C,GACb,OAAQK,KAAK4C,MACX,QAAoBqP,QAAO,GAC3B,QAAS,OAAOtS,EAAOioC,WAAW,GAClC,OACA,OAAqB,GAAiB,IAAb5nC,KAAKy2B,KAAY,OAAO92B,EAAOioC,WAAW,GACnE,OACA,OAAmB,OAAOjoC,EAAOqoC,WAAW,GAAI,GAChD,QAAmB,OAAOroC,EAAOyoC,WAAW,GAC5C,QAAmB,OAAOzoC,EAAO2oC,WAAW,KAKhDjqB,EAAApc,UAAA8sB,kBAAA,WACE,OAAQ/uB,KAAK4C,MACX,QAAS,MAAO,IAChB,OACA,OAAmB,MAAO,IAC1B,OACA,OAAqB,OAAoB,IAAb5C,KAAKy2B,KAAa,IAAM,IACpD,QAAmB,MAAO,IAC1B,QAAmB,MAAO,IAC1B,QAAoB,MAAO,MAOfpY,EAAAC,GAAY,IAAID,EAAI,EAClC,IAGmB,GAILA,EAAAE,IAAY,IAAIF,EAAI,EAClC,IAGkB,IAIJA,EAAAG,IAAY,IAAIH,EAAI,EAClC,IAEkB,IAIJA,EAAAI,IAAY,IAAIJ,EAAI,EAClC,IAGkB,IAIJA,EAAAw+B,QAAgB,IAAIx+B,EAAI,EACtC,IAGkB,IAIJA,EAAAu+B,QAAgB,IAAIv+B,EAAI,EACtC,IAIkB,IAIJA,EAAAM,GAAW,IAAIN,EAAI,EACjC,IAGmB,GAILA,EAAAO,IAAY,IAAIP,EAAI,EAClC,IAGkB,IAIJA,EAAAQ,IAAY,IAAIR,EAAI,EAClC,IAEkB,IAIJA,EAAAS,IAAY,IAAIT,EAAI,EAClC,IAGkB,IAIJA,EAAA0+B,QAAgB,IAAI1+B,EAAI,EACtC,IAGkB,IAIJA,EAAAy+B,QAAgB,IAAIz+B,EAAI,EACtC,IAIkB,IAIJA,EAAAW,KAAa,IAAIX,EAAI,GACnC,IAGmB,GAILA,EAAAY,IAAY,IAAIZ,EAAI,GAClC,IAEkB,IAIJA,EAAAa,IAAY,IAAIb,EAAI,GAClC,IAGkB,IAIJA,EAAAc,KAAa,IAAId,EAAI,KAAgC,GACvEA,EA9XA,GAAa3e,EAAA2e,OAiYb3e,EAAAq+C,mBAAA,SAAmCC,GAGjC,IAFA,IAAIC,EAAWD,EAAMn3C,OACjBssC,EAAM,IAAIp9B,MAAkBkoC,GACvB59C,EAAI,EAAGA,EAAI49C,IAAY59C,EAAG8yC,EAAI9yC,GAAK29C,EAAM39C,GAAGytB,eACrD,OAAOqlB,GAITzzC,EAAAw+C,cAAA,SAA8BF,GAC5B,IAAIC,EAAWD,EAAMn3C,OACrB,IAAKo3C,EAAU,MAAO,GAEtB,IADA,IAAIjjB,EAAK,IAAIjlB,MAAckoC,GAClB59C,EAAI,EAAGA,EAAI49C,IAAY59C,EAAG26B,EAAG36B,GAAK29C,EAAM39C,GAAGskB,WACpD,OAAOqW,EAAG1V,KAAK,MAIjB,IAAA64B,EAAA,WAoBE,SAAAA,EACEv6B,EACAxe,EACA0nB,QAFA,IAAAlJ,MAAA,WACA,IAAAxe,MAAA,WACA,IAAA0nB,MAAA,MARF9sB,KAAAo+C,qBAA8C,KAU5Cp+C,KAAK4jB,eAAiBA,MACtB5jB,KAAKq+C,eAAiB,KACtBr+C,KAAKs+C,mBAAqB,EAC1Bt+C,KAAKoF,WAAaA,GAA0BiZ,EAAKc,KACjDnf,KAAK8sB,SAAWA,EAChB9sB,KAAKu+C,SAAU,EACfv+C,KAAKqE,KAAOga,EAAKQ,IAAImQ,WAAWhvB,MA8FpC,OA1FEm+C,EAAAl8C,UAAAsrB,iBAAA,SAAiBnC,GACf,IAAIizB,EAAiBr+C,KAAKq+C,eAC1B,OAAOA,GAAkBA,EAAex3C,OAASukB,EAC7CizB,EAAejzB,GACfozB,EAAwBpzB,IAI9B+yB,EAAAl8C,UAAA6tB,eAAA,SAAeC,GAIb,IAAI0uB,EAAez+C,KAAK8sB,SACpB4xB,EAAiB3uB,EAAOjD,SAC5B,GAAI2xB,GACF,IAAMC,IAAkBD,EAAa3uB,eAAe4uB,GAAkB,OAAO,OACxE,GAAIA,EACT,OAAO,EAIT,GAAI1+C,KAAKu+C,SAAWxuB,EAAOwuB,QAAS,OAAO,EAG3C,IAAII,EAAqB3+C,KAAK4jB,eAC1Bg7B,EAAuB7uB,EAAOnM,eAC9Bi7B,EAAgBF,EAAmB93C,OACvC,GAAIg4C,GAAiBD,EAAqB/3C,OAAQ,OAAO,EACzD,IAAK,IAAIxG,EAAI,EAAGA,EAAIw+C,IAAiBx+C,EAAG,CACtC,IAAIy+C,EAAoBH,EAAmBt+C,GACvC0+C,EAAsBH,EAAqBv+C,GAC/C,IAAKy+C,EAAkBhvB,eAAeivB,GAAsB,OAAO,EAIrE,IAAIC,EAAiBh/C,KAAKoF,WACtB65C,EAAmBlvB,EAAO3qB,WAC9B,OAAO45C,GAAkBC,GAAoBD,EAAelvB,eAAemvB,IAItEd,EAAAe,oBAAP,SAA2Bt7B,EAA+Bxe,EAAkB0nB,QAAA,IAAAA,MAAA,MAC1E,IAAIkO,KAEJ,GADIlO,GAAUkO,EAAGvV,KAAKqH,EAASiC,qBAC3BnL,EACF,IAAK,IAAIvjB,EAAI,EAAGuG,EAAIgd,EAAe/c,OAAQxG,EAAIuG,IAAKvG,EAAG26B,EAAGvV,KAAK7B,EAAevjB,GAAG0uB,qBAGnF,OADAiM,EAAGvV,KAAKrgB,EAAW2pB,qBACZiM,EAAG1V,KAAK,KAIjB64B,EAAAl8C,UAAA8sB,kBAAA,WACE,OAAOovB,EAAUe,oBAAoBl/C,KAAK4jB,eAAgB5jB,KAAKoF,WAAYpF,KAAK8sB,WAIlFqxB,EAAAl8C,UAAA0iB,SAAA,SAASw6B,QAAA,IAAAA,OAAA,GACP,IAAInkB,EAAK,IAAIjlB,MACbilB,EAAGvV,KAAK,KACR,IAAI2F,EAAQ,EACR0B,EAAW9sB,KAAK8sB,SAChBA,GACEqyB,IACFnkB,EAAGvV,KAAK,UACRuV,EAAGvV,KAAKqH,EAASnI,YACjByG,EAAQ,GAGZ,IAAIjmB,EAAanF,KAAK4jB,eAClBi7B,EAAgB15C,EAAW0B,OAC/B,GAAIg4C,EAKF,IAJA,IAAIp1C,EAAQzJ,KAAKq+C,eACb/R,EAAW7iC,EAAQA,EAAM5C,OAAS,EAClCu4C,EAAgBp/C,KAAKs+C,mBACrBe,EAAYr/C,KAAKu+C,QAAUM,EAAgB,GAAK,EAC3Cx+C,EAAI,EAAGA,EAAIw+C,IAAiBx+C,IAAK+qB,EACpCA,GAAO4P,EAAGvV,KAAK,MACfplB,GAAKg/C,GAAWrkB,EAAGvV,KAAK,OACxBplB,EAAIisC,EAAUtR,EAAGvV,KAAgBhc,EAAOpJ,IACvC26B,EAAGvV,KAAK+4B,EAAwBn+C,IACjCA,GAAK++C,GAAiB/+C,GAAKg/C,EAAWrkB,EAAGvV,KAAK,OAC7CuV,EAAGvV,KAAK,MACbuV,EAAGvV,KAAKtgB,EAAW9E,GAAGskB,YAK1B,OAFAqW,EAAGvV,KAAK,SACRuV,EAAGvV,KAAKzlB,KAAKoF,WAAWuf,YACjBqW,EAAG1V,KAAK,KAEnB64B,EA7HA,GAAaz+C,EAAAy+C,YAkIb,IAAImB,EAA+C,KAGnD,SAAgBd,EAAwBpzB,GACjCk0B,IAA6BA,MAClC,IAAK,IAAIj/C,EAAIi/C,EAA4Bz4C,OAAQxG,GAAK+qB,IAAS/qB,EAC7Di/C,EAA4B75B,KAAK,OAASplB,EAAEskB,SAAS,KAEvD,OAAO26B,EAA4Bl0B,EAAQ,GAL7C1rB,EAAA8+C,8cCtmBA,IAuBYj8C,EAwIAg9C,EA/JZlmC,EAAAlZ,EAAA,GAMAoZ,EAAApZ,EAAA,GAKAuC,EAAAvC,EAAA,GA0JA,SAAgBq/C,EAAiBx5C,GAE/B,OADAiM,OAAOjM,EAAKa,QACJb,EAAKkM,WAAW,IACtB,QACE,OAAQlM,GACN,IAAK,WAAY,OAAOzD,EAAMmkB,SAC9B,IAAK,KAAM,OAAOnkB,EAAMk9C,GACxB,IAAK,QAAS,OAAOl9C,EAAMm9C,MAC3B,IAAK,QAAS,OAAOn9C,EAAMo9C,MAE7B,MAEF,QACE,OAAQ35C,GACN,IAAK,QAAS,OAAOzD,EAAMwU,MAE7B,MAEF,QACE,OAAQ/Q,GACN,IAAK,OAAQ,OAAOzD,EAAMq9C,KAC1B,IAAK,QAAS,OAAOr9C,EAAMs9C,MAC3B,IAAK,QAAS,OAAOt9C,EAAMsR,MAC3B,IAAK,WAAY,OAAOtR,EAAMyU,SAC9B,IAAK,QAAS,OAAOzU,EAAMsnB,MAC3B,IAAK,cAAe,OAAOtnB,EAAMwR,YAEnC,MAEF,SACE,OAAQ/N,GACN,IAAK,WAAY,OAAOzD,EAAMu9C,SAC9B,IAAK,UAAW,OAAOv9C,EAAMw9C,QAC7B,IAAK,UAAW,OAAOx9C,EAAMy9C,QAC7B,IAAK,SAAU,OAAOz9C,EAAM09C,OAC5B,IAAK,KAAM,OAAO19C,EAAM0U,GAE1B,MAEF,SACE,OAAQjR,GACN,IAAK,OAAQ,OAAOzD,EAAM29C,KAC1B,IAAK,OAAQ,OAAO39C,EAAMkoB,KAC1B,IAAK,SAAU,OAAOloB,EAAMiU,OAC5B,IAAK,UAAW,OAAOjU,EAAM49C,QAE/B,MAEF,SACE,OAAQn6C,GACN,IAAK,QAAS,OAAOzD,EAAMS,MAC3B,IAAK,UAAW,OAAOT,EAAM69C,QAC7B,IAAK,MAAO,OAAO79C,EAAMmV,IACzB,IAAK,OAAQ,OAAOnV,EAAM89C,KAC1B,IAAK,WAAY,OAAO99C,EAAM0R,SAEhC,MAEF,SACE,OAAQjO,GACN,IAAK,MAAO,OAAOzD,EAAM0jB,IAE3B,MAEF,SACE,OAAQjgB,GACN,IAAK,KAAM,OAAOzD,EAAMoV,GACxB,IAAK,aAAc,OAAOpV,EAAM+9C,WAChC,IAAK,SAAU,OAAO/9C,EAAMsV,OAC5B,IAAK,KAAM,OAAOtV,EAAMg+C,GACxB,IAAK,aAAc,OAAOh+C,EAAM2R,WAChC,IAAK,YAAa,OAAO3R,EAAMkuB,UAC/B,IAAK,KAAM,OAAOluB,EAAMi+C,GAE1B,MAEF,SACE,OAAQx6C,GACN,IAAK,QAAS,OAAOzD,EAAMk+C,MAE7B,MAEF,SACE,OAAQz6C,GACN,IAAK,MAAO,OAAOzD,EAAMm+C,IAE3B,MAEF,SACE,OAAQ16C,GACN,IAAK,SAAU,OAAOzD,EAAMo+C,OAE9B,MAEF,SACE,OAAQ36C,GACN,IAAK,YAAa,OAAOzD,EAAMioB,UAC/B,IAAK,MAAO,OAAOjoB,EAAM6R,IACzB,IAAK,OAAQ,OAAO7R,EAAMO,KAE5B,MAEF,SACE,OAAQkD,GACN,IAAK,KAAM,OAAOzD,EAAMq+C,GAE1B,MAEF,SACE,OAAQ56C,GACN,IAAK,UAAW,OAAOzD,EAAMs+C,QAC7B,IAAK,UAAW,OAAOt+C,EAAMu+C,QAC7B,IAAK,YAAa,OAAOv+C,EAAMw+C,UAC/B,IAAK,SAAU,OAAOx+C,EAAMy+C,OAE9B,MAEF,SACE,OAAQh7C,GACN,IAAK,WAAY,OAAOzD,EAAMkkB,SAC9B,IAAK,SAAU,OAAOlkB,EAAMwV,OAE9B,MAEF,SACE,OAAQ/R,GACN,IAAK,MAAO,OAAOzD,EAAM2jB,IACzB,IAAK,SAAU,OAAO3jB,EAAMoU,OAC5B,IAAK,QAAS,OAAOpU,EAAMa,MAC3B,IAAK,SAAU,OAAOb,EAAM0V,OAE9B,MAEF,SACE,OAAQjS,GACN,IAAK,OAAQ,OAAOzD,EAAMmS,KAC1B,IAAK,QAAS,OAAOnS,EAAM2V,MAC3B,IAAK,OAAQ,OAAO3V,EAAMQ,KAC1B,IAAK,MAAO,OAAOR,EAAM4V,IACzB,IAAK,OAAQ,OAAO5V,EAAMkP,KAC1B,IAAK,SAAU,OAAOlP,EAAM0+C,OAE9B,MAEF,SACE,OAAQj7C,GACN,IAAK,MAAO,OAAOzD,EAAM2+C,IACzB,IAAK,OAAQ,OAAO3+C,EAAM+V,KAE5B,MAEF,SACE,OAAQtS,GACN,IAAK,QAAS,OAAOzD,EAAMgW,MAC3B,IAAK,OAAQ,OAAOhW,EAAM4+C,KAE5B,MAEF,SACE,OAAQn7C,GACN,IAAK,QAAS,OAAOzD,EAAM6+C,OAKjC,OAAO7+C,EAAMuZ,QAGf,SAAgBulC,EAAsBC,GACpC,OAAQA,GACN,KAAK/+C,EAAMmkB,SACX,KAAKnkB,EAAMk9C,GACX,KAAKl9C,EAAMwR,YACX,KAAKxR,EAAMw9C,QACX,KAAKx9C,EAAM09C,OACX,KAAK19C,EAAM89C,KACX,KAAK99C,EAAMmV,IACX,KAAKnV,EAAM0jB,IACX,KAAK1jB,EAAMi+C,GACX,KAAKj+C,EAAMk+C,MACX,KAAKl+C,EAAMo+C,OACX,KAAKp+C,EAAMioB,UACX,KAAKjoB,EAAMkkB,SACX,KAAKlkB,EAAM2jB,IACX,KAAK3jB,EAAMkP,KAAM,OAAO,EACxB,QAAS,OAAO,IAvUpB,SAAYlP,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,2BArIF,CAAYA,EAAA7C,EAAA6C,QAAA7C,EAAA6C,WAwIZ,SAAYg9C,GACVA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBAHF,CAAYA,EAAA7/C,EAAA6/C,qBAAA7/C,EAAA6/C,wBAMZ7/C,EAAA8/C,mBAwKA9/C,EAAA2hD,wBAqBA3hD,EAAA6hD,sBAAA,SAAsCD,GACpC,OAAQA,GACN,KAAK/+C,EAAM09C,OAAQ,MAAO,SAC1B,KAAK19C,EAAMg+C,GAAI,MAAO,KACtB,KAAKh+C,EAAM2R,WAAY,MAAO,aAC9B,KAAK3R,EAAM6R,IAAK,MAAO,MACvB,KAAK7R,EAAM0+C,OAAQ,MAAO,SAC1B,KAAK1+C,EAAM+V,KAAM,MAAO,OACxB,KAAK/V,EAAM6+C,MAAO,MAAO,QACzB,KAAK7+C,EAAMi/C,YAAa,MAAO,MAC/B,KAAKj/C,EAAMuR,MAAO,MAAO,IACzB,KAAKvR,EAAMk/C,SAAU,MAAO,IAC5B,KAAKl/C,EAAMm/C,YAAa,MAAO,IAC/B,KAAKn/C,EAAMo/C,gBAAiB,MAAO,KACnC,KAAKp/C,EAAMq/C,mBAAoB,MAAO,KACtC,KAAKr/C,EAAMs/C,cAAe,MAAO,KACjC,KAAKt/C,EAAMu/C,mBAAoB,MAAO,KACtC,KAAKv/C,EAAMw/C,qBAAsB,MAAO,MACxC,KAAKx/C,EAAMy/C,0BAA2B,MAAO,MAC7C,KAAKz/C,EAAM+Y,KAAM,MAAO,IACxB,KAAK/Y,EAAMiZ,MAAO,MAAO,IACzB,KAAKjZ,EAAM0/C,kBAAmB,MAAO,KACrC,KAAK1/C,EAAM2/C,SAAU,MAAO,IAC5B,KAAK3/C,EAAM4/C,MAAO,MAAO,IACzB,KAAK5/C,EAAM6/C,QAAS,MAAO,IAC3B,KAAK7/C,EAAM8/C,UAAW,MAAO,KAC7B,KAAK9/C,EAAM+/C,YAAa,MAAO,KAC/B,KAAK//C,EAAMggD,kBAAmB,MAAO,KACrC,KAAKhgD,EAAMigD,wBAAyB,MAAO,KAC3C,KAAKjgD,EAAMkgD,oCAAqC,MAAO,MACvD,KAAKlgD,EAAMmgD,UAAW,MAAO,IAC7B,KAAKngD,EAAMogD,IAAK,MAAO,IACvB,KAAKpgD,EAAMqgD,MAAO,MAAO,IACzB,KAAKrgD,EAAMsgD,YAAa,MAAO,IAC/B,KAAKtgD,EAAMugD,MAAO,MAAO,IACzB,KAAKvgD,EAAMwgD,oBAAqB,MAAO,KACvC,KAAKxgD,EAAMygD,QAAS,MAAO,KAC3B,KAAKzgD,EAAM0gD,OAAQ,MAAO,IAC1B,KAAK1gD,EAAM2gD,YAAa,MAAO,KAC/B,KAAK3gD,EAAM4gD,aAAc,MAAO,KAChC,KAAK5gD,EAAM6gD,gBAAiB,MAAO,KACnC,KAAK7gD,EAAM8gD,yBAA0B,MAAO,MAC5C,KAAK9gD,EAAM+gD,aAAc,MAAO,KAChC,KAAK/gD,EAAMghD,eAAgB,MAAO,KAClC,KAAKhhD,EAAMihD,yBAA0B,MAAO,MAC5C,KAAKjhD,EAAMkhD,+BAAgC,MAAO,MAClD,KAAKlhD,EAAMmhD,2CAA4C,MAAO,OAC9D,KAAKnhD,EAAMohD,iBAAkB,MAAO,KACpC,KAAKphD,EAAMqhD,WAAY,MAAO,KAC9B,KAAKrhD,EAAMshD,aAAc,MAAO,KAChC,QAEE,OADA5xC,QAAO,GACA,KAKb,IAAAzP,EAAA,WAUE,SAAAA,EAAY6K,EAAgBwtB,EAAYC,GA4CxC96B,KAAA0uB,aAAsB,EA3CpB1uB,KAAKqN,OAASA,EACdrN,KAAK66B,MAAQA,EACb76B,KAAK86B,IAAMA,EA0Cf,OAvCSt4B,EAAA8iB,KAAP,SAAYw+B,EAAUC,GACpB,GAAID,EAAEz2C,QAAU02C,EAAE12C,OAAQ,MAAM,IAAI2V,MAAM,mBAC1C,OAAO,IAAIxgB,EAAMshD,EAAEz2C,OACjBy2C,EAAEjpB,MAAQkpB,EAAElpB,MAAQipB,EAAEjpB,MAAQkpB,EAAElpB,MAChCipB,EAAEhpB,IAAMipB,EAAEjpB,IAAMgpB,EAAEhpB,IAAMipB,EAAEjpB,MAI9B/5B,OAAAC,eAAIwB,EAAAP,UAAA,eAAJ,WACE,OAAO,IAAIO,EAAMxC,KAAKqN,OAAQrN,KAAK66B,MAAO76B,KAAK66B,wCAEjD95B,OAAAC,eAAIwB,EAAAP,UAAA,aAAJ,WACE,OAAO,IAAIO,EAAMxC,KAAKqN,OAAQrN,KAAK86B,IAAK96B,KAAK86B,sCAG/C/5B,OAAAC,eAAIwB,EAAAP,UAAA,YAAJ,WAGE,IAFA,IAAI+D,EAAOhG,KAAKqN,OAAOrH,KACnB2oB,EAAO,EACFjZ,EAAM1V,KAAK66B,MAAOnlB,GAAO,IAAKA,EACb,IAApB1P,EAAKkM,WAAWwD,IAA2BiZ,IAEjD,OAAOA,mCAGT5tB,OAAAC,eAAIwB,EAAAP,UAAA,cAAJ,WAGE,IAFA,IAAI+D,EAAOhG,KAAKqN,OAAOrH,KACnB4oB,EAAS,EACJlZ,EAAM1V,KAAK66B,MAAQ,EAAGnlB,GAAO,GACZ,IAApB1P,EAAKkM,WAAWwD,KADqBA,IAEvCkZ,EAEJ,OAAOA,mCAGTpsB,EAAAP,UAAA0iB,SAAA,WACE,OAAO3kB,KAAKqN,OAAOrH,KAAK8P,UAAU9V,KAAK66B,MAAO76B,KAAK86B,MAIvDt4B,EAvDA,GAAa9C,EAAA8C,QA+Db,IAAAwhD,EAAA,SAAA3yC,GAgBE,SAAA2yC,EAAY32C,EAAgB+O,QAAA,IAAAA,MAAA,MAA5B,IAAA7K,EACEF,EAAA7Q,KAAAR,KAAMoc,IAAYpc,KAdpBuR,EAAAupB,IAAW,EAEXvpB,EAAAmE,IAAW,EACXnE,EAAA+vC,OAAgB,EAChB/vC,EAAA0yC,SAAgB,EAEhB1yC,EAAA2yC,WAAoB,EACpB3yC,EAAA4yC,aAAoB,EACpB5yC,EAAA6yC,oBAA2B,EAE3B7yC,EAAA8yC,UAAmC,KAKjC9yC,EAAKlE,OAASA,EACdkE,EAAKmE,IAAM,EACXnE,EAAKupB,IAAMztB,EAAOrH,KAAKa,OACvB0K,EAAK6K,YAAcA,GAA4B,IAAIrG,MAEnD,IAAI/P,EAAOqH,EAAOrH,KAWlB,GAPEuL,EAAKmE,IAAMnE,EAAKupB,KACS,OAAzB90B,EAAKkM,WAAWX,EAAKmE,QAEnBnE,EAAKmE,IAKPnE,EAAKmE,IAAM,EAAInE,EAAKupB,KACK,IAAzB90B,EAAKkM,WAAWX,EAAKmE,MACQ,IAA7B1P,EAAKkM,WAAWX,EAAKmE,IAAM,GAG3B,IADAnE,EAAKmE,KAAO,EAEVnE,EAAKmE,IAAMnE,EAAKupB,KACS,IAAzB90B,EAAKkM,WAAWX,EAAKmE,QAEnBnE,EAAKmE,aAiiCf,OA7kC+BpE,EAAA0yC,EAAA3yC,GAkD7B2yC,EAAA/hD,UAAAyf,KAAA,SAAK4iC,GAEH,YAFG,IAAAA,MAAyC/E,EAAmBS,SAC/DhgD,KAAKkkD,WAAa,EACXlkD,KAAKshD,MAAQthD,KAAKukD,WAAWD,IAG9BN,EAAA/hD,UAAAsiD,WAAR,SACED,EACAE,QADA,IAAAF,MAAyC/E,EAAmBS,cAC5D,IAAAwE,MAAsBhmC,IAAIoZ,WAG1B,IADA,IAAI5xB,EAAOhG,KAAKqN,OAAOrH,KAChBhG,KAAK0V,IAAM1V,KAAK86B,KAAK,CAC1B96B,KAAKikD,SAAWjkD,KAAK0V,IACrB,IAAIhV,EAAIsF,EAAKkM,WAAWlS,KAAK0V,KAC7B,OAAQhV,GACN,QACE,OACIV,KAAK0V,IAAM1V,KAAK86B,KACO,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,MACpB,MAGL,QACA,OACA,QACA,QACA,UACI1V,KAAK0V,IACP,MAEF,QAEE,QADE1V,KAAK0V,IAEL8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,KACb,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,QAEnB1V,KAAK0V,IAEL8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,KACb,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,QAEnB1V,KAAK0V,IACAnT,EAAMy/C,2BAERz/C,EAAMu/C,oBAERv/C,EAAMsgD,YAEf,QACA,QACA,QACE,OAAOtgD,EAAMkiD,cAEf,QAEE,QADEzkD,KAAK0V,IAEL8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,KACb,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,QAEnB1V,KAAK0V,IACAnT,EAAMghD,gBAERhhD,EAAM6/C,QAEf,QAEE,KADEpiD,KAAK0V,IACH8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,IAAK,CAC7C,GAA6B,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IACAnT,EAAMwgD,oBAEf,GAA6B,IAAzB/8C,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IACAnT,EAAMohD,iBAGjB,OAAOphD,EAAMmgD,UAEf,QAEE,QADE1iD,KAAK0V,IACAnT,EAAMmiD,UAEf,QAEE,QADE1kD,KAAK0V,IACAnT,EAAMoiD,WAEf,QAEE,KADE3kD,KAAK0V,IACH8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,IAAK,CAC7C,GAA6B,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IACAnT,EAAM6gD,gBAEf,GAA6B,IAAzBp9C,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IAEL8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,KACb,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,QAEnB1V,KAAK0V,IACAnT,EAAM8gD,0BAER9gD,EAAM0/C,kBAGjB,OAAO1/C,EAAM2/C,SAEf,QAEE,KADEliD,KAAK0V,IACH8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,IAAK,CAC7C,GAA6B,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IACAnT,EAAM8/C,UAEf,GAA6B,IAAzBr8C,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IACAnT,EAAM2gD,YAGjB,OAAO3gD,EAAM+Y,KAEf,QAEE,QADEtb,KAAK0V,IACAnT,EAAMuR,MAEf,QAEE,KADE9T,KAAK0V,IACH8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,IAAK,CAC7C,GAA6B,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IACAnT,EAAM+/C,YAEf,GAA6B,IAAzBt8C,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IACAnT,EAAM4gD,aAGjB,OAAO5gD,EAAMiZ,MAEf,QAEE,KADExb,KAAK0V,IACH8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,IAAK,CAC7C,GAAIp4B,EAAAkiD,eAAe5+C,EAAKkM,WAAWlS,KAAK0V,MAEtC,QADE1V,KAAK0V,IACAnT,EAAMsiD,aAEf,GACEL,EAAiB,GAAKxkD,KAAK0V,IAAM,EAAI1V,KAAK86B,KACjB,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,MACQ,IAA7B1P,EAAKkM,WAAWlS,KAAK0V,IAAM,GAG3B,OADA1V,KAAK0V,KAAO,EACLnT,EAAMi/C,YAGjB,OAAOj/C,EAAMuiD,IAEf,QACE,IAAIC,EAAkB/kD,KAAK0V,IAE3B,KADE1V,KAAK0V,IACH8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,IAAK,CAC7C,GAA6B,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,KAAwB,CAC/C,IAAIvP,EAAcoT,EAAApG,YAAY6xC,KAQ9B,IANEhlD,KAAK0V,IAAM,EAAI1V,KAAK86B,KACS,IAA7B90B,EAAKkM,WAAWlS,KAAK0V,IAAM,OAEzB1V,KAAK0V,IACPvP,EAAcoT,EAAApG,YAAY8xC,UAEnBjlD,KAAK0V,IAAM1V,KAAK86B,KACvB,GAA6B,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,KAA2B,GAChD1V,KAAK0V,IACP,MAGA1V,KAAKqkD,WACPrkD,KAAKqkD,UACHl+C,EACAH,EAAK8P,UAAUivC,EAAiB/kD,KAAK0V,KACrC1V,KAAKoE,MAAM2gD,EAAiB/kD,KAAK0V,MAGrC,MAEF,GAA6B,IAAzB1P,EAAKkM,WAAWlS,KAAK0V,KAA2B,CAElD,IADA,IAAIwvC,GAAS,IACJllD,KAAK0V,IAAM1V,KAAK86B,KAEvB,GACG,KAFHp6B,EAAIsF,EAAKkM,WAAWlS,KAAK0V,OAGvB1V,KAAK0V,IAAM,EAAI1V,KAAK86B,KACS,IAA7B90B,EAAKkM,WAAWlS,KAAK0V,IAAM,GAC3B,CACA1V,KAAK0V,KAAO,EACZwvC,GAAS,EACT,MAGCA,EAKMllD,KAAKqkD,WACdrkD,KAAKqkD,UACH9qC,EAAApG,YAAY4B,MACZ/O,EAAK8P,UAAUivC,EAAiB/kD,KAAK0V,KACrC1V,KAAKoE,MAAM2gD,EAAiB/kD,KAAK0V,MARnC1V,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACfnlD,KAAKoE,MAAMpE,KAAK0V,KAAM,MAS1B,MAEF,GAA6B,IAAzB1P,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IACAnT,EAAM+gD,aAGjB,OAAO/gD,EAAM4/C,MAEf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,OAAOniD,KAAKolD,cACR7iD,EAAM8iD,eACN9iD,EAAMsiD,aAEZ,QAEE,QADE7kD,KAAK0V,IACAnT,EAAM+iD,MAEf,QAEE,QADEtlD,KAAK0V,IACAnT,EAAMgjD,UAEf,QAEE,KADEvlD,KAAK0V,IACH8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,IAAK,CAC7C,GAA6B,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IAEL8uC,EAAiB,GACjBxkD,KAAK0V,IAAM1V,KAAK86B,KACS,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,QAEnB1V,KAAK0V,IACAnT,EAAMihD,0BAERjhD,EAAMggD,kBAEf,GAA6B,IAAzBv8C,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IACAnT,EAAMo/C,gBAGjB,OAAOp/C,EAAMk/C,SAEf,QAEE,KADEzhD,KAAK0V,IACH8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,IAAK,CAC7C,GAA6B,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IAEL8uC,EAAiB,GACjBxkD,KAAK0V,IAAM1V,KAAK86B,KACS,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,QAEnB1V,KAAK0V,IACAnT,EAAMw/C,sBAERx/C,EAAMs/C,cAEf,GAA6B,IAAzB77C,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IACAnT,EAAMijD,mBAGjB,OAAOjjD,EAAM0gD,OAEf,QAEE,KADEjjD,KAAK0V,IACH8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,IAAK,CAC7C,GAA6B,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,KAA8B,CAErD,KADE1V,KAAK0V,IACH8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,IAAK,CAC7C,GAA6B,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IAEL8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,KACb,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,QAEnB1V,KAAK0V,IACAnT,EAAMmhD,4CAERnhD,EAAMkgD,oCAEf,GAA6B,IAAzBz8C,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IACAnT,EAAMkhD,+BAGjB,OAAOlhD,EAAMigD,wBAEf,GAA6B,IAAzBx8C,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IACAnT,EAAMq/C,mBAGjB,OAAOr/C,EAAMm/C,YAEf,QAEE,QADE1hD,KAAK0V,IACAnT,EAAMkjD,SAEf,QAEE,QADEzlD,KAAK0V,IACAnT,EAAMmjD,YAEf,QAEE,QADE1lD,KAAK0V,IACAnT,EAAMojD,aAEf,QAEE,QADE3lD,KAAK0V,IAEL8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,KACb,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,QAEnB1V,KAAK0V,IACAnT,EAAMshD,cAERthD,EAAMqgD,MAEf,SAEE,QADE5iD,KAAK0V,IACAnT,EAAMqjD,UAEf,SAEE,KADE5lD,KAAK0V,IACH8uC,EAAiB,GAAKxkD,KAAK0V,IAAM1V,KAAK86B,IAAK,CAC7C,GAA6B,KAAzB90B,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IACAnT,EAAMygD,QAEf,GAA6B,IAAzBh9C,EAAKkM,WAAWlS,KAAK0V,KAEvB,QADE1V,KAAK0V,IACAnT,EAAMqhD,WAGjB,OAAOrhD,EAAMogD,IAEf,SAEE,QADE3iD,KAAK0V,IACAnT,EAAMsjD,WAEf,SAEE,QADE7lD,KAAK0V,IACAnT,EAAMugD,MAEf,QAEE,QADE9iD,KAAK0V,IACAnT,EAAMujD,GAEf,QACE,GAAIpjD,EAAAqjD,kBAAkBrlD,GAAI,CACxB,GAAIgC,EAAAsjD,mBAAmBtlD,GAAI,CAEzB,IADA,IAAIulD,EAAYjmD,KAAK0V,MAEjB1V,KAAK0V,IAAM1V,KAAK86B,KAClBp4B,EAAAwjD,iBAAiBxlD,EAAIsF,EAAKkM,WAAWlS,KAAK0V,OAE1C,IAAKhT,EAAAsjD,mBAAmBtlD,GAEtB,OADAV,KAAK0V,IAAMuwC,EACJ1jD,EAAMW,WAGjB,IACIijD,EAAe3G,EADDx5C,EAAK8P,UAAUmwC,EAAWjmD,KAAK0V,MAEjD,GACEywC,GAAgB5jD,EAAMuZ,SACtBwoC,IAAuB/E,EAAmB6G,SAExC9B,IAAuB/E,EAAmB8G,SAC1ChF,EAAsB8E,IAGxB,OAAOA,EAETnmD,KAAK0V,IAAMuwC,EAEb,OAAO1jD,EAAMW,WACR,GAAIR,EAAA4jD,aAAa5lD,GAAI,GACxBV,KAAK0V,IACP,MAOF,OALA1V,KAAKohB,MACH/H,EAAAgI,eAAeklC,kBACfvmD,KAAKoE,MAAMpE,KAAK0V,IAAK1V,KAAK0V,IAAM,MAEhC1V,KAAK0V,IACAnT,EAAMuZ,SAInB,OAAOvZ,EAAMikD,WAGfxC,EAAA/hD,UAAAwkD,KAAA,SACEC,EACApC,EACAqC,QAFA,IAAAD,OAAA,QACA,IAAApC,MAAyC/E,EAAmBS,cAC5D,IAAA2G,MAAyBnoC,IAAIoZ,WAE7B,IAAI5xB,EAAOhG,KAAKqN,OAAOrH,KACvB,GAAIhG,KAAKkkD,UAAY,EAAG,CACtB,IAAI+B,EAAYjmD,KAAK0V,IACjBkxC,EAAc5mD,KAAKshD,MACnBuF,EAAiB7mD,KAAKikD,SAG1B,GAFAjkD,KAAKkkD,UAAYlkD,KAAKukD,WAAWD,EAAoBqC,GACrD3mD,KAAKmkD,aAAenkD,KAAKikD,SACrByC,EAAgB,CAClB1mD,KAAKokD,oBAAqB,EAC1B,IAAK,IAAI1uC,EAAMuwC,EAAWnrB,EAAM96B,KAAKmkD,aAAczuC,EAAMolB,IAAOplB,EAC9D,GAAIhT,EAAAq4B,YAAY/0B,EAAKkM,WAAWwD,IAAO,CACrC1V,KAAKokD,oBAAqB,EAC1B,OAINpkD,KAAK0V,IAAMuwC,EACXjmD,KAAKshD,MAAQsF,EACb5mD,KAAKikD,SAAW4C,EAElB,OAAO7mD,KAAKkkD,WAGdF,EAAA/hD,UAAA6kD,eAAA,WACE,OAAO9mD,KAAK+mD,KAAKxkD,EAAMW,WAAYq8C,EAAmB8G,SAGxDrC,EAAA/hD,UAAA+kD,mBAAA,WACE,OAAOhnD,KAAK+mD,KAAKxkD,EAAMW,WAAYq8C,EAAmB6G,SAGxDpC,EAAA/hD,UAAA8kD,KAAA,SAAKzF,EAAcgD,QAAA,IAAAA,MAAyC/E,EAAmBS,SAC7E,IAAIiG,EAAYjmD,KAAK0V,IACjBkxC,EAAc5mD,KAAKshD,MACnBuF,EAAiB7mD,KAAKikD,SACtB0C,EAAoBnoC,IAAIoZ,UAC5B,OAAQ0pB,GACN,KAAK/+C,EAAMm/C,YACTiF,EAAoB,EAKxB,OADA3mD,KAAKshD,MAAQthD,KAAKukD,WAAWD,EAAoBqC,GAC7C3mD,KAAKshD,OAASA,GAChBthD,KAAKkkD,WAAa,GACX,IAEPlkD,KAAK0V,IAAMuwC,EACXjmD,KAAKshD,MAAQsF,EACb5mD,KAAKikD,SAAW4C,GACT,IAIX7C,EAAA/hD,UAAAglD,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAMxxC,IAAM1V,KAAK0V,IACjBwxC,EAAM5F,MAAQthD,KAAKshD,MACnB4F,EAAMjD,SAAWjkD,KAAKikD,SACfiD,GAGTlD,EAAA/hD,UAAAolD,QAAA,SAAQH,GACNC,EAAgBD,GAGlBlD,EAAA/hD,UAAAqlD,MAAA,SAAMJ,GACJlnD,KAAK0V,IAAMwxC,EAAMxxC,IACjB1V,KAAKshD,MAAQ4F,EAAM5F,MACnBthD,KAAKikD,SAAWiD,EAAMjD,SACtBjkD,KAAKkkD,WAAa,GAGpBF,EAAA/hD,UAAAmC,MAAA,SAAMy2B,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQ76B,KAAKikD,SACbnpB,EAAM96B,KAAK0V,KACFolB,EAAM,IACfA,EAAMD,GAED,IAAIr4B,EAAMxC,KAAKqN,OAAQwtB,EAAOC,IAGvCkpB,EAAA/hD,UAAAslD,eAAA,WAGE,IAFA,IAAIvhD,EAAOhG,KAAKqN,OAAOrH,KACnB60B,EAAQ76B,KAAK0V,MAEb1V,KAAK0V,IAAM1V,KAAK86B,KAClBp4B,EAAAwjD,iBAAiBlgD,EAAKkM,WAAWlS,KAAK0V,QAExC,OAAO1P,EAAK8P,UAAU+kB,EAAO76B,KAAK0V,MAGpCsuC,EAAA/hD,UAAAwxC,WAAA,WAKE,IAJA,IAAIztC,EAAOhG,KAAKqN,OAAOrH,KACnBwhD,EAAQxhD,EAAKkM,WAAWlS,KAAK0V,OAC7BmlB,EAAQ76B,KAAK0V,IACb0U,EAAS,KACA,CACX,GAAIpqB,KAAK0V,KAAO1V,KAAK86B,IAAK,CACxB1Q,GAAUpkB,EAAK8P,UAAU+kB,EAAO76B,KAAK0V,KACrC1V,KAAKohB,MACH/H,EAAAgI,eAAeomC,4BACfznD,KAAKoE,MAAMy2B,EAAQ,EAAG76B,KAAK86B,MAE7B,MAEF,IAAIp6B,EAAIsF,EAAKkM,WAAWlS,KAAK0V,KAC7B,GAAIhV,GAAK8mD,EAAO,CACdp9B,GAAUpkB,EAAK8P,UAAU+kB,EAAO76B,KAAK0V,OACrC,MAEF,GAAK,IAADhV,EAAJ,CAMA,GAAIgC,EAAAq4B,YAAYr6B,GAAI,CAClB0pB,GAAUpkB,EAAK8P,UAAU+kB,EAAO76B,KAAK0V,KACrC1V,KAAKohB,MACH/H,EAAAgI,eAAeomC,4BACfznD,KAAKoE,MAAMy2B,EAAQ,EAAG76B,KAAK0V,MAE7B,QAEA1V,KAAK0V,SAbL0U,GAAUpkB,EAAK8P,UAAU+kB,EAAO76B,KAAK0V,KACrC0U,GAAUpqB,KAAK0nD,qBACf7sB,EAAQ76B,KAAK0V,IAajB,OAAO0U,GAGT45B,EAAA/hD,UAAAylD,mBAAA,WACE,KAAM1nD,KAAK0V,KAAO1V,KAAK86B,IAKrB,OAJA96B,KAAKohB,MACH/H,EAAAgI,eAAesmC,uBACf3nD,KAAKoE,MAAMpE,KAAK86B,MAEX,GAGT,IAAI90B,EAAOhG,KAAKqN,OAAOrH,KACnBtF,EAAIsF,EAAKkM,WAAWlS,KAAK0V,OAC7B,OAAQhV,GACN,QAAkB,MAAO,KACzB,QAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,QAA2B,MAAO,IAClC,QAA2B,MAAO,IAClC,SACE,OACEV,KAAK0V,IAAM1V,KAAK86B,KACS,KAAzB90B,EAAKkM,WAAWlS,KAAK0V,QAEnB1V,KAAK0V,IACA1V,KAAK4nD,6BAEP5nD,KAAK6nD,oBAEd,QAEI7nD,KAAK0V,IAAM1V,KAAK86B,KACS,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,QAEnB1V,KAAK0V,IAIX,QACA,UACA,UAAkC,MAAO,GACzC,QAAS,OAAOimC,OAAOmM,aAAapnD,KAIxCsjD,EAAA/hD,UAAA8lD,kBAAA,WAIE,IAHA,IAAI/hD,EAAOhG,KAAKqN,OAAOrH,KACnB60B,EAAQ76B,KAAK0V,IACbsyC,GAAU,IACD,CACX,GAAIhoD,KAAK0V,KAAO1V,KAAK86B,IAAK,CACxB96B,KAAKohB,MACH/H,EAAAgI,eAAe4mC,wCACfjoD,KAAKoE,MAAMy2B,EAAO76B,KAAK86B,MAEzB,MAEF,GAA6B,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,KAAzB,CAKA,IAAIhV,EAAIsF,EAAKkM,WAAWlS,KAAK0V,KAC7B,GAAK,IAADhV,IAAwBsnD,EAAS,MACrC,GAAItlD,EAAAq4B,YAAYr6B,GAAI,CAClBV,KAAKohB,MACH/H,EAAAgI,eAAe4mC,wCACfjoD,KAAKoE,MAAMy2B,EAAO76B,KAAK0V,MAEzB,QAEA1V,KAAK0V,IACPsyC,GAAU,QAdNhoD,KAAK0V,IACPsyC,GAAU,EAed,OAAOhiD,EAAK8P,UAAU+kB,EAAO76B,KAAK0V,MAGpCsuC,EAAA/hD,UAAAimD,gBAAA,WAIE,IAHA,IAAIliD,EAAOhG,KAAKqN,OAAOrH,KACnB60B,EAAQ76B,KAAK0V,IACbhS,EAAQ,EACL1D,KAAK0V,IAAM1V,KAAK86B,KAAK,CAC1B,IAAIp6B,EAASsF,EAAKkM,WAAWlS,KAAK0V,KAClC,IAAKhT,EAAAwjD,iBAAiBxlD,GAAI,MAI1B,SAHEV,KAAK0V,IAGChV,GACN,SACEgD,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACF1D,KAAKohB,MACH/H,EAAAgI,eAAe8mC,iCACfnoD,KAAKoE,MAAMy2B,EAAO76B,KAAK0V,MAGpB1P,EAAK8P,UAAU+kB,EAAO76B,KAAK0V,MAGpCsuC,EAAA/hD,UAAAmjD,YAAA,WACE,IAAIp/C,EAAOhG,KAAKqN,OAAOrH,KACvB,GAA6B,IAAzBA,EAAKkM,WAAWlS,KAAK0V,MAAuB1V,KAAK0V,IAAM,EAAI1V,KAAK86B,IAClE,OAAQ90B,EAAKkM,WAAWlS,KAAK0V,IAAM,IACjC,QACA,SACA,QACA,QACA,QACA,SAAiB,OAAO,EAI5B,IADA,IAAIA,EAAM1V,KAAK0V,IACRA,EAAM1V,KAAK86B,KAAK,CACrB,IAAIp6B,EAAIsF,EAAKkM,WAAWwD,GACxB,GAAK,IAADhV,GAAsB,IAADA,GAAoB,KAADA,EAC1C,OAAO,EAET,IAAKA,EAAC,IAAkBA,EAAC,KAAoB,IAADA,EAAiB,MAE7DgV,IAEF,OAAO,GAGTsuC,EAAA/hD,UAAAmmD,YAAA,WACE,IAAIpiD,EAAOhG,KAAKqN,OAAOrH,KACvB,GAA6B,IAAzBA,EAAKkM,WAAWlS,KAAK0V,MAAuB1V,KAAK0V,IAAM,EAAI1V,KAAK86B,IAAK,CACvE,OAAQ90B,EAAKkM,WAAWlS,KAAK0V,IAAM,IACjC,QACA,SAEE,OADA1V,KAAK0V,KAAO,EACL1V,KAAKqoD,iBAEd,QACA,QAEE,OADAroD,KAAK0V,KAAO,EACL1V,KAAKsoD,oBAEd,QACA,SAEE,OADAtoD,KAAK0V,KAAO,EACL1V,KAAKuoD,mBAGhB,GAAI7lD,EAAA8lD,aAAaxiD,EAAKkM,WAAWlS,KAAK0V,IAAM,IAAK,CAC/C,IAAImlB,EAAQ76B,KAAK0V,MACf1V,KAAK0V,IACP,IAAIpU,EAAQtB,KAAKuoD,mBAKjB,OAJAvoD,KAAKohB,MACH/H,EAAAgI,eAAeonC,8CACfzoD,KAAKoE,MAAMy2B,EAAO76B,KAAK0V,MAElBpU,GAGX,OAAOtB,KAAK0oD,sBAGd1E,EAAA/hD,UAAAomD,eAAA,WAME,IALA,IAAIriD,EAAOhG,KAAKqN,OAAOrH,KACnB60B,EAAQ76B,KAAK0V,IACbpU,EAAQ+d,QAAQ,EAAG,GACnBspC,EAAStpC,QAAQ,GAAI,GACrBupC,EAAS/tB,EACN76B,KAAK0V,IAAM1V,KAAK86B,KAAK,CAC1B,IAAIplB,EAAM1V,KAAK0V,IACXhV,EAAIsF,EAAKkM,WAAWwD,GACxB,GAAIhV,GAAC,IAAmBA,GAAC,GAEvBY,EAAQunD,QACNC,QAAQxnD,EAAOqnD,GACftpC,QAAQ3e,EAAC,GAAgB,SAErB,GAAIA,GAAC,IAAkBA,GAAC,GAE9BY,EAAQunD,QACNC,QAAQxnD,EAAOqnD,GACftpC,QAAQ,GAAK3e,EAAC,GAAe,SAE1B,GAAIA,GAAC,IAAkBA,GAAC,IAE7BY,EAAQunD,QACNC,QAAQxnD,EAAOqnD,GACftpC,QAAQ,GAAK3e,EAAC,GAAe,QAE1B,IAAK,IAADA,EAWT,MAVIkoD,GAAUlzC,GACZ1V,KAAKohB,MACHwnC,GAAU/tB,EACNxhB,EAAAgI,eAAe0nC,wCACf1vC,EAAAgI,eAAe2nC,0DACnBhpD,KAAKoE,MAAMsR,IAGfkzC,EAASlzC,EAAM,EAIjB1V,KAAK0V,IAAMA,EAAM,EAanB,OAXI1V,KAAK0V,KAAOmlB,EACd76B,KAAKohB,MACH/H,EAAAgI,eAAe4nC,2BACfjpD,KAAKoE,MAAMy2B,IAEJ+tB,GAAU5oD,KAAK0V,KACxB1V,KAAKohB,MACH/H,EAAAgI,eAAe0nC,wCACf/oD,KAAKoE,MAAMwkD,EAAS,IAGjBtnD,GAGT0iD,EAAA/hD,UAAAymD,mBAAA,WAME,IALA,IAAI1iD,EAAOhG,KAAKqN,OAAOrH,KACnB60B,EAAQ76B,KAAK0V,IACbpU,EAAQ+d,QAAQ,EAAG,GACnB6pC,EAAS7pC,QAAQ,GAAI,GACrBupC,EAAS/tB,EACN76B,KAAK0V,IAAM1V,KAAK86B,KAAK,CAC1B,IAAIplB,EAAM1V,KAAK0V,IACXhV,EAAIsF,EAAKkM,WAAWwD,GACxB,GAAIhV,GAAC,IAAmBA,GAAC,GAEvBY,EAAQunD,QACNC,QAAQxnD,EAAO4nD,GACf7pC,QAAQ3e,EAAC,GAAgB,QAEtB,IAAK,IAADA,EAWT,MAVIkoD,GAAUlzC,GACZ1V,KAAKohB,MACHwnC,GAAU/tB,EACNxhB,EAAAgI,eAAe0nC,wCACf1vC,EAAAgI,eAAe2nC,0DACnBhpD,KAAKoE,MAAMsR,IAGfkzC,EAASlzC,EAAM,EAIjB1V,KAAK0V,IAAMA,EAAM,EAanB,OAXI1V,KAAK0V,KAAOmlB,EACd76B,KAAKohB,MACH/H,EAAAgI,eAAe8nC,eACfnpD,KAAKoE,MAAMy2B,IAEJ+tB,GAAU5oD,KAAK0V,KACxB1V,KAAKohB,MACH/H,EAAAgI,eAAe0nC,wCACf/oD,KAAKoE,MAAMwkD,EAAS,IAGjBtnD,GAGT0iD,EAAA/hD,UAAAsmD,iBAAA,WAME,IALA,IAAIviD,EAAOhG,KAAKqN,OAAOrH,KACnB60B,EAAQ76B,KAAK0V,IACbpU,EAAQ+d,QAAQ,EAAG,GACnB+pC,EAAQ/pC,QAAQ,EAAG,GACnBupC,EAAS/tB,EACN76B,KAAK0V,IAAM1V,KAAK86B,KAAK,CAC1B,IAAIplB,EAAM1V,KAAK0V,IACXhV,EAAIsF,EAAKkM,WAAWwD,GACxB,GAAIhV,GAAC,IAAmBA,GAAC,GAEvBY,EAAQunD,QACNC,QAAQxnD,EAAO8nD,GACf/pC,QAAQ3e,EAAC,GAAgB,QAEtB,IAAK,IAADA,EAWT,MAVIkoD,GAAUlzC,GACZ1V,KAAKohB,MACHwnC,GAAU/tB,EACNxhB,EAAAgI,eAAe0nC,wCACf1vC,EAAAgI,eAAe2nC,0DACnBhpD,KAAKoE,MAAMsR,IAGfkzC,EAASlzC,EAAM,IAIf1V,KAAK0V,IAaT,OAXI1V,KAAK0V,KAAOmlB,EACd76B,KAAKohB,MACH/H,EAAAgI,eAAegoC,qBACfrpD,KAAKoE,MAAMy2B,IAEJ+tB,GAAU5oD,KAAK0V,KACxB1V,KAAKohB,MACH/H,EAAAgI,eAAe0nC,wCACf/oD,KAAKoE,MAAMwkD,EAAS,IAGjBtnD,GAGT0iD,EAAA/hD,UAAAqmD,kBAAA,WAOE,IANA,IAAItiD,EAAOhG,KAAKqN,OAAOrH,KACnB60B,EAAQ76B,KAAK0V,IACbpU,EAAQ+d,QAAQ,EAAG,GACnBiqC,EAAQjqC,QAAQ,EAAG,GACnBkqC,EAAQlqC,QAAQ,EAAG,GACnBupC,EAAS/tB,EACN76B,KAAK0V,IAAM1V,KAAK86B,KAAK,CAC1B,IAAIplB,EAAM1V,KAAK0V,IACXhV,EAAIsF,EAAKkM,WAAWwD,GACxB,GAAK,IAADhV,EAEFY,EAAQwnD,QACNxnD,EACAgoD,QAEG,GAAK,IAAD5oD,EAETY,EAAQunD,QACNC,QAAQxnD,EAAOgoD,GACfC,OAEG,IAAK,IAAD7oD,EAWT,MAVIkoD,GAAUlzC,GACZ1V,KAAKohB,MACHwnC,GAAU/tB,EACNxhB,EAAAgI,eAAe0nC,wCACf1vC,EAAAgI,eAAe2nC,0DACnBhpD,KAAKoE,MAAMsR,IAGfkzC,EAASlzC,EAAM,EAIjB1V,KAAK0V,IAAMA,EAAM,EAanB,OAXI1V,KAAK0V,KAAOmlB,EACd76B,KAAKohB,MACH/H,EAAAgI,eAAemoC,sBACfxpD,KAAKoE,MAAMy2B,IAEJ+tB,GAAU5oD,KAAK0V,KACxB1V,KAAKohB,MACH/H,EAAAgI,eAAe0nC,wCACf/oD,KAAKoE,MAAMwkD,EAAS,IAGjBtnD,GAGT0iD,EAAA/hD,UAAAwnD,UAAA,WAWE,OAAOzpD,KAAK0pD,oBAGd1F,EAAA/hD,UAAAynD,iBAAA,WAIE,IAFA,IAAI7uB,EAAQ76B,KAAK0V,IACb1P,EAAOhG,KAAKqN,OAAOrH,KAChBhG,KAAK0V,IAAM1V,KAAK86B,KAAOp4B,EAAAkiD,eAAe5+C,EAAKkM,WAAWlS,KAAK0V,SAC9D1V,KAAK0V,IAET,GAAI1V,KAAK0V,IAAM1V,KAAK86B,KAAgC,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,KAE9C,MADE1V,KAAK0V,IACA1V,KAAK0V,IAAM1V,KAAK86B,KAAOp4B,EAAAkiD,eAAe5+C,EAAKkM,WAAWlS,KAAK0V,SAC9D1V,KAAK0V,IAGX,GAAI1V,KAAK0V,IAAM1V,KAAK86B,IAAK,CACvB,IAAIp6B,EAAIsF,EAAKkM,WAAWlS,KAAK0V,KAC7B,GAAK,IAADhV,GAAoB,KAADA,EAUrB,MARIV,KAAK0V,IAAM1V,KAAK86B,MACS,IAAzB90B,EAAKkM,WAAWlS,KAAK0V,MACI,IAAzB1P,EAAKkM,WAAWlS,KAAK0V,OAEvBhT,EAAAkiD,eAAe5+C,EAAKkM,WAAWlS,KAAK0V,IAAM,OAExC1V,KAAK0V,IAEF1V,KAAK0V,IAAM1V,KAAK86B,KAAOp4B,EAAAkiD,eAAe5+C,EAAKkM,WAAWlS,KAAK0V,SAC9D1V,KAAK0V,IAIb,OAAOi0C,WAAW3jD,EAAK8P,UAAU+kB,EAAO76B,KAAK0V,OAG/CsuC,EAAA/hD,UAAA2nD,aAAA,WACE,MAAM,IAAI5mC,MAAM,oBAGlBghC,EAAA/hD,UAAA4lD,kBAAA,WAIE,IAHA,IAAIgC,EAAS,EACTvoD,EAAQ,EACR0E,EAAOhG,KAAKqN,OAAOrH,KAChBhG,KAAK0V,IAAM1V,KAAK86B,KAAK,CAC1B,IAAIp6B,EAAIsF,EAAKkM,WAAWlS,KAAK0V,OAC7B,GAAIhV,GAAC,IAAmBA,GAAC,GACvBY,EAAgB,GAARA,EAAaZ,EAAC,QACjB,GAAIA,GAAC,IAAkBA,GAAC,GAC7BY,EAAgB,GAARA,EAAa,GAAKZ,EAAC,OACtB,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,OAJAV,KAAKohB,MACH/H,EAAAgI,eAAe4nC,2BACfjpD,KAAKoE,MAAMpE,KAAK0V,IAAM,EAAG1V,KAAK0V,MAEzB,GANPpU,EAAgB,GAARA,EAAa,GAAKZ,EAAC,GAQ7B,GAAgB,KAAVmpD,EAAa,MAErB,OAAIA,GACF7pD,KAAKohB,MACH/H,EAAAgI,eAAesmC,uBACf3nD,KAAKoE,MAAMpE,KAAK0V,MAEX,IAEFimC,OAAOmM,aAAaxmD,IAGrB0iD,EAAA/hD,UAAA2lD,0BAAR,WACE,IAAI/sB,EAAQ76B,KAAK0V,IACbpU,EAAQtB,KAAKqoD,iBACbyB,EAAU5Z,QAAQ5uC,GAClByoD,GAAU,EAEd93C,QAAQk+B,SAAS7uC,IACbwoD,EAAU,UACZ9pD,KAAKohB,MACH/H,EAAAgI,eAAe2oC,4EACfhqD,KAAKoE,MAAMy2B,EAAO76B,KAAK0V,MAEzBq0C,GAAU,GAGZ,IAAI/jD,EAAOhG,KAAKqN,OAAOrH,KAiBvB,OAhBIhG,KAAK0V,KAAO1V,KAAK86B,KACnB96B,KAAKohB,MACH/H,EAAAgI,eAAesmC,uBACf3nD,KAAKoE,MAAMy2B,EAAO76B,KAAK86B,MAEzBivB,GAAU,GACwB,KAAzB/jD,EAAKkM,WAAWlS,KAAK0V,OAC5B1V,KAAK0V,KAEP1V,KAAKohB,MACH/H,EAAAgI,eAAe4oC,qCACfjqD,KAAKoE,MAAMy2B,EAAO76B,KAAK0V,MAEzBq0C,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACbnO,OAAOmM,aAAagC,GACpBnO,OAAOmM,aAC2B,QAA/BgC,EAAU,OAAS,KAAO,IAC1BA,EAAU,OAAS,KAAY,QAIxC9F,EAAA/hD,UAAAioD,OAAA,aAEFlG,EA7kCA,CAA+B3qC,EAAAyQ,mBAAlBpqB,EAAAskD,YAglCb,IAAAoD,EAAA,WAOA,OAPA,gBAAa1nD,EAAA0nD,QAUb,IAAID,EAA8B,o6BCxjDlC,IAmKYnX,EAnKZma,EAAAhqD,EAAA,IAQAkZ,EAAAlZ,EAAA,GAKAqZ,EAAArZ,EAAA,GAyBAkC,EAAAlC,EAAA,GAUAk8C,EAAAl8C,EAAA,GA4BAmC,EAAAnC,EAAA,GAKAoZ,EAAApZ,EAAA,GA+DAmZ,EAAAnZ,EAAA,GASAuC,EAAAvC,EAAA,IAUA,SAAY6vC,GAEVA,IAAA,mBAEAA,IAAA,mBAJF,CAAYA,EAAAtwC,EAAAswC,SAAAtwC,EAAAswC,YAQZ,IAAAoa,EAAA,oBAAAA,IAGEpqD,KAAA+vB,OAAiBigB,EAAOqa,OAExBrqD,KAAAuf,eAAsB,EAEtBvf,KAAAwf,UAAiB,EAEjBxf,KAAAsqD,cAAqB,EAErBtqD,KAAAuqD,aAAoB,EAEpBvqD,KAAAuuB,WAAkB,EAElBvuB,KAAAyf,WAAkB,EAElBzf,KAAA4iB,cAA2C,KAE3C5iB,KAAAwqD,SAAQ,EAGRxqD,KAAA0f,kBAAyB,EAEzB1f,KAAA2f,gBAAuB,EA0BzB,OAvBE5e,OAAAC,eAAIopD,EAAAnoD,UAAA,gBAAJ,WACE,OAAOjC,KAAK+vB,QAAUigB,EAAOC,wCAI/BlvC,OAAAC,eAAIopD,EAAAnoD,UAAA,iBAAJ,WACE,OAAOjC,KAAK+vB,QAAUigB,EAAOC,OAAS32B,EAAA+E,KAAKy+B,QAAUxjC,EAAA+E,KAAK0+B,yCAI5Dh8C,OAAAC,eAAIopD,EAAAnoD,UAAA,iBAAJ,WACE,OAAOjC,KAAK+vB,QAAUigB,EAAOC,OAAS32B,EAAA+E,KAAKu+B,QAAUtjC,EAAA+E,KAAKw+B,yCAI5D97C,OAAAC,eAAIopD,EAAAnoD,UAAA,sBAAJ,WACE,OAAOjC,KAAK+vB,QAAUigB,EAAOC,OAAQ,EAAiB,mCAIxDma,EAAAnoD,UAAA2d,WAAA,SAAW6qC,GACT,OAAoC,IAA5BzqD,KAAKwqD,SAAWC,IAE5BL,EAlDA,GAAa1qD,EAAA0qD,UAqDb,SAAkBM,GAEhBA,IAAA,eAEAA,IAAA,mCAEAA,IAAA,mCANF,CAAkBhrD,EAAAgrD,UAAAhrD,EAAAgrD,aAUlB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,uBAEAA,IAAA,uBANF,CAAkBjrD,EAAAirD,iBAAAjrD,EAAAirD,oBAUlB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,eAJF,CAAkBlrD,EAAAkrD,WAAAlrD,EAAAkrD,cAQlB,IAywOIC,EACAC,EA1wOJC,EAAA,SAAA15C,GA6CE,SAAA05C,EAAY/gC,EAAkB5L,QAAA,IAAAA,MAAA,MAA9B,IAAA7M,EACEF,EAAA7Q,KAAAR,KAAMgqB,EAAQ5N,cAAYpc,YAjC5BuR,EAAAy5C,qBAAwC,KAExCz5C,EAAA05C,0BAEA15C,EAAA25C,YAA2B,KAE3B35C,EAAA45C,YAAoB7xC,EAAA+E,KAAKc,KAQzB5N,EAAA65C,kBAEA75C,EAAA85C,eAA4C,IAAInvC,IAEhD3K,EAAA+5C,iBAEA/5C,EAAAg6C,QAAqB,EAErBh6C,EAAAi6C,QAAuB,EAEvBj6C,EAAAk6C,mBAA0B,EAy1ElBl6C,EAAAm6C,eAAkC,KAClCn6C,EAAAo6C,eAAkC,KAClCp6C,EAAAq6C,eAAkC,KAClCr6C,EAAAs6C,eAAkC,KAl1ExCt6C,EAAKyY,QAAUA,EACfzY,EAAKiM,SAAWwM,EAAQxM,SACnBY,IAASA,EAAU,IAAIgsC,GAC5B74C,EAAK6M,QAAUA,EACf7M,EAAK6d,aAAe/P,QAGlBysC,IAAI1tC,EAAQqB,WAAY,IAE1BlO,EAAK5R,OAAS6Z,EAAA4sB,OAAOzkC,WA4pOzB,OAptO8B2P,EAAAy5C,EAAA15C,GAwCrB05C,EAAAgB,QAAP,SAAe/hC,EAAkB5L,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAI2sC,EAAS/gC,EAAS5L,GAAS2tC,WAmBxChB,EAAA9oD,UAAA8pD,QAAA,mBACM3tC,EAAUpe,KAAKoe,QACfze,EAASK,KAAKL,OACdqqB,EAAUhqB,KAAKgqB,QAGnBA,EAAQ7L,WAAWC,GAGnB,IAAI4tC,EAAwB,IAAI3P,EAAA5wB,SAASzB,EAAQzG,cAAe,QAAS,IAAIjK,EAAA6kC,aAAc7kC,EAAA+E,KAAKc,OAChGnf,KAAKgsD,sBAAwBA,EAC7B,IAAIC,EAAoB,IAAIl2C,MAC5B/V,KAAKisD,kBAAoBA,EACzBjsD,KAAK4wB,gBAAkBo7B,EAKvB,IAFA,IAAItuC,EAAUsM,EAAQtM,QAEbrd,EAAI,EAAGuG,EAAI8W,EAAQ7W,OAAQxG,EAAIuG,IAAKvG,EACvCqd,EAAQrd,GAAGulB,SAAS5lB,KAAKksD,cAAcxuC,EAAQrd,IAIrD,GAAI4rD,EAAkBplD,QAAmC,OAAzBmjB,EAAQjN,aAAuB,CAC7D,IAAI3N,EAAY48C,EAAsB58C,UAClC+8C,EAAUxsD,EAAO0tC,YACnB2e,EAAsB7rC,aACtBngB,KAAKosD,mBACHh9C,EAAUwU,eACVxU,EAAUhK,WACVgK,EAAU0d,UAEZxT,EAAAykC,mBAAmBiO,EAAsBngC,kBACzClsB,EAAOwrC,YAAY,KAAM8gB,IAE3BD,EAAsB19B,SAAS3uB,EAAQwsD,GAClCniC,EAAQjN,cAAcpd,EAAOgxC,SAASwb,GAI7C,IAAI/8B,EAAepvB,KAAKovB,aACxBA,EAAei9B,UAAUj9B,EAAchR,EAAQW,UAAU+E,UACzD9jB,KAAKovB,aAAeA,EAChBhR,EAAQkB,SACV3f,EAAOutC,UACL,YAAW,GAEX,EACAvtC,EAAOqoC,UAAUkI,QAAQ9gB,GAAe+gB,SAAS/gB,KAGnDzvB,EAAOutC,UACL,YAAW,GAEX,EACAvtC,EAAOioC,UAAUsI,QAAQ9gB,KAK7B,IAAIk9B,EAAWtsD,KAAKorD,eAAevkD,OAC/BqpC,QAAQqc,UAAUF,UAAUj9B,EAAc,OAAU/P,QAAQ,GAAI,KAChE,EACJ1f,EAAO8vC,UACL6c,EACAtsD,KAAKoe,QAAQkB,SACT9F,EAAA4sB,OAAO6P,kBACPz8B,EAAA4sB,OAAO4P,kBACXh2C,KAAKorD,eACLhtC,EAAQ2R,OACR,UAIE3R,EAAQksC,cAAc3qD,EAAOuvC,gBAAgB,IAAK,MAAO,UAG7D,IAAIoc,EAAgBtrD,KAAKsrD,cAErBkB,GAAwB,EADJlB,EAAczkD,SAGpClH,EAAO6wC,iBAAiB8a,GACxB3rD,EAAOuuC,eAAe,IAAK,SAC3Bse,GAAwB,GAItBpuC,EAAQmsC,cACV5qD,EAAOqvC,eAAe,IAAK,MAAO,SAC7Bwd,GAAuB7sD,EAAOuuC,eAAe,IAAK,cAIzD,IAAiC,IAAAhhB,EAAA1L,EAAAwI,EAAQrN,oBAAkBiF,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAApD,IAAAqB,EAAAlB,EAAAD,EAAAtgB,MAAA,GAACV,EAAAmiB,EAAA,GAAM0pC,EAAA1pC,EAAA,GACd/iB,KAAK0sD,iBAAiB9rD,EAAM6rD,EAAapkD,2GAM3C,OAFIrI,KAAKyrD,mBAAmBtB,EAAAwC,oBAAoB3sD,MAEzCL,GAIDorD,EAAA9oD,UAAAyqD,iBAAR,SAAyB9rD,EAAcyH,EAAkBygB,4BAAA,IAAAA,MAAA,IAGvD,IAAI9c,EAAU3D,EAAQ2D,QACtB,GAAIA,EAAS,CACX,IAAI4gD,EAAY9jC,EAASloB,GAAQyH,EAAQzF,MAAQy5C,EAAAtgC,YAAYlI,MACzDxR,EAAAqW,mBACArW,EAAAoW,kBAEJ,GAAIpQ,EAAQzF,MAAQy5C,EAAAtgC,YAAYyO,cAC9B,IAAmB,IAAAqiC,EAAArrC,EAAAxV,EAAQtC,UAAQojD,EAAAD,EAAAnrC,QAAAorC,EAAAnrC,KAAAmrC,EAAAD,EAAAnrC,OAAE,EAA5B7K,EAAMi2C,EAAAxrD,OACDuC,GAAGxB,EAAAsB,YAAY6S,SAC3BxW,KAAK0sD,iBAAiB71C,EAAOqO,WAAYrO,EAAQ+1C,8GAGnD,IAAmB,IAAAG,EAAAvrC,EAAAxV,EAAQtC,UAAQsjD,EAAAD,EAAArrC,QAAAsrC,EAAArrC,KAAAqrC,EAAAD,EAAArrC,OAAE,CAAhC,IAAI7K,KAAMm2C,EAAA1rD,OACFuC,GAAGxB,EAAAsB,YAAYm9C,UAC1B9gD,KAAK0sD,iBAAiB71C,EAAOqO,WAAYrO,EAAQ+1C,sGAKvD,OAAQvkD,EAAQzF,MAGd,KAAKy5C,EAAAtgC,YAAYxJ,OAEf,GADclK,EAAQxE,GAAGxB,EAAAsB,YAAYkmB,QAAUxhB,EAAQxE,GAAGxB,EAAAsB,YAAYgT,OAAStU,EAAAsB,YAAY8iB,WAC1EzmB,KAAKoe,QAAQwB,WAAU,GAStC5f,KAAKL,OAAO2uC,gBAAgBjmC,EAAQ8X,aAAc2I,EAASloB,QARvDiH,EAAuBQ,EAASR,cAElC7H,KAAKohB,MACH/H,EAAAgI,eAAe4rC,+BACfplD,EAAYjH,KAAKwD,OAMvB,MAEF,KAAKi4C,EAAAtgC,YAAY2O,UAEb,IAAI7iB,EADN,GAAKoK,OAAO5J,EAAQ5E,QAAQI,GAAGxB,EAAAsB,YAAYkmB,QAAW7pB,KAAKoe,QAAQwB,WAAU,GAS3E5f,KAAKL,OAAO2uC,gBAAgBjmC,EAAQ8X,aAAc2I,EAASloB,QARvDiH,EAA0BQ,EAASR,cAErC7H,KAAKohB,MACH/H,EAAAgI,eAAe4rC,+BACfplD,EAAYjH,KAAKwD,OAMvB,MAIF,KAAKi4C,EAAAtgC,YAAY9H,SACf,IACI7E,GADA+T,EAAqB9a,GACA+G,UACrBA,EAAUkvC,mBAAqBlvC,EAAUwU,eAAe/c,SAE1Dsc,EAAWnjB,KAAKktD,iBAAiB/pC,GACjCnjB,KAAKmtD,iBAEHhqC,EAAStf,GAAGxB,EAAAsB,YAAYypD,WAAWptD,KAAKL,OAAOmuC,kBAAkB3qB,EAAShD,aAAc2I,EAASloB,GACrG,MAIF,KAAKy7C,EAAAtgC,YAAYgM,SACf,IAAIlnB,EAASoR,OAAkB5J,EAAS2f,iBACxChoB,KAAK0sD,iBAAiBrqD,EAAA0W,cAAgBnY,EAAMC,EAAQioB,GACpD,IAAIukC,EAAoBhlD,EAAS4f,gBAC7BolC,GAAQrtD,KAAK0sD,iBAAiBrqD,EAAA2W,cAAgBpY,EAAMysD,EAAQvkC,GAChE,MAIF,KAAKuzB,EAAAtgC,YAAYoT,MACf,IAAIxvB,EAASK,KAAKL,OACd0E,EAAegE,EAAShE,KACxBipD,EAAajpD,EAAKypB,eAClBoY,EAAiB79B,EAAS+mB,aAC1BrQ,EAAY/e,KAAKoe,QAAQW,UACzBwuC,EAAiBvtD,KAAKoe,QAAQmvC,eAG9BC,EAAa1kC,EAASzmB,EAAA0W,cAAgBnY,EAgB1C,GAfAjB,EAAO0tC,YACLmgB,EACAxtD,KAAKosD,mBAAmB,KAAM/nD,EAAM0a,GACpC,KACApf,EAAO4pC,WACLllC,EAAKyf,SACLzf,EAAKR,GAAE,GACPlE,EAAOspC,eAAe,EAAGskB,GACzBD,EACApnB,IAGJvmC,EAAOmuC,kBAAkB0f,EAAYA,IAGhCnlD,EAAQxE,GAAGxB,EAAAsB,YAAY8iB,UAAW,CACrC,IAAIgnC,EAAa3kC,EAASzmB,EAAA2W,cAAgBpY,EAC1CjB,EAAO0tC,YACLogB,EACAztD,KAAKosD,oBAAqB/nD,GAAQiV,EAAA+E,KAAKc,KAAMJ,GAC7C,KACApf,EAAOiqC,YACLvlC,EAAKyf,SACLnkB,EAAOspC,eAAe,EAAGskB,GACzB5tD,EAAOspC,eAAe,EAAGqkB,GACzBA,EACApnB,IAGJvmC,EAAOmuC,kBAAkB2f,EAAYA,GAEvC,MAIF,KAAKpR,EAAAtgC,YAAYuH,uBACf,IAAqB,IAAAoqC,EAAAlsC,EAAoBnZ,EAASkjB,UAAU7hB,UAAQikD,EAAAD,EAAAhsC,QAAAisC,EAAAhsC,KAAAgsC,EAAAD,EAAAhsC,OAAE,CAAjE,IACC4G,EAAe1nB,EACnB,IAFOuiB,EAAQwqC,EAAArsD,OAEFuC,GAAGxB,EAAAsB,YAAY6f,SAE1B8E,IADIslC,EAAWzqC,EAAShD,cACCrK,UAAU83C,EAASj4C,YAAY,MAE1D3V,KAAK0sD,iBAAiBpkC,EAAcnF,EAAU2F,qGAEhD,MAEF,KAAKuzB,EAAAtgC,YAAY0G,oBACf,IAAqB,IAAAorC,EAAArsC,EAAiBnZ,EAASkjB,UAAU7hB,UAAQokD,EAAAD,EAAAnsC,QAAAosC,EAAAnsC,KAAAmsC,EAAAD,EAAAnsC,OAAE,CAA9D,IAAIyB,EAGDyqC,EAFFtlC,EAAe1nB,EACnB,IAFOuiB,EAAQ2qC,EAAAxsD,OAEFuC,GAAGxB,EAAAsB,YAAY6f,SAE1B8E,IADIslC,EAAWzqC,EAAShD,cACCrK,UAAU83C,EAASj4C,YAAY,MAE1D,IAAIo4C,EAAO5qC,EAASqM,oBAChBu+B,GAAM/tD,KAAK0sD,iBAAiBpkC,EAAejmB,EAAAqW,mBAAqBq1C,EAAK7oC,WAAY6oC,EAAMjlC,GAC3F9oB,KAAK0sD,iBAAiBpkC,EAAcnF,EAAU2F,qGAEhD,MAIF,KAAKuzB,EAAAtgC,YAAY0O,KACjB,KAAK4xB,EAAAtgC,YAAYlI,MACjB,KAAKwoC,EAAAtgC,YAAYyO,UAAW,MAE5B,QAASvY,QAAO,KAOpB84C,EAAA9oD,UAAA+rD,oBAAA,SAAoB/vC,EAAwCgwC,GAC1D,IAAI5gD,EAASrN,KAAKgqB,QAAQhM,mBAAmBC,GACzC5Q,EAAQrN,KAAKksD,cAAc7+C,GAE7BrN,KAAKohB,MACH/H,EAAAgI,eAAe6sC,iBACfD,EAAW7pD,MAAO6Z,IAMxB8sC,EAAA9oD,UAAAiqD,cAAA,SAAc7+C,GACZ,IAAIA,EAAOxJ,GAAGxB,EAAAsB,YAAYypD,UAA1B,CACA//C,EAAOrJ,IAAI3B,EAAAsB,YAAYypD,UAQvB,IALA,IAAI7tC,EAAgBvf,KAAKoe,QAAQmB,cAC7BqG,EAAUvY,EAAOuY,QACjBomC,EAAwBhsD,KAAKgsD,sBAC7BC,EAAoBjsD,KAAKisD,kBACzB1gD,EAAa8B,EAAO9B,WACflL,EAAI,EAAGuG,EAAI2E,EAAW1E,OAAQxG,EAAIuG,IAAKvG,EAAG,CACjD,IAAIiM,EAAYf,EAAWlL,GAC3B,OAAQiM,EAAU1J,MAChB,KAAK2W,EAAA9W,SAASiU,kBAET6I,GAAkBqG,GAAWtZ,EAAUzI,GAAGxB,EAAAsB,YAAY6S,WACnClK,EAAW6hD,WAE/BnuD,KAAKouD,wBAA0C9hD,KAAe,MAEhE,MAEF,KAAKiN,EAAA9W,SAASqV,qBAAsB,MACpC,KAAKyB,EAAA9W,SAAS0U,iBACRoI,GAAkBqG,GAAWtZ,EAAUzI,GAAGxB,EAAAsB,YAAY6S,UACxDxW,KAAKquD,uBAAwC/hD,GAE/C,MAEF,KAAKiN,EAAA9W,SAASuS,qBAETuK,GAAkBqG,GAAWtZ,EAAUzI,GAAGxB,EAAAsB,YAAY6S,WAChClK,EAAW6hD,WAElCnuD,KAAKsuD,2BAAgDhiD,MAEvD,MAEF,KAAKiN,EAAA9W,SAASoV,OACZ7X,KAAKguD,oBACe1hD,EAAWW,eACXX,EAAWS,MAE/B,MAEF,KAAKwM,EAAA9W,SAAS8T,sBACRgJ,GAAkBqG,GAAWtZ,EAAUzI,GAAGxB,EAAAsB,YAAY6S,UACxDxW,KAAKuuD,4BAAkDjiD,GAEzD,MAEF,KAAKiN,EAAA9W,SAAS6T,SACZ,IAAIk4C,EAAexuD,KAAKyuD,yBAA4CniD,GAChEkiD,GAAcvC,EAAkBxmC,KAAK+oC,GACzC,MAEF,KAAKj1C,EAAA9W,SAAS+T,OACuC,MAA7BlK,EAAWW,gBAC/BjN,KAAKguD,oBACuB1hD,EAAWW,eACMX,EAAWS,OAGtDwS,GAAiBqG,IACnB5lB,KAAK0uD,uBAAwCpiD,GAE/C,MAEF,QACE,IAAIqiD,EAAmB3uD,KAAK4wB,gBAC5B5wB,KAAK4wB,gBAAkBo7B,EACvBC,EAAkBxmC,KAAKzlB,KAAK4uD,iBAAiBtiD,IAC7CtM,KAAK4wB,gBAAkB+9B,MAS/B5D,EAAA9oD,UAAA4sD,yBAAA,SAAyBhnD,GAEvB,IAAIQ,EAAU4J,OAAOjS,KAAKgqB,QAAQ1N,eAAepb,IAAI2G,EAAYod,wBAEjE,OADAhT,OAAO5J,EAAQzF,MAAQy5C,EAAAtgC,YAAYxJ,QAC9BvS,KAAK8uD,cAAsBzmD,GACjBA,EADkC,MAInD0iD,EAAA9oD,UAAA6sD,cAAA,SAAcC,GACZ,GAAIA,EAAOlrD,GAAGxB,EAAAsB,YAAYypD,UAAW,OAAO,EAC5C2B,EAAO/qD,IAAI3B,EAAAsB,YAAYypD,UAEvB,IAAIztD,EAASK,KAAKL,OACdkI,EAAcknD,EAAOlnD,YACrBmnD,EAA0B,EAE9B,GAAID,EAAO1qD,MAAQiV,EAAA+E,KAAKc,KACtB,GAAItX,EAGF,GAAIA,EAAYxD,KAAM,CACpB,IAAI4qD,EAAejvD,KAAKwd,SAAS0xC,YAAYrnD,EAAYxD,MACzD,IAAK4qD,EAAc,OAAO,EAC1B,GAAIA,GAAgB31C,EAAA+E,KAAKc,KAKvB,OAJAnf,KAAKohB,MACH/H,EAAAgI,eAAe8tC,cACftnD,EAAYxD,KAAKD,QAEZ,EAET2qD,EAAO1qD,KAAO4qD,MAGT,KAAIpnD,EAAY9C,YAqBrB,OAJA/E,KAAKohB,MACH/H,EAAAgI,eAAe8tC,cACftnD,EAAYjH,KAAKwD,MAAMgrD,QAElB,EAfP,GALAJ,EAAWhvD,KAAKqvD,4BACdxnD,EAAY9C,YACZuU,EAAA+E,KAAKc,KAAI,GAGPnf,KAAKmrD,aAAe7xC,EAAA+E,KAAKc,KAK3B,OAJAnf,KAAKohB,MACH/H,EAAAgI,eAAeiuC,mCACfznD,EAAY9C,YAAYX,MAAOpE,KAAKmrD,YAAYxmC,WAAY,WAEvD,EAEToqC,EAAO1qD,KAAOrE,KAAKmrD,iBAWrBl5C,QAAO,GAKX,GAAI88C,EAAOlrD,GAAGxB,EAAAsB,YAAY8f,UAAYsrC,EAAOhqC,aAAas3B,EAAArgC,eAAe5J,SAAU,OAAO,EAE1F,IAAIk7C,EAAayB,EAAO1qD,KAAKypB,eACzByhC,EAAqBR,EAAOlrD,GAAGxB,EAAAsB,YAAYkmB,QAAUklC,EAAOlrD,GAAGxB,EAAAsB,YAAYgT,OAAStU,EAAAsB,YAAY8iB,UAGpG,GAAIsoC,EAAOlrD,GAAGxB,EAAAsB,YAAY8f,SAGxB,OAAI8rC,GAAsBvvD,KAAKoe,QAAQwB,WAAU,IAC/CmvC,EAAO/qD,IAAI3B,EAAAsB,YAAY6rD,eACnB3nD,EACF4nD,EAAiBV,EAAQlnD,EAAaknD,EAAOtrD,SAE7ConD,EAA8B,MAC9BC,EAA+BiE,EAAO7pC,YAExCvlB,EAAOyvC,gBACL2f,EAAO5uC,aACP0qC,EACAC,EACAwC,GAEFyB,EAAO/qD,IAAI3B,EAAAsB,YAAYypD,WAChB,IAIPptD,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfvT,OAAOpK,GAAazD,QAGjB,GAKT,IAAIsrD,GAAoB,EAGxB,GAAoB,OAAhB7nD,GAAoD,OAA5BA,EAAY9C,aA0BtC,GAzBKiqD,IACHA,EAAWhvD,KAAK2vD,kBACd9nD,EAAY9C,YACZgqD,EAAO1qD,KAAI,MAMXmV,EAAA4Z,gBAAgB47B,IAAax1C,EAAA6Z,aAAa6C,QACxCq5B,GACFP,EAAWrvD,EAAOsyC,qBAAqB+c,GACnCx1C,EAAA4Z,gBAAgB47B,IAAax1C,EAAA6Z,aAAa6C,QAC5Cl2B,KAAKulB,QACHlM,EAAAgI,eAAeuuC,4DACf/nD,EAAYzD,OAEdsrD,GAAoB,IAGtBA,GAAoB,GAKpBX,EAAOhqC,aAAas3B,EAAArgC,eAAexJ,UAChCk9C,EAAmB,CAGtB,OAFAz9C,OAAOuH,EAAA4Z,gBAAgB47B,IAAax1C,EAAA6Z,aAAa6C,OAClC1c,EAAA+d,kBAAkBy3B,IAE/B,OACED,EAAOjkC,kBAAiB,EACxBikC,EAAOhkC,qBAAuB1L,QAAQ7F,EAAA2c,iBAAiB64B,GAAW,GAClE,MAEF,OACED,EAAOjkC,kBAAiB,EACxBikC,EAAOhkC,qBAAuB1L,QAC5B7F,EAAAge,oBAAoBw3B,GACpBx1C,EAAA08B,qBAAqB8Y,IAEvB,MAEF,OACED,EAAOjkC,kBAAiB,EACxBikC,EAAO9jC,mBAAqBzR,EAAAie,iBAAiBu3B,GAC7C,MAEF,OACED,EAAOjkC,kBAAiB,EACxBikC,EAAO9jC,mBAAqBzR,EAAAke,iBAAiBs3B,GAC7C,MAEF,QAEE,OADA/8C,QAAO,IACA,EAGX88C,EAAO/qD,IAAI3B,EAAAsB,YAAYqnB,eAM3BgkC,EAAWD,EAAO1qD,KAAKu5C,aAAaj+C,GAGtC,IAAIwgB,EAAe4uC,EAAO5uC,aAS1B,OAPIuvC,GACF/vD,EAAOutC,UAAU/sB,EAAcmtC,GAAY,EAAMyB,EAAO1qD,KAAKu5C,aAAaj+C,IAC1EK,KAAKisD,kBAAkBxmC,KAAK9lB,EAAOsrC,gBAAgB9qB,EAAc6uC,KAGjErvD,EAAOutC,UAAU/sB,EAAcmtC,GAAaiC,EAAoBP,IAE3D,GAKTjE,EAAA9oD,UAAAosD,uBAAA,SAAuBxmD,GACrB,IAAIQ,EAAU4J,OAAOjS,KAAKgqB,QAAQ1N,eAAepb,IAAI2G,EAAYod,wBAEjE,OADAhT,OAAO5J,EAAQzF,MAAQy5C,EAAAtgC,YAAY0O,MAC9BzqB,KAAK6vD,YAAkBxnD,GACfA,EADgC,MAI/C0iD,EAAA9oD,UAAA4tD,YAAA,SAAYxnD,WACV,GAAIA,EAAQxE,GAAGxB,EAAAsB,YAAYypD,UAAW,OAAO,EAC7C/kD,EAAQrE,IAAI3B,EAAAsB,YAAYypD,UAExB,IAAIztD,EAASK,KAAKL,OAClBK,KAAKkrD,YAAc7iD,EACnB,IAAIynD,EAAkC,KAClCC,GAAqB,EAEzB,GAAI1nD,EAAQ2D,YACV,IAAmB,IAAAkhB,EAAA1L,EAAAnZ,EAAQ2D,QAAQtC,UAAQkY,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAAxC,IAAI7K,EAAM+K,EAAAtgB,MACb,GAAIuV,EAAOjU,MAAQy5C,EAAAtgC,YAAY2O,UAA/B,CACA,IAAIslC,GAAc,EACd/U,EAAiBpkC,EACjBo5C,EAAmBhV,EAAIpzC,YAC3BozC,EAAIj3C,IAAI3B,EAAAsB,YAAYypD,UACpB,IAAI4B,OAAQ,EACRiB,EAAiB3uD,OACnB0tD,EAAWhvD,KAAK2vD,kBACFM,EAAiB3uD,MAC7BgY,EAAA+E,KAAKG,IAAG,KAINhF,EAAA4Z,gBAAgB47B,IAAax1C,EAAA6Z,aAAa6C,QACxC7tB,EAAQxE,GAAGxB,EAAAsB,YAAYkmB,QACzBmlC,EAAWrvD,EAAOsyC,qBAAqB+c,GACnCx1C,EAAA4Z,gBAAgB47B,IAAax1C,EAAA6Z,aAAa6C,QAC5Cl2B,KAAKohB,MACH/H,EAAAgI,eAAe6uC,0EACfD,EAAiB3uD,MAAM8C,OAEzB4rD,GAAc,IAGhBA,GAAc,IAGQ,MAAjBF,EACTd,EAAWrvD,EAAOioC,UAAU,IAExBmoB,GACF/vD,KAAKohB,MACH/H,EAAAgI,eAAe8uC,kCACfF,EAAiB7rD,OAGrB4qD,EAAWrvD,EAAOgpC,aAAanvB,EAAAua,SAASq8B,OACtCzwD,EAAO0pC,gBAAgBymB,EAAc3vC,aAAY,GACjDxgB,EAAOioC,UAAU,IAEnBonB,EAAWrvD,EAAOsyC,qBAAqB+c,GACnCx1C,EAAA4Z,gBAAgB47B,IAAax1C,EAAA6Z,aAAa6C,QACxC7tB,EAAQxE,GAAGxB,EAAAsB,YAAYkmB,QACzB7pB,KAAKohB,MACH/H,EAAAgI,eAAe6uC,0EACfD,EAAiB7rD,OAGrB4rD,GAAc,IAGdA,GACFrwD,EAAOutC,UAAU+N,EAAI96B,aAAY,GAAkB,EAAMxgB,EAAOioC,UAAU,IAC1E5nC,KAAKisD,kBAAkBxmC,KAAK9lB,EAAOsrC,gBAAgBgQ,EAAI96B,aAAc6uC,IACrEe,GAAqB,IAErBpwD,EAAOutC,UAAU+N,EAAI96B,aAAY,GAAmB9X,EAAQxE,GAAGxB,EAAAsB,YAAYkmB,OAAQmlC,GACnFe,GAAqB,GAEvBD,EAA2B7U,qGAI/B,OADAj7C,KAAKkrD,YAAc,MACZ,GAMTH,EAAA9oD,UAAAqsD,2BAAA,SACEzmD,EACA3D,EACAwnB,QAAA,IAAAA,MAAA,MAEA,IAAIrjB,EAAU4J,OAAOjS,KAAKgqB,QAAQ1N,eAAepb,IAAI2G,EAAYod,wBAEjE,OADAhT,OAAO5J,EAAQzF,MAAQy5C,EAAAtgC,YAAYuH,oBAC5BtjB,KAAKqwD,kCACShoD,EACnBnE,EACAwnB,EACA,KACoBrjB,EAASR,YAAYjH,OAK7CmqD,EAAA9oD,UAAAouD,kCAAA,SACEpuD,EACAiC,EACAwnB,EACAS,EACA8hC,GAEA,IAAI9qC,EAAWnjB,KAAKwd,SAAS8yC,iCAC3BruD,EACAiC,EACAwnB,EACAuiC,GAEF,OAAK9qC,GACLA,EAASgJ,WAAaA,EACjBnsB,KAAKuwD,gBAAgBptC,GACnBA,EADqC,MAFtB,MAOxB4nC,EAAA9oD,UAAAmqD,mBAAA,SACExoC,EACAxe,EACA0nB,QAAA,IAAAA,MAAA,MAEA,IACIqa,EADA0X,EAAgBj7B,EAAiBA,EAAe/c,OAAS,EAEzDukB,EAAQ,EAQZ,GAPI0B,IACFqa,EAAa,IAAIpxB,MAAM,EAAI8oC,IAChB,GAAK/xB,EAASgB,eACzB1C,EAAQ,GAER+b,EAAa,IAAIpxB,MAAM8oC,GAErBj7B,EACF,IAAK,IAAIvjB,EAAI,EAAGA,EAAIw+C,IAAiBx+C,IAAK+qB,EACxC+b,EAAW/b,GAASxH,EAAevjB,GAAGytB,eAG1C,IAAI0iC,EAAaprD,EAAW0oB,eACxBnuB,EAASK,KAAKL,OACdiuC,EAAUjuC,EAAO6nC,2BAA2BgpB,EAAYrpB,GAC5D,IAAKyG,EAAS,CACZ,IAAIhtC,EAAO0Y,EAAA6kC,UAAUe,oBAAoBt7B,EAAgBxe,EAAY0nB,GACrE8gB,EAAUjuC,EAAOunC,gBAAgBtmC,EAAM4vD,EAAYrpB,GAErD,OAAOyG,GAITmd,EAAA9oD,UAAAsuD,gBAAA,SAAgBptC,GACd,GAAIA,EAAStf,GAAGxB,EAAAsB,YAAYypD,UAAW,OAAO,EAC9Cn7C,SAASkR,EAAStf,GAAGxB,EAAAsB,YAAY8f,UAAYN,EAAS4B,aAAas3B,EAAArgC,eAAe5J,WAClF+Q,EAASnf,IAAI3B,EAAAsB,YAAYypD,UAGzB,IAkBIphC,EAlBAnkB,EAAcsb,EAASlhB,UAAU4F,YACjCwH,EAAOxH,EAAYwH,KACnBA,EACE8T,EAAStf,GAAGxB,EAAAsB,YAAY8f,UAC1BzjB,KAAKohB,MACH/H,EAAAgI,eAAeovC,yDACf5oD,EAAYjH,KAAKwD,OAIhB+e,EAAStf,GAAGxB,EAAAsB,YAAY8f,UAC3BzjB,KAAKohB,MACH/H,EAAAgI,eAAeqvC,gFACf7oD,EAAYjH,KAAKwD,OAMvB,IAAIgL,EAAY+T,EAAS/T,UACrBw+B,EAAU5tC,KAAKosD,mBAAmBh9C,EAAUwU,eAAgBxU,EAAUhK,WAAYgK,EAAU0d,UAC5FntB,EAASK,KAAKL,OAClB,GAAI0P,EAAM,CACR,IAAIshD,EAAgBxtC,EAAStf,GAAGxB,EAAAsB,YAAYoQ,aACxC3O,EAAa+d,EAAS/T,UAAUhK,WAGhCupD,EAAmB3uD,KAAK4wB,gBAC5B5wB,KAAK4wB,gBAAkBzN,EACvB,IAAIqK,EAAOrK,EAASqK,KAChB9nB,OAAI,EACR,GAAI2J,EAAKzM,MAAQ2W,EAAA9W,SAAS8U,WACxBtF,QAAQkR,EAASpf,MAAM1B,EAAAsB,YAAYoQ,YAAc1R,EAAAsB,YAAYsiB,IAAM5jB,EAAAsB,YAAYuiB,IAAM7jB,EAAAsB,YAAY+f,OACjGzR,OAAOkR,EAAStf,GAAGxB,EAAAsB,YAAYmF,QAC/BpD,EAAO1F,KAAK2vD,kBACYtgD,EAAMpI,WAC5B7B,EAAU,KAIZooB,EAAKxpB,IAAG,GACHwpB,EAAK2F,YAAYztB,EAAMN,IAAaooB,EAAKxpB,IAAG,GACjDwpB,EAAKc,eACA,CACLrc,OAAO5C,EAAKzM,MAAQ2W,EAAA9W,SAASsS,OAC7B,IAAI67C,EAAQ5wD,KAAK6wD,kBAAmCxhD,EAAM9D,YAiB1D,GAhBI4X,EAAStf,GAAGxB,EAAAsB,YAAY+f,QAC1B/jB,EAAOutC,UAAU,WAAU,GAAkB,EAAMvtC,EAAOioC,UAAU,IACpEgpB,EAAME,QACJnxD,EAAOisC,SACLjsC,EAAO6oC,YACLhvB,EAAAyd,QAAQC,OACRv3B,EAAO0pC,gBAAgB,WAAU,IAEnC1pC,EAAOwrC,YAAY,MACjBxrC,EAAO8sC,WAAW,QAAS,KAAI,GAC/B9sC,EAAOsrC,gBAAgB,WAAYtrC,EAAOioC,UAAU,SAK5Dpa,EAAKc,WACDqiC,EAAe,CACjB,IAAIpD,EAAiBvtD,KAAKoe,QAAQmvC,eAIlC,GAHAt7C,OAAOkR,EAAStf,GAAGxB,EAAAsB,YAAYipB,YAG1BY,EAAK3pB,GAAE,GAGV,GAAI2pB,EAAK3pB,GAAE,IACT+sD,EAAMnrC,KAAK9lB,EAAOspC,eAAe,EAAGskB,QAG/B,CACL,IAAI9pD,EAASwO,OAAOkR,EAAS1f,QAC7BwO,OAAOxO,EAAOb,MAAQy5C,EAAAtgC,YAAYlI,OAClC+8C,EAAMnrC,KAAK9lB,EAAOwpC,eAAe,EAC/BnpC,KAAK+wD,wBAA+BttD,EAAQoE,EAAYjH,cAMrDwE,GAAckU,EAAA+E,KAAKc,MAASqO,EAAK3pB,GAAE,IAC5C7D,KAAKohB,MACH/H,EAAAgI,eAAe2vC,+DACfnpD,EAAYuH,UAAUhK,WAAWhB,OAGrCsB,EAAQkrD,EAAM/pD,OAEM,GAAhB+pD,EAAM/pD,OACJ+pD,EAAM,GACNjxD,EAAOwrC,YAAY,KAAMylB,EAAOxrD,EAAW0oB,gBAH7CnuB,EAAOmsC,YAgBb,GAXA9rC,KAAK4wB,gBAAkB+9B,EAGvB3iC,EAAMrsB,EAAO0tC,YACXlqB,EAAShD,aACTytB,EACAt0B,EAAAykC,mBAAmB56B,EAAS0I,kBAC5BnmB,GAIEyd,EAAS4B,aAAas3B,EAAArgC,eAAe1J,UAAW,CAClD,IAAIuG,EAAY5G,OAAOsH,EAAAX,cAAcW,EAAAzH,cAAcQ,SAAUzK,EAAYoE,aACzEjM,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACf3M,EAAUzU,aAKd+e,EAASnf,IAAI3B,EAAAsB,YAAY6rD,eACzBC,EAAiBtsC,EAAUtb,EAAasb,EAASlhB,UAAUwB,QAG3DuoB,EAAMrsB,EAAO+uC,kBACXvrB,EAAShD,aACT0qC,EACAC,EACAld,GAKJ,OADAzqB,EAASmL,SAAS3uB,EAAQqsB,IACnB,GAKT++B,EAAA9oD,UAAAssD,4BAAA,SAA4B1mD,GAG1B,IAFA,IAAImE,EAAUnE,EAAYmE,QACtBuT,EAAgBvf,KAAKoe,QAAQmB,cACxBlf,EAAI,EAAGuG,EAAIoF,EAAQnF,OAAQxG,EAAIuG,IAAKvG,EAAG,CAC9C,IAAIwW,EAAS7K,EAAQ3L,GACrB,OAAQwW,EAAOjU,MACb,KAAK2W,EAAA9W,SAASiU,kBAET6I,IAAiB1I,EAAOhT,GAAGxB,EAAAsB,YAAY6S,SACpBK,EAAQs3C,WAE5BnuD,KAAKouD,wBAA0Cv3C,MAEjD,MAEF,KAAK0C,EAAA9W,SAASqV,sBAETyH,IAAiB1I,EAAOhT,GAAGxB,EAAAsB,YAAY6S,SAChBK,EAAQs3C,WAEhCnuD,KAAKixD,4BAAkDp6C,MAEzD,MAEF,KAAK0C,EAAA9W,SAAS0U,iBACRoI,GAAiB1I,EAAOhT,GAAGxB,EAAAsB,YAAY6S,UACzCxW,KAAKquD,uBAAwCx3C,GAE/C,MAEF,KAAK0C,EAAA9W,SAASuS,qBAETuK,IAAiB1I,EAAOhT,GAAGxB,EAAAsB,YAAY6S,SACjBK,EAAQs3C,WAE/BnuD,KAAKsuD,2BAAgDz3C,MAEvD,MAEF,KAAK0C,EAAA9W,SAAS8T,sBACRgJ,GAAiB1I,EAAOhT,GAAGxB,EAAAsB,YAAY6S,UACzCxW,KAAKuuD,4BAAkD13C,GAEzD,MAEF,KAAK0C,EAAA9W,SAAS6T,SACZ,GAAIiJ,GAAiB1I,EAAOhT,GAAGxB,EAAAsB,YAAY6S,QAAS,CAClD,IAAIg4C,EAAexuD,KAAKyuD,yBAA4C53C,GAAQ,GACxE23C,GAAcxuD,KAAKisD,kBAAkBxmC,KAAK+oC,GAEhD,MAEF,QAASv8C,QAAO,MAKtB84C,EAAA9oD,UAAAivD,iBAAA,SAAiBxvD,WACf,GAAKA,EAAGsK,QAAR,CAEA,IAAIuT,EAAgBvf,KAAKoe,QAAQmB,kBACjC,IAAoB,IAAA2N,EAAA1L,EAAA9f,EAAGsK,QAAQtC,UAAQkY,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAApC,IAAIrZ,EAAOuZ,EAAAtgB,MACd,OAAQ+G,EAAQzF,MACd,KAAKy5C,EAAAtgC,YAAY0G,iBAGXlD,IACiBlX,EAASxE,GAAGxB,EAAAsB,YAAY6S,SACpBnO,EAASxE,GAAGxB,EAAAsB,YAAY6f,UAE/CxjB,KAAKmxD,+BAA+C9oD,MAEtD,MAEF,KAAKg0C,EAAAtgC,YAAY0O,KACfzqB,KAAK6vD,YAAkBxnD,GACvB,MAEF,KAAKg0C,EAAAtgC,YAAYuH,mBACf,IAEI/D,GAAqClX,EAASxE,GAAGxB,EAAAsB,YAAY6S,WACrCnO,EAASxE,GAAGxB,EAAAsB,YAAY6f,SAClD,CACA,GAAInb,EAAQ0c,aAAas3B,EAAArgC,eAAe5J,SAAU,MAClDpS,KAAKqwD,kCACgBhoD,KAEnB,KACA,KACoBA,EAASR,YAAYjH,MAG7C,MAEF,KAAKy7C,EAAAtgC,YAAYxJ,OACfvS,KAAK8uD,cAAsBzmD,GAC3B,MAEF,KAAKg0C,EAAAtgC,YAAYyO,UACfxqB,KAAKkxD,iBAA4B7oD,yGASzC0iD,EAAA9oD,UAAAysD,uBAAA,SAAuBpiD,GACrB,IAAIoQ,EAAmB1c,KAAKgqB,QAAQtN,iBAChC1Q,EAAUM,EAAUN,QACxB,GAAKA,EACL,IAAK,IAAI3L,EAAI,EAAGuG,EAAIoF,EAAQnF,OAAQxG,EAAIuG,IAAKvG,EAAG,CAC9C,IAAIwW,EAAS7K,EAAQ3L,GACjBgI,EAAUqU,EAAiBxb,IAC7BoL,EAAUlI,MAAMiJ,OAAOC,aAAejL,EAAAuT,eAAiBiB,EAAOpJ,aAAazH,MAE7E,GAAKqC,EACL,OAAQA,EAAQzF,MACd,KAAKy5C,EAAAtgC,YAAY0G,gBACOpa,EAASxE,GAAGxB,EAAAsB,YAAY6f,UAC5CxjB,KAAKmxD,+BAA+C9oD,MAEtD,MAEF,KAAKg0C,EAAAtgC,YAAY0O,KACfzqB,KAAK6vD,YAAkBxnD,GACvB,MAEF,KAAKg0C,EAAAtgC,YAAYuH,oBAEQjb,EAASxE,GAAGxB,EAAAsB,YAAY6f,UAC7ClX,EAAUlI,MAAMiJ,OAAOuY,SAEvB5lB,KAAKqwD,kCACgBhoD,KAEnB,KACA,KACoBA,EAASR,YAAYjH,MAG7C,MAEF,KAAKy7C,EAAAtgC,YAAYxJ,OACfvS,KAAK8uD,cAAsBzmD,GAC3B,MAEF,KAAKg0C,EAAAtgC,YAAYyO,UACfxqB,KAAKkxD,iBAA4B7oD,MASzC0iD,EAAA9oD,UAAAmsD,wBAAA,SACEvmD,EACA3D,EACAwnB,QAAA,IAAAA,MAAA,MAEA,IAAIrjB,EAAU4J,OAAOjS,KAAKgqB,QAAQ1N,eAAepb,IAAI2G,EAAYod,wBACjEhT,OAAO5J,EAAQzF,MAAQy5C,EAAAtgC,YAAY0G,iBACnCziB,KAAKmxD,+BACa9oD,EAChBnE,EACAwnB,EACA7jB,IAIJkjD,EAAA9oD,UAAAkvD,+BAAA,SACElvD,EACAiC,EACAwnB,EACA0lC,QADA,IAAA1lC,MAAA,WACA,IAAA0lC,MAAA,MAEA,IAAIjuC,EAAWnjB,KAAKwd,SAAS6zC,8BAC3BpvD,EACAiC,EACAwnB,EACA0lC,GAAyBnvD,EAAU4F,aAEhCsb,GACLnjB,KAAKsxD,aAAanuC,IAGpB4nC,EAAA9oD,UAAAqvD,aAAA,SAAanuC,eACX,GAAIA,EAAStf,GAAGxB,EAAAsB,YAAYypD,UAAW,OAAO,EAC9CjqC,EAASnf,IAAI3B,EAAAsB,YAAYypD,UAEzB,IAAImE,EAAgBpuC,EAASlhB,UAAU+J,QACvC,GAAIulD,MACF,IAAoB,IAAA3vC,EAAAJ,EAAA+vC,EAAc7nD,UAAQqZ,EAAAnB,EAAAF,QAAAqB,EAAApB,KAAAoB,EAAAnB,EAAAF,OAAE,CAC1C,QADOrZ,EAAO0a,EAAAzhB,OACEsB,MACd,KAAKy5C,EAAAtgC,YAAYxJ,OACfvS,KAAK8uD,cAAsBzmD,GAC3B,MAEF,KAAKg0C,EAAAtgC,YAAYuH,mBAEQjb,EAASxE,GAAGxB,EAAAsB,YAAY6f,UAE7CxjB,KAAKqwD,kCACgBhoD,KACf,KAAM,KACUA,EAASR,YAAYjH,MAG7C,MAEF,KAAKy7C,EAAAtgC,YAAYgM,UACXlnB,EAAoBwH,EAAS2f,kBAE/BhoB,KAAKqwD,kCACHxvD,KACI,KAAM,KACVA,EAAOgH,YAAYjH,OAGnBysD,EAAoBhlD,EAAS4f,kBAE/BjoB,KAAKqwD,kCACHhD,KACI,KAAM,KACVA,EAAOxlD,YAAYjH,yGAQ/B,IAAI4wD,EAAeruC,EAASqM,oBACxBgiC,GAAcxxD,KAAKuwD,gBAAgBiB,GACvC,IAAI7qC,EAAkBxD,EAASnX,QAC/B,GAAI2a,MACF,IAAoB,IAAAkmC,EAAArrC,EAAAmF,EAAgBjd,UAAQojD,EAAAD,EAAAnrC,QAAAorC,EAAAnrC,KAAAmrC,EAAAD,EAAAnrC,OAAE,CAAzC,IAAIrZ,EACP,QADOA,EAAOykD,EAAAxrD,OACEsB,MACd,KAAKy5C,EAAAtgC,YAAYuH,mBAEQjb,EAASxE,GAAGxB,EAAAsB,YAAY6f,UAE7CxjB,KAAKqwD,kCACgBhoD,KAEnB8a,EAASuI,wBACT,KACoBrjB,EAASR,YAAYjH,MAG7C,MAEF,KAAKy7C,EAAAtgC,YAAYoT,MACf9mB,EAAQrE,IAAI3B,EAAAsB,YAAYypD,UACxB,MAEF,KAAK/Q,EAAAtgC,YAAYgM,SACf,IAAIlnB,EAQAwsD,GARAxsD,EAAoBwH,EAAS2f,kBAE/BhoB,KAAKqwD,kCACHxvD,KACIsiB,EAASuI,wBAAyB,KACtC7qB,EAAOgH,YAAYjH,OAGnBysD,EAAoBhlD,EAAS4f,kBAE/BjoB,KAAKqwD,kCACHhD,KACIlqC,EAASuI,wBAAyB,KACtC2hC,EAAOxlD,YAAYjH,yGAQ/B,OAAO,GAGTmqD,EAAA9oD,UAAAgvD,4BAAA,SACEppD,EACA3D,EACAwnB,EACA0lC,QADA,IAAA1lC,MAAA,WACA,IAAA0lC,MAAA,MAGApxD,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACf3d,EAAYzD,QAOhB2mD,EAAA9oD,UAAAwvD,iBAAA,SAAiBxrB,EAAoByrB,QAAA,IAAAA,MAAA,GACnC,IAAItiC,EAAei9B,UAAUrsD,KAAKovB,aAAcsiC,GAC5CvrB,EAAU3sB,EAAAwsB,cAAcrkC,OAAOskC,EAAQ7W,GAG3C,OAFApvB,KAAKorD,eAAe3lC,KAAK0gB,GACzBnmC,KAAKovB,aAAey5B,QAAQz5B,EAAc/P,QAAQ4mB,EAAOp/B,OAAQ,IAC1Ds/B,GAMT4kB,EAAA9oD,UAAA0vD,yBAAA,SAAyB/gB,GAEvB,GADA3+B,OAAO2+B,EAAK/sC,GAAGxB,EAAAsB,YAAYypD,WACvBxc,EAAK3kB,oBAAsB,EAC7B,OAAO2kB,EAAK3kB,mBAEd,IAAIq/B,EAAgBtrD,KAAKsrD,cACrBlgC,EAAQkgC,EAAczkD,OAO1B,OANK+pC,EAAK/sC,GAAGxB,EAAAsB,YAAYiuD,aAAehhB,EAAKxhC,UAAUkvC,mBAAqB1N,EAAKxhC,UAAUwU,eAAe/c,SAExG+pC,EAAO5wC,KAAKktD,iBAAiBtc,IAE/B0a,EAAc7lC,KAAKmrB,EAAK5kB,KACxB4kB,EAAK3kB,mBAAqBb,EACnBA,GAKT2/B,EAAA9oD,UAAA2sD,iBAAA,SAAiBtiD,GACf,IACI5G,EADA/F,EAASK,KAAKL,OAElB,OAAQ2M,EAAU1J,MAChB,KAAK2W,EAAA9W,SAASsS,MACZrP,EAAO1F,KAAK6xD,sBAAsCvlD,GAClD,MAEF,KAAKiN,EAAA9W,SAASsU,MACZrR,EAAO1F,KAAK8xD,sBAAsCxlD,GAClD,MAEF,KAAKiN,EAAA9W,SAASuU,SACZtR,EAAO1F,KAAK+xD,yBAA4CzlD,GACxD,MAEF,KAAKiN,EAAA9W,SAASwU,GACZvR,EAAO1F,KAAKgyD,mBAAgC1lD,GAC5C,MAEF,KAAKiN,EAAA9W,SAASyU,MACZxR,EAAO1F,KAAKiyD,sBAAsC3lD,GAClD,MAEF,KAAKiN,EAAA9W,SAAS8U,WACZ7R,EAAO1F,KAAKkyD,2BAAgD5lD,GAC5D,MAEF,KAAKiN,EAAA9W,SAASiV,IACZhS,EAAO1F,KAAKmyD,oBAAkC7lD,GAC9C,MAEF,KAAKiN,EAAA9W,SAASkV,GACZjS,EAAO1F,KAAKoyD,mBAAgC9lD,GAC5C,MAEF,KAAKiN,EAAA9W,SAASsV,OACZrS,EAAO1F,KAAKqyD,uBAAwC/lD,GACpD,MAEF,KAAKiN,EAAA9W,SAASwV,OACZvS,EAAO1F,KAAKsyD,uBAAwChmD,GACpD,MAEF,KAAKiN,EAAA9W,SAASyV,MACZxS,EAAO1F,KAAKuyD,sBAAsCjmD,GAClD,MAEF,KAAKiN,EAAA9W,SAAS0V,IACZzS,EAAO1F,KAAKwyD,oBAAkClmD,GAC9C,MAEF,KAAKiN,EAAA9W,SAAS6T,UACZ5Q,EAAO1F,KAAKyuD,yBAA4CniD,MAC7C5G,EAAO/F,EAAOmsC,aACzB,MAEF,KAAKvyB,EAAA9W,SAAS6V,KACZ5S,EAAO1F,KAAKyyD,qBAAoCnmD,GAChD,MAEF,KAAKiN,EAAA9W,SAAS8V,MACZ7S,EAAO1F,KAAK0yD,sBAAsCpmD,GAClD,MAEF,KAAKiN,EAAA9W,SAAS2V,gBAGZ,GAAIpY,KAAK4wB,iBAAmB5wB,KAAKgsD,sBAC/B,OAAOrsD,EAAOmsC,YAIlB,QACE75B,QAAO,GACPvM,EAAO/F,EAAOqtC,oBAIlB,OADIhtC,KAAKoe,QAAQmQ,WAAWvuB,KAAK2yD,iBAAiBjtD,EAAM4G,EAAUlI,OAC3DsB,GAGTqlD,EAAA9oD,UAAA4uD,kBAAA,SAAkBtlD,GAChB,IAAIqnD,EAAgBrnD,EAAW1E,OAC3B+pD,EAAQ,IAAI76C,MAAqB68C,GACrChC,EAAM/pD,OAAS,EAEf,IADA,IAAI2mB,EAAOxtB,KAAK4wB,gBAAgBpD,KACvBntB,EAAI,EAAGA,EAAIuyD,IAAiBvyD,EAAG,CACtC,IAAIqF,EAAO1F,KAAK4uD,iBAAiBrjD,EAAWlL,IAC5C,OAAQmZ,EAAA4Z,gBAAgB1tB,IACtB,KAAK8T,EAAA6Z,aAAa4E,MAChB,IAAKze,EAAA0e,aAAaxyB,GAAO,CACvB,IAAK,IAAI2a,EAAI,EAAGzZ,EAAI4S,EAAA2e,mBAAmBzyB,GAAO2a,EAAIzZ,IAAKyZ,EAAGuwC,EAAMnrC,KAAKjM,EAAA6e,cAAc3yB,EAAM2a,IACzF,MAIJ,QAASuwC,EAAMnrC,KAAK/f,GACpB,KAAK8T,EAAA6Z,aAAaw/B,KAEpB,GAAIrlC,EAAKzpB,MAAK,IAA6B,CACrCyV,EAAAqiC,yBAAyBn2C,IAAOkrD,EAAMnrC,KAAKzlB,KAAKL,OAAOqtC,qBAC3D,OAGJ,OAAO4jB,GAGT7F,EAAA9oD,UAAA4vD,sBAAA,SAAsBvlD,GACpB,IAAIf,EAAae,EAAUf,WACvBslB,EAAa7wB,KAAK4wB,gBAAgBpD,KAClCA,EAAOqD,EAAWO,OACtBpxB,KAAK4wB,gBAAgBpD,KAAOA,EAE5B,IAAIojC,EAAQ5wD,KAAK6wD,kBAAkBtlD,GAC/B7F,EAAuB,GAAhBkrD,EAAM/pD,OACb7G,KAAKL,OAAOmsC,YACI,GAAhB8kB,EAAM/pD,OACJ+pD,EAAM,GACN5wD,KAAKL,OAAOwrC,YAAY,KAAMylB,EAAMp3C,EAAA+d,kBAAkBq5B,EAAMA,EAAM/pD,OAAS,KAIjF,OAFA7G,KAAK4wB,gBAAgBpD,KAAOA,EAAK+D,OACjCV,EAAW6B,QAAQlF,GACZ9nB,GAGTqlD,EAAA9oD,UAAA6vD,sBAAA,SAAsBxlD,GACpB,IAAI3M,EAASK,KAAKL,OAClB,GAAI2M,EAAUZ,MAKZ,OAJA1L,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACflZ,EAAUZ,MAAMtH,OAEXzE,EAAOqtC,oBAEhB,IAAIxf,EAAOxtB,KAAK4wB,gBAAgBpD,KAC5BuD,EAAavD,EAAKuD,WACtB,OAAkB,MAAdA,GACF/wB,KAAKohB,MACH/H,EAAAgI,eAAeyxC,qFACfxmD,EAAUlI,OAELzE,EAAOqtC,sBAEhBxf,EAAKxpB,IAAG,GACDrE,EAAO2rC,YAAYva,KAG5Bg6B,EAAA9oD,UAAA8vD,yBAAA,SAAyBzlD,GACvB,IAAI3M,EAASK,KAAKL,OACd+L,EAAQY,EAAUZ,MACtB,GAAIA,EAKF,OAJA1L,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACf9Z,EAAMtH,OAEDzE,EAAOqtC,oBAGhB,IAAIxf,EAAOxtB,KAAK4wB,gBAAgBpD,KAC5BsD,EAAgBtD,EAAKsD,cACzB,OAAqB,MAAjBA,GACF9wB,KAAKohB,MACH/H,EAAAgI,eAAe0xC,8EACfzmD,EAAUlI,OAELzE,EAAOqtC,sBAEhBxf,EAAKxpB,IAAG,IACDrE,EAAO2rC,YAAYxa,KAG5Bi6B,EAAA9oD,UAAA+vD,mBAAA,SAAmB1lD,GACjB,IAAIskB,EAAkB5wB,KAAK4wB,gBACvBjxB,EAASK,KAAKL,OAEd+L,EAAQklB,EAAgBzC,oBACxB0C,EAAaD,EAAgBpD,KAC7BA,EAAOqD,EAAWO,OACtBR,EAAgBpD,KAAOA,EACvB,IAAIuD,EAAa,SAAWrlB,EAC5B8hB,EAAKuD,WAAaA,EAClB,IAAID,EAAgB,YAAcplB,EAClC8hB,EAAKsD,cAAgBA,EAErB,IAAIzhB,EAAOrP,KAAK4uD,iBAAiBtiD,EAAUA,WACvC0mD,EAAWhzD,KAAKizD,cAClBjzD,KAAK2vD,kBAAkBrjD,EAAUjC,UAAWiP,EAAA+E,KAAKG,IAAG,KACpDxe,KAAKmrD,aAKPv6B,EAAgBpD,KAAOA,EAAK+D,OAC5BX,EAAgBvC,oBAChB,IAAI6kC,EAAa1lC,EAAKzpB,MAAK,IAC3BypB,EAAK2D,MACH,KAKFN,EAAW6B,QAAQlF,GAEnB,IAAI2lC,GACFxzD,EAAO+rC,WAAW5a,EAChBoiC,EACI7jD,EACA1P,EAAOwrC,YAAY,MACjB97B,EACA1P,EAAO2rC,YAAYxa,EAAekiC,IACnC,KAIT,OADIE,GAAYC,EAAM1tC,KAAK9lB,EAAOqtC,qBAC3BrtC,EAAOwrC,YAAYpa,EAAYoiC,IAGxCpI,EAAA9oD,UAAAgwD,sBAAA,SAAsB3lD,GACpB,OAAOtM,KAAKL,OAAOmsC,aAGrBif,EAAA9oD,UAAAiwD,2BAAA,SAA2B5lD,GACzB,IAAIlG,EAAOpG,KAAK2vD,kBAAkBrjD,EAAUrF,WAAYqS,EAAA+E,KAAKc,KAAI,KAKjE,OAJInf,KAAKmrD,aAAe7xC,EAAA+E,KAAKc,OAC3B/Y,EAAOpG,KAAKL,OAAO6rC,WAAWplC,GAC9BpG,KAAKmrD,YAAc7xC,EAAA+E,KAAKc,MAEnB/Y,GAGT2kD,EAAA9oD,UAAAkwD,oBAAA,SAAoB7lD,GAGlB,IAAIskB,EAAkB5wB,KAAK4wB,gBACvBllB,EAAQklB,EAAgBzC,oBACxB0C,EAAaD,EAAgBpD,KAC7BA,EAAOqD,EAAWO,OACtBR,EAAgBpD,KAAOA,EACvB,IAAIuD,EAAavD,EAAKuD,WAAa,SAAWrlB,EAC9C8hB,EAAKuD,WAAaA,EAClB,IAAID,EAAgB,YAAcplB,EAClC8hB,EAAKsD,cAAgBA,EACrB,IAAIsiC,EAAc,UAAY1nD,EAG1B/L,EAASK,KAAKL,OACdqvD,EAAW1iD,EAAUvH,YACrB/E,KAAK4uD,iBAA4BtiD,EAAUvH,aAC3C,EACAiuD,EAA0B,EAC1BK,GAAa,EACjB,GAAI/mD,EAAUjC,UAAW,CACvB2oD,EAAWhzD,KAAKizD,cACdjzD,KAAKqvD,4BAAwC/iD,EAAUjC,UAAWiP,EAAA+E,KAAKW,KAAI,GAC3Ehf,KAAKmrD,aAGP,IAAImI,EAAU3zD,EAAOsyC,qBAAqB+gB,GACtCx5C,EAAA4Z,gBAAgBkgC,IAAY95C,EAAA6Z,aAAa6C,QAC3CjkB,OAAiC,GAA1BuH,EAAA+d,kBAAkB+7B,IACQ,GAA7B95C,EAAA2c,iBAAiBm9B,KAAeD,GAAa,IAKnDL,EAAWhzD,KAAKizD,cACdjzD,KAAKqvD,4BAAwC/iD,EAAUjC,UAAWiP,EAAA+E,KAAKW,KAAI,GAC3Ehf,KAAKmrD,kBAIP6H,EAAWrzD,EAAOioC,UAAU,GAC5ByrB,GAAa,EAEf,IAAIE,EAAWjnD,EAAU2C,YACrBjP,KAAK2vD,kBAA8BrjD,EAAU2C,YAAaqK,EAAA+E,KAAKc,KAAI,KACnE,EACAq0C,EAAgBlnD,EAAUA,UAC1BmnD,EAAWD,EAAc5wD,MAAQ2W,EAAA9W,SAASsS,OAA8D,GAApCy+C,EAAejoD,WAAW1E,OAC9F7G,KAAK4uD,iBAAkC4E,EAAejoD,WAAW,IACjEvL,KAAK4uD,iBAAiB4E,GAG1B5iC,EAAgBpD,KAAOA,EAAK+D,OAC5BX,EAAgBvC,oBAChB,IAAIqlC,EAAelmC,EAAKzpB,MAAM,KAC9BypB,EAAK2D,MACH,KAKEkiC,EAAYxiC,EAAW6B,QAAQlF,GAC9BqD,EAAW+B,mBAAmBpF,GAEnC,IAAImmC,EAAa,IAAI59C,MACjBi5C,GAAU2E,EAAWluC,KAAKupC,GAE9B,IAAI4E,EAAc,IAAI79C,MAuBtB,OAtBI29C,EACFE,EAAYnuC,KACV9lB,EAAOwrC,YAAYra,GACjBnxB,EAAO2rC,YAAYva,EAAYpxB,EAAO6oC,YAAYhvB,EAAAyd,QAAQC,OAAQ87B,IAClES,GACD,KAGHG,EAAYnuC,KACV9lB,EAAO2rC,YAAYva,EAAYpxB,EAAO6oC,YAAYhvB,EAAAyd,QAAQC,OAAQ87B,KAEpEY,EAAYnuC,KAAKguC,IAEfF,GAAUK,EAAYnuC,KAAK8tC,GAC/BK,EAAYnuC,KACV9lB,EAAO2rC,YAAY8nB,IAGrBO,EAAWluC,KACT9lB,EAAO+rC,WAAW0nB,EAAazzD,EAAOwrC,YAAY,KAAMyoB,EAAW,KAG9Dj0D,EAAOwrC,YAAYpa,EAAY4iC,IAGxC5I,EAAA9oD,UAAAmwD,mBAAA,SAAmB9lD,GACjB,IAAI3M,EAASK,KAAKL,OACdixB,EAAkB5wB,KAAK4wB,gBACvB5iB,EAAS1B,EAAU0B,OACnBC,EAAU3B,EAAU2B,QAGpB+kD,EAAWhzD,KAAKizD,cAClBjzD,KAAKqvD,4BAA4B/iD,EAAUjC,UAAWiP,EAAA+E,KAAKW,KAAI,GAC/Dhf,KAAKmrD,aAGP,IACGnrD,KAAKoe,QAAQmB,eACdvf,KAAK4wB,gBAAgB7sB,MAAM1B,EAAAsB,YAAY6f,QAAUnhB,EAAAsB,YAAYkwD,iBAC7D,CAEA,IAAIC,EAAkBn0D,EAAOsyC,qBAAqB+gB,GAClD,GACEx5C,EAAA4Z,gBAAgB0gC,IAAoBt6C,EAAA6Z,aAAa6C,OACf,GAAlC1c,EAAA+d,kBAAkBu8B,GAElB,OAAOt6C,EAAA2c,iBAAiB29B,GACpB9zD,KAAK4uD,iBAAiB5gD,GACtBC,EACEjO,KAAK4uD,iBAAiB3gD,GACtBtO,EAAOmsC,YAIbknB,EAAWhzD,KAAKizD,cACdjzD,KAAKqvD,4BAA4B/iD,EAAUjC,UAAWiP,EAAA+E,KAAKW,KAAI,GAC/Dhf,KAAKmrD,aAMX,IAAIt6B,EAAaD,EAAgBpD,KAC7BumC,EAAaljC,EAAWO,OAC5BR,EAAgBpD,KAAOumC,EACvB,IAAIC,EAAah0D,KAAK4uD,iBAAiB5gD,GACvC4iB,EAAgBpD,KAAOumC,EAAWxiC,OAElC,IAAI0iC,EAA6B,EACjC,GAAIhmD,EAAS,CACX,IAAIimD,EAAcrjC,EAAWO,OAC7BR,EAAgBpD,KAAO0mC,EACvBD,EAAcj0D,KAAK4uD,iBAAiB3gD,GACpC2iB,EAAgBpD,KAAO0mC,EAAY3iC,OACnCV,EAAWgC,cAAckhC,EAAYG,QAErCrjC,EAAW+B,mBAAmBmhC,GAEhC,OAAOp0D,EAAOisC,SAASonB,EAAUgB,EAAYC,IAG/ClJ,EAAA9oD,UAAAowD,uBAAA,SAAuB/lD,GACrB,IAAI3M,EAASK,KAAKL,OACdixB,EAAkB5wB,KAAK4wB,gBACvBxqB,EAAsB,EACtBonB,EAAOoD,EAAgBpD,KAK3B,GAFAA,EAAKxpB,IAAG,GAEJsI,EAAUhL,MAAO,CACnB,IAAI8D,EAAaooB,EAAKpoB,WACtB,GAAIA,GAAckU,EAAA+E,KAAKc,KAOrB,OANAnf,KAAKqvD,4BAA4B/iD,EAAUhL,MAAO8D,EAAU,GAC5DpF,KAAKohB,MACH/H,EAAAgI,eAAeiuC,mCACfhjD,EAAUhL,MAAM8C,MAAOpE,KAAKmrD,YAAYxmC,WAAYvf,EAAWuf,YAEjE3kB,KAAKmrD,YAAc7xC,EAAA+E,KAAKc,KACjBxf,EAAOqtC,oBAEhB5mC,EAAOpG,KAAK2vD,kBACVrjD,EAAUhL,MACV8D,EAAU,EAEVwrB,EAAgB/sB,GAAGxB,EAAAsB,YAAY+hB,eAC5B,EACA,GAIA8H,EAAK2F,YAAY/sB,EAAMhB,IAAaooB,EAAKxpB,IAAG,GAInD,OAAIuV,EAAAzE,gBAAgBxI,GAAmBlG,GAAczG,EAAOmsC,YAGrDte,EAAK3pB,GAAE,MACVlE,EAAO2rC,YAAYr5B,OAAOub,EAAKwD,aAAc,EAAG5qB,GAChDzG,EAAOqsC,aAAa5lC,IAG1B2kD,EAAA9oD,UAAAqwD,uBAAA,SAAuBhmD,GACrB,IAAI3M,EAASK,KAAKL,OACdixB,EAAkB5wB,KAAK4wB,gBAEvB9gB,EAAQxD,EAAUwD,MAClBqkD,EAAWrkD,EAAMjJ,OACrB,IAAKstD,EACH,OAAOn0D,KAAK2vD,kBAAkBrjD,EAAUjC,UAAWiP,EAAA+E,KAAKc,KAAI,KAI9D,IAAIi1C,EAAUxjC,EAAgBzC,oBAC1B0C,EAAaD,EAAgBpD,KAG7B6mC,EAAYzjC,EAAgBjD,aAAarU,EAAA+E,KAAKQ,KAAK,GACnDy1C,EAAiBD,EAAUjpC,MAG3BmpC,EAAS,IAAIx+C,MAAqB,EAAIo+C,GAC1CI,EAAO,GAAK50D,EAAOorC,eACjBupB,EACAt0D,KAAK2vD,kBAAkBrjD,EAAUjC,UAAWiP,EAAA+E,KAAKQ,IAAG,MAMtD,IAFA,IAAI21C,EAAa,EACbC,GAAgB,EACXp0D,EAAI,EAAGA,EAAI8zD,IAAY9zD,EAAG,CACjC,IACIqL,EADQoE,EAAMzP,GACAqL,MACdA,EACF6oD,EAAOC,KAAgB70D,EAAO2rC,YAAY,OAASjrC,EAAEskB,SAAS,IAAM,IAAMyvC,EACxEz0D,EAAOgpC,aAAanvB,EAAAua,SAASC,MAC3Br0B,EAAOspC,eAAeqrB,EAAc,GACpCt0D,KAAK2vD,kBAAkBjkD,EAAO4N,EAAA+E,KAAKQ,IAAG,OAI1C41C,EAAep0D,EAInBuwB,EAAgB3C,cAAcomC,GAG9BE,EAAOC,GAAc70D,EAAO2rC,aAAampB,GAAgB,EACnD,OAASA,EAAa9vC,SAAS,IAC/B,SACA,IAAMyvC,GAGZ,IAAIM,EAAe/0D,EAAOwrC,YAAY,SAAWipB,EAASG,EAAM,GAC5DI,GAAgB,EAChBC,GAAuB,EACvBC,GAAe,EACfC,GAAkB,EACtB,IAASz0D,EAAI,EAAGA,EAAI8zD,IAAY9zD,EAAG,CACjC,IACIkL,EADQuE,EAAMzP,GACKkL,WACnBqnD,EAAgBrnD,EAAW1E,OAG3B2mB,EAAOqD,EAAWO,OACtBR,EAAgBpD,KAAOA,EACvB,IAAIuD,EAAa,SAAWqjC,EAC5B5mC,EAAKuD,WAAaA,EAElB,IAAIgkC,EAAS10D,GAAK8zD,EAAW,EACzBa,EAAYD,EAAShkC,EAAa,QAAU1wB,EAAI,GAAGskB,SAAS,IAAM,IAAMyvC,EACxExD,EAAQ,IAAI76C,MAAqB,EAAI68C,GACzChC,EAAM,GAAK8D,EAGX,IAFA,IAAIO,EAAQ,EACR/B,GAAa,EACR7yC,EAAI,EAAGA,EAAIuyC,IAAiBvyC,EAAG,CACtC,IAAI3a,EAAO1F,KAAK4uD,iBAAiBrjD,EAAW8U,IAC5C,GAAI7G,EAAA4Z,gBAAgB1tB,IAAS8T,EAAA6Z,aAAaw/B,MACxCjC,EAAMqE,KAAWvvD,EACb8nB,EAAKzpB,MAAK,KAA6B,CACzCmvD,GAAa,EACb,OAINtC,EAAM/pD,OAASouD,GACX/B,GAAc6B,KACXvnC,EAAK3pB,GAAE,KAAqB8wD,GAAgB,GAC5CnnC,EAAK3pB,GAAE,KAA6B+wD,GAAuB,GAC3DpnC,EAAK3pB,GAAE,KAAoBgxD,GAAe,GAC1CrnC,EAAK3pB,GAAE,MAAuBixD,GAAkB,IAIvDtnC,EAAK2D,MACH,KAGFP,EAAgBpD,KAAOA,EAAK+D,OAC5BmjC,EAAe/0D,EAAOwrC,YAAY6pB,EAAWpE,EAAK,GAWpD,OATAhgC,EAAgBvC,oBAGZomC,GAAgB,IACdE,GAAe9jC,EAAW7sB,IAAG,GAC7B4wD,GAAsB/jC,EAAW7sB,IAAG,GACpC6wD,GAAchkC,EAAW7sB,IAAG,GAC5B8wD,GAAiBjkC,EAAW7sB,IAAG,KAE9B0wD,GAGT3J,EAAA9oD,UAAAswD,sBAAA,SAAsBjmD,GACpB,IAAIkhB,EAAOxtB,KAAK4wB,gBAAgBpD,KAShC,OANAA,EAAKxpB,IAAG,GAGRwpB,EAAKxpB,IAAG,GAGDmmD,EAAA+K,aAAal1D,KAAM,KAAMsM,IAGlCy+C,EAAA9oD,UAAAuwD,oBAAA,SAAoBlmD,GAQlB,OAJAtM,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACflZ,EAAUlI,OAELpE,KAAKL,OAAOqtC,qBAOrB+d,EAAA9oD,UAAAwsD,yBAAA,SAAyBniD,EAA8B6oD,QAAA,IAAAA,OAAA,GACrD,IAAInrC,EAAUhqB,KAAKgqB,QACf4G,EAAkB5wB,KAAK4wB,gBACvBtiB,EAAehC,EAAUgC,aACzB8mD,EAAkB9mD,EAAazH,OAGnC,GAAIsuD,GACFvkC,GAAmB5wB,KAAKgsD,uBACxB1/C,EAAU7I,QAAU6I,EAAU7I,OAAOb,MAAQ2W,EAAA9W,SAAS4S,OACrD,CAMD,IAAK,IAAIhV,EAAI,EAAGA,EAAI+0D,IAAmB/0D,EACrCL,KAAK6uD,yBAAyBvgD,EAAajO,IAE7C,OAAO,EAIT,IAAIg1D,EAAe,IAAIt/C,MACnByX,EAAOxtB,KAAK4wB,gBAAgBpD,KAC5BhQ,EAAWxd,KAAKwd,SACpB,IAASnd,EAAI,EAAGA,EAAI+0D,IAAmB/0D,EAAG,CACxC,IAAIwH,EAAcyG,EAAajO,GAC3BO,EAAOiH,EAAYjH,KAAKoF,KACxB3B,EAAoB,KACpB2qD,EAA0B,EAC9B,GAAInnD,EAAYxD,KAAM,CAKpB,KAJAA,EAAOmZ,EAAS0xC,YACdrnD,EAAYxD,KACZmpB,EAAK9B,0BAEI,SACP7jB,EAAY9C,cACdiqD,EAAWhvD,KAAK2vD,kBACd9nD,EAAY9C,YACZV,EAAI,UAKH,KAAIwD,EAAY9C,YAchB,CACL/E,KAAKohB,MACH/H,EAAAgI,eAAe8tC,cACftnD,EAAYjH,KAAKwD,MAAMgrD,OAEzB,SAbA,GALAJ,EAAWhvD,KAAKqvD,4BACdxnD,EAAY9C,YACZuU,EAAA+E,KAAKc,KAAI,GAGPnf,KAAKmrD,aAAe7xC,EAAA+E,KAAKc,KAAM,CACjCnf,KAAKohB,MACH/H,EAAAgI,eAAeiuC,mCACfznD,EAAYzD,MAAOpE,KAAKmrD,YAAYxmC,WAAY,UAElD,SAEFtgB,EAAOrE,KAAKmrD,YAQd,IAAImK,GAAY,EAChB,GAAIztD,EAAYhE,GAAGxB,EAAAsB,YAAYkmB,OAC7B,GAAImlC,EAEF,GADAA,EAAWhvD,KAAKL,OAAOsyC,qBAAqB+c,GACxCx1C,EAAA4Z,gBAAgB47B,IAAax1C,EAAA6Z,aAAa6C,MAAO,CACnD,IAAIrJ,EAAQ,IAAIwvB,EAAAlxB,MAAMnB,EAASppB,GAAO,EAAGyD,GACzC,OAAQmV,EAAA+d,kBAAkBy3B,IACxB,OACEniC,EAAQA,EAAM5I,yBACZ5E,QACE7F,EAAA2c,iBAAiB64B,GACjB,IAGJ,MAEF,OACEniC,EAAQA,EAAM5I,yBACZ5E,QACE7F,EAAAge,oBAAoBw3B,GACpBx1C,EAAA08B,qBAAqB8Y,KAGzB,MAEF,OACEniC,EAAQA,EAAM1I,uBAA4B3K,EAAAie,iBAAiBu3B,IAC3D,MAEF,OACEniC,EAAQA,EAAM1I,uBAAuB3K,EAAAke,iBAAiBs3B,IACtD,MAEF,QAEE,OADA/8C,QAAO,GACAjS,KAAKL,OAAOqtC,oBAIvB,IAAIrc,EAAeC,EAAgBpD,KAAKmD,aACxC,GAAKA,GACA,GAAIA,EAAa1N,IAAIriB,GAKxB,OAJAZ,KAAKohB,MACH/H,EAAAgI,eAAe+B,uBACfvb,EAAYjH,KAAKwD,MAAOxD,GAEnBZ,KAAKL,OAAOqtC,yBANFpc,EAAgBpD,KAAKmD,aAAeA,EAAe,IAAIzU,IAQ1EyU,EAAa3sB,IAAIpD,EAAMisB,GACvByoC,GAAY,OAEZt1D,KAAKulB,QACHlM,EAAAgI,eAAeuuC,4DACf/nD,EAAYzD,YAIhBpE,KAAKohB,MACH/H,EAAAgI,eAAek0C,wCACf1tD,EAAYzD,OAIlB,IAAKkxD,EAAW,CACVzoC,OAAK,EAKPA,EAHAhlB,EAAY9D,MAAM1B,EAAAsB,YAAY+8C,IAAMr+C,EAAAsB,YAAYkmB,QAChD2D,EAAK3pB,GAAE,MAEC2pB,EAAKkE,eAAertB,EAAMzD,GAAM,EAAOiH,GAEvC+oB,EAAgBlD,SAASrpB,EAAMzD,EAAMiH,GAE3CmnD,GACFqG,EAAa5vC,KAAKzlB,KAAKw1D,2BAA2B3tD,EAAYjH,KAAMouD,IAChEniC,EAAMxoB,KAAKR,GAAG,KAChB2pB,EAAKQ,gBAAgBnB,EAAMzB,OAAQoC,EAAK2F,YAAY67B,EAAU3qD,KAEvDwoB,EAAMxoB,KAAKR,GAAG,KACvB2pB,EAAKQ,gBAAgBnB,EAAMzB,OAAO,IAIxC,OAAOiqC,EAAaxuD,OACO,GAAvBwuD,EAAaxuD,OACXwuD,EAAa,GACbr1D,KAAKL,OAAOwrC,YAAY,KAAMkqB,EAAY,GAC5C,GAGNtK,EAAA9oD,UAAAwwD,qBAAA,SAAqBnmD,GACnB,OAAOtM,KAAK2vD,kBAAkBrjD,EAAUrF,WAAYqS,EAAA+E,KAAKc,KAAI,MAG/D4rC,EAAA9oD,UAAAywD,sBAAA,SAAsBpmD,GACpB,IAAI3M,EAASK,KAAKL,OAGdqzD,EAAWhzD,KAAKizD,cAClBjzD,KAAKqvD,4BAA4B/iD,EAAUjC,UAAWiP,EAAA+E,KAAKW,KAAI,GAC/Dhf,KAAKmrD,aAGP,IACGnrD,KAAKoe,QAAQmB,eACdvf,KAAK4wB,gBAAgB7sB,MAAM1B,EAAAsB,YAAY6f,QAAUnhB,EAAAsB,YAAYkwD,iBAC7D,CAEA,IAAIC,EAAkBn0D,EAAOsyC,qBAAqB+gB,GAClD,GACEx5C,EAAA4Z,gBAAgB0gC,IAAoBt6C,EAAA6Z,aAAa6C,OACf,GAAlC1c,EAAA+d,kBAAkBu8B,IAElB,IAAKt6C,EAAA2c,iBAAiB29B,GAAkB,OAAOn0D,EAAOmsC,iBAItDknB,EAAWhzD,KAAKizD,cACdjzD,KAAKqvD,4BAA4B/iD,EAAUjC,UAAWiP,EAAA+E,KAAKW,KAAI,GAC/Dhf,KAAKmrD,aAMX,IAAIv6B,EAAkB5wB,KAAK4wB,gBACvBllB,EAAQklB,EAAgBzC,oBACxB0C,EAAaD,EAAgBpD,KAC7BA,EAAOqD,EAAWO,OACtBR,EAAgBpD,KAAOA,EACvB,IAAIuD,EAAa,SAAWrlB,EAC5B8hB,EAAKuD,WAAaA,EAClB,IAAID,EAAgB,YAAcplB,EAClC8hB,EAAKsD,cAAgBA,EAErB,IAAIzhB,EAAOrP,KAAK4uD,iBAAiBtiD,EAAUA,WAEvC4mD,EAAa1lC,EAAKzpB,MAAK,IAc3B,OAXA6sB,EAAgBpD,KAAOA,EAAK+D,OAC5BX,EAAgBvC,oBAChBb,EAAK2D,MACH,KAMGN,EAAW+B,mBAAmBpF,GAE5B7tB,EAAOwrC,YAAYpa,GACxBpxB,EAAO+rC,WAAW5a,EAChBnxB,EAAOisC,SAASonB,EACdE,EACI7jD,EACA1P,EAAOwrC,YAAY,MACjB97B,EACA1P,EAAO2rC,YAAYxa,IACpB,QAabi6B,EAAA9oD,UAAAwzD,sBAAA,SACEptD,EACAqtD,EACAC,GAEA1jD,OAAO5J,EAAQxE,GAAGxB,EAAAsB,YAAYqnB,UAC9B,IAAI3mB,EAAOgE,EAAQhE,KACnB,QACGsxD,GACDtxD,EAAKR,GAAE,IACP6xD,EAAe7xD,GAAE,IACjBQ,EAAKoyB,KAAOi/B,EAAej/B,MACtBz2B,KAAKmrD,YAAcuK,GAAgB9yD,MACnC5C,KAAKmrD,YAAc9mD,GAAMzB,MAE9B,OACA,OACE,IAAI4zB,EAAQnyB,EAAK44C,yBAAyB3jC,EAAA+E,KAAKG,KAC/C,OAAOxe,KAAKL,OAAOioC,UACQ,GAAzBv/B,EAAQyiB,kBACJolB,QAAQ7nC,EAAQ0iB,uBAAyByL,GAASA,EAClD,GAGR,OACA,OACA,QACE,IAAIo/B,EAAOvtD,EAAQhE,KAAKiyB,wBAAwBhd,EAAA+E,KAAKG,KACrD,OAAOxe,KAAKL,OAAOioC,UACQ,GAAzBv/B,EAAQyiB,kBACJolB,QAAQ7nC,EAAQ0iB,sBAAwB6qC,EACxC,GAGR,OACA,OACE,OAAO51D,KAAKL,OAAOioC,UACQ,GAAzBv/B,EAAQyiB,kBACJolB,QAAQ7nC,EAAQ0iB,sBAChB,GAGR,OACA,OACE,IAAK1iB,EAAQ2hB,QAAQ5L,QAAQkB,SAC3B,OAAOtf,KAAKL,OAAOioC,UACQ,GAAzBv/B,EAAQyiB,kBACJolB,QAAQ7nC,EAAQ0iB,sBAChB,GAKV,OACA,OACE,OAAgC,GAAzB1iB,EAAQyiB,kBACX9qB,KAAKL,OAAOqoC,UACVkI,QAAQ7nC,EAAQ0iB,sBAChBolB,SAAS9nC,EAAQ0iB,uBAEnB/qB,KAAKL,OAAOqoC,UAAU,GAE5B,QAEE,IAAM3/B,EAAQ0c,aAAas3B,EAAArgC,eAAe5J,UAAYsjD,GAAkBp8C,EAAA+E,KAAKY,IAC3E,OAAOjf,KAAKL,OAAO2oC,UAAgCjgC,EAAS4iB,oBAG9DjrB,KAAKmrD,YAAc7xC,EAAA+E,KAAKY,IAE1B,QACE,OAAOjf,KAAKL,OAAOyoC,UAAgC//B,EAAS4iB,oBAE9D,QAEE,OADAhZ,QAAO,GACAjS,KAAKL,OAAOqtC,sBAKzB+d,EAAA9oD,UAAA0tD,kBAAA,SACE1oD,EACAyuD,EACAG,EACAC,GAIA,IAAI1vD,EAFJpG,KAAKmrD,YAAcuK,EAGnB,IACA,OAAQzuD,EAAWrE,MACjB,KAAK2W,EAAA9W,SAASkR,UACZvN,EAAOpG,KAAK+1D,2BAAgD9uD,EAAYyuD,GACxE,MAEF,KAAKn8C,EAAA9W,SAASmR,OACZxN,EAAOpG,KAAKg2D,wBAA0C/uD,EAAYyuD,GAClE,MAEF,KAAKn8C,EAAA9W,SAASU,KAEZiD,EAAOpG,KAAKi2D,sBAAsChvD,EAAYyuD,GAC9D,MAEF,KAAKn8C,EAAA9W,SAASqR,MACZ1N,EAAOpG,KAAKk2D,uBAAwCjvD,EAAYyuD,GAChE,MAEF,KAAKn8C,EAAA9W,SAASY,cACZ+C,EAAOpG,KAAKm2D,+BAAwDlvD,EAAYyuD,GAChF,MAEF,KAAKn8C,EAAA9W,SAASwR,SACZ7N,EAAOpG,KAAKo2D,0BAA8CnvD,EAAYyuD,GACtE,MAEF,KAAKn8C,EAAA9W,SAASS,WACd,KAAKqW,EAAA9W,SAASO,MACd,KAAKuW,EAAA9W,SAASK,KACd,KAAKyW,EAAA9W,SAASiS,KACd,KAAK6E,EAAA9W,SAASM,KACZqD,EAAOpG,KAAKq2D,4BACYpvD,EACtByuD,EACc,GAAdG,GAEF,MAEF,KAAKt8C,EAAA9W,SAASW,MACZgD,EAAOpG,KAAKs2D,uBACZ,MAEF,KAAK/8C,EAAA9W,SAASyR,WACZ9N,EAAOpG,KAAKu2D,4BAAkDtvD,EAAYyuD,GAC1E,MAEF,KAAKn8C,EAAA9W,SAASI,QACZuD,EAAOpG,KAAKw2D,yBAA4CvvD,EAAYyuD,GACpE,MAEF,KAAKn8C,EAAA9W,SAAS2R,IACZhO,EAAOpG,KAAKy2D,qBAAoCxvD,EAAYyuD,GAC5D,MAEF,KAAKn8C,EAAA9W,SAAS6R,cACZlO,EAAOpG,KAAK02D,+BAAwDzvD,EAAYyuD,GAChF,MAEF,KAAKn8C,EAAA9W,SAASa,eACZ8C,EAAOpG,KAAK22D,gCACgB1vD,EAC1ByuD,EACc,GAAdG,GAEF,MAEF,KAAKt8C,EAAA9W,SAAS+R,QACZpO,EAAOpG,KAAK42D,yBAA4C3vD,EAAYyuD,GACpE,MAEF,KAAKn8C,EAAA9W,SAASmS,aACZxO,EAAOpG,KAAK62D,8BAAsD5vD,EAAYyuD,GAC9E,MAEF,KAAKn8C,EAAA9W,SAASoS,YACZzO,EAAOpG,KAAK82D,6BAAoD7vD,EAAYyuD,GAC5E,MAEF,QACE11D,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAEbgC,EAAOpG,KAAKL,OAAOqtC,qBAGrB,MAAO+pB,GACP,IAAI7pD,EAAgBjG,EAAW7C,MAAMiJ,OAAOJ,eAE5C,MADA+pD,QAAQC,IAAI,iDAAiD/pD,EAAa,iBAAiBjG,EAAW7C,MAAMuqB,KAAI,KAC1GooC,EAGR,IAAI5L,EAAcnrD,KAAKmrD,YASvB,OARkB,GAAd0K,GAAyC1K,GAAeuK,GAC1DtvD,EAAOpG,KAAKk3D,kBAAkB9wD,EAAM+kD,EAAauK,EAAgBG,EAAgBC,EAAU7uD,GAC3FjH,KAAKmrD,YAAcuK,GACF,GAARI,IACT1vD,EAAOpG,KAAKm3D,uBAAuB/wD,EAAM+kD,IAGvCnrD,KAAKoe,QAAQmQ,WAAWvuB,KAAK2yD,iBAAiBvsD,EAAMa,EAAW7C,OAC5DgC,GAGT2kD,EAAA9oD,UAAAotD,4BAAA,SACEpoD,EACAyuD,EACAI,GAEA,OAAO91D,KAAK2vD,kBACV1oD,EACAyuD,GAAkBp8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLk3C,EAAc,EAElBI,IAIJ/K,EAAA9oD,UAAAgwC,qBAAA,SACEhrC,EACAyuD,EACAG,EACAC,GAEA,OAAO91D,KAAKL,OAAOsyC,qBACjBjyC,KAAK2vD,kBAAkB1oD,EAAYyuD,EAAgBG,EAAgBC,KAIvE/K,EAAA9oD,UAAAi1D,kBAAA,SACE9wD,EACA0xB,EACA5wB,EACA2uD,EACAC,EACA7H,GAEAh8C,OAAqB,GAAd4jD,GACP,IAAIl2D,EAASK,KAAKL,OAGlB,OAAiB,IAAbm4B,EAASl1B,MACXqP,OAAkB,IAAX/K,EAAOtE,MACd5C,KAAKohB,MACH/H,EAAAgI,eAAeiuC,mCACfrB,EAAW7pD,MAAO0zB,EAASnT,WAAYzd,EAAOyd,YAEzChlB,EAAOqtC,qBAID,IAAX9lC,EAAOtE,KAA8BjD,EAAO6rC,WAAWplC,IAEtD0xB,EAAShI,eAAe5oB,IACT,GAAd2uD,GACF71D,KAAKohB,MACH/H,EAAAgI,eAAe+1C,sDACfnJ,EAAW7pD,MAAO0zB,EAASnT,WAAYzd,EAAOyd,YAKhDmT,EAASj0B,GAAE,GAGTqD,EAAOrD,GAAE,GACM,IAAbi0B,EAASl1B,KAGI,IAAXsE,EAAOtE,OACTwD,EAAOzG,EAAO6oC,YAAYhvB,EAAAyd,QAAQogC,WAAYjxD,IAM5B,IAAXc,EAAOtE,OAChBwD,EAAOzG,EAAO6oC,YAAYhvB,EAAAyd,QAAQqgC,UAAWlxD,IAMtCc,EAAOrD,GAAE,GAMZuC,EAHW,IAAb0xB,EAASl1B,KACPsE,EAAOrD,GAAE,GACPqD,EAAOrD,GAAE,IACJlE,EAAO6oC,YAAYhvB,EAAAyd,QAAQsgC,cAAenxD,GAE1CzG,EAAO6oC,YAAYhvB,EAAAyd,QAAQugC,cAAepxD,GAG/Cc,EAAOrD,GAAE,IACJlE,EAAO6oC,YAAYhvB,EAAAyd,QAAQwgC,cAAerxD,GAE1CzG,EAAO6oC,YAAYhvB,EAAAyd,QAAQygC,cAAetxD,GAMjDc,EAAOrD,GAAE,GACPqD,EAAOrD,GAAE,IACJlE,EAAO6oC,YAAYhvB,EAAAyd,QAAQ0gC,cAAevxD,GAE1CzG,EAAO6oC,YAAYhvB,EAAAyd,QAAQ2gC,cAAexxD,GAG/Cc,EAAOrD,GAAE,IACJlE,EAAO6oC,YAAYhvB,EAAAyd,QAAQ4gC,cAAezxD,GAE1CzG,EAAO6oC,YAAYhvB,EAAAyd,QAAQ6gC,cAAe1xD,IAOvD6L,OAAmB,GAAZ/K,EAAOxD,MAAyB,sBACvC0C,EAAOzG,EAAO6rC,WAAWplC,IAIlB0xB,EAASj0B,GAAE,IAAuBqD,EAAOrD,GAAE,GAKhDuC,EAFW,IAAXc,EAAOtE,KACLk1B,EAASj0B,GAAE,IACNlE,EAAO6oC,YACZ1Q,EAASj0B,GAAE,GACP2V,EAAAyd,QAAQ8gC,gBACRv+C,EAAAyd,QAAQ+gC,gBACZ5xD,GAGKzG,EAAO6oC,YACZ1Q,EAASj0B,GAAE,GACP2V,EAAAyd,QAAQghC,gBACRz+C,EAAAyd,QAAQihC,gBACZ9xD,GAMA0xB,EAASj0B,GAAE,IACNlE,EAAO6oC,YACZ1Q,EAASj0B,GAAE,GACP2V,EAAAyd,QAAQkhC,gBACR3+C,EAAAyd,QAAQmhC,gBACZhyD,GAGKzG,EAAO6oC,YACZ1Q,EAASj0B,GAAE,GACP2V,EAAAyd,QAAQohC,gBACR7+C,EAAAyd,QAAQqhC,gBACZlyD,GAQF0xB,EAASj0B,GAAE,IAGRqD,EAAOrD,GAAE,MACZuC,EAAOzG,EAAO6oC,YAAYhvB,EAAAyd,QAAQshC,QAASnyD,IAIpCc,EAAOrD,GAAE,KAClBuC,EAAOzG,EAAO6oC,YACZthC,EAAOrD,GAAE,GAAqB2V,EAAAyd,QAAQuhC,UAAYh/C,EAAAyd,QAAQwhC,UAC1Dz4D,KAAKm3D,uBAAuB/wD,EAAM0xB,IAEpCg+B,EAAQ,GAKJh+B,EAASj0B,GAAE,KAETi0B,EAASrB,KAAOvvB,EAAOuvB,OACzBrwB,EAAOpG,KAAKm3D,uBAAuB/wD,EAAM0xB,GACzCg+B,EAAQ,GAMhB91D,KAAKmrD,YAAcjkD,EACJ,GAAR4uD,EACH91D,KAAKm3D,uBAAuB/wD,EAAMc,GAClCd,IAGN2kD,EAAA9oD,UAAA8zD,2BAAA,SAA2B9uD,EAAiCyuD,GAC1D,IAAIxuD,EAASlH,KAAKwd,SAAS0xC,YACzBjoD,EAAWC,OACXlH,KAAK4wB,gBAAgBpD,KAAK9B,yBAE5B,OAAKxkB,EACElH,KAAK2vD,kBAAkB1oD,EAAWA,WAAYC,EAAM,KADvClH,KAAKL,OAAOqtC,qBASlC+d,EAAA9oD,UAAA+zD,wBAAA,SACE/uD,EACAyuD,GAEA,IAIIgD,EACAC,EACAC,EACAC,EACAC,EAEA1yD,EAVAzG,EAASK,KAAKL,OACd2H,EAAOL,EAAWK,KAClBC,EAAQN,EAAWM,MASnBwxD,GAAW,EAEX1xD,EAAWJ,EAAWI,SAC1B,OAAQA,GACN,KAAK/E,EAAAC,MAAMk/C,SAKT,GAJAiX,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAc,GAChEiD,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAa+B,IAC5C,CACZ/U,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAKrB,GAFA4rB,EAAY54D,KAAKqvD,4BAA4B9nD,EAAOoxD,EAAQ,GAC5DE,EAAY74D,KAAKmrD,cACb2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiBkb,EAAUE,GAAW,IAuB1D,OALA74D,KAAKohB,MACH/H,EAAAgI,eAAe43C,8CACfhyD,EAAW7C,MAAO,IAAKu0D,EAASh0C,WAAYk0C,EAAUl0C,YAExD3kB,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,oBAEhB,OAxBE0rB,EAAW14D,KAAKk3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBxxD,GAEFsxD,EAAY54D,KAAKk3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBvxD,GAUIuxD,EAAWl2D,MACjB,OACA,OACA,OACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASS,MAAOkkC,EAAUE,GACrD,MAEF,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASW,MAAOgkC,EAAUE,GACrD,MAEF,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASW,MACTlb,EAAAua,SAASS,MACbkkC,EACAE,GAEF,MAEF,OACA,OACA,OACA,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASU,MAAOikC,EAAUE,GACrD,MAEF,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASY,MACTnb,EAAAua,SAASU,MACbikC,EACAE,GAEF,MAEF,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASY,MAAO+jC,EAAUE,GACrD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASa,MAAO8jC,EAAUE,GACrD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASc,MAAO6jC,EAAUE,GACrD,MAEF,QACE3mD,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlBhtC,KAAKmrD,YAAc7xC,EAAA+E,KAAKW,KACxB,MAEF,KAAK1c,EAAAC,MAAMm/C,YAKT,GAJAgX,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAc,GAChEiD,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAa2B,IAC5C,CACZ3U,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAKrB,GAFA4rB,EAAY54D,KAAKqvD,4BAA4B9nD,EAAOoxD,EAAQ,GAC5DE,EAAY74D,KAAKmrD,cACb2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiBkb,EAAUE,GAAW,IAuB1D,OALA74D,KAAKohB,MACH/H,EAAAgI,eAAe43C,8CACfhyD,EAAW7C,MAAO,IAAKu0D,EAASh0C,WAAYk0C,EAAUl0C,YAExD3kB,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,oBAEhB,OAxBE0rB,EAAW14D,KAAKk3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBxxD,GAEFsxD,EAAY54D,KAAKk3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBvxD,GAUIuxD,EAAWl2D,MACjB,OACA,OACA,OACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASqB,MAAOsjC,EAAUE,GACrD,MAEF,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASuB,MACT9b,EAAAua,SAASqB,MACbsjC,EACAE,GAEF,MAEF,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASuB,MAAOojC,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASsB,MAAOqjC,EAAUE,GACrD,MAEF,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASwB,MACT/b,EAAAua,SAASsB,MACbqjC,EACAE,GAEF,MAEF,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASwB,MAAOmjC,EAAUE,GACrD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASyB,MAAOkjC,EAAUE,GACrD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS0B,MAAOijC,EAAUE,GACrD,MAEF,QACE3mD,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlBhtC,KAAKmrD,YAAc7xC,EAAA+E,KAAKW,KACxB,MAEF,KAAK1c,EAAAC,MAAMo/C,gBAKT,GAJA+W,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAc,GAChEiD,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAagC,IAC5C,CACZhV,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAKrB,GAFA4rB,EAAY54D,KAAKqvD,4BAA4B9nD,EAAOoxD,EAAQ,GAC5DE,EAAY74D,KAAKmrD,cACb2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiBkb,EAAUE,GAAW,IAuB1D,OALA74D,KAAKohB,MACH/H,EAAAgI,eAAe43C,8CACfhyD,EAAW7C,MAAO,KAAMu0D,EAASh0C,WAAYk0C,EAAUl0C,YAEzD3kB,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,oBAEhB,OAxBE0rB,EAAW14D,KAAKk3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBxxD,GAEFsxD,EAAY54D,KAAKk3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBvxD,GAUIuxD,EAAWl2D,MACjB,OACA,OACA,OACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASe,MAAO4jC,EAAUE,GACrD,MAEF,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASiB,MACTxb,EAAAua,SAASe,MACb4jC,EACAE,GAEF,MAEF,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASiB,MAAO0jC,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASgB,MAAO2jC,EAAUE,GACrD,MAEF,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASkB,MACTzb,EAAAua,SAASgB,MACb2jC,EACAE,GAEF,MAEF,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASkB,MAAOyjC,EAAUE,GACrD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASmB,MAAOwjC,EAAUE,GACrD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASoB,MAAOujC,EAAUE,GACrD,MAEF,QACE3mD,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlBhtC,KAAKmrD,YAAc7xC,EAAA+E,KAAKW,KACxB,MAEF,KAAK1c,EAAAC,MAAMq/C,mBAKT,GAJA8W,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAc,GAChEiD,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAa4B,IAC5C,CACZ5U,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAKrB,GAFA4rB,EAAY54D,KAAKqvD,4BAA4B9nD,EAAOoxD,EAAQ,GAC5DE,EAAY74D,KAAKmrD,cACb2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiBkb,EAAUE,GAAW,IAuB1D,OALA74D,KAAKohB,MACH/H,EAAAgI,eAAe43C,8CACfhyD,EAAW7C,MAAO,KAAMu0D,EAASh0C,WAAYk0C,EAAUl0C,YAEzD3kB,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,oBAEhB,OAxBE0rB,EAAW14D,KAAKk3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBxxD,GAEFsxD,EAAY54D,KAAKk3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBvxD,GAUIuxD,EAAWl2D,MACjB,OACA,OACA,OACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS2B,MAAOgjC,EAAUE,GACrD,MAEF,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAAS6B,MACTpc,EAAAua,SAAS2B,MACbgjC,EACAE,GAEF,MAEF,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS6B,MAAO8iC,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS4B,MAAO+iC,EAAUE,GACrD,MAEF,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAAS8B,MACTrc,EAAAua,SAAS4B,MACb+iC,EACAE,GAEF,MAEF,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS8B,MAAO6iC,EAAUE,GACrD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS+B,MAAO4iC,EAAUE,GACrD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASgC,MAAO2iC,EAAUE,GACrD,MAEF,QACE3mD,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlBhtC,KAAKmrD,YAAc7xC,EAAA+E,KAAKW,KACxB,MAGF,KAAK1c,EAAAC,MAAMw/C,qBACX,KAAKz/C,EAAAC,MAAMs/C,cAUT,GAJA6W,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAc,GAChEiD,EAAW34D,KAAKmrD,YAGZ9jD,GAAY/E,EAAAC,MAAMs/C,eAAiB7hD,KAAKmrD,YAAYtnD,GAAE,KAExD,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAayB,IAC5C,CACZzU,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAQN,GAFA2xD,EAAY54D,KAAKqvD,4BAA4B9nD,EAAOoxD,EAAQ,GAC5DE,EAAY74D,KAAKmrD,cACb2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiBkb,EAAUE,GAAW,IAuB1D,OALA74D,KAAKohB,MACH/H,EAAAgI,eAAe43C,8CACfhyD,EAAW7C,MAAO9B,EAAAi/C,sBAAsBt6C,EAAWI,UAAWsxD,EAASh0C,WAAYk0C,EAAUl0C,YAE/F3kB,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,oBAEhB,OAxBE0rB,EAAW14D,KAAKk3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBxxD,GAEFsxD,EAAY54D,KAAKk3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBvxD,GAUIuxD,EAAWl2D,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASC,MAAO0kC,EAAUE,GACrD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASE,MACTza,EAAAua,SAASC,MACb0kC,EACAE,GAEF,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASE,MAAOykC,EAAUE,GACrD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASG,MAAOwkC,EAAUE,GACrD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASI,MAAOukC,EAAUE,GACrD,MAEF,QACE3mD,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlBhtC,KAAKmrD,YAAc7xC,EAAA+E,KAAKW,KACxB,MAEF,KAAK1c,EAAAC,MAAMy/C,0BACX,KAAK1/C,EAAAC,MAAMu/C,mBAKT,GAJA4W,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAc,GAChEiD,EAAW34D,KAAKmrD,YAGZ9jD,GAAY/E,EAAAC,MAAMu/C,oBAAsB9hD,KAAKmrD,YAAYtnD,GAAE,KAE7D,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAa0B,IAC5C,CACZ1U,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAQN,GAFA2xD,EAAY54D,KAAKqvD,4BAA4B9nD,EAAOoxD,EAAQ,GAC5DE,EAAY74D,KAAKmrD,cACb2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiBkb,EAAUE,GAAW,IAuB1D,OALA74D,KAAKohB,MACH/H,EAAAgI,eAAe43C,8CACfhyD,EAAW7C,MAAO9B,EAAAi/C,sBAAsBt6C,EAAWI,UAAWsxD,EAASh0C,WAAYk0C,EAAUl0C,YAE/F3kB,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,oBAEhB,OAxBE0rB,EAAW14D,KAAKk3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBxxD,GAEFsxD,EAAY54D,KAAKk3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBvxD,GAUIuxD,EAAWl2D,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASK,MAAOskC,EAAUE,GACrD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASM,MACT7a,EAAAua,SAASK,MACbskC,EACAE,GAEF,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASM,MAAOqkC,EAAUE,GACrD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASO,MAAOokC,EAAUE,GACrD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASQ,MAAOmkC,EAAUE,GACrD,MAEF,QACE3mD,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlBhtC,KAAKmrD,YAAc7xC,EAAA+E,KAAKW,KACxB,MAEF,KAAK1c,EAAAC,MAAM0gD,OACT,OAAOjjD,KAAKk5D,kBAAkB5xD,EAAMC,EAAOmuD,GAE7C,KAAKpzD,EAAAC,MAAM2gD,YAAa6V,GAAW,EACnC,KAAKz2D,EAAAC,MAAM+Y,KAKT,GAJAo9C,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAc,GAChEiD,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAagB,KAC5C,CACZhU,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAGrB,GAAI+rB,EACFH,EAAY54D,KAAK2vD,kBAAkBpoD,EAAOoxD,EAAQ,SAC7C,CAGL,GAFAC,EAAY54D,KAAKqvD,4BAA4B9nD,EAAOoxD,EAAQ,GAC5DE,EAAY74D,KAAKmrD,cACb2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiBkb,EAAUE,GAAW,IAuB1D,OALA74D,KAAKohB,MACH/H,EAAAgI,eAAe43C,8CACfhyD,EAAW7C,MAAO,IAAKu0D,EAASh0C,WAAYk0C,EAAUl0C,YAExD3kB,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,oBAtBd0rB,EAAW14D,KAAKk3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBxxD,GAEFsxD,EAAY54D,KAAKk3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBvxD,GAWN,OAAQvH,KAAKmrD,YAAYvoD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASq8B,OAAQsI,EAAUE,GACtD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASolC,OACT3/C,EAAAua,SAASq8B,OACbsI,EACAE,GAEF,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASolC,OAAQT,EAAUE,GACtD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASqlC,OAAQV,EAAUE,GACtD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASslC,OAAQX,EAAUE,GACtD,MAEF,QACE3mD,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAM4gD,aAAc4V,GAAW,EACpC,KAAKz2D,EAAAC,MAAMiZ,MAKT,GAJAk9C,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAc,GAChEiD,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAaiB,KAC5C,CACZjU,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAGrB,GAAI+rB,EACFH,EAAY54D,KAAK2vD,kBAAkBpoD,EAAOoxD,EAAQ,KAClDE,EAAY74D,KAAKmrD,gBACZ,CAGL,GAFAyN,EAAY54D,KAAKqvD,4BAA4B9nD,EAAOoxD,EAAQ,GAC5DE,EAAY74D,KAAKmrD,cACb2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiBkb,EAAUE,GAAW,IAuB1D,OALA74D,KAAKohB,MACH/H,EAAAgI,eAAe43C,8CACfhyD,EAAW7C,MAAO,IAAKu0D,EAASh0C,WAAYk0C,EAAUl0C,YAExD3kB,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,oBAtBd0rB,EAAW14D,KAAKk3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBxxD,GAEFsxD,EAAY54D,KAAKk3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBvxD,GAWN,OAAQvH,KAAKmrD,YAAYvoD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASulC,OAAQZ,EAAUE,GACtD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASwlC,OACT//C,EAAAua,SAASulC,OACbZ,EACAE,GAEF,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASwlC,OAAQb,EAAUE,GACtD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASylC,OAAQd,EAAUE,GACtD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS0lC,OAAQf,EAAUE,GACtD,MAEF,QACE3mD,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAM6gD,gBAAiB2V,GAAW,EACvC,KAAKz2D,EAAAC,MAAM2/C,SAKT,GAJAwW,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAc,GAChEiD,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAakB,KAC5C,CACZlU,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAGrB,GAAI+rB,EACFL,EAAW14D,KAAKm3D,uBAAuBuB,EAAUC,GACjDC,EAAY54D,KAAK2vD,kBAAkBpoD,EAAOoxD,EAAQ,SAC7C,CAGL,GAFAC,EAAY54D,KAAKqvD,4BAA4B9nD,EAAOoxD,EAAQ,GAC5DE,EAAY74D,KAAKmrD,cACb2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiBkb,EAAUE,GAAW,IAuB1D,OALA74D,KAAKohB,MACH/H,EAAAgI,eAAe43C,8CACfhyD,EAAW7C,MAAO,IAAKu0D,EAASh0C,WAAYk0C,EAAUl0C,YAExD3kB,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,oBAtBd0rB,EAAW14D,KAAKk3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBxxD,GAEFsxD,EAAY54D,KAAKk3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBvxD,GAWN,OAAQvH,KAAKmrD,YAAYvoD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASiC,OAAQ0iC,EAAUE,GACtD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAAS2lC,OACTlgD,EAAAua,SAASiC,OACb0iC,EACAE,GAEF,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS2lC,OAAQhB,EAAUE,GACtD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS4lC,OAAQjB,EAAUE,GACtD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS6lC,OAAQlB,EAAUE,GACtD,MAEF,QACE3mD,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAM8gD,yBAA0B0V,GAAW,EAChD,KAAKz2D,EAAAC,MAAM0/C,kBAKT,GAJAyW,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAc,GAChEiD,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAamB,KAC5C,CACZnU,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAGrB,IAAI7pB,OAAQ,EAGZ,GAAyB,IAArBnjB,KAAKmrD,YAAYvoD,MAGnB,GAFAg2D,EAAY54D,KAAK2vD,kBAAkBpoD,EAAO+R,EAAA+E,KAAKY,IAAG,KAClD45C,EAAY74D,KAAKmrD,cACXhoC,EAAWnjB,KAAK4rD,gBAAiB,CAErC,KADI5mC,EAAYhlB,KAAKgqB,QAAQ1N,eAAepb,IAAI,UAChC,CACdlB,KAAKohB,MACH/H,EAAAgI,eAAec,mBACflb,EAAW7C,MAAO,SAEpBgC,EAAOzG,EAAOqtC,oBACd,MAGF,KADI/qC,EAAY+iB,EAAUhZ,QAAUgZ,EAAUhZ,QAAQ9K,IAAI,OAAS,MACnD,CACdlB,KAAKohB,MACH/H,EAAAgI,eAAec,mBACflb,EAAW7C,MAAO,aAEpBgC,EAAOzG,EAAOqtC,oBACd,MAEF/6B,OAAOhQ,EAAUW,MAAQy5C,EAAAtgC,YAAYuH,oBACrCtjB,KAAK4rD,eAAiBzoC,EAAWnjB,KAAKwd,SAASmG,gBAAmC1hB,EAAW,YAsB/F,GAhBAy2D,EAAW14D,KAAKk3D,kBACdwB,EACA14D,KAAKmrD,YACL7xC,EAAA+E,KAAKa,IAAG,IAGR5X,GAEFqxD,EAAW34D,KAAKmrD,YAChByN,EAAY54D,KAAK2vD,kBACfpoD,EACA+R,EAAA+E,KAAKa,IAAG,KAIV25C,EAAY74D,KAAKmrD,cACXhoC,EAAWnjB,KAAK6rD,gBAAiB,CAErC,KADI7mC,EAAYhlB,KAAKgqB,QAAQ1N,eAAepb,IAAI,SAChC,CACdlB,KAAKohB,MACH/H,EAAAgI,eAAec,mBACflb,EAAW7C,MAAO,QAEpBgC,EAAOzG,EAAOqtC,oBACd,MAGF,KADI/qC,EAAY+iB,EAAUhZ,QAAUgZ,EAAUhZ,QAAQ9K,IAAI,OAAS,MACnD,CACdlB,KAAKohB,MACH/H,EAAAgI,eAAec,mBACflb,EAAW7C,MAAO,YAEpBgC,EAAOzG,EAAOqtC,oBACd,MAEF/6B,OAAOhQ,EAAUW,MAAQy5C,EAAAtgC,YAAYuH,oBACrCtjB,KAAK6rD,eAAiB1oC,EAAWnjB,KAAKwd,SAASmG,gBAAmC1hB,EAAW,MAM/FmE,EAHI+c,GAAYnjB,KAAKuwD,gBAAgBptC,GAG9BnjB,KAAK65D,eAAe12C,GAAYu1C,EAAUE,IAF1Cj5D,EAAOqtC,oBAIhB,MAEF,KAAK1qC,EAAAC,MAAM+gD,aAAcyV,GAAW,EACpC,KAAKz2D,EAAAC,MAAM4/C,MAKT,GAJAuW,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAc,GAChEiD,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAaoB,KAC5C,CACZpU,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAGrB,GAAI+rB,EACFL,EAAW14D,KAAKm3D,uBAAuBuB,EAAUC,GACjDC,EAAY54D,KAAK2vD,kBAAkBpoD,EAAOoxD,EAAQ,KAClDE,EAAY74D,KAAKmrD,gBACZ,CAGL,GAFAyN,EAAY54D,KAAKqvD,4BAA4B9nD,EAAOoxD,EAAQ,GAC5DE,EAAY74D,KAAKmrD,cACb2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiBkb,EAAUE,GAAW,IAuB1D,OALA74D,KAAKohB,MACH/H,EAAAgI,eAAe43C,8CACfhyD,EAAW7C,MAAO,IAAKu0D,EAASh0C,WAAYk0C,EAAUl0C,YAExD3kB,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,oBAtBd0rB,EAAW14D,KAAKk3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBxxD,GAEFsxD,EAAY54D,KAAKk3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBvxD,GAWN,OAAQvH,KAAKmrD,YAAYvoD,MACvB,OACA,OACA,OACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS+lC,OAAQpB,EAAUE,GACtD,MAEF,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASgmC,OACTvgD,EAAAua,SAAS+lC,OACbpB,EACAE,GAEF,MAEF,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASgmC,OAAQrB,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS6C,OAAQ8hC,EAAUE,GACtD,MAEF,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASimC,OACTxgD,EAAAua,SAAS6C,OACb8hC,EACAE,GAEF,MAEF,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASimC,OAAQtB,EAAUE,GACtD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASkmC,OAAQvB,EAAUE,GACtD,MAEF,QACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASmmC,OAAQxB,EAAUE,GACtD,MAEF,QACE3mD,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAMghD,eAAgBwV,GAAW,EACtC,KAAKz2D,EAAAC,MAAM6/C,QAKT,GAJAsW,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAc,GAChEiD,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAaqB,KAC5C,CACZrU,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAGrB,GAAI+rB,EACFL,EAAW14D,KAAKm3D,uBAAuBuB,EAAUC,GACjDC,EAAY54D,KAAK2vD,kBAAkBpoD,EAAOoxD,EAAQ,KAClDE,EAAY74D,KAAKmrD,gBACZ,CAGL,GAFAyN,EAAY54D,KAAKqvD,4BAA4B9nD,EAAOoxD,EAAQ,GAC5DE,EAAY74D,KAAKmrD,cACb2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiBkb,EAAUE,GAAW,IAuB1D,OALA74D,KAAKohB,MACH/H,EAAAgI,eAAe43C,8CACfhyD,EAAW7C,MAAO,IAAKu0D,EAASh0C,WAAYk0C,EAAUl0C,YAExD3kB,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,oBAtBd0rB,EAAW14D,KAAKk3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBxxD,GAEFsxD,EAAY54D,KAAKk3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBvxD,GAWN,OAAQvH,KAAKmrD,YAAYvoD,MACvB,OACA,OAIA,OACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS8C,OAAQ6hC,EAAUE,GACtD,MAEF,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASomC,OACT3gD,EAAAua,SAAS8C,OACb6hC,EACAE,GAEF,MAEF,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASomC,OAAQzB,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS+C,OAAQ4hC,EAAUE,GACtD,MAEF,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASqmC,OACT5gD,EAAAua,SAAS+C,OACb4hC,EACAE,GAEF,MAEF,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASqmC,OAAQ1B,EAAUE,GACtD,MAEF,QAEE,KADIz1C,EAAWnjB,KAAK0rD,gBACL,CAEb,KADI1mC,EAAYhlB,KAAKgqB,QAAQ1N,eAAepb,IAAI,UAChC,CACdlB,KAAKohB,MACH/H,EAAAgI,eAAec,mBACflb,EAAW7C,MAAO,SAEpBgC,EAAOzG,EAAOqtC,oBACd,MAGF,KADI/qC,EAAY+iB,EAAUhZ,QAAUgZ,EAAUhZ,QAAQ9K,IAAI,OAAS,MACnD,CACdlB,KAAKohB,MACH/H,EAAAgI,eAAec,mBACflb,EAAW7C,MAAO,aAEpBgC,EAAOzG,EAAOqtC,oBACd,MAEF/6B,OAAOhQ,EAAUW,MAAQy5C,EAAAtgC,YAAYuH,oBACrCtjB,KAAK0rD,eAAiBvoC,EAAWnjB,KAAKwd,SAASmG,gBAAmC1hB,EAAW,MAK7FmE,EAHI+c,GAAYnjB,KAAKuwD,gBAAgBptC,GAG9BnjB,KAAK65D,eAAe12C,GAAYu1C,EAAUE,IAF1Cj5D,EAAOqtC,oBAIhB,MAEF,QAEE,KADI7pB,EAAWnjB,KAAK2rD,gBACL,CACb,IAAI3mC,EASA/iB,EARJ,KADI+iB,EAAYhlB,KAAKgqB,QAAQ1N,eAAepb,IAAI,SAChC,CACdlB,KAAKohB,MACH/H,EAAAgI,eAAec,mBACflb,EAAW7C,MAAO,QAEpBgC,EAAOzG,EAAOqtC,oBACd,MAGF,KADI/qC,EAAY+iB,EAAUhZ,QAAUgZ,EAAUhZ,QAAQ9K,IAAI,OAAS,MACnD,CACdlB,KAAKohB,MACH/H,EAAAgI,eAAec,mBACflb,EAAW7C,MAAO,YAEpBgC,EAAOzG,EAAOqtC,oBACd,MAEF/6B,OAAOhQ,EAAUW,MAAQy5C,EAAAtgC,YAAYuH,oBACrCtjB,KAAK2rD,eAAiBxoC,EAAWnjB,KAAKwd,SAASmG,gBAAmC1hB,EAAW,MAK7FmE,EAHI+c,GAAYnjB,KAAKuwD,gBAAgBptC,GAG9BnjB,KAAK65D,eAAe12C,GAAYu1C,EAAUE,IAF1Cj5D,EAAOqtC,oBAIhB,MAEF,QACE/6B,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAMihD,yBAA0BuV,GAAW,EAChD,KAAKz2D,EAAAC,MAAMggD,kBAKT,GAJAmW,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAe2E,QAAO,GACxE1B,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAaiC,aAC5C,CACZjV,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAKrB,OAFA4rB,EAAY54D,KAAK2vD,kBAAkBpoD,EAAOoxD,EAAQ,KAClDE,EAAY74D,KAAKmrD,YACTnrD,KAAKmrD,YAAYvoD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASwC,OAAQmiC,EAAUE,GACtD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASumC,OAAQ5B,EAAUE,GACtD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASumC,OACT9gD,EAAAua,SAASwC,OACbmiC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA54D,KAAKohB,MACH/H,EAAAgI,eAAek5C,2CACftzD,EAAW7C,MAAO9B,EAAAi/C,sBAAsBt6C,EAAWI,UAAWrH,KAAKmrD,YAAYxmC,YAE1EhlB,EAAOqtC,oBAEhB,QACE/6B,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAMkhD,+BAAgCsV,GAAW,EACtD,KAAKz2D,EAAAC,MAAMigD,wBAKT,GAJAkW,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAe2E,QAAO,GACxE1B,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAa6B,aAC5C,CACZ7U,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAMrB,OAHA0rB,EAAW14D,KAAKm3D,uBAAuBuB,EAAUC,GACjDC,EAAY54D,KAAK2vD,kBAAkBpoD,EAAOoxD,EAAQ,KAClDE,EAAY74D,KAAKmrD,YACTnrD,KAAKmrD,YAAYvoD,MACvB,OACA,OAIA,OACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS2C,OAAQgiC,EAAUE,GACtD,MAEF,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASymC,OAAQ9B,EAAUE,GACtD,MAEF,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASymC,OACThhD,EAAAua,SAAS2C,OACbgiC,EACAE,GAEF,MAEF,OACA,OACA,QAIA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS4C,OAAQ+hC,EAAUE,GACtD,MAEF,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS0mC,OAAQ/B,EAAUE,GACtD,MAEF,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAAS0mC,OACTjhD,EAAAua,SAAS4C,OACb+hC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA54D,KAAKohB,MACH/H,EAAAgI,eAAek5C,2CACftzD,EAAW7C,MAAO9B,EAAAi/C,sBAAsBt6C,EAAWI,UAAWrH,KAAKmrD,YAAYxmC,YAE1EhlB,EAAOqtC,oBAEhB,QACE/6B,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAMmhD,2CAA4CqV,GAAW,EAClE,KAAKz2D,EAAAC,MAAMkgD,oCAKT,GAJAiW,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAe2E,QAAO,GACxE1B,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAa8B,eAC5C,CACZ9U,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAMrB,OAHA0rB,EAAW14D,KAAKm3D,uBAAuBuB,EAAUC,GACjDC,EAAY54D,KAAK2vD,kBAAkBpoD,EAAOoxD,EAAQ,KAClDE,EAAY74D,KAAKmrD,YACTnrD,KAAKmrD,YAAYvoD,MACvB,OACA,OACA,QACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS4C,OAAQ+hC,EAAUE,GAExD,OACA,OACA,OACA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS4C,OAAQ+hC,EAAUE,GACtD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS0mC,OAAQ/B,EAAUE,GACtD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAAS0mC,OACTjhD,EAAAua,SAAS4C,OACb+hC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA54D,KAAKohB,MACH/H,EAAAgI,eAAek5C,2CACftzD,EAAW7C,MAAO9B,EAAAi/C,sBAAsBt6C,EAAWI,UAAWrH,KAAKmrD,YAAYxmC,YAE1EhlB,EAAOqtC,oBAEhB,QACE/6B,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAMohD,iBAAkBoV,GAAW,EACxC,KAAKz2D,EAAAC,MAAMmgD,UAKT,GAJAgW,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAe2E,QAAO,GACxE1B,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAasB,aAC5C,CACZtU,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAGrB,GAAI+rB,EACFH,EAAY54D,KAAK2vD,kBAAkBpoD,EAAOoxD,EAAQ,KAClDE,EAAY74D,KAAKmrD,gBACZ,CAGL,GAFAyN,EAAY54D,KAAKqvD,4BAA4B9nD,EAAOoxD,EAAQ,GAC5DE,EAAY74D,KAAKmrD,cACb2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiBkb,EAAUE,GAAW,IAuB1D,OALA74D,KAAKohB,MACH/H,EAAAgI,eAAe43C,8CACfhyD,EAAW7C,MAAO,IAAKu0D,EAASh0C,WAAYk0C,EAAUl0C,YAExD3kB,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,oBAtBd0rB,EAAW14D,KAAKk3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBxxD,GAEFsxD,EAAY54D,KAAKk3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBvxD,GAWN,OAAQvH,KAAKmrD,YAAYvoD,MACvB,OACA,OACA,OACA,OACA,OACA,QACA,OACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASsC,OAAQqiC,EAAUE,GACtD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS2mC,OAAQhC,EAAUE,GACtD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAAS2mC,OACTlhD,EAAAua,SAASsC,OACbqiC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA54D,KAAKohB,MACH/H,EAAAgI,eAAek5C,2CACftzD,EAAW7C,MAAO9B,EAAAi/C,sBAAsBt6C,EAAWI,UAAWrH,KAAKmrD,YAAYxmC,YAE1EhlB,EAAOqtC,oBAEhB,QACE/6B,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAMqhD,WAAYmV,GAAW,EAClC,KAAKz2D,EAAAC,MAAMogD,IAKT,GAJA+V,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAe2E,QAAO,GACxE1B,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAauB,YAC5C,CACZvU,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAGrB,GAAI+rB,EACFH,EAAY54D,KAAK2vD,kBAAkBpoD,EAAOoxD,EAAQ,KAClDE,EAAY74D,KAAKmrD,gBACZ,CAGL,GAFAyN,EAAY54D,KAAKqvD,4BAA4B9nD,EAAOoxD,EAAQ,GAC5DE,EAAY74D,KAAKmrD,cACb2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiBkb,EAAUE,GAAW,IAuB1D,OALA74D,KAAKohB,MACH/H,EAAAgI,eAAe43C,8CACfhyD,EAAW7C,MAAO,IAAKu0D,EAASh0C,WAAYk0C,EAAUl0C,YAExD3kB,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,oBAtBd0rB,EAAW14D,KAAKk3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBxxD,GAEFsxD,EAAY54D,KAAKk3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBvxD,GAWN,OAAQvH,KAAKmrD,YAAYvoD,MACvB,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS4mC,MAAOjC,EAAUE,GACrD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS4mC,MAAOjC,EAAUE,GACrD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS6mC,MAAOlC,EAAUE,GACrD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAAS6mC,MACTphD,EAAAua,SAAS4mC,MACbjC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA54D,KAAKohB,MACH/H,EAAAgI,eAAek5C,2CACftzD,EAAW7C,MAAO9B,EAAAi/C,sBAAsBt6C,EAAWI,UAAWrH,KAAKmrD,YAAYxmC,YAE1EhlB,EAAOqtC,oBAEhB,QACE/6B,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAMshD,aAAckV,GAAW,EACpC,KAAKz2D,EAAAC,MAAMqgD,MAKT,GAJA8V,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAe2E,QAAO,GACxE1B,EAAW34D,KAAKmrD,YAGZnrD,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAC5C,IAAI64C,EAEEtsB,EADN,GADIssB,EAAiBic,EAASjc,eAG5B,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAawB,aAC5C,CACZxU,EAAOpG,KAAKg5D,sBAAsB5oC,EAAU9oB,EAAMoxD,EAAUnxD,EAAON,GACnE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAGrB,GAAI+rB,EACFH,EAAY54D,KAAK2vD,kBAAkBpoD,EAAOoxD,EAAQ,KAClDE,EAAY74D,KAAKmrD,gBACZ,CAGL,GAFAyN,EAAY54D,KAAKqvD,4BAA4B9nD,EAAOoxD,EAAQ,GAC5DE,EAAY74D,KAAKmrD,cACb2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiBkb,EAAUE,GAAW,IAuB1D,OALA74D,KAAKohB,MACH/H,EAAAgI,eAAe43C,8CACfhyD,EAAW7C,MAAO,IAAKu0D,EAASh0C,WAAYk0C,EAAUl0C,YAExD3kB,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,oBAtBd0rB,EAAW14D,KAAKk3D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrBxxD,GAEFsxD,EAAY54D,KAAKk3D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBvxD,GAWN,OAAQvH,KAAKmrD,YAAYvoD,MACvB,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS8mC,OAAQnC,EAAUE,GACtD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS8mC,OAAQnC,EAAUE,GACtD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS+mC,OAAQpC,EAAUE,GACtD,MAEF,OACA,OACExyD,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAAS+mC,OACTthD,EAAAua,SAAS8mC,OACbnC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA54D,KAAKohB,MACH/H,EAAAgI,eAAek5C,2CACftzD,EAAW7C,MAAO9B,EAAAi/C,sBAAsBt6C,EAAWI,UAAWrH,KAAKmrD,YAAYxmC,YAE1EhlB,EAAOqtC,oBAEhB,QACE/6B,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAKF,KAAK1qC,EAAAC,MAAMwgD,oBAOT,GANA2V,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAc,GAChEiD,EAAW34D,KAAKmrD,YAChByN,EAAY54D,KAAK2vD,kBAAkBpoD,EAAOoxD,EAAQ,KAClDE,EAAY74D,KAAKmrD,YAGb/kD,EAAOzG,EAAOq0C,gBAAgB0kB,GAAU,EAAM,GAChD14D,KAAKizD,cAAcyF,EAAU14D,KAAKmrD,aAClC/kD,EAAOzG,EAAOisC,SACZ5rC,KAAKizD,cAAcyF,EAAU14D,KAAKmrD,aAClCyN,EACAxyD,OAIG,CACL,IAAIonB,EAAOxtB,KAAK4wB,gBAAgBpD,KAC5B6mC,EAAYr0D,KAAK4wB,gBAAgB1C,oBACnCluB,KAAKmrD,aACJ39B,EAAK2F,YAAYulC,EAAU14D,KAAKmrD,cAEnC/kD,EAAOzG,EAAOisC,SACZ5rC,KAAKizD,cACHtzD,EAAOwpC,eAAekrB,EAAUjpC,MAAOstC,GACvC14D,KAAKmrD,aAEPyN,EACAj5D,EAAOspC,eACLh3B,OAAOoiD,GAAWjpC,MAClBprB,KAAKmrD,YAAYr9B,iBAIvB,MAEF,KAAKxrB,EAAAC,MAAMygD,QAOT,GANA0V,EAAW14D,KAAKqvD,4BAA4B/nD,EAAMouD,EAAc,GAChEiD,EAAW34D,KAAKmrD,YAChByN,EAAY54D,KAAK2vD,kBAAkBpoD,EAAOoxD,EAAQ,KAClDE,EAAY74D,KAAKmrD,YAGb/kD,EAAOpG,KAAKL,OAAOq0C,gBAAgB0kB,GAAU,EAAM,GACrDtyD,EAAOpG,KAAKL,OAAOisC,SACjB5rC,KAAKizD,cAAcyF,EAAU14D,KAAKmrD,aAClC/kD,EACAwyD,OAIG,CACDprC,EAAOxtB,KAAK4wB,gBAAgBpD,KAC5B6mC,EAAYr0D,KAAK4wB,gBAAgB1C,oBACnCluB,KAAKmrD,aACJ39B,EAAK2F,YAAYulC,EAAU14D,KAAKmrD,cAEnC/kD,EAAOzG,EAAOisC,SACZ5rC,KAAKizD,cACHtzD,EAAOwpC,eAAekrB,EAAUjpC,MAAOstC,GACvC14D,KAAKmrD,aAEPxrD,EAAOspC,eACLh3B,OAAOoiD,GAAWjpC,MAClBprB,KAAKmrD,YAAYr9B,gBAEnB8qC,GAGJ,MAEF,QACE3mD,QAAO,GACP7L,EAAOpG,KAAKL,OAAOqtC,oBAGvB,OAAO+rB,EACH/4D,KAAKw1D,2BAA2BluD,EAAMlB,EAAMsvD,GAAkBp8C,EAAA+E,KAAKc,MACnE/Y,GAGN2kD,EAAA9oD,UAAA84D,qBAAA,SACEC,EACA15D,EACA25D,EACAhN,GAEA,IAAIiN,EACAC,EAAyB,EAO7B,OANIH,EAAiBn3D,GAAGxB,EAAAsB,YAAYipB,WAClCuuC,EAAUF,EACVC,MAEAA,GAAwB55D,GAEnBtB,KAAKo7D,kBACVJ,EACAE,EACAjN,EACAkN,EACAH,EAAiBj2C,aAAas3B,EAAArgC,eAAexJ,UAIjDu4C,EAAA9oD,UAAA+2D,sBAAA,SACEgC,EACA1zD,EACAoxD,EACAnxD,EACA0mD,GAEA,IAAIiN,EACAC,EAAyB,EAC7B,GAAIH,EAAiBn3D,GAAGxB,EAAAsB,YAAYipB,UAAW,CAC7C,IAAInpB,EAASwO,OAAO+oD,EAAiBv3D,QACrCwO,OAAOxO,EAAOb,MAAQy5C,EAAAtgC,YAAYlI,OAClCsnD,EAAUzC,EACVwC,GAAwB3zD,QAExB2zD,GAAwB5zD,EAAMC,GAShC,OAPUvH,KAAKo7D,kBACbJ,EACAE,EACAjN,EACAkN,EACAH,EAAiBj2C,aAAas3B,EAAArgC,eAAexJ,UAKjDu4C,EAAA9oD,UAAAi3D,kBAAA,SAAkBjyD,EAAwBo0D,EAA6B3F,GACrE,IAOIxY,EANA1/B,EADUxd,KAAKgqB,QACIxM,SACnBoT,EAAkB5wB,KAAK4wB,gBACvBb,EAASvS,EAAS89C,kBAAkBr0D,EAAY2pB,GACpD,IAAKb,EAAQ,OAAO/vB,KAAKL,OAAOqtC,oBAIhC,OAAQjd,EAAOntB,MACb,KAAKy5C,EAAAtgC,YAAYxJ,OACf,IAAKvS,KAAK8uD,cAAsB/+B,GAC9B,OAAO/vB,KAAKL,OAAOqtC,oBAErB/6B,OAAgB8d,EAAQ1rB,MAAQiV,EAAA+E,KAAKc,MAGvC,KAAKk9B,EAAAtgC,YAAYsP,MACjB,KAAKgxB,EAAAtgC,YAAYoT,MACf+tB,EAAmCntB,EAAQ1rB,KAC3C,MAEF,KAAKg4C,EAAAtgC,YAAYgM,SACf,IAAIE,EAA6B8H,EAAQ9H,gBACzC,GAAIA,EAAiB,CACnB,IAAI9E,EAAWnjB,KAAKwd,SAASmG,gBAAgBsE,EAAiB,MAC9D,IAAK9E,EAAU,OAAOnjB,KAAKL,OAAOqtC,oBAClC/6B,OAAmD,GAA5CkR,EAAS/T,UAAUwU,eAAe/c,QACzCq2C,EAAa/5B,EAAS/T,UAAUwU,eAAe,GAC/C,MAMF,OAJA5jB,KAAKohB,MACH/H,EAAAgI,eAAek6C,oEACft0D,EAAW7C,MAAkB2rB,EAAQ5P,cAEhCngB,KAAKL,OAAOqtC,oBAErB,KAAKqP,EAAAtgC,YAAYlI,MACf,GAAI2J,EAASg+C,yBAA0B,CACrC,IAAIC,EAAc7qC,EAAgBpD,KAAK3pB,GAAE,MACrC63D,EAAqB3rC,EAAQE,eAAeosB,EAAAjjC,aAAaa,YAAawhD,GAC1E,IAAKC,EAaH,OAZyB3rC,EAAQE,eAAeosB,EAAAjjC,aAAaY,YAAayhD,GAOxEz7D,KAAKohB,MACH/H,EAAAgI,eAAes6C,+CACf10D,EAAW7C,MAAe2rB,EAAQ5P,cAPpCngB,KAAKohB,MACH/H,EAAAgI,eAAeu6C,qCACf30D,EAAW7C,MAAe2rB,EAAQ5P,cAQ/BngB,KAAKL,OAAOqtC,oBAErB/6B,OAAqD,GAA9CypD,EAAWtsD,UAAUwU,eAAe/c,QAC3Cq2C,EAAawe,EAAWtsD,UAAUwU,eAAe,GACjD,MAIJ,QAKE,OAJA5jB,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAKvB/6B,OAAOirC,GAAc5jC,EAAA+E,KAAKc,MAC1B,IAAI87C,EAAYj7D,KAAK2vD,kBAAkB0L,EAAiBne,EAAU,KAClE,OAAOl9C,KAAKw1D,2BACVvuD,EACAg0D,EACAvF,GAAkBp8C,EAAA+E,KAAKc,OAI3B4rC,EAAA9oD,UAAAuzD,2BAAA,SACEvuD,EACA40D,EACAC,QAAA,IAAAA,OAAA,GAEA,IAAIn8D,EAASK,KAAKL,OACdowB,EAAS/vB,KAAKwd,SAAS89C,kBAAkBr0D,EAAYjH,KAAK4wB,iBAC9D,IAAKb,EAAQ,OAAOpwB,EAAOqtC,oBAE3B,OAAQjd,EAAOntB,MACb,KAAKy5C,EAAAtgC,YAAYsP,MACf,IAAIhnB,EAAe0rB,EAAQ1rB,KAG3B,GAFA4N,OAAO5N,GAAQiV,EAAA+E,KAAKc,MACpBnf,KAAKmrD,YAAc2Q,EAAMz3D,EAAOiV,EAAA+E,KAAKc,KACzB4Q,EAAQlsB,GAAGxB,EAAAsB,YAAYkmB,OAKjC,OAJA7pB,KAAKohB,MACH/H,EAAAgI,eAAek6C,oEACft0D,EAAW7C,MAAO2rB,EAAO5P,cAEpBxgB,EAAOqtC,oBAEhB,IAAIxf,EAAOxtB,KAAK4wB,gBAAgBpD,KAIhC,OAHInpB,EAAKR,GAAG,KACV2pB,EAAKQ,gBAAwB+B,EAAQ3E,OAAQoC,EAAK2F,YAAY0oC,EAAsBx3D,IAE/Ey3D,EACHn8D,EAAOwpC,eAAuBpZ,EAAQ3E,MAAOywC,GAC7Cl8D,EAAOorC,eAAuBhb,EAAQ3E,MAAOywC,GAEnD,KAAKxf,EAAAtgC,YAAYxJ,OACf,IAAKvS,KAAK8uD,cAAsB/+B,GAAS,OAAOpwB,EAAOqtC,oBACnD3oC,EAAgB0rB,EAAQ1rB,KAG5B,GAFA4N,OAAO5N,GAAQiV,EAAA+E,KAAKc,MACpBnf,KAAKmrD,YAAc2Q,EAAMz3D,EAAOiV,EAAA+E,KAAKc,KACzB4Q,EAAQlsB,GAAGxB,EAAAsB,YAAYkmB,OAMjC,OALA7pB,KAAKohB,MACH/H,EAAAgI,eAAek6C,oEACft0D,EAAW7C,MACX2rB,EAAO5P,cAEFxgB,EAAOqtC,oBAGhB,GADA6uB,EAAuB77D,KAAKm3D,uBAAuB0E,EAAsBx3D,GACrEy3D,EAAK,CACP,IAAIxO,EAAajpD,EAAKypB,eAClB3N,EAAe4P,EAAO5P,aAC1B,OAAOxgB,EAAOwrC,YAAY,MACxBxrC,EAAOsrC,gBAAgB9qB,EAAc07C,GACrCl8D,EAAO0pC,gBAAgBlpB,EAAcmtC,IACpCA,GAEH,OAAO3tD,EAAOsrC,gBAAgBlb,EAAO5P,aAAc07C,GAGvD,KAAKxf,EAAAtgC,YAAYoT,MACf,IAAMtnB,EAAsBkoB,EAAQloB,YACpC,GACUkoB,EAAQlsB,GAAGxB,EAAAsB,YAAY8iB,YAE7BzmB,KAAK4wB,gBAAgB/sB,GAAGxB,EAAAsB,YAAYoQ,cACrB,MAAflM,GAC2B,MAA3BA,EAAY9C,YAOd,OAJA/E,KAAKohB,MACH/H,EAAAgI,eAAek6C,oEACft0D,EAAW7C,MAAe2rB,EAAQ5P,cAE7BxgB,EAAOqtC,oBAEhB,IAAI+uB,EAAiB9pD,OAAOjS,KAAKwd,SAASw+C,uBACtCC,EAAWj8D,KAAKqvD,4BAClB0M,EACA/7D,KAAKoe,QAAQW,UAAS,GAGpB1a,EAAe0rB,EAAQ1rB,KAC3BrE,KAAKmrD,YAAc2Q,EAAMz3D,EAAOiV,EAAA+E,KAAKc,KACjCmuC,EAAajpD,EAAKypB,eAKtB,GAJa,IAATzpB,EAAKzB,OAEPi5D,EAAuB77D,KAAKm3D,uBAAuB0E,EAAsBx3D,IAEvEy3D,EAAK,CAEHtuC,GADAoD,EAAkB5wB,KAAK4wB,iBACApD,KAD3B,IAMI8mC,EAJY1jC,EAAgB1C,oBAC9B7pB,GACCmpB,EAAK2F,YAAY0oC,EAAsBx3D,IAEX+mB,MAG/B,OAAOzrB,EAAOwrC,YAAY,MACxBxrC,EAAOorC,eAAeupB,EAAgBuH,GACtCl8D,EAAOiqC,YACLvlC,EAAKyf,SACLm4C,EACAt8D,EAAOspC,eAAeqrB,EAAgBhH,GACtCA,EACQv9B,EAAQX,cAElBzvB,EAAOspC,eAAeqrB,EAAgBhH,IACrCA,GAGH,OAAO3tD,EAAOiqC,YACZvlC,EAAKyf,SACLm4C,EACAJ,EACAvO,EACQv9B,EAAQX,cAItB,KAAKitB,EAAAtgC,YAAYgM,SACf,IAAIE,EAA6B8H,EAAQ9H,gBACzC,GAAIA,EAAiB,CACnB,IAAIi0C,EAAiBl8D,KAAKwd,SAASmG,gBAAgBsE,EAAiB,MACpE,IAAKi0C,EAAgB,OAAOv8D,EAAOqtC,oBAGnC,IAAK8uB,EAAK,CACR,GAAII,EAAer4D,GAAGxB,EAAAsB,YAAYipB,UAAW,CACvCmvC,EAAiB9pD,OAAOjS,KAAKwd,SAASw+C,uBACtCC,EAAWj8D,KAAKqvD,4BAClB0M,EACA/7D,KAAKoe,QAAQW,UAAS,GAGxB,OAAO/e,KAAK65D,eAAeqC,GAAkBD,EAAUJ,IAEvD,OAAO77D,KAAK65D,eAAeqC,GAAkBL,IAKjD,IAAI7zC,EAA6B+H,EAAQ/H,gBACzC/V,OAA0B,MAAnB+V,GACP,IAAIm0C,EAAiBn8D,KAAKwd,SAASmG,gBAAmCqE,EAAiB,MACvF,IAAKm0C,EAAgB,OAAOx8D,EAAOqtC,oBACnC,IACIovB,GADAh3D,EAAa+2D,EAAe/sD,UAAUhK,YACR0oB,eAClC,GAAIouC,EAAer4D,GAAGxB,EAAAsB,YAAYipB,UAAW,CACvCmvC,EAAiB9pD,OAAOjS,KAAKwd,SAASw+C,uBACtCC,EAAWj8D,KAAKqvD,4BAClB0M,EACA/7D,KAAKoe,QAAQW,UAAS,GAIpBu1C,EADYt0D,KAAK4wB,gBAAgB1C,oBAAoB9oB,GAAY,GACtCgmB,MAC/B,OAAOzrB,EAAOwrC,YAAY,MACxBnrC,KAAK65D,eAAeqC,GAClBv8D,EAAOwpC,eAAemrB,EAAgB2H,GACtCJ,IAEF77D,KAAK65D,eAAesC,GAClBx8D,EAAOspC,eAAeqrB,EAAgB8H,MAEvCA,GAGH,OAAOz8D,EAAOwrC,YAAY,MACxBnrC,KAAK65D,eAAeqC,GAAkBL,IACtC77D,KAAK65D,eAAesC,IACnBC,GAQP,OALEp8D,KAAKohB,MACH/H,EAAAgI,eAAek6C,oEACft0D,EAAW7C,MAAO2rB,EAAO5P,cAGtBxgB,EAAOqtC,oBAEhB,KAAKqP,EAAAtgC,YAAYlI,MACf,IAAItL,EAAoBvI,KAAKwd,SAASg+C,yBACtC,GAAIjzD,EAAmB,CACrB,IAAIkzD,EAAcz7D,KAAK4wB,gBAAgBpD,KAAK3pB,GAAE,MAC1Cw4D,EAAqBtsC,EAAQE,eAAeosB,EAAAjjC,aAAaY,YAAayhD,GAC1E,IAAKY,EAKH,OAJAr8D,KAAKohB,MACH/H,EAAAgI,eAAeu6C,qCACf30D,EAAW7C,MAAO2rB,EAAO5P,cAEpBxgB,EAAOqtC,oBAEhB,IAAI0uB,EAAqB3rC,EAAQE,eAAeosB,EAAAjjC,aAAaa,YAAawhD,GAC1E,IAAKC,EAMH,OALA17D,KAAKohB,MACH/H,EAAAgI,eAAes6C,+CACf10D,EAAW7C,MAAO2rB,EAAO5P,cAE3BngB,KAAKmrD,YAAc2Q,EAAMO,EAAWjtD,UAAUhK,WAAakU,EAAA+E,KAAKc,KACzDxf,EAAOqtC,oBAEhB,IAAIkQ,EAAqBntB,EAAQ1rB,KAO7Bi4D,GANAP,EAAiB9pD,OAAOjS,KAAKwd,SAASw+C,uBACtCC,EAAWj8D,KAAKqvD,4BAClB0M,EACA/7D,KAAKoe,QAAQW,UAAS,GAGN/e,KAAK2vD,kBACrBpnD,EACA+Q,EAAA+E,KAAKG,IAAG,MAIV,GAAIs9C,EAAK,CACP,IAAIlrC,EACA2rC,GADA3rC,EAAkB5wB,KAAK4wB,iBACWjD,aAAauvB,GAAY,GAC3Dsf,EAAmB5rC,EAAgB1C,oBAAoBluB,KAAKmrD,aAAa,GACzE/lD,EAAai3D,EAAWjtD,UAAUhK,WAEtC,OADApF,KAAK4wB,gBAAgB3C,cAAcsuC,GAC5B58D,EAAOwrC,YAAY,MACxBnrC,KAAK65D,eAAe6B,GAClB/7D,EAAOwpC,eAAeozB,EAAgBnxC,MAAO6wC,GAC7Ct8D,EAAOwpC,eAAeqzB,EAAiBpxC,MAAOkxC,GAC9CT,IAEF77D,KAAK65D,eAAewC,GAClB18D,EAAOspC,eAAeszB,EAAgBnxC,MAAOmxC,EAAgBl4D,KAAKypB,gBAClEnuB,EAAOspC,eAAeuzB,EAAiBpxC,MAAOoxC,EAAiBn4D,KAAKypB,mBAErE1oB,EAAW0oB,gBAEd,OAAO9tB,KAAK65D,eAAe6B,GACzBO,EACAK,EACAT,KAWV,OAJA77D,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENzE,EAAOqtC,qBAGhB+d,EAAA9oD,UAAAg0D,sBAAA,SAAsBhvD,EAA4ByuD,GAChD,IAKItmD,EACAqtD,EANA98D,EAASK,KAAKL,OACdixB,EAAkB5wB,KAAK4wB,gBACvBb,EAAS/vB,KAAKwd,SAAS89C,kBAAkBr0D,EAAWA,WAAY2pB,GACpE,IAAKb,EAAQ,OAAOpwB,EAAOqtC,oBAI3B,OAAQjd,EAAOntB,MAGb,KAAKy5C,EAAAtgC,YAAYuH,mBACf,IAAIrhB,EAA+B8tB,EAC/B7rB,EAAgB+C,EAAW/C,cAG/B,GAAIjC,EAAU8iB,aAAas3B,EAAArgC,eAAe5J,SACxC,OAAOpS,KAAK08D,6BAA6Bz6D,EAAWgF,EAAYyuD,GAGlE,IAAIvyC,EAA4B,KAGhC,GAAIjf,EAAe,CACjB,IAAKjC,EAAU4B,GAAGxB,EAAAsB,YAAY6f,SAK5B,OAJAxjB,KAAKohB,MACH/H,EAAAgI,eAAes7C,sBACf11D,EAAWA,WAAW7C,MAAOnC,EAAUke,cAElCxgB,EAAOqtC,oBAEhB7pB,EAAWnjB,KAAKwd,SAAS8yC,iCACvBruD,EACAiC,EACAlE,KAAK4wB,gBAAgBpD,KAAK9B,wBAC1BzkB,OAIG,IAAIhF,EAAU4B,GAAGxB,EAAAsB,YAAY6f,SAAU,CAI5C,IAHA,IAAIo5C,EAAgB,IAAI1gD,IACpBpQ,EAAiBmG,OAAOhQ,EAAU4F,YAAYiE,gBAC9C+wD,EAAoB/wD,EAAejF,OAC9BxG,EAAI,EAAGA,EAAIw8D,IAAqBx8D,EACvCu8D,EAAc54D,IAAI8H,EAAezL,GAAGO,KAAKoF,KAAM,MAGjD,IAAI4d,EAAiB3hB,EAAU4F,YAAYuH,UAAUjK,WACjD23D,EAAoBl5C,EAAe/c,OACnCq0D,EAAsBj0D,EAAWrB,UACjCm3D,EAAe7B,EAAoBr0D,OACnCm2D,EAAgB,IAAIjnD,MAAqBgnD,GAC7C,IAAS18D,EAAI,EAAGA,EAAIy8D,IAAqBz8D,EAAG,CAC1C,IAAI48D,EAAWr5C,EAAevjB,GAAGgE,KAC7BzD,EAAOq8D,EAASr6D,MAAQ2W,EAAA9W,SAASgP,KAAkBwrD,EAAUr8D,KAAKoF,KAAO,KACzEk3D,EAAqB78D,EAAI08D,EACzB7B,EAAoB76D,GACpB4B,EAAU4F,YAAYuH,UAAUjK,WAAW9E,GAAG0E,YAClD,IAAKm4D,EAKH,OAJAl9D,KAAKohB,MACH/H,EAAAgI,eAAeqG,+BACfzgB,EAAW7C,MAAO04D,EAAkBn4C,SAAS,IAAKo4C,EAAap4C,SAAS,KAEnEhlB,EAAOqtC,oBAEhB,GAAa,OAATpsC,GAAiBg8D,EAAc35C,IAAIriB,GAAO,CAE5C,GADIu8D,EAAeP,EAAc17D,IAAIN,GACnB,CAChBo8D,EAAc38D,GAAKL,KAAKqvD,4BAA4B6N,EAAoBC,EAAY,GACpF,IAAIrE,OAAU,EACd,KAAMA,EAAax/C,EAAA+E,KAAKo/B,iBAAiB0f,EAAcn9D,KAAKmrD,aAAa,OACjE2N,EAAax/C,EAAA+E,KAAKo/B,iBAAiB0f,EAAcn9D,KAAKmrD,aAAa,IAKvE,OAJAnrD,KAAKohB,MACH/H,EAAAgI,eAAeiuC,mCACf1rC,EAAevjB,GAAGgE,KAAKD,MAAOpE,KAAKmrD,YAAYxmC,WAAYw4C,EAAax4C,YAEnEhlB,EAAOqtC,oBAGlBmwB,EAAerE,OAEfkE,EAAc38D,GAAKL,KAAKqvD,4BAA4B6N,EAAoB5jD,EAAA+E,KAAKG,IAAG,GAChF2+C,EAAen9D,KAAKmrD,YAGtByR,EAAc54D,IAAIpD,EAAMu8D,OACnB,CACL,IAAIC,EAAep9D,KAAKwd,SAAS0xC,YAC/BtrC,EAAevjB,GAAGgE,KAClBrE,KAAK4wB,gBAAgBpD,KAAK9B,yBAE5B,IAAK0xC,EAAc,OAAOz9D,EAAOqtC,oBACjCgwB,EAAc38D,GAAKL,KAAK2vD,kBACtBuN,EACAE,EAAY,MAMlB,IAAIC,EAAwB,IAAItnD,MAAY8mD,GAC5C,IAASx8D,EAAI,EAAGA,EAAIw8D,IAAqBx8D,EAAG,CAC1C,IAAI88D,EAAelrD,OAAO2qD,EAAc17D,IAAI4K,EAAezL,GAAGO,KAAKoF,OACnEq3D,EAAsBh9D,GAAK88D,EAO7B,OALAh6C,EAAWnjB,KAAKwd,SAASmG,gBACvB1hB,EACAo7D,EACAr9D,KAAK4wB,gBAAgBpD,KAAK9B,0BAGrB1rB,KAAK65D,eAAe12C,EAAU65C,GADfh9D,KAAKL,OAAOqtC,oBAQlC7pB,EAAWnjB,KAAKwd,SAASmG,gBACvB1hB,EACA,KACAjC,KAAK4wB,gBAAgBpD,KAAK9B,yBAG9B,IAAKvI,EAAU,OAAOnjB,KAAKL,OAAOqtC,oBAGlC,IAAIivB,EAA0B,EAS9B,OARI94C,EAAStf,GAAGxB,EAAAsB,YAAYipB,YAC1BqvC,EAAWj8D,KAAKqvD,4BACdp9C,OAAOjS,KAAKwd,SAASw+C,uBACrBh8D,KAAKoe,QAAQW,UAAS,IAKnB/e,KAAKo7D,kBACVj4C,EACAlc,EAAWrB,UACXqB,EACAg1D,EACA94C,EAAS4B,aAAas3B,EAAArgC,eAAexJ,SAKzC,KAAK6pC,EAAAtgC,YAAYsP,MACf,GAAIjc,EAAoB2gB,EAAQ1rB,KAAKwf,mBAAoB,CAErD44C,EADU1sC,EAAQlsB,GAAGxB,EAAAsB,YAAYqnB,SACtBrrB,EAAOioC,UAAUsI,QAAgBngB,EAAQhF,uBAEzCprB,EAAOspC,eAAuBlZ,EAAQ3E,MAAK,GAExD,MAMA,OAJAprB,KAAKohB,MACH/H,EAAAgI,eAAei8C,uGACfr2D,EAAW7C,MAAe2rB,EAAQ1rB,KAAKsgB,YAElChlB,EAAOqtC,oBAGlB,KAAKqP,EAAAtgC,YAAYxJ,OACf,GAAInD,EAAqB2gB,EAAQ1rB,KAAKwf,mBAAoB,CACxD44C,EAAW98D,EAAO0pC,gBAAyBtZ,EAAQ5P,aAAuB4P,EAAQ1rB,KAAKypB,gBACvF,MAMA,OAJA9tB,KAAKohB,MACH/H,EAAAgI,eAAei8C,uGACfr2D,EAAW7C,MAAgB2rB,EAAQ1rB,KAAKsgB,YAEnChlB,EAAOqtC,oBAGlB,KAAKqP,EAAAtgC,YAAYoT,MAEf,GAAI/f,EADe2gB,EAAQ1rB,KACNwf,mBAAoB,CACvC,IAAIk4C,EAAiB9pD,OAAOjS,KAAKwd,SAASw+C,uBACtCC,EAAWj8D,KAAKqvD,4BAClB0M,EACA/7D,KAAKoe,QAAQW,UAAS,GAGxB09C,EAAW98D,EAAO4pC,WAChB,GACA,EACA0yB,EAAQ,EAEAlsC,EAAQX,cAElB,MAMA,OAJApvB,KAAKohB,MACH/H,EAAAgI,eAAei8C,uGACfr2D,EAAW7C,MAAe2rB,EAAQ1rB,KAAKsgB,YAElChlB,EAAOqtC,oBAGlB,KAAKqP,EAAAtgC,YAAY+S,gBACf1f,EAA6B2gB,EAAQ3gB,UACrCqtD,EAAWz8D,KAAK2vD,kBACd1oD,EAAWA,WACM8oB,EAAQ1rB,KAAI,KAI/B,MAEF,KAAKg4C,EAAAtgC,YAAYlI,MACf,OAAOlU,EAAOmsC,YAEhB,KAAKuQ,EAAAtgC,YAAYgM,SAEjB,QAKE,OAJA/nB,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENzE,EAAOqtC,oBAGlB,OAAOhtC,KAAKu9D,oBACVnuD,EACAqtD,EACAx1D,EAAWrB,UACXqB,IAII8jD,EAAA9oD,UAAAy6D,6BAAR,SACEz6D,EACAgF,EACAyuD,GAEA,IAAIxxD,EAA+B,KAI/Bs5D,EAAoBv2D,EAAW/C,cAC/B+C,EAAW/C,gBACRjC,EAAU4B,GAAGxB,EAAAsB,YAAY6f,UAC5BxjB,KAAKohB,MACH/H,EAAAgI,eAAes7C,sBACf11D,EAAW7C,MAAOnC,EAAUke,cAGhCjc,EAAgBlE,KAAKwd,SAASigD,qBAC5BxrD,OAAOhQ,EAAU4F,YAAYiE,gBAC7B0xD,EACAx9D,KAAK4wB,gBAAgBpD,KAAK9B,wBAC1BzkB,IAKJ,IAAIb,EAAO+jD,EAAAuT,YACT19D,KACAiC,EACAiC,EACA+C,EAAWrB,UACX8vD,EACAzuD,GAEF,OAAKb,IACHpG,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,sBASvB+d,EAAA9oD,UAAA07D,mBAAA,SACEvuD,EACA2tD,EACAa,EACA3P,GAKA,GAAI2P,IAAwB,MADbxuD,EAAU0d,UAMvB,OAJA9sB,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,QAEN,EAIT,IAAIm6C,EAAUnvC,EAAUmvC,QACxB,GAAIA,EAKF,OAJAv+C,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,QAEN,EAGT,IAAIy5D,EAAUzuD,EAAUkvC,mBACpB3O,EAAUvgC,EAAUwU,eAAe/c,OAGvC,OAAIk2D,EAAec,GACjB79D,KAAKohB,MACHy8C,EAAUluB,EACNt2B,EAAAgI,eAAey8C,wCACfzkD,EAAAgI,eAAeqG,+BACnBumC,EAAW7pD,MAAOy5D,EAAQl5C,WAAYo4C,EAAap4C,aAE9C,KAILo4C,EAAeptB,IAAY4O,KAC7Bv+C,KAAKohB,MACH/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAOurC,EAAQhrB,WAAYo4C,EAAap4C,aAE9C,IAOXomC,EAAA9oD,UAAAm5D,kBAAA,SACEj4C,EACA+3C,EACAjN,EACAkN,EACA4C,QADA,IAAA5C,MAAA,QACA,IAAA4C,OAAA,GAEA,IAAIhB,EAAe7B,EAAoBr0D,OACnCuI,EAAY+T,EAAS/T,UAEzB,IAAKpP,KAAK29D,mBACRvuD,EACA2tD,EACW,GAAX5B,EACAlN,GAEA,OAAOjuD,KAAKL,OAAOqtC,oBAIrB,GAAI+wB,EAAQ,CAEV,GADA9rD,QAAQkR,EAAStf,GAAGxB,EAAAsB,YAAYiuD,cAC5B5xD,KAAKirD,uBAAuB+S,SAAS76C,GAKlC,CACLnjB,KAAKirD,uBAAuBxlC,KAAKtC,GACjC,IAAI/c,EAAOpG,KAAKi+D,2BAA2B96C,EAAU+3C,EAAqBjN,EAAYkN,GAEtF,OADAn7D,KAAKirD,uBAAuBl9B,MACrB3nB,EARPpG,KAAKulB,QACHlM,EAAAgI,eAAe68C,yCACfjQ,EAAW7pD,MAAO+e,EAAShD,cAWjC,IAAIg+C,EAAuBhD,EAAU4B,EAAe,EAAIA,EACpDj0B,EAAW,IAAI/yB,MAAqBooD,GACpC/yC,EAAQ,EACR+vC,IACFryB,EAAS,GAAKqyB,EACd/vC,EAAQ,GAGV,IADA,IAAIxH,EAAiBxU,EAAUwU,eACtBvjB,EAAI,EAAGA,EAAI08D,IAAgB18D,IAAK+qB,EACvC0d,EAAS1d,GAASprB,KAAK2vD,kBACrBuL,EAAoB76D,GACpBujB,EAAevjB,GAAE,KAMrB,OADA4R,OAAOmZ,GAAS+yC,GACTn+D,KAAK65D,eAAe12C,EAAU2lB,IAI/BiiB,EAAA9oD,UAAAg8D,2BAAR,SACE96C,EACA+3C,EACAjN,EACAkN,gBAAA,IAAAA,MAAA,GAEA,IAAI4B,EAAe7B,EAAoBr0D,OACnCuI,EAAY+T,EAAS/T,UACrBwhB,EAAkB5wB,KAAK4wB,gBACvBjxB,EAASK,KAAKL,OACdkI,EAAcsb,EAASlhB,UAAU4F,YAGjCu2D,EAAextC,EAAgBpD,KAC/BwD,EAAc7N,EAAShD,aAAe,aAAegD,EAASmJ,gBAAgB3H,SAAS,IACvFvf,EAAa+d,EAAS/T,UAAUhK,WAChCooB,EAAO6uB,EAAA5uB,KAAK9rB,OAAOivB,GACvBpD,EAAKxpB,IAAG,MACRwpB,EAAKwD,YAAcA,EACnBxD,EAAKpoB,WAAaA,EAClBooB,EAAK9B,wBAA0BvI,EAASuI,wBAIxC,IAAIrc,KACJ,GAAI8rD,EAAS,CACX,IAAI13D,EAASwO,OAAOkR,EAAS1f,QAE7B,GADAwO,OAAOxO,EAAOb,MAAQy5C,EAAAtgC,YAAYlI,OAC9B2F,EAAA4Z,gBAAgB+nC,IAAY3hD,EAAA6Z,aAAaC,SAC3C9F,EAAKoE,oBACHpY,EAAA+Z,iBAAiB4nC,GACT13D,EAAQY,KAChB,YAEG,CACL,IAAIg6D,EAAY7wC,EAAKkE,eAAuBjuB,EAAQY,KAAM,QAAQ,GAClEgL,EAAKoW,KACH9lB,EAAOorC,eAAeszB,EAAUjzC,MAAO+vC,KAK7C,IADA,IAAIv3C,EAAiBxU,EAAUwU,eACtBvjB,EAAI,EAAGA,EAAI08D,IAAgB18D,EAAG,CACrC,IAAIi+D,EAAYt+D,KAAK2vD,kBACnBuL,EAAoB76D,GACpBujB,EAAevjB,GAAE,KAInB,GAAImZ,EAAA4Z,gBAAgBkrC,IAAc9kD,EAAA6Z,aAAaC,SAC7C9F,EAAKoE,oBACHpY,EAAA+Z,iBAAiB+qC,GACjB16C,EAAevjB,GACf+O,EAAUme,iBAAiBltB,QAGxB,CACL,IAAIk+D,EAAgB/wC,EAAKkE,eACvB9N,EAAevjB,GACf+O,EAAUme,iBAAiBltB,IAC1BmtB,EAAK2F,YAAYmrC,EAAW16C,EAAevjB,KAE9CgP,EAAKoW,KACH9lB,EAAOorC,eAAewzB,EAAcnzC,MAAOkzC,KAMjD1tC,EAAgBpD,KAAOA,EACvB,IAAIqxB,EAAgBzvC,EAAUwU,eAAe/c,OAC7C,IAASxG,EAAI08D,EAAc18D,EAAIw+C,IAAiBx+C,EAAG,CACjD,IAAI2uD,EAAWhvD,KAAK2vD,kBAClB19C,OAAOpK,EAAYuH,UAAUjK,WAAW9E,GAAG0E,aAC3C6e,EAAevjB,GAAE,KAIfk+D,EAAgB/wC,EAAKkE,eACvB9N,EAAevjB,GACf+O,EAAUme,iBAAiBltB,IAC1BmtB,EAAK2F,YAAY67B,EAAUprC,EAAevjB,KAE7CgP,EAAKoW,KACH9lB,EAAOorC,eAAewzB,EAAcnzC,MAAO4jC,IAK/C,IAAIwE,EAAgBvhD,OAAOpK,EAAYwH,MACvC,GAAImkD,EAAc5wD,MAAQ2W,EAAA9W,SAASsS,MAEjC,IADA,IAAIxJ,EAA8BioD,EAAejoD,WACjC3E,GAAPvG,EAAI,EAAOkL,EAAW1E,QAAQxG,EAAIuG,IAAKvG,EAAG,CACjD,IAAIqF,EAAO1F,KAAK4uD,iBAAiBrjD,EAAWlL,IAC5C,GAAImZ,EAAA4Z,gBAAgB1tB,IAAS8T,EAAA6Z,aAAaw/B,MACxCxjD,EAAKoW,KAAK/f,GACN8nB,EAAKzpB,MAAK,KAA6B,WAI/CsL,EAAKoW,KAAKzlB,KAAK4uD,iBAAiB4E,IAIlC,IAAI7iC,EAAenD,EAAKmD,aACxB,GAAIA,EAAc,KAChB,IAAwB,IAAAzD,EAAA1L,EAAAmP,EAAajnB,UAAQkY,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAA1C,IAAI8P,EAAW5P,EAAAtgB,MACdkwB,EAAY3tB,GAAGxB,EAAAsB,YAAY8tB,SAC7Bb,EAAgB3C,cAAcuD,qGAGlChE,EAAKmD,aAAe,KAOtB,OALAnD,EAAKc,WACLtuB,KAAK4wB,gBAAgBpD,KAAO4wC,EAC5Bp+D,KAAKmrD,YAAc/lD,EAGfA,GAAckU,EAAA+E,KAAKc,MAASqO,EAAKzpB,MAAK,IAOnCpE,EAAOwrC,YAAYna,EAAa3hB,EAAMjK,EAAW0oB,iBANtD9tB,KAAKohB,MACH/H,EAAAgI,eAAe2vC,+DACfnpD,EAAYuH,UAAUhK,WAAWhB,OAE5BzE,EAAOqtC,sBAMlB+d,EAAA9oD,UAAAirD,iBAAA,SAAiBsR,GAQf,IAAItyC,EAAasyC,EAAStyC,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAIuyC,EAAoBD,EAASpvD,UAC7BsvD,EAAeF,EAASr+C,aACxBw+C,EAAyBF,EAAkB76C,eAC3Cg7C,EAAgCJ,EAASv8D,UAAU4F,YAAYuH,UAAUjK,WACzE05D,EAAmBJ,EAAkBr5D,WACrC05D,EAAiBL,EAAkB3xC,SACnCiyC,EAAaP,EAAS36D,GAAGxB,EAAAsB,YAAYipB,UAGrCoyC,EAAeP,EAAkBngB,mBACjC2gB,EAAcD,EACdE,EAAeP,EAAuB93D,OACtCs4D,EAAcD,EACdH,MACAE,IACAE,GAEJ,IAAIC,EAAcntD,OAAOktD,EAAcF,GAEnCI,EAAoB,IAAItpD,MAAqBkpD,GAC7CK,EAAe,EAGf3/D,EAASK,KAAKL,OACdo/D,IACFM,EAAkB,GAAK1/D,EAAOspC,eAAe,EAAGjpC,KAAKoe,QAAQmvC,gBAC7D+R,EAAe,GAIjB,IAAK,IAAIj/D,EAAI,EAAGA,EAAI2+D,IAAgB3+D,IAAKi/D,EACvCD,EAAkBC,GAAgB3/D,EAAOspC,eAAeq2B,EAAcX,EAAuBt+D,GAAGytB,gBAElG7b,OAAOqtD,GAAgBL,GAGvB,IAAIM,EAAsB,IAAIjmD,EAAA6kC,UAAUwgB,EAAwBE,EAAkBC,GAC9EU,EAAiBd,EAAe,cACpCa,EAAoBjhB,mBAAqB4gB,GACzChzC,EAAa,IAAImwB,EAAA5wB,SACf+yC,EAASv8D,UACTu9D,EACAD,EACAf,EAAS/6D,OACT+6D,EAAS9yC,0BAEA1nB,IAAIw6D,EAAS96D,MAAQrB,EAAAsB,YAAYiuD,WAAavvD,EAAAsB,YAAYypD,UACrEoR,EAAStyC,WAAaA,EAItB,IAAIyiC,EAAmB3uD,KAAK4wB,gBAC5B5wB,KAAK4wB,gBAAkB1E,EAGvB,IAAIogB,EAAW8yB,EAAc,EACzB31D,EAAQ,IAAIsM,MAAcu2B,GAC1BmzB,EAAM,KAAOL,EAAYz6C,SAAS,IACtC,IAAStkB,EAAI,EAAGA,EAAIisC,IAAYjsC,EAAG,CACjC,IAAIqL,EAAQrL,EAAEskB,SAAS,IAAM86C,EAC7Bh2D,EAAMpJ,GAAKqL,EAEb,IAAI2D,EAAO1P,EAAOwrC,YAAY1hC,EAAM,IAClC9J,EAAOwrC,YAAY,cACjBxrC,EAAOysC,aAAa3iC,EAAO,aAEzBu1D,EACIr/D,EAAOgpC,aACLnvB,EAAAua,SAASulC,OACT35D,EAAO0pC,gBAAgB,QAAO,GAC9B1pC,EAAOioC,UAAUo3B,IAEnBr/D,EAAO0pC,gBAAgB,QAAO,MAGtC1pC,EAAOqtC,sBAET,IAAS3sC,EAAI,EAAGA,EAAI++D,IAAe/+D,IAAKi/D,EAAc,CACpD,IAAIj7D,EAAOs6D,EAAuBK,EAAe3+D,GAC7CwH,EAAc+2D,EAA8BI,EAAe3+D,GAC3D0E,EAAc8C,EAAY9C,YAC1BiqD,OAAQ,EACRjqD,EACFiqD,EAAWrvD,EAAOorC,eAAeu0B,EAC/Bt/D,KAAK2vD,kBACH5qD,EACAV,EAAI,OAMRrE,KAAKohB,MACH/H,EAAAgI,eAAeq+C,4CACf73D,EAAYzD,OAEd4qD,EAAWrvD,EAAOqtC,qBAEpB39B,EAAO1P,EAAOwrC,YAAY1hC,EAAMpJ,EAAI,IAClCgP,EACA2/C,IAEFqQ,EAAkBC,GAAgB3/D,EAAOspC,eAAeq2B,EAAcj7D,EAAKypB,gBAE7E9tB,KAAK4wB,gBAAkB+9B,EACvB18C,OAAOqtD,GAAgBH,GAEvB,IAAIhT,EAAUxsD,EAAO0tC,YACnBmyB,EACAx/D,KAAKosD,mBACHmT,EAAoB37C,eACpB27C,EAAoBn6D,WACpBm6D,EAAoBzyC,UAEtBxT,EAAAykC,mBAAmB7xB,EAAWL,kBAC9BlsB,EAAOwrC,YAAY,MACjB97B,EACA1P,EAAO8sC,WACLiyB,EACAW,EACAR,EAAiB/wC,iBAElB+wC,EAAiB/wC,iBAGtB,OADA5B,EAAWoC,SAAS3uB,EAAQwsD,GACrBjgC,GAID6+B,EAAA9oD,UAAA09D,cAAR,WAEE,IAAK3/D,KAAKurD,QAAS,CACjB,IAAI5rD,EAASK,KAAKL,OAClBK,KAAKurD,QAAU5rD,EAAOutC,UAHL,QAIH,GAEZ,EACAvtC,EAAOioC,UAAU,IAGrB,MAVmB,SAcbmjB,EAAA9oD,UAAAkrD,cAAR,WAEE,IAAKntD,KAAKwrD,QAAS,CACjB,IAAI7rD,EAASK,KAAKL,OAClBK,KAAKwrD,QAAU7rD,EAAO0tC,YAHL,WAIfrtC,KAAKosD,oBAAqB9yC,EAAA+E,KAAKQ,KAAOvF,EAAA+E,KAAKc,MAC3C,KACAxf,EAAOsrC,gBAAgBjrC,KAAK2/D,gBAC1BhgE,EAAOspC,eAAe,EAAC,KAG3BtpC,EAAOmuC,kBAVU,WAUsB,YAEzC,MAZmB,YAgBrBid,EAAA9oD,UAAA43D,eAAA,SACE12C,EACA2lB,QAAA,IAAAA,MAAA,MAEA,IAAI82B,EAAc92B,EAAWA,EAASjiC,OAAS,EAC3Ck2D,EAAe6C,EAEfX,EADe97C,EAAS/T,UAAUkvC,mBAElC4gB,EAAe/7C,EAAS/T,UAAUwU,eAAe/c,OACjDs4D,EAAcD,EACd/7C,EAAStf,GAAGxB,EAAAsB,YAAYipB,cACxBqyC,IACAE,IACApC,GAEJ9qD,OAAO2tD,GAAeX,GAEtB,IAAIt/D,EAASK,KAAKL,OAClB,IAAKK,KAAKuwD,gBAAgBptC,GAAW,OAAOxjB,EAAOqtC,oBACnD,IAAI5nC,EAAa+d,EAAS/T,UAAUhK,WAChCy6D,EAAe18C,EAAStf,GAAGxB,EAAAsB,YAAY6rD,eAG3C,GAAIoQ,EAAcT,EAAa,CACxBr2B,KACHA,EAAW,IAAI/yB,MAAMopD,IACZt4D,OAAS,GAKpB,IAHA,IAAI+c,EAAiBT,EAAS/T,UAAUwU,eACpCk8C,EAAiB38C,EAASlhB,UAAU4F,YAAYuH,UAAUjK,WAC1D46D,GAA0B,EACrB1/D,EAAI08D,EAAc18D,EAAI6+D,IAAgB7+D,EAAG,CAChD,IAAI0E,EAAc+6D,EAAez/D,GAAG0E,YACpC,GAAsB,OAAhBA,IAAwBwU,EAAA5W,oBAAoBoC,EAAYnC,MAAQ,CACpEm9D,GAA0B,EAC1B,OAGJ,GAAIA,EACF,IAAS1/D,EAAI08D,EAAc18D,EAAI6+D,IAAgB7+D,EAC7CyoC,EAASrjB,KACPzlB,KAAK2vD,kBACSmQ,EAAez/D,GAAG0E,YAC9B6e,EAAevjB,GAAE,UAMlB,CACL,IAASA,EAAI08D,EAAc18D,EAAI6+D,IAAgB7+D,EAC7CyoC,EAASrjB,KAAK7B,EAAevjB,GAAGu9C,aAAaj+C,IAE/C,IAAKkgE,EAAc,CACjB,IAAIrB,EAAWr7C,EAEf,GADAA,EAAWnjB,KAAKktD,iBAAiB/pC,IAC5BnjB,KAAKuwD,gBAAgBptC,GAAW,OAAOxjB,EAAOqtC,oBACnD7pB,EAASqK,KAAK9pB,MAAQ86D,EAAShxC,KAAK9pB,MACpC1D,KAAKgqB,QAAQzN,gBAAgBvY,IAAImf,EAAShD,aAAcgD,GACxD,IAAIi5C,EAAmBh3D,EAAW0oB,eAElC,OADA9tB,KAAKmrD,YAAc/lD,EACZzF,EAAOwrC,YAAY,MACxBxrC,EAAOsrC,gBAAgBjrC,KAAK2/D,gBAAiBhgE,EAAOioC,UAAUm1B,IAC9Dp9D,EAAO8sC,WAAWtpB,EAAShD,aAAc2oB,EAAUszB,IAClDA,KAOT,OADAp8D,KAAKmrD,YAAc/lD,EACfy6D,EAAqBlgE,EAAOgtC,iBAAiBxpB,EAAShD,aAAc2oB,EAAU1jC,EAAW0oB,gBACnFnuB,EAAO8sC,WAAWtpB,EAAShD,aAAc2oB,EAAU1jC,EAAW0oB,iBAK1Ei9B,EAAA9oD,UAAAs7D,oBAAA,SACEnuD,EACAqtD,EACAvB,EACAjN,EACAkN,QAAA,IAAAA,MAAA,GAEA,IAAI4B,EAAe7B,EAAoBr0D,OAEvC,IAAK7G,KAAK29D,mBACRvuD,EACA2tD,EACW,GAAX5B,EACAlN,GAEA,OAAOjuD,KAAKL,OAAOqtC,oBAGrB,IAAImxB,EAAuBhD,EAAU4B,EAAe,EAAIA,EACpDj0B,EAAW,IAAI/yB,MAAqBooD,GACpC/yC,EAAQ,EACR+vC,IACFryB,EAAS,GAAKqyB,EACd/vC,EAAQ,GAGV,IADA,IAAIxH,EAAiBxU,EAAUwU,eACtBvjB,EAAI,EAAGA,EAAI08D,IAAgB18D,IAAK+qB,EACvC0d,EAAS1d,GAASprB,KAAK2vD,kBACrBuL,EAAoB76D,GACpBujB,EAAevjB,GAAE,KAMrB,OADA4R,OAAOmZ,GAAS+yC,GACTn+D,KAAKggE,iBAAiB5wD,EAAWqtD,EAAU3zB,IAIpDiiB,EAAA9oD,UAAA+9D,iBAAA,SACE5wD,EACAqtD,EACA3zB,QAAA,IAAAA,MAAA,MAEA,IAAI82B,EAAc92B,EAAWA,EAASjiC,OAAS,EAC3Ck2D,EAAe6C,EAEfX,EADe7vD,EAAUkvC,mBAEzB4gB,EAAe9vD,EAAUwU,eAAe/c,OACxCs4D,EAAcD,EACd9vD,EAAU0d,aACVmyC,IACAE,IACApC,GAEJ9qD,OAAO2tD,GAAeX,GAEtBj/D,KAAKosD,mBAAmBh9C,EAAUwU,eAAgBxU,EAAUhK,WAAYgK,EAAU0d,UAClF,IAAIntB,EAASK,KAAKL,OAGlB,GAAIigE,EAAcT,EAAa,CACxBr2B,KACHA,EAAW,IAAI/yB,MAAMopD,IACZt4D,OAAS,GAGpB,IADA,IAAI+c,EAAiBxU,EAAUwU,eACtBvjB,EAAI08D,EAAc18D,EAAI6+D,IAAgB7+D,EAC7CyoC,EAASrjB,KAAK7B,EAAevjB,GAAGu9C,aAAaj+C,IAIjD,IAAIyF,EAAagK,EAAUhK,WAE3B,OADApF,KAAKmrD,YAAc/lD,EACZzF,EAAOwrC,YAAY,MACxBxrC,EAAOsrC,gBAAgBjrC,KAAK2/D,gBAC1BhgE,EAAOioC,UAAUm1B,IAEnBp9D,EAAOktC,mBAAmB4vB,EAAU3zB,EAAU15B,EAAU2f,sBACvD3pB,EAAW0oB,iBAGhBi9B,EAAA9oD,UAAAi0D,uBAAA,SAAuBjvD,EAA6ByuD,GAIlD,IAHA,IAAI1tD,EAAcf,EAAWe,YACzBi4D,EAAiBj4D,EAAYnB,OAC7Bq5D,EAAQ,IAAInqD,MAAqBkqD,KAC5B5/D,EAAI,EAAGA,EAAI4/D,IAAkB5/D,EACpC6/D,EAAM7/D,GAAKL,KAAK2vD,kBACd3nD,EAAY3H,GACZiZ,EAAA+E,KAAKc,UAWT,OANA+gD,EAAMD,GAAkBjgE,KAAK2vD,kBAC3B3nD,EAAYi4D,GACZvK,OAIK11D,KAAKL,OAAOwrC,YAAY,KAAM+0B,EAAOlgE,KAAKmrD,YAAYr9B,iBAG/Di9B,EAAA9oD,UAAAk0D,+BAAA,SAA+BlvD,EAAqCyuD,GAClE,IAAI3lC,EAAS/vB,KAAKwd,SAAS2iD,qBAAqBl5D,EAAYjH,KAAK4wB,iBACjE,IAAKb,EAAQ,OAAO/vB,KAAKL,OAAOqtC,oBAChC,OAAQjd,EAAOntB,MACb,KAAKy5C,EAAAtgC,YAAYlI,MACf,IAAI4nD,EAAcz7D,KAAK4wB,gBAAgBpD,KAAK3pB,GAAE,MAC1Cw4D,EAAqBtsC,EAAQE,eAAeosB,EAAAjjC,aAAaY,YAAayhD,GAC1E,IAAKY,EAKH,OAJAr8D,KAAKohB,MACH/H,EAAAgI,eAAeu6C,qCACf30D,EAAWA,WAAW7C,MAAe2rB,EAAQ5P,cAExCngB,KAAKL,OAAOqtC,oBAErB,IAAImuB,EAAUn7D,KAAK2vD,kBACjB1oD,EAAWA,WACH8oB,EAAQ1rB,KAAI,KAItB,OAAOrE,KAAKo7D,kBAAkBiB,GAC5Bp1D,EAAWsB,mBACVtB,EAAYk0D,GAOnB,OAJAn7D,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,qBAGrB+d,EAAA9oD,UAAAm0D,0BAAA,SAA0BnvD,EAAgCyuD,GACxD,IAAI7tD,EAAcZ,EAAWY,YACzBjH,EAAOiH,EAAYjH,KACnBskB,GAActkB,EAAKoF,KAAKa,OACxBjG,EAAKoF,KACL,aAAe,IAAMhG,KAAKsrD,cAAczkD,OAAO8d,SAAS,IACxDiM,EAAkB5wB,KAAK4wB,gBACvB3uB,EAAY,IAAIo6C,EAAAt1B,kBAClB/mB,KAAKgqB,QACL9E,EACA0L,EAAgBzQ,aAAe9d,EAAA4W,gBAAkBiM,EACjDrd,EACA,KACAw0C,EAAArgC,eAAepY,MAEb4pB,EAAOoD,EAAgBpD,KACvBrK,EAAWnjB,KAAKqwD,kCAClBpuD,KAEAurB,EAAK9B,wBACL8B,EACA3lB,GAEF,IAAKsb,EAAU,OAAOnjB,KAAKL,OAAOqtC,oBAClChtC,KAAKmrD,YAAchoC,EAAS/T,UAAU/K,KAGtC,IAAI+mB,EAAQprB,KAAK2xD,yBAAyBxuC,GAC1C,OAAOiI,EAAQ,EACXprB,KAAKL,OAAOqtC,oBACZhtC,KAAKL,OAAOioC,UAAUxc,IAG5B2/B,EAAA9oD,UAAAq0D,qBAAA,WAEE,OADat2D,KAAKL,OACJmsC,aAQhBif,EAAA9oD,UAAAo0D,4BAAA,SACEpvD,EACAyuD,EACA0K,GAEA,IAAIzgE,EAASK,KAAKL,OACdixB,EAAkB5wB,KAAK4wB,gBAG3B,OAAQ3pB,EAAWrE,MACjB,KAAK2W,EAAA9W,SAASK,KACZ,IAAIsb,EAAUpe,KAAKoe,QAInB,OAHKs3C,EAAehZ,iBAClB18C,KAAKmrD,YAAc/sC,EAAQW,WAEtBX,EAAQkB,SACX3f,EAAOqoC,UAAU,GACjBroC,EAAOioC,UAAU,GAEvB,KAAKruB,EAAA9W,SAASM,KAEZ,OADA/C,KAAKmrD,YAAc7xC,EAAA+E,KAAKW,KACjBrf,EAAOioC,UAAU,GAE1B,KAAKruB,EAAA9W,SAASO,MAEZ,OADAhD,KAAKmrD,YAAc7xC,EAAA+E,KAAKW,KACjBrf,EAAOioC,UAAU,GAE1B,KAAKruB,EAAA9W,SAASiS,KAEZ,IADI8Y,EAAOoD,EAAgBpD,MAClB3pB,GAAE,MAET,GADIw8D,EAAa7yC,EAAKsE,eAAe,QAGnC,OADA9xB,KAAKmrD,YAAckV,EAAWh8D,KACvB1E,EAAOspC,eAAeo3B,EAAWj1C,MAAOi1C,EAAWh8D,KAAKypB,gBAGnE,GAAI8C,EAAgB/sB,GAAGxB,EAAAsB,YAAYipB,UAAW,CAC5C,IAAInpB,EAASwO,OAAO2e,EAAgBntB,QACpCwO,OAAOxO,EAAOb,MAAQy5C,EAAAtgC,YAAYlI,OAClC,IAAIiZ,EAAmBrpB,EAAQY,KAC/B,OAAIusB,EAAgB/sB,GAAGxB,EAAAsB,YAAYoQ,eAC5ByZ,EAAK3pB,GAAE,KACV2pB,EAAKxpB,IAAG,IAERhE,KAAKmrD,YAAcr+B,EACZntB,EAAOwpC,eAAe,EAC3BnpC,KAAK+wD,wBAA+BttD,EAAQwD,MAIlDjH,KAAKmrD,YAAcr+B,EACZntB,EAAOspC,eAAe,EAAGnc,EAASgB,iBAO3C,OALA9tB,KAAKohB,MACH/H,EAAAgI,eAAei/C,+CACfr5D,EAAW7C,OAEbpE,KAAKmrD,YAAcnrD,KAAKoe,QAAQW,UACzBpf,EAAOqtC,oBAEhB,KAAKzzB,EAAA9W,SAASW,MACZ,IAAIoqB,EAEE6yC,EADN,IADI7yC,EAAOoD,EAAgBpD,MAClB3pB,GAAE,MAET,GADIw8D,EAAa7yC,EAAKsE,eAAe,QAInC,GADIxC,EADkBrd,OAAOouD,EAAWh8D,KAAKq4C,gBAClBptB,KAGzB,OADAtvB,KAAKmrD,YAAc77B,EAAKjrB,KACjB1E,EAAOspC,eAAeo3B,EAAWj1C,MAAOkE,EAAKjrB,KAAKypB,gBAI/D,GAAI8C,EAAgB/sB,GAAGxB,EAAAsB,YAAYipB,UAAW,CAC5C,IAEI0C,EAFA7rB,EAASwO,OAAO2e,EAAgBntB,QAGpC,GAFAwO,OAAOxO,EAAOb,MAAQy5C,EAAAtgC,YAAYlI,OAC9Byb,EAAe7rB,EAAQ6rB,KACjB,CACR,IAAIixC,EAAYjxC,EAAKjrB,KAErB,OADArE,KAAKmrD,YAAcoV,EACZ5gE,EAAOspC,eAAe,EAAGs3B,EAAUzyC,iBAQ9C,OALA9tB,KAAKohB,MACH/H,EAAAgI,eAAem/C,iDACfv5D,EAAW7C,OAEbpE,KAAKmrD,YAAcnrD,KAAKoe,QAAQW,UACzBpf,EAAOqtC,oBAKlB,IAAIjd,EAAS/vB,KAAKwd,SAASgF,kBACzBvb,EACAjH,KAAKkrD,aAAet6B,GAEtB,IAAKb,EAAQ,OAAOpwB,EAAOqtC,oBAE3B,OAAQjd,EAAOntB,MACb,KAAKy5C,EAAAtgC,YAAYsP,MACf,IAAIo1C,EAAoB1wC,EAAQ1rB,KAEhC,GADA4N,OAAOwuD,GAAannD,EAAA+E,KAAKc,MACb4Q,EAAQlsB,GAAGxB,EAAAsB,YAAYqnB,SACjC,OAAOhrB,KAAKy1D,sBAA6B1lC,EAAQ2lC,EAAgB0K,GAEnE,IAAIzzC,EAAqBoD,EAAQ3E,MAGjC,OAFAnZ,OAAO0a,GAAc,GACrB3sB,KAAKmrD,YAAcsV,EACZzgE,KAAKL,OAAOspC,eAAetc,EAAY8zC,EAAU3yC,gBAE1D,KAAKuuB,EAAAtgC,YAAYxJ,OACf,IAAKvS,KAAK8uD,cAAsB/+B,GAC9B,OAAO/vB,KAAKL,OAAOqtC,oBAErB,IAAIqC,EAAsBtf,EAAQ1rB,KAElC,OADA4N,OAAOo9B,GAAc/1B,EAAA+E,KAAKc,MACb4Q,EAAQlsB,GAAGxB,EAAAsB,YAAYqnB,SAC3BhrB,KAAKy1D,sBAA8B1lC,EAAQ2lC,EAAgB0K,IAEpEpgE,KAAKmrD,YAAc9b,EACZrvC,KAAKL,OAAO0pC,gBAAyBtZ,EAAQ5P,aAAckvB,EAAWvhB,iBAE/E,KAAKuuB,EAAAtgC,YAAY2O,UACf,OAAKqF,EAAOlsB,GAAGxB,EAAAsB,YAAYypD,WAQ3BptD,KAAKmrD,YAAc7xC,EAAA+E,KAAKG,IACRuR,EAAQlsB,GAAGxB,EAAAsB,YAAYqnB,SAC9BhrB,KAAKL,OAAOioC,UAAsB7X,EAAQpF,eAE5C3qB,KAAKL,OAAO0pC,gBAA4BtZ,EAAQ5P,aAAY,KAXjEngB,KAAKohB,MACH/H,EAAAgI,eAAeq/C,+HACfz5D,EAAW7C,OAEbpE,KAAKmrD,YAAc7xC,EAAA+E,KAAKG,IACjBxe,KAAKL,OAAOqtC,qBAQvB,KAAKqP,EAAAtgC,YAAYuH,mBACf,IAAIH,EAAWnjB,KAAKwd,SAASmG,gBACRoM,EACnB,KACAa,EAAgBpD,KAAK9B,yBAEvB,IAAMvI,IAAYnjB,KAAKuwD,gBAAgBptC,GAAY,OAAOxjB,EAAOqtC,oBACjE,IAAI5hB,EAAQprB,KAAK2xD,yBAAyBxuC,GAE1C,OADAnjB,KAAKmrD,YAAchoC,EAAS/T,UAAU/K,KAC/BrE,KAAKL,OAAOioC,UAAUxc,GAOjC,OAJAprB,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,qBAGrB+d,EAAA9oD,UAAAs0D,4BAAA,SACEtvD,EACAyuD,GAEA,IAAI/1D,EAASK,KAAKL,OAIdyG,EAAOpG,KAAKqvD,4BAA4BpoD,EAAWA,WAAYjH,KAAKoe,QAAQW,UAAS,GACrF1a,EAAOrE,KAAKmrD,YACZniD,EAAShJ,KAAKwd,SAAS0xC,YAAYjoD,EAAW+B,QAElD,OADAhJ,KAAKmrD,YAAc7xC,EAAA+E,KAAKW,KACnBhW,EACE3E,EAAKR,GAAE,OAAyBmF,EAAOnF,GAAE,KAC5CQ,EAAKs4C,gBAAgB7sB,eAAe9mB,GAClCrJ,EAAOgpC,aACLtkC,EAAKR,GAAE,IACH2V,EAAAua,SAASM,MACT7a,EAAAua,SAASK,MACbhuB,EACA/B,EAAKu5C,aAAaj+C,IAEpBA,EAAOioC,UAAU,GACnBjoC,EAAOioC,UAAUvjC,EAAKyrB,eAAe9mB,GAAQ,GAAQ,EAAI,GAXzCrJ,EAAOqtC,qBAc7B+d,EAAA9oD,UAAAu0D,yBAAA,SACEvvD,EACAyuD,EACAiL,QAAA,IAAAA,OAAA,GAEA,IAAIhhE,EAASK,KAAKL,OAElB,OAAQsH,EAAWuM,aACjB,KAAK+F,EAAAjG,YAAYG,MACfxB,QAAQ0uD,GACR,IAAIxjB,EAAYuY,EAAehZ,eAC/B,OACES,GACAA,EAAUl7C,WAAajC,KAAKgqB,QAAQnN,eAE7B7c,KAAK4gE,oBACV3uD,OAAOkrC,EAAUj5C,eAAe,GACP+C,EAAYP,oBACrC,EACAO,IAGJjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENzE,EAAOqtC,qBAEhB,KAAKzzB,EAAAjG,YAAYU,MACf,IAAI6sD,EAAsC55D,EAAY3F,MAItD,OAHIq/D,IACFE,GAAcA,GAEZnL,GAAkBp8C,EAAA+E,KAAKY,IAClBtf,EAAOyoC,UAAey4B,IAE/B7gE,KAAKmrD,YAAc7xC,EAAA+E,KAAKa,IACjBvf,EAAO2oC,UAAUu4B,IAE1B,KAAKtnD,EAAAjG,YAAYa,QACf,IAAI2sD,EAAsC75D,EAAY3F,MAOtD,OANIq/D,IACFG,EAAWC,QACT1hD,QAAQ,GACRyhD,IAGIpL,EAAe9yD,MAIrB,OACE,GAAIo+D,UAAUF,GAAW,OAAOnhE,EAAOioC,UAAUsI,QAAQ4wB,IACzD,MAEF,OACE,GAAIG,UAAUH,GAAW,OAAOnhE,EAAOioC,UAAUsI,QAAQ4wB,IACzD,MAEF,OACE,GAAII,WAAWJ,GAAW,OAAOnhE,EAAOioC,UAAUsI,QAAQ4wB,IAC1D,MAEF,OACE,GAAIK,WAAWL,GAAW,OAAOnhE,EAAOioC,UAAUsI,QAAQ4wB,IAC1D,MAEF,OACE,GAAIM,WAAWN,GAAW,OAAOnhE,EAAOioC,UAAUsI,QAAQ4wB,IAC1D,MAEF,OACE,GAAIO,WAAWP,GAAW,OAAOnhE,EAAOioC,UAAUsI,QAAQ4wB,IAC1D,MAEF,QACE,GAAIQ,YAAYR,GAAW,OAAOnhE,EAAOioC,UAAUsI,QAAQ4wB,IAC3D,MAEF,OACE,IAAK9gE,KAAKoe,QAAQkB,SAAU,CAC1B,GAAI8hD,WAAWN,GAAW,OAAOnhE,EAAOioC,UAAUsI,QAAQ4wB,IAC1D,MAEF,OAAOnhE,EAAOqoC,UAAUkI,QAAQ4wB,GAAW3wB,SAAS2wB,IAEtD,OACE,IAAK9gE,KAAKoe,QAAQkB,SAAU,CAC1B,GAAI+hD,WAAWP,GAAW,OAAOnhE,EAAOioC,UAAUsI,QAAQ4wB,IAC1D,MAEF,OAAOnhE,EAAOqoC,UAAUkI,QAAQ4wB,GAAW3wB,SAAS2wB,IAEtD,OACA,OACE,OAAOnhE,EAAOqoC,UAAUkI,QAAQ4wB,GAAW3wB,SAAS2wB,IAEtD,QACE,GAAIS,WAAWT,GAAW,OAAOnhE,EAAOyoC,UAAUo5B,WAAWV,IAC7D,MAEF,QACE,GAAIW,WAAWX,GAAW,OAAOnhE,EAAO2oC,UAAUo5B,WAAWZ,IAC7D,MAEF,QACE,MAEF,QAEE,OADA7uD,QAAO,GACAtS,EAAOqtC,oBAMlB,OAAIo0B,WAAWN,IACb9gE,KAAKmrD,YAAc7xC,EAAA+E,KAAKG,IACjB7e,EAAOioC,UAAUsI,QAAQ4wB,KACvBO,WAAWP,IACpB9gE,KAAKmrD,YAAc7xC,EAAA+E,KAAKQ,IACjBlf,EAAOioC,UAAUsI,QAAQ4wB,MAEhC9gE,KAAKmrD,YAAc7xC,EAAA+E,KAAKI,IACjB9e,EAAOqoC,UAAUkI,QAAQ4wB,GAAW3wB,SAAS2wB,KAGxD,KAAKvnD,EAAAjG,YAAYmB,OAEf,OADAxC,QAAQ0uD,GACD3gE,KAAK2hE,qBAA8C16D,GAE5D,KAAKsS,EAAAjG,YAAYe,OAEf,OADApC,QAAQ0uD,GACD3gE,KAAK4hE,qBAA8C36D,EAAYyuD,GAS1E,OALA11D,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAEbpE,KAAKmrD,YAAcuK,EACZ/1D,EAAOqtC,qBAIhB+d,EAAA9oD,UAAA4/D,mBAAA,SAAmBC,GACjB,IAKIC,EALA/3C,EAAUhqB,KAAKgqB,QACf9M,EAAQ8M,EAAQ9M,MAChBI,EAAe0M,EAAQ1M,aAEvBR,EAAiB7K,OAAO+X,EAAQlN,gBAIhC8yB,EAAW5vC,KAAKqrD,eACpB,GAAIzb,EAAS3sB,IAAI6+C,GACfC,EAA+BnyB,EAAS1uC,IAAI4gE,OAGvC,CACL,IAAIj7D,EAASi7D,EAAYj7D,OACrBm7D,EAAcllD,EAAeyS,oBAAsB,GAAK,EACxD0yC,EAAYD,EAAsB,EAATn7D,EAEzBq7D,OAAG,EACHxsD,OAAG,EAEHwH,GACFglD,EAAM,IAAI5uB,WAAWh2B,EAAe2kD,GACpCvsD,EAAM4H,EACN5a,EAAAy/D,SAAShY,EAAAiY,aAAapiE,KAAM8c,GAAiBolD,EAAKl4C,EAAQzM,gBAE1D2kD,EAAM,IAAI5uB,WAAW2uB,GACrBvsD,EAAM,GAERhT,EAAAy/D,SAASt7D,EAAQq7D,EAAKxsD,EAAMoH,EAAeuT,SAAS,WACpD3a,GAAOssD,EACP,IAAK,IAAI3hE,EAAI,EAAGA,EAAIwG,IAAUxG,EAC5BqC,EAAA2/D,SAASP,EAAY5vD,WAAW7R,GAAI6hE,EAAKxsD,GAAOrV,GAAK,IAEvD0hE,EAAgB/hE,KAAKyxD,iBAAiByQ,GACtCtyB,EAAS5rC,IAAI89D,EAAaC,GAE5B,IAAIO,EAAeP,EAAc77B,OAIjC,OAHIhpB,IAAOolD,EAAezZ,QAAQyZ,EAAcjjD,QAAQ/B,KAExDtd,KAAKmrD,YAAcruC,EAAezY,KAC9BrE,KAAKoe,QAAQkB,SACRtf,KAAKL,OAAOqoC,UAAUkI,QAAQoyB,GAAenyB,SAASmyB,KAE7DrwD,OAAOovD,WAAWiB,IACXtiE,KAAKL,OAAOioC,UAAUsI,QAAQoyB,MAIzCvX,EAAA9oD,UAAA0/D,qBAAA,SAAqB16D,GACnB,OAAOjH,KAAK6hE,mBAAmB56D,EAAW3F,QAI5CypD,EAAA9oD,UAAAsgE,kBAAA,SAAkBC,EAAmB94D,GACnC,IASIw4D,EACAxsD,EAVAsU,EAAUhqB,KAAKgqB,QACf9M,EAAQ8M,EAAQ9M,MAChBI,EAAe0M,EAAQ1M,aAEvBzW,EAAS6C,EAAO7C,OAChBid,EAAW0+C,EAAY1+C,SACvB2+C,EAAa57D,EAASid,EACtB4+C,EAAgB1iE,KAAKoe,QAAQW,UAAU+E,SAMvC6+C,EAAiB1wD,OAAO+X,EAAQpN,qBAChCgmD,EAAoBD,EAAepzC,oBAAsB,GAAK,EAC9DszC,EAAkB,GAAM,GAAKC,IAAIF,EAAmBH,EAAa,GACjEvlD,GACFglD,EAAM,IAAI5uB,WAAWh2B,EAAeulD,GACpCntD,EAAM4H,EACN5a,EAAAy/D,SAAShY,EAAAiY,aAAapiE,KAAM2iE,GAAiBT,EAAKl4C,EAAQzM,gBAE1D2kD,EAAM,IAAI5uB,WAAWuvB,GACrBntD,EAAM,GAERhT,EAAAy/D,SAASM,EAAYP,EAAKxsD,EAAMitD,EAAetyC,SAAS,eACxD3a,GAAOktD,EACP,IAAItV,EAAakV,EAAY10C,eAC7B,OAAQw/B,GACN,OACE,OAAQxpC,GACN,KAAK,EACH,IAAK,IAAIzjB,EAAI,EAAGA,EAAIwG,IAAUxG,EAAG,CAC/B,IAAIiB,EAAQoI,EAAOrJ,GACnB4R,OAAOuH,EAAA+d,kBAAkBj2B,IAAUgsD,GACnCr7C,OAAOuH,EAAA4Z,gBAAgB9xB,IAAUkY,EAAA6Z,aAAa6C,OAC9CxzB,EAAAqgE,QAAQvpD,EAAA2c,iBAAiB70B,GAAQ4gE,EAAKxsD,GACtCA,GAAO,EAET,MAEF,KAAK,EACH,IAASrV,EAAI,EAAGA,EAAIwG,IAAUxG,EAAG,CAC3BiB,EAAQoI,EAAOrJ,GACnB4R,OAAOuH,EAAA+d,kBAAkBj2B,IAAUgsD,GACnCr7C,OAAOuH,EAAA4Z,gBAAgB9xB,IAAUkY,EAAA6Z,aAAa6C,OAC9CxzB,EAAA2/D,SAAS7oD,EAAA2c,iBAAiB70B,GAAQ4gE,EAAKxsD,GACvCA,GAAO,EAET,MAEF,KAAK,EACH,IAASrV,EAAI,EAAGA,EAAIwG,IAAUxG,EAAG,CAC3BiB,EAAQoI,EAAOrJ,GACnB4R,OAAOuH,EAAA+d,kBAAkBj2B,IAAUgsD,GACnCr7C,OAAOuH,EAAA4Z,gBAAgB9xB,IAAUkY,EAAA6Z,aAAa6C,OAC9CxzB,EAAAy/D,SAAS3oD,EAAA2c,iBAAiB70B,GAAQ4gE,EAAKxsD,GACvCA,GAAO,EAET,MAEF,QAASzD,QAAO,GAElB,MAEF,OACE,IAAS5R,EAAI,EAAGA,EAAIwG,IAAUxG,EAAG,CAC3BiB,EAAQoI,EAAOrJ,GACnB4R,OAAOuH,EAAA+d,kBAAkBj2B,IAAUgsD,GACnCr7C,OAAOuH,EAAA4Z,gBAAgB9xB,IAAUkY,EAAA6Z,aAAa6C,OAC9CxzB,EAAAsgE,SAAS3jD,QAAQ7F,EAAAge,oBAAoBl2B,GAAQkY,EAAA08B,qBAAqB50C,IAAS4gE,EAAKxsD,GAChFA,GAAO,EAET,MAEF,OACE,IAASrV,EAAI,EAAGA,EAAIwG,IAAUxG,EAAG,CAC3BiB,EAAQoI,EAAOrJ,GACnB4R,OAAOuH,EAAA+d,kBAAkBj2B,IAAUgsD,GACnCr7C,OAAOuH,EAAA4Z,gBAAgB9xB,IAAUkY,EAAA6Z,aAAa6C,OAC9CxzB,EAAAugE,SAASzpD,EAAAie,iBAAiBn2B,GAAQ4gE,EAAKxsD,GACvCA,GAAO,EAET,MAEF,OACE,IAASrV,EAAI,EAAGA,EAAIwG,IAAUxG,EAAG,CAC3BiB,EAAQoI,EAAOrJ,GACnB4R,OAAOuH,EAAA+d,kBAAkBj2B,IAAUgsD,GACnCr7C,OAAOuH,EAAA4Z,gBAAgB9xB,IAAUkY,EAAA6Z,aAAa6C,OAC9CxzB,EAAAwgE,SAAS1pD,EAAAke,iBAAiBp2B,GAAQ4gE,EAAKxsD,GACvCA,GAAO,EAET,MAEF,QAASzD,QAAO,GAElB,IACIkxD,EADgBnjE,KAAKyxD,iBAAiByQ,GACTh8B,OAC7BhpB,IAAOimD,EAAeta,QAAQsa,EAAc9jD,QAAQ/B,KAGxD,IAAIT,EAAiB5K,OAAO+X,EAAQnN,gBAChCumD,EAAgBnxD,OAAOjS,KAAKwd,SAAS0F,aAAarG,GAAkB2lD,KACpEa,EAAmBD,EAAc7zC,oBAAsB,GAAK,EAC5DrS,GACFglD,EAAM,IAAI5uB,WAAWh2B,EAAe+lD,GACpC3tD,EAAM4H,EACN5a,EAAAy/D,SAAShY,EAAAiY,aAAapiE,KAAMojE,GAAgBlB,EAAKl4C,EAAQzM,gBAEzD2kD,EAAM,IAAI5uB,WAAW+vB,GACrB3tD,EAAM,GAER,IACI4tD,EADetjE,KAAKyxD,iBAAiByQ,GACVh8B,OAG/B,OAFIhpB,IAAOomD,EAAcza,QAAQya,EAAajkD,QAAQ/B,KACtDtd,KAAKmrD,YAAciY,EAAc/+D,KACZ,GAAjBq+D,GACFhgE,EAAAsgE,SAASG,EAAcjB,EAAKxsD,EAAM0tD,EAAc/yC,SAAS,YACzD3tB,EAAAy/D,SAASt7D,EAAQq7D,EAAKxsD,EAAM0tD,EAAc/yC,SAAS,YAC5CrwB,KAAKL,OAAOqoC,UAAUkI,QAAQozB,GAAcnzB,SAASmzB,MAE5DrxD,OAAOovD,WAAW8B,IAClBzgE,EAAAy/D,SAASjyB,QAAQizB,GAAejB,EAAKxsD,EAAM0tD,EAAc/yC,SAAS,YAClE3tB,EAAAy/D,SAASt7D,EAAQq7D,EAAKxsD,EAAM0tD,EAAc/yC,SAAS,YACnDpe,OAAOovD,WAAWiC,IACXtjE,KAAKL,OAAOioC,UAAUsI,QAAQozB,MAIzCvY,EAAA9oD,UAAA2+D,oBAAA,SACE4B,EACAx6D,EACAu7D,EACAtV,GAUA,IARA,IAAItuD,EAASK,KAAKL,OAGdkH,EAASmB,EAAYnB,OACrB28D,EAAiB,IAAIztD,MAAqBlP,GAC1C48D,EAAiB,IAAI1tD,MAAqBlP,GAC1C68D,EAAoBlB,EAAY10C,eAChC61C,GAAW,EACNtjE,EAAI,EAAGA,EAAIwG,IAAUxG,EAAG,CAC/B,IAAI+F,EAAO4B,EAAY3H,GACnBL,KAAK2vD,kBAA8B3nD,EAAY3H,GAAImiE,EAAW,KAC9DA,EAAY5kB,aAAaj+C,GAC7B6jE,EAAenjE,GAAK+F,EAChBu9D,IACFv9D,EAAOzG,EAAOsyC,qBAAqBuxB,EAAenjE,IAC9CmZ,EAAA4Z,gBAAgBhtB,IAASoT,EAAA6Z,aAAa6C,OACxCjkB,OAAOuH,EAAA+d,kBAAkBnxB,IAASs9D,GAClCD,EAAepjE,GAAK+F,IAEhBm9D,GACFvjE,KAAKulB,QACHlM,EAAAgI,eAAeuuC,4DACf3B,EAAW7pD,OAGfu/D,GAAW,IAMjB,GAAIA,EAAU,OAAO3jE,KAAKuiE,kBAAkBC,EAAaiB,GAGzD,IAAI5mD,EAAiB5K,OAAOjS,KAAKgqB,QAAQnN,gBACzC,IAAKA,GAAkBA,EAAeja,MAAQy5C,EAAAtgC,YAAY0G,gBAAiB,OAAO9iB,EAAOqtC,oBACzF,IAAIo2B,EAAgBpjE,KAAKwd,SAAS0F,aAA6BrG,GAAkB2lD,IACjF,IAAKY,EAAe,OAAOzjE,EAAOqtC,oBAClC,IAAI42B,EAAYR,EAAc/+D,KAG9BrE,KAAKmrD,YAAcyY,EACnB,IAAIvW,EAAS+V,EAAcnzC,eAAeosB,EAAAjjC,aAAaa,aAAa,GACpE,IAAKozC,EAKH,OAJArtD,KAAKohB,MACH/H,EAAAgI,eAAes6C,+CACf1N,EAAW7pD,MAAOg/D,EAAcjjD,cAE3BxgB,EAAOqtC,oBAEhB,IAAI62B,EAAkBD,EAAU91C,eAC5B8C,EAAkB5wB,KAAK4wB,gBACvByjC,EAAYzjC,EAAgBjD,aAAai2C,GAAW,GACpDhT,EAAQ,IAAI76C,MAAqB,EAAIlP,GACrCukB,EAAQ,EACZwlC,EAAMxlC,KAAWzrB,EAAOorC,eAAespB,EAAUjpC,MAC/CprB,KAAK65D,eAAe5nD,OAAOmxD,EAAc5zC,sBACvC7vB,EAAOioC,UAAU,GACjBjoC,EAAOioC,UAAU/gC,MAGrB,IAASxG,EAAI,EAAGA,EAAIwG,IAAUxG,EAC5BuwD,EAAMxlC,KAAWprB,KAAK65D,eAAexM,GACnC1tD,EAAOspC,eAAeorB,EAAUjpC,MAAOy4C,GACvClkE,EAAOioC,UAAUvnC,GACjBmjE,EAAenjE,KAOnB,OAJA4R,OAAOmZ,EAAQ,GAAKwlC,EAAM/pD,QAC1B+pD,EAAMxlC,GAASzrB,EAAOspC,eAAeorB,EAAUjpC,MAAOy4C,GACtDjzC,EAAgB3C,cAAcomC,GAC9Br0D,KAAKmrD,YAAcyY,EACZjkE,EAAOwrC,YAAY,KAAMylB,EAAOiT,IAGzC9Y,EAAA9oD,UAAA2/D,qBAAA,SAAqB36D,EAAqCyuD,GACxD,IAAI/1D,EAASK,KAAKL,OAGd+8C,EAAiBgZ,EAAehZ,eACpC,IAAKA,GAAkBA,EAAe74C,GAAGxB,EAAAsB,YAAY+iB,UAKnD,OAJA1mB,KAAKohB,MACH/H,EAAAgI,eAAeiuC,mCACfroD,EAAW7C,MAAO,WAAYsxD,EAAe/wC,YAExChlB,EAAOqtC,oBAIhB,IAAI+gB,EAAOrR,EAAeltB,oBAC1B,GAAIu+B,EAAM,CACR,GAAIA,EAAK3+C,UAAUkvC,mBAKjB,OAJAt+C,KAAKohB,MACH/H,EAAAgI,eAAeyiD,sDACf78D,EAAW7C,MAAOs4C,EAAe/3B,YAE5BhlB,EAAOqtC,oBAEhB,GAAI+gB,EAAKlqD,GAAGxB,EAAAsB,YAAYm9C,SAKtB,OAJA9gD,KAAKohB,MACH/H,EAAAgI,eAAe0iD,mFACf98D,EAAW7C,MAAOs4C,EAAe/3B,YAE5BhlB,EAAOqtC,oBAEhB,GAAI+gB,EAAKlqD,GAAGxB,EAAAsB,YAAYo9C,WAKtB,OAJA/gD,KAAKohB,MACH/H,EAAAgI,eAAe2iD,qFACf/8D,EAAW7C,MAAOs4C,EAAe/3B,YAE5BhlB,EAAOqtC,oBAKlB,IAAIvjC,EAAQxC,EAAWwC,MACnB6iC,EAAW7iC,EAAM5C,OACjB6C,EAASzC,EAAWyC,OACpBsC,EAAU0wC,EAAe1wC,QACzBi4D,GAAY,EACZ/D,EAAQ,IAAInqD,MAAqBu2B,EAAW,GAC5C+nB,EAAYr0D,KAAK4wB,gBAAgBjD,aAAa3tB,KAAKoe,QAAQW,WAC/D9M,OAAOq6B,GAAY5iC,EAAO7C,QAC1B,IAAK,IAAIxG,EAAI,EAAGuG,EAAI0lC,EAAUjsC,EAAIuG,IAAKvG,EAAG,CACxC,IAAIwW,EAAS7K,EAAUA,EAAQ9K,IAAIuI,EAAMpJ,GAAG2F,MAAQ,KACpD,GAAK6Q,GAAUA,EAAOjU,MAAQy5C,EAAAtgC,YAAYoT,MAA1C,CAQA,IAAI9qB,EAAewS,EAAQxS,KAC3B67D,EAAM7/D,EAAI,GAAKL,KAAKL,OAAOiqC,YACzBvlC,EAAKyf,SACL9jB,KAAKL,OAAOspC,eAAeorB,EAAUjpC,MAAOprB,KAAKoe,QAAQmvC,gBACzDvtD,KAAK2vD,kBAAkBjmD,EAAOrJ,GAAYwW,EAAQxS,KAAI,KACtDA,EAAKypB,eACGjX,EAAQuY,mBAbhBpvB,KAAKohB,MACH/H,EAAAgI,eAAe6iD,oCACfz6D,EAAMpJ,GAAG+D,MAAOqF,EAAMpJ,GAAG2F,KAAM02C,EAAe/3B,YAEhDs/C,GAAY,EAahB,OADAjkE,KAAKmrD,YAAczO,EAAer4C,KAAKs4C,gBACnCsnB,EAAkBtkE,EAAOqtC,qBAG7BkzB,EAAM,GAAKvgE,EAAOorC,eAChBspB,EAAUjpC,MACV++B,EAAAga,gBAAgBnkE,KAAM08C,EAAgBz1C,IAIxCi5D,EAAMA,EAAMr5D,OAAS,GAAKlH,EAAOspC,eAAeorB,EAAUjpC,MAAOprB,KAAKoe,QAAQmvC,gBAEvE5tD,EAAOwrC,YAAY,KAAM+0B,EAAOlgE,KAAKoe,QAAQmvC,kBAGtDxC,EAAA9oD,UAAAw0D,qBAAA,SAAqBxvD,EAA2ByuD,GAC9C,IAAI/1D,EAASK,KAAKL,OACdye,EAAUpe,KAAKoe,QACfwS,EAAkB5wB,KAAK4wB,gBAGvBb,EAAS/vB,KAAKwd,SAAS89C,kBACzBr0D,EAAWA,WACX2pB,GAEF,IAAKb,EAAQ,OAAOpwB,EAAOqtC,oBAC3B,GAAIjd,EAAOntB,MAAQy5C,EAAAtgC,YAAY0G,gBAK7B,OAJAziB,KAAKohB,MACH/H,EAAAgI,eAAe+iD,yEACfn9D,EAAWA,WAAW7C,OAEjBpE,KAAKL,OAAOqtC,oBAErB,IAGI0P,EAqBAt2C,EAxBAigB,EAAiC0J,EACjCs0C,EAA8B,KAC9BngE,EAAgB+C,EAAW/C,cAoB/B,KAbEmgE,GAJCngE,GACoD,QAApDw4C,EAAiBgZ,EAAehZ,iBACjCA,EAAe74C,GAAGxB,EAAAsB,YAAY6f,SAEdxjB,KAAKwd,SAAS0F,aAC5BmD,EACAq2B,EAAex4C,cACf0sB,EAAgBpD,KAAK9B,yBAGP1rB,KAAKwd,SAAS6zC,8BAC5BhrC,EACAniB,EACA0sB,EAAgBpD,KAAK9B,wBACrBzkB,IAGgB,OAAOtH,EAAOqtC,oBAKlC,IAAIs3B,EAAqCD,EACrC70C,EAAuC,KAC3C,GAEE,GADAA,EAAsB80C,EAAqB90C,oBAClB,YAClB80C,EAAuBA,EAAqBh1C,MAcrD,OAVElpB,EADEopB,EACKxvB,KAAKo7D,kBAAkB5rC,EAAqBvoB,EAAWrB,UAAWqB,EACvEmX,EAAQW,UAAU6+B,aAAaj+C,IAK1BK,KAAKukE,aAAaF,EAAep9D,GAG1CjH,KAAKmrD,YAAckZ,EAAchgE,KAC1B+B,GAGT2kD,EAAA9oD,UAAAy0D,+BAAA,SACEzvD,EACAyuD,GAGA,OAAO11D,KAAK2vD,kBACV1oD,EAAWA,WACXyuD,EAAc,MAWlB3K,EAAA9oD,UAAA00D,gCAAA,SACE6N,EACA9O,EACA0K,GAEA,IAAIzgE,EAASK,KAAKL,OAEdowB,EAAS/vB,KAAKwd,SAASinD,sBAAsBD,EAAgBxkE,KAAK4wB,iBACtE,IAAKb,EAAQ,OAAOpwB,EAAOqtC,oBAE3B,OAAQjd,EAAOntB,MACb,KAAKy5C,EAAAtgC,YAAYxJ,OACf,IAAKvS,KAAK8uD,cAAsB/+B,GAC9B,OAAOpwB,EAAOqtC,oBAEhB,IAAIqC,EAAsBtf,EAAQ1rB,KAElC,OADA4N,OAAOo9B,GAAc/1B,EAAA+E,KAAKc,MACb4Q,EAAQlsB,GAAGxB,EAAAsB,YAAYqnB,SAC3BhrB,KAAKy1D,sBAA8B1lC,EAAQ2lC,EAAgB0K,IAEpEpgE,KAAKmrD,YAAc9b,EACZ1vC,EAAO0pC,gBAAyBtZ,EAAQ5P,aAAckvB,EAAWvhB,iBAE1E,KAAKuuB,EAAAtgC,YAAY2O,UACf,IAAIjnB,EAAqBssB,EAAQtsB,OAEjC,OADAwO,OAAkB,OAAXxO,GAAmBA,EAAOb,MAAQy5C,EAAAtgC,YAAY0O,MAChDzqB,KAAK6vD,YAAkBpsD,IAI5BzD,KAAKmrD,YAAc7xC,EAAA+E,KAAKG,IACRuR,EAAQlsB,GAAGxB,EAAAsB,YAAYqnB,SAC9BrrB,EAAOioC,UAAsB7X,EAAQpF,eAEvChrB,EAAO0pC,gBAA4BtZ,EAAQ5P,aAAY,KAP5DngB,KAAKmrD,YAAc7xC,EAAA+E,KAAKG,IACjBxe,KAAKL,OAAOqtC,qBAQvB,KAAKqP,EAAAtgC,YAAYoT,MACf,IAAI4sC,EAAiB9pD,OAAOjS,KAAKwd,SAASw+C,uBAC1C/pD,OAAe8d,EAAQX,cAAgB,GACvC,IAAI6sC,EAAWj8D,KAAKqvD,4BAClB0M,EACA/7D,KAAKoe,QAAQW,UAAS,GAIxB,OADA/e,KAAKmrD,YAAsBp7B,EAAQ1rB,KAC5B1E,EAAO4pC,WACJxZ,EAAQ1rB,KAAKyf,SACbiM,EAAQ1rB,KAAKR,GAAG,GACxBo4D,EACQlsC,EAAQ1rB,KAAKypB,eACbiC,EAAQX,cAGpB,KAAKitB,EAAAtgC,YAAYgM,SACf,IAAI9lB,EAAuB8tB,EAAQ/H,gBACnC,GAAI/lB,EAAW,CACb,IAAIkhB,EAAWnjB,KAAKwd,SAASmG,gBAAgB1hB,EAAW,MACxD,IAAKkhB,EAAU,OAAOxjB,EAAOqtC,oBAC7B,IAAI59B,EAAY+T,EAAS/T,UACzB,IAAKpP,KAAK29D,mBACRvuD,EACA,EACA+T,EAAStf,GAAGxB,EAAAsB,YAAYipB,UACxB43C,GAEA,OAAO7kE,EAAOqtC,oBAEhB,IAAI+wB,EAA8D,IAApD56C,EAAS2D,eAAiBu1B,EAAArgC,eAAexJ,QACvD,GAAI2Q,EAAStf,GAAGxB,EAAAsB,YAAYipB,UAAW,CACjCnpB,EAASwO,OAAOkR,EAAS1f,QAC7BwO,OAAOxO,EAAOb,MAAQy5C,EAAAtgC,YAAYlI,OAC9BkoD,EAAiB9pD,OAAOjS,KAAKwd,SAASw+C,uBACtCC,EAAWj8D,KAAKqvD,4BAClB0M,EACA/7D,KAAKoe,QAAQW,UAAS,GAIxB,OADA/e,KAAKmrD,YAAc/7C,EAAUhK,WACtBpF,KAAKo7D,kBAAkBj4C,KAAcqhD,EAAgBvI,EAAU8B,GAGtE,OADA/9D,KAAKmrD,YAAc/7C,EAAUhK,WACtBpF,KAAKo7D,kBAAkBj4C,KAAcqhD,EAAgB,EAAGzG,GAOjE,OAJA/9D,KAAKohB,MACH/H,EAAAgI,eAAe6iD,oCACfM,EAAepgE,MAAkB2rB,EAAQ7K,WAAuB6K,EAAQtsB,OAAOkhB,YAE1EhlB,EAAOqtC,oBAQpB,OAJAhtC,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfg/C,EAAepgE,OAEVzE,EAAOqtC,qBAGhB+d,EAAA9oD,UAAA20D,yBAAA,SAAyB3vD,EAA+ByuD,GACtD,IAAIprD,EAASrD,EAAWqD,OACpBC,EAAStD,EAAWsD,OACpBqmB,EAAkB5wB,KAAK4wB,gBACvBC,EAAaD,EAAgBpD,KAE7BwlC,EAAWhzD,KAAKizD,cAClBjzD,KAAKqvD,4BAA4BpoD,EAAWoD,UAAWiP,EAAA+E,KAAKW,KAAI,GAChEhf,KAAKmrD,aAGP,IACGnrD,KAAKoe,QAAQmB,eACdvf,KAAK4wB,gBAAgB7sB,MAAM1B,EAAAsB,YAAY6f,QAAUnhB,EAAAsB,YAAYkwD,iBAC7D,CAEA,IAAIC,EAAkB9zD,KAAKL,OAAOsyC,qBAAqB+gB,GACvD,GACEx5C,EAAA4Z,gBAAgB0gC,IAAoBt6C,EAAA6Z,aAAa6C,OACf,GAAlC1c,EAAA+d,kBAAkBu8B,GAElB,OAAOt6C,EAAA2c,iBAAiB29B,GACpB9zD,KAAKqvD,4BAA4B/kD,EAAQorD,EAAc,GACvD11D,KAAKqvD,4BAA4B9kD,EAAQmrD,EAAc,GAI3D1C,EAAWhzD,KAAKizD,cACdjzD,KAAKqvD,4BAA4BpoD,EAAWoD,UAAWiP,EAAA+E,KAAKW,KAAI,GAChEhf,KAAKmrD,aAKX,IAAIuZ,EAAa7zC,EAAWO,OAC5BR,EAAgBpD,KAAOk3C,EACvB,IAAIC,EAAa3kE,KAAKqvD,4BAA4B/kD,EAAQorD,EAAc,GACpEkP,EAAa5kE,KAAKmrD,YACtBuZ,EAAWnzC,OAEX,IAAIszC,EAAah0C,EAAWO,OAC5BR,EAAgBpD,KAAOq3C,EACvB,IAAIC,EAAa9kE,KAAKqvD,4BAA4B9kD,EAAQmrD,EAAc,GACpEqP,EAAa/kE,KAAKmrD,YACtBv6B,EAAgBpD,KAAOq3C,EAAWtzC,OAElCV,EAAWgC,cAAc6xC,EAAYG,GAErC,IAAI/L,EAAax/C,EAAA+E,KAAKo/B,iBAAiBmnB,EAAYG,GAAY,GAC/D,OAAKjM,GAQL6L,EAAa3kE,KAAKk3D,kBAChByN,EACAC,EACA9L,EAAU,IAGVxuD,GAEFw6D,EAAa9kE,KAAKk3D,kBAChB4N,EACAC,EACAjM,EAAU,IAGVvuD,GAEFvK,KAAKmrD,YAAc2N,EACZ94D,KAAKL,OAAOisC,SAASonB,EAAU2R,EAAYG,KAxBhD9kE,KAAKohB,MACH/H,EAAAgI,eAAeiuC,mCACfroD,EAAW7C,MAAOwgE,EAAWjgD,WAAYogD,EAAWpgD,YAEtD3kB,KAAKmrD,YAAcuK,EACZ11D,KAAKL,OAAOqtC,sBAsBvB+d,EAAA9oD,UAAA40D,8BAAA,SAA8B5vD,EAAoCyuD,GAChE,IAAI/1D,EAASK,KAAKL,OACdixB,EAAkB5wB,KAAK4wB,gBAGvBo0C,EAAWhlE,KAAK2vD,kBAClB1oD,EAAWiE,QACXwqD,GAAkBp8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLk3C,EAAc,KAKpB,GAAIl8C,EAAA4Z,gBAAgB4xC,IAAaxrD,EAAA6Z,aAAayF,YAAa,OAAOksC,EAClE,IAEIv8B,EACA6kB,EACA2X,EAJA9Z,EAAcnrD,KAAKmrD,YAMvB,OAAQlkD,EAAWI,UACjB,KAAK/E,EAAAC,MAAM8/C,UAGT,GAAIriD,KAAKmrD,YAAYtnD,GAAE,KAKrB,OAJA7D,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAGrB,OAAQme,EAAYvoD,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACE6lC,EAAKjvB,EAAAua,SAASq8B,OACd9C,EAAU,EACV2X,EAAYtlE,EAAOioC,UAAU,GAC7B,MAEF,OACA,OAEEa,GADIrqB,EAAUpe,KAAKoe,SACNkB,SACT9F,EAAAua,SAASolC,OACT3/C,EAAAua,SAASq8B,OACb9C,EAAalvC,EAAQmvC,eACrB0X,EAAY9Z,EAAYtN,YAAYl+C,GACpC,MAEF,OACA,OACE8oC,EAAKjvB,EAAAua,SAASolC,OACd7L,EAAU,EACV2X,EAAYtlE,EAAOqoC,UAAU,GAC7B,MAEF,QACES,EAAKjvB,EAAAua,SAASqlC,OACd9L,EAAU,EACV2X,EAAYtlE,EAAOyoC,UAAU,GAC7B,MAEF,QACEK,EAAKjvB,EAAAua,SAASslC,OACd/L,EAAU,EACV2X,EAAYtlE,EAAO2oC,UAAU,GAC7B,MAEF,QAEE,OADAr2B,QAAO,GACAtS,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAM+/C,YAGT,GAAItiD,KAAKmrD,YAAYtnD,GAAE,KAKrB,OAJA7D,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENpE,KAAKL,OAAOqtC,oBAGrB,OAAQme,EAAYvoD,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACE6lC,EAAKjvB,EAAAua,SAASulC,OACdhM,EAAU,EACV2X,EAAYtlE,EAAOioC,UAAU,GAC7B,MAEF,OACA,OACE,IAAIxpB,EACJqqB,GADIrqB,EAAUpe,KAAKoe,SACNkB,SACT9F,EAAAua,SAASwlC,OACT//C,EAAAua,SAASulC,OACbhM,EAAalvC,EAAQmvC,eACrB0X,EAAY9Z,EAAYtN,YAAYl+C,GACpC,MAEF,OACA,OACE8oC,EAAKjvB,EAAAua,SAASwlC,OACdjM,EAAU,EACV2X,EAAYtlE,EAAOqoC,UAAU,GAC7B,MAEF,QACES,EAAKjvB,EAAAua,SAASylC,OACdlM,EAAU,EACV2X,EAAYtlE,EAAOyoC,UAAU,GAC7B,MAEF,QACEK,EAAKjvB,EAAAua,SAAS0lC,OACdnM,EAAU,EACV2X,EAAYtlE,EAAO2oC,UAAU,GAC7B,MAEF,QAEE,OADAr2B,QAAO,GACAtS,EAAOqtC,oBAGlB,MAEF,QAEE,OADA/6B,QAAO,GACAtS,EAAOqtC,oBAKlB,GAAI0oB,GAAkBp8C,EAAA+E,KAAKc,KACzB,OAAOnf,KAAKw1D,2BAA2BvuD,EAAWiE,QAChDvL,EAAOgpC,aAAaF,EAClBu8B,EACAC,IAEF,GAKJ,IAAI5Q,EAAYzjC,EAAgBjD,aAAaw9B,GAAa,GACtD+Z,EAAWllE,KAAKw1D,2BAA2BvuD,EAAWiE,QACxDvL,EAAOgpC,aAAaF,EAClBzoC,KAAKL,OAAOspC,eAAeorB,EAAUjpC,MAAOkiC,GAC5C2X,IAEF,GAEFjlE,KAAKmrD,YAAcl5C,OAAOoiD,GAAWhwD,KACrCusB,EAAgB3C,cAAqBomC,GAErC,IAAI1nC,EAAqB0nC,EAAWjpC,MACpC,OAAOzrB,EAAOwrC,YAAY,MACxBxrC,EAAOorC,eAAepe,EAAYq4C,GAClCE,EACAvlE,EAAOspC,eAAetc,EAAY2gC,IACjCA,IAGLvC,EAAA9oD,UAAA60D,6BAAA,SACE7vD,EACAyuD,GAEA,IAEItvD,EAFAzG,EAASK,KAAKL,OACdo5D,GAAW,EAGf,OAAQ9xD,EAAWI,UACjB,KAAK/E,EAAAC,MAAM+Y,KAWT,GAVAlV,EAAOpG,KAAK2vD,kBACV1oD,EAAWiE,QACXwqD,GAAkBp8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLk3C,EAAc,KAMhB11D,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiB18C,KAAKmrD,YAAYzO,eAGpC,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAakC,MAC5C,CACZlV,EAAOpG,KAAK+6D,qBAAqB3qC,EAAUnpB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENzE,EAAOqtC,oBAIhB,MAEF,KAAK1qC,EAAAC,MAAMiZ,MACT,GAAIvU,EAAWiE,QAAQtI,MAAQ2W,EAAA9W,SAASI,UAClBoE,EAAWiE,QAASsI,aAAe+F,EAAAjG,YAAYa,SAC/ClN,EAAWiE,QAASsI,aAAe+F,EAAAjG,YAAYU,OAClE,CAED5N,EAAOpG,KAAKw2D,yBAA4CvvD,EAAWiE,QAASwqD,GAAgB,GAExF11D,KAAKoe,QAAQmQ,WAAWvuB,KAAK2yD,iBAAiBvsD,EAAMa,EAAW7C,OACnE,MAaF,GAVAgC,EAAOpG,KAAK2vD,kBACV1oD,EAAWiE,QACXwqD,GAAkBp8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLk3C,EAAc,KAMhB11D,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiB18C,KAAKmrD,YAAYzO,eAGpC,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAaoC,OAC5C,CACZpV,EAAOpG,KAAK+6D,qBAAqB3qC,EAAUnpB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENzE,EAAOqtC,oBAGhB,OAAQhtC,KAAKmrD,YAAYvoD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASulC,OAAQ35D,EAAOioC,UAAU,GAAIxhC,GACjE,MAEF,OACA,OACEA,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASwlC,OACT//C,EAAAua,SAASulC,OACbt5D,KAAKmrD,YAAYvN,aAAaj+C,GAC9ByG,GAEF,MAEF,OACA,OACEA,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASwlC,OAAQ55D,EAAOqoC,UAAU,GAAI5hC,GACjE,MAEF,QACEA,EAAOzG,EAAO6oC,YAAYhvB,EAAAyd,QAAQkuC,OAAQ/+D,GAC1C,MAEF,QACEA,EAAOzG,EAAO6oC,YAAYhvB,EAAAyd,QAAQmuC,OAAQh/D,GAC1C,MAEF,QACE6L,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAM8/C,UAYT,GAXA0W,GAAW,EACX3yD,EAAOpG,KAAK2vD,kBACV1oD,EAAWiE,QACXwqD,GAAkBp8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLk3C,EAAc,KAMhB11D,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiB18C,KAAKmrD,YAAYzO,eAGpC,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAamC,YAC5C,CACZnV,EAAOpG,KAAK+6D,qBAAqB3qC,EAAUnpB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENzE,EAAOqtC,oBAGhB,OAAQhtC,KAAKmrD,YAAYvoD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASq8B,OAAQhqD,EAAMpG,KAAKL,OAAOioC,UAAU,IACxE,MAEF,OACA,OACExhC,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASolC,OACT3/C,EAAAua,SAASq8B,OACbhqD,EACApG,KAAKmrD,YAAYtN,YAAYl+C,IAE/B,MAEF,OACA,OACEyG,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASolC,OAAQ/yD,EAAMzG,EAAOqoC,UAAU,IACnE,MAEF,QACE5hC,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASqlC,OAAQhzD,EAAMzG,EAAOyoC,UAAU,IACnE,MAEF,QACEhiC,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASslC,OAAQjzD,EAAMzG,EAAO2oC,UAAU,IACnE,MAEF,QACEr2B,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAM+/C,YAYT,GAXAyW,GAAW,EACX3yD,EAAOpG,KAAK2vD,kBACV1oD,EAAWiE,QACXwqD,GAAkBp8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLk3C,EAAc,KAMhB11D,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAE5C,GADI64C,EAAiB18C,KAAKmrD,YAAYzO,eAGpC,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAaqC,YAC5C,CACZrV,EAAOpG,KAAK+6D,qBAAqB3qC,EAAUnpB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENzE,EAAOqtC,oBAGhB,OAAQhtC,KAAKmrD,YAAYvoD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASulC,OAAQlzD,EAAMzG,EAAOioC,UAAU,IACnE,MAEF,OACA,OACExhC,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAASwlC,OACT//C,EAAAua,SAASulC,OACblzD,EACApG,KAAKmrD,YAAYtN,YAAYl+C,IAE/B,MAEF,OACA,OACEyG,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASwlC,OAAQnzD,EAAMzG,EAAOqoC,UAAU,IACnE,MAEF,QACE5hC,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASylC,OAAQpzD,EAAMzG,EAAOyoC,UAAU,IACnE,MAEF,QACEhiC,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS0lC,OAAQrzD,EAAMzG,EAAO2oC,UAAU,IACnE,MAEF,QACEr2B,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAMsgD,YAWT,GAVAz8C,EAAOpG,KAAK2vD,kBACV1oD,EAAWiE,QACXwqD,GAAkBp8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLk3C,EAAc,KAMhB11D,KAAKmrD,YAAYtnD,GAAE,KAErB,GADI64C,EAAiB18C,KAAKmrD,YAAYzO,eAGpC,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAasC,KAC5C,CACZtV,EAAOpG,KAAK+6D,qBAAqB3qC,EAAUnpB,EAAWiE,QAAS9E,EAAMa,GACrE,MAMNb,EAAOpG,KAAKqlE,eAAej/D,EAAMpG,KAAKmrD,aACtCnrD,KAAKmrD,YAAc7xC,EAAA+E,KAAKW,KACxB,MAEF,KAAK1c,EAAAC,MAAMugD,MAaT,GAZA18C,EAAOpG,KAAK2vD,kBACV1oD,EAAWiE,QACXwqD,GAAkBp8C,EAAA+E,KAAKc,KACnB7F,EAAA+E,KAAKG,IACLk3C,EAAe7xD,GAAE,GACfyV,EAAA+E,KAAKI,IACLi3C,EAAc,KAMlB11D,KAAKmrD,YAAYtnD,GAAE,KAAuB,CAC5C,IAAI64C,EAEEtsB,EADN,GADIssB,EAAiB18C,KAAKmrD,YAAYzO,eAGpC,GADItsB,EAAWssB,EAAezsB,eAAeosB,EAAAjjC,aAAauC,aAC5C,CACZvV,EAAOpG,KAAK+6D,qBAAqB3qC,EAAUnpB,EAAWiE,QAAS9E,EAAMa,GACrE,MAOJ,OAJAjH,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENzE,EAAOqtC,oBAUhB,OARE5mC,EAAOpG,KAAKk3D,kBACV9wD,EACApG,KAAKmrD,YAAanrD,KAAKmrD,YAAYkP,QAAO,IAE1CpzD,EAAWiE,SAIPlL,KAAKmrD,YAAYvoD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEwD,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS8mC,OAAQz0D,EAAMzG,EAAOioC,WAAW,IACpE,MAEF,OACA,OACExhC,EAAOzG,EAAOgpC,aACZ3oC,KAAKoe,QAAQkB,SACT9F,EAAAua,SAAS+mC,OACTthD,EAAAua,SAAS8mC,OACbz0D,EACApG,KAAKmrD,YAAYrN,eAAen+C,IAElC,MAEF,OACA,OACEyG,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAAS+mC,OAAQ10D,EAAMzG,EAAOqoC,WAAW,GAAI,IACxE,MAEF,QACE/1B,QAAO,GACP7L,EAAOzG,EAAOqtC,oBAGlB,MAEF,KAAK1qC,EAAAC,MAAM0+C,OAKT,OAJAjhD,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAENzE,EAAOqtC,oBAEhB,QAEE,OADA/6B,QAAO,GACAtS,EAAOqtC,oBAGlB,OAAO+rB,EACH/4D,KAAKw1D,2BAA2BvuD,EAAWiE,QAAS9E,EAAMsvD,GAAkBp8C,EAAA+E,KAAKc,MACjF/Y,GAIN2kD,EAAA9oD,UAAAk1D,uBAAA,SAAuB/wD,EAAqB/B,GAC1C,IAAI1E,EAASK,KAAKL,OACd6tB,EAAOxtB,KAAK4wB,gBAAgBpD,KAChC,OAAQnpB,EAAKzB,MACX,OACM4qB,EAAK2F,YAAY/sB,EAAM/B,KACzB+B,EAAOpG,KAAKoe,QAAQwB,WAAU,GAC1BjgB,EAAO6oC,YAAYhvB,EAAAyd,QAAQquC,cAAel/D,GAC1CzG,EAAOgpC,aAAanvB,EAAAua,SAAS2C,OAC3B/2B,EAAOgpC,aAAanvB,EAAAua,SAASwC,OAC3BnwB,EACAzG,EAAOioC,UAAU,KAEnBjoC,EAAOioC,UAAU,MAGzB,MAEF,OACMpa,EAAK2F,YAAY/sB,EAAM/B,KACzB+B,EAAOpG,KAAKoe,QAAQwB,WAAU,GAC1BjgB,EAAO6oC,YAAYhvB,EAAAyd,QAAQsuC,eAAgBn/D,GAC3CzG,EAAOgpC,aAAanvB,EAAAua,SAAS2C,OAC3B/2B,EAAOgpC,aAAanvB,EAAAua,SAASwC,OAC3BnwB,EACAzG,EAAOioC,UAAU,KAEnBjoC,EAAOioC,UAAU,MAGzB,MAEF,OACMpa,EAAK2F,YAAY/sB,EAAM/B,KACzB+B,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASsC,OAClCjwB,EACAzG,EAAOioC,UAAU,OAGrB,MAEF,OACMpa,EAAK2F,YAAY/sB,EAAM/B,KACzB+B,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASsC,OAClCjwB,EACAzG,EAAOioC,UAAU,SAGrB,MAEF,QACMpa,EAAK2F,YAAY/sB,EAAM/B,KACzB+B,EAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASsC,OAClCjwB,EACAzG,EAAOioC,UAAU,KAMzB,OAAOxhC,GAIT2kD,EAAA9oD,UAAAojE,eAAA,SAAej/D,EAAqB/B,GAClC,IAAI1E,EAASK,KAAKL,OAClB,OAAQ0E,EAAKzB,MACX,OACA,OACA,OACA,OACA,QACEwD,EAAOpG,KAAKm3D,uBAAuB/wD,EAAM/B,GAG3C,OACA,OACE,OAAO1E,EAAO6oC,YAAYhvB,EAAAyd,QAAQC,OAAQ9wB,GAE5C,OACA,OACE,OAAOzG,EAAO6oC,YAAYhvB,EAAAyd,QAAQE,OAAQ/wB,GAE5C,OACA,OACE,OAAOzG,EAAO6oC,YAAyB,IAAbnkC,EAAKoyB,KAAajd,EAAAyd,QAAQE,OAAS3d,EAAAyd,QAAQC,OAAQ9wB,GAE/E,QACE,OAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASG,MAAO9tB,EAAMzG,EAAOyoC,UAAU,IAEpE,QACE,OAAOzoC,EAAOgpC,aAAanvB,EAAAua,SAASI,MAAO/tB,EAAMzG,EAAO2oC,UAAU,IAEpE,QAEE,OADAr2B,QAAO,GACAtS,EAAOioC,UAAU,KAM9BmjB,EAAA9oD,UAAAgxD,cAAA,SAAc7sD,EAAqB/B,GACjC,IAAI1E,EAASK,KAAKL,OAClB,OAAQ0E,EAAKzB,MACX,OACA,OACA,OACA,OACA,QACEwD,EAAOpG,KAAKm3D,uBAAuB/wD,EAAM/B,GAG3C,OACA,OACE,OAAO+B,EAET,OACA,OACE,OAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASM,MAAOjuB,EAAMzG,EAAOqoC,UAAU,IAEpE,OACA,OACE,OAAoB,IAAb3jC,EAAKoyB,KACR92B,EAAOgpC,aAAanvB,EAAAua,SAASM,MAAOjuB,EAAMzG,EAAOqoC,UAAU,IAC3D5hC,EAEN,QACE,OAAOzG,EAAOgpC,aAAanvB,EAAAua,SAASO,MAAOluB,EAAMzG,EAAOyoC,UAAU,IAEpE,QACE,OAAOzoC,EAAOgpC,aAAanvB,EAAAua,SAASQ,MAAOnuB,EAAMzG,EAAO2oC,UAAU,IAEpE,QAEE,OADAr2B,QAAO,GACAtS,EAAOioC,UAAU,KAM9BmjB,EAAA9oD,UAAAsiE,aAAA,SAAaF,EAAsBpW,WAC7BtuD,EAASK,KAAKL,OACdixB,EAAkB5wB,KAAK4wB,gBACvB28B,EAAiBvtD,KAAKoe,QAAQmvC,eAG9B8G,EAAYzjC,EAAgBjD,aAAa02C,EAAchgE,MAAM,GAC7DgxD,EAAe,IAAIt/C,MAQvB,GAPAs/C,EAAa5vC,KACX9lB,EAAOorC,eAAespB,EAAUjpC,MAC9B++B,EAAAga,gBAAgBnkE,KAAMqkE,EAAepW,KAKrCoW,EAAcr4D,YAChB,IAAmB,IAAAkhB,EAAA1L,EAAA6iD,EAAcr4D,QAAQtC,UAAQkY,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAA9C,IAAI7K,EAAM+K,EAAAtgB,MACb,GAAIuV,EAAOjU,MAAQy5C,EAAAtgC,YAAYoT,MAAO,CACpC,IAAIoB,EAAe1Z,EACf2uD,EAAYj1C,EAAMlsB,KAClBohE,EAAkBD,EAAU13C,eAC5B43C,EAAmBn1C,EAAMtuB,UAAU4F,YAEvC,GADAoK,QAAQse,EAAMxsB,MAAM1B,EAAAsB,YAAYkmB,QAC5B67C,EAAiB3gE,YACnBswD,EAAa5vC,KAAK9lB,EAAOiqC,YAAY47B,EAAU1hD,SAC7CnkB,EAAOspC,eAAeorB,EAAUjpC,MAAOmiC,GACvCvtD,KAAK2vD,kBACH+V,EAAiB3gE,YACjBygE,EAAS,KAIXC,EACAl1C,EAAMnB,mBAEH,CAEL,IAAI3X,EAAoC8Y,EAAMtuB,UAAU4F,YAAa4P,eACrE49C,EAAa5vC,KAAK9lB,EAAOiqC,YAAY47B,EAAU1hD,SAC7CnkB,EAAOspC,eAAeorB,EAAUjpC,MAAOmiC,GACvC91C,GAAkB,EACd9X,EAAOspC,eAAe,EAAIxxB,EAAgBguD,GAC1CD,EAAU5nB,aAAaj+C,GACzB8lE,EACFl1C,EAAMnB,mHAchB,OANAimC,EAAa5vC,KACX9lB,EAAOspC,eAAeorB,EAAUjpC,MAAOmiC,IAGzC38B,EAAgB3C,cAAcomC,GAC9Br0D,KAAKmrD,YAAckZ,EAAchgE,KAC1B1E,EAAOwrC,YAAY,KAAMkqB,EAAc9H,IAIhDxC,EAAA9oD,UAAA8uD,wBAAA,SAAwBsT,EAAsBpW,GAE5C,IAAItuD,EAASK,KAAKL,OACd4tD,EAAiBvtD,KAAKoe,QAAQmvC,eAElC,OADAvtD,KAAKmrD,YAAckZ,EAAchgE,KAC1B1E,EAAOisC,SACE,GAAd2hB,EACI5tD,EAAOgpC,aACLnvB,EAAAua,SAASM,MACT10B,EAAOspC,eAAe,EAAC,GACvBtpC,EAAOqoC,UAAU,IAEnBroC,EAAOspC,eAAe,EAAC,GAC3BtpC,EAAOspC,eAAe,EAAGskB,GACzB5tD,EAAOwpC,eAAe,EACpBnpC,KAAKukE,aAAaF,EAAepW,MAMvClD,EAAA9oD,UAAA0wD,iBAAA,SAAiBvsD,EAAqBhC,GACpC,IAAIwsB,EAAkB5wB,KAAK4wB,gBACvBvjB,EAASjJ,EAAMiJ,OACfA,EAAOkI,eAAiB,IAAGlI,EAAOkI,eAAiBvV,KAAKL,OAAO61C,iBAAiBnoC,EAAOJ,iBAC3F7I,EAAMsqB,aAAetoB,EACrBwqB,EAAgB7E,eAAetG,KAAKrhB,IAExC2mD,EAptOA,CAA8B1xC,EAAAyQ,mBAwtO9B,SAAS2lC,EACPpnD,EACAR,EACA89D,GAKA,QALA,IAAAA,MAAA,MAEA9a,EAA8B8a,EAAgBA,EAAczgD,WAAard,EAAYzD,MAAMiJ,OAAOwI,WAClGi1C,EAA+BziD,EAAQ6c,WAElC7c,EAAQ0c,aAAas3B,EAAArgC,eAAe1J,UAAzC,CAEA,IAAI0X,EAAU3hB,EAAQ2hB,QAClBnR,EAAY5G,OAAOsH,EAAAX,cAAcW,EAAAzH,cAAcQ,SAAUzK,EAAYoE,aACrExG,EAAOoT,EAAUjT,UACrB,GAAIH,GAAQA,EAAKoB,OAAQ,CACvB,IAAIkT,EAAMtU,EAAK,GACXsU,EAAInX,MAAQ2W,EAAA9W,SAASI,SAA+BkX,EAAKvG,aAAe+F,EAAAjG,YAAYmB,QACtFq2C,EAAyD/wC,EAAKzY,MAC1DmE,EAAKoB,QAAU,KACjBkT,EAAMtU,EAAK,IACH7C,MAAQ2W,EAAA9W,SAASI,SAA+BkX,EAAKvG,aAAe+F,EAAAjG,YAAYmB,QACtFo2C,EAA8BC,EAC9BA,EAAyD/wC,EAAKzY,MAC1DmE,EAAKoB,OAAS,GAChBmjB,EAAQ5I,MACN/H,EAAAgI,eAAeqG,+BACf7O,EAAUzU,MAAO,IAAKqB,EAAKoB,OAAO8d,aAItCqF,EAAQ5I,MACN/H,EAAAgI,eAAeoG,wBACf1N,EAAI3V,SAKV4lB,EAAQ5I,MACN/H,EAAAgI,eAAeoG,wBACf1N,EAAI3V,YAIR4lB,EAAQ5I,MACN/H,EAAAgI,eAAey8C,wCACfjlD,EAAUzU,MAAO,IAAK,MApwOf1E,EAAAqrD,0FCzPb,SAAY1pC,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,qCACAA,IAAA,mHACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,+HACAA,IAAA,qIACAA,IAAA,mGACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,yFACAA,IAAA,mEACAA,IAAA,+CACAA,IAAA,yMACAA,IAAA,+FACAA,IAAA,mHACAA,IAAA,yFACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,4EACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,wIACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,kJACAA,IAAA,oFACAA,IAAA,sIACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,4KACAA,IAAA,0DACAA,IAAA,8FACAA,IAAA,4JACAA,IAAA,gIACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,8KACAA,IAAA,kLACAA,IAAA,kFACAA,IAAA,0CACAA,IAAA,wFACAA,IAAA,4HAlHF,CAAY3hB,EAAA2hB,iBAAA3hB,EAAA2hB,oBAsHZ3hB,EAAAm6B,uBAAA,SAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,+DACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,qGACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,4EAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,8EAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,4FAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,QAAS,MAAO,sRClPpB,IAAA4rC,EAAAzlE,EAAA,IAYAk8C,EAAAl8C,EAAA,GAUAoZ,EAAApZ,EAAA,GAiBA0lE,EAAA1lE,EAAA,IAIA2lE,EAAA,WAKA,OALA,WAIE9lE,KAAA+lE,OAAwB,IAAIhwD,OAJ9B,GAOAiwD,EAAA,WAQA,OAJE,SAAYC,EAAqBC,GAC/BlmE,KAAKmmE,cAAgBF,EACrBjmE,KAAKqE,KAAO6hE,GANhB,GAUAE,EAAA,WAUA,OAJE,SAAYxlE,EAAcyD,GAF1BrE,KAAAqmE,mBAA6B,GAG3BrmE,KAAKY,KAAOA,EACZZ,KAAKqE,KAAOA,GARhB,GAYAiiE,EAAA,oBAAAA,KAuBA,OArBSA,EAAAC,cAAqC,IAAIrqD,MAC7C,KAAM,SACN,MAAO,UACP,MAAO,UACP,MAAO,UACP,QAAS,KACT,KAAM,UACN,MAAO,WACP,MAAO,WACP,MAAO,WACP,QAAS,UACT,OAAQ,UACR,MAAO,QACP,MAAO,QACP,UAAW,UACX,eAAgB,SAChB,kBAAmB,SACnB,cAAe,SACf,cAAe,WACf,QAAS,WAEdoqD,EAvBA,GAAa5mE,EAAA4mE,YAyBb,IAAAE,EAAA,WAYA,OALE,SAAY5lE,EAAcyD,EAAcoiE,QAAA,IAAAA,MAAA,OAJxCzmE,KAAA0mE,WAAqB,MACrB1mE,KAAA2mE,YAAwB,YACxB3mE,KAAA4mE,YAAwB,UAGtB5mE,KAAKY,KAAOA,EACZZ,KAAKqE,KAAOA,EACZrE,KAAK0mE,WAAaD,GAVtB,GAcA5oD,EAAA,WAwBE,SAAAA,EAAYmM,GAVZhqB,KAAAumE,cAAqC,IAAIrqD,IAEzClc,KAAA6mE,aAA4B,IAAI19C,IAEhCnpB,KAAA8mE,cAAqC,IAAI5qD,IAEzClc,KAAA+mE,cAAsC,IAAI7qD,IAE1Clc,KAAAgnE,mBAAsD,IAAI9qD,IAIxDlc,KAAKgqB,QAAUA,EAEfhqB,KAAKinE,SACHC,QAAS,cACTlpB,MAAO,IAAIjoC,MACXoxD,QAAS,IAAIpxD,MACbqxD,QAAS,IAAIrxD,MACbsxD,OAAQ,IAAItxD,OAGd/V,KAAKumE,cAAgBD,EAAUC,cA6ZnC,OAvZE1oD,EAAA5b,UAAAqlE,4BAAA,SAA4BC,EAAoBn4D,WAE1Co4D,EAAS,IAAI1B,EACjB0B,EAAO5mE,KAAO2mE,EACdC,EAAOl4C,KAAO,GAEd,IAAInqB,EAA8BiK,EAAUjK,eAC5C,IAAsB,IAAAsiE,EAAAjmD,EAAArc,GAAUuiE,EAAAD,EAAA/lD,QAAAgmD,EAAA/lD,KAAA+lD,EAAAD,EAAA/lD,OAAE,CAA7B,IAAIimD,EAASD,EAAApmE,MACZ+C,EAAuBsjE,EAAUtjE,KACjCujE,EAAW,IAAIhC,EAAAiC,aAAa7nE,KAAKgqB,QAAS3lB,GAC1CyjE,EAAUF,EAASG,QAAaH,EAASI,aAAY,KAAOJ,EAASK,YACzEjoE,KAAKkoE,gBAAgBN,GACrBJ,EAAOzB,OAAOtgD,MAAO7kB,KAAS+mE,EAAU/mE,KAAKwD,MAAMugB,WAAYtgB,KAAQyjE,sGAEzE,OAAON,GAGT3pD,EAAA5b,UAAAimE,gBAAA,SAAgBC,GACd,IAAIC,EAAeD,EAAaH,aAE5BK,EAAeF,EAAaG,qBAChC,GAAID,GAAiBA,EAAazlE,MAAQy5C,EAAAtgC,YAAY0G,gBAAiB,CACrE,IAAI4D,EAAiCgiD,EACrCroE,KAAKuoE,4BAA4BliD,GAGnC,IAAKrmB,KAAK6mE,aAAa5jD,IAAImlD,GAAe,CAExC,IAAII,EAAmBxoE,KAAKyoE,yBAAyBL,GACjDlC,EAAWlmE,KAAKumE,cAAcrlE,IAAIsnE,GAElCtC,GACFlmE,KAAKinE,QAAQjpB,MAAMv4B,KAAK,IAAIugD,EAAaoC,EAAclC,IAEzDlmE,KAAK6mE,aAAaz9C,IAAIg/C,KAW1BvqD,EAAA5b,UAAAwmE,yBAAA,SAAyBL,GAGvB,GAD6BpoE,KAAKumE,cAAcrlE,IAAIknE,GAElD,OAAOA,EAET,IAAIM,EAAY1oE,KAAKgqB,QAAQvN,YAAYvb,IAAIknE,GAC7C,GAAIM,EAAW,CACb,IAAIC,EAAkBD,EAAUrkE,KAAKD,MAAMugB,WAC3C,OAAO3kB,KAAKyoE,yBAAyBE,GAErC,OAAOP,GAQXvqD,EAAA5b,UAAA2mE,2BAAA,SAA2BR,GACzB,IAAIM,EAAY1oE,KAAKgqB,QAAQvN,YAAYvb,IAAIknE,GAC7C,GAAIM,EAAW,CACb,IAAIC,EAAkBD,EAAUrkE,KAAKD,MAAMugB,WAC3C,OAAO3kB,KAAK4oE,2BAA2BD,GAEvC,OAAOP,GAUXvqD,EAAA5b,UAAA4mE,uBAAA,SAAuBT,GACrB,IAAI1J,EAAe1+D,KAAK4oE,2BAA2BR,GAGnD,OAD8BpoE,KAAKgqB,QAAQxN,YAAYtb,IAAIw9D,IAI7D7gD,EAAA5b,UAAA6mE,mBAAA,SAAmB3+C,GAEjB,YAAW4+C,GAAP5+C,GAA2B,MAAPA,IAGA,KAAjBA,EAAI6+C,OAAO,IAA4C,KAA9B7+C,EAAI6+C,OAAO7+C,EAAItjB,OAAS,KAQ1DgX,EAAA5b,UAAAgnE,sBAAA,SAAsB5gE,GACpB,GAAIA,EAAQzF,MAAQy5C,EAAAtgC,YAAYuH,mBAAoB,CAClD,IAAI4lD,EAA8B7gE,EAClC,OAAOw9D,EAAAsD,QAAQC,qBAAqBF,EAASrhE,YAAa0R,EAAAzH,cAAcK,QAE1E,OAAO,GAMT0L,EAAA5b,UAAAonE,yBAAA,SAAyB/8D,WACvB,GAAKA,EAAUL,eAGf,IAAsB,IAAAihB,EAAA1L,EAAAlV,EAAUL,YAAU2V,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAAvC,IAAI7I,EAAS+I,EAAAtgB,MAChB,GAAIuX,EAAUhT,eAAiB0T,EAAAzH,cAAcO,UAAYwG,EAAUjT,UAAW,CAE5E,GAAIiT,EAAUjT,UAAUiB,OAAS,EAC/B,MAAM,IAAImc,MAAM,8CAElB,IAAI3e,EAAOwU,EAAUjT,UAAU,GAAGxB,MAAMugB,WACpC/jB,EAAOZ,KAAKspE,aAAazwD,EAAUjT,UAAU,IACjD5F,KAAKinE,QAAQI,OAAO5hD,KAAK,IAAI+gD,EAAM5lE,EAAMyD,IACzCrE,KAAKupE,0BAA0B1wD,EAAUjT,UAAU,yGASzDiY,EAAA5b,UAAAqnE,aAAA,SAAaljE,GACX,IAAIojE,EAAepjE,EAAKhC,MAAMugB,WAC9B,GAAI3kB,KAAK8oE,mBAAmBU,GAC1B,OAAOA,EAAK1zD,UAAU,EAAG0zD,EAAK3iE,OAAS,GAEzC,IAAIsZ,EAAe0lD,EAAAsD,QAAQM,gBAAgBrjE,GACvCiC,EAA0BrI,KAAKgqB,QAAQ1N,eAAepb,IAAIif,GAC9D,GAAI9X,EAAS,CACX,IAAIR,EAA6EQ,EAASR,YAC1F,GAAIA,GAAeA,EAAY9C,YAE7B,OADgE8C,EAAY9C,YAC7DzD,MAGnB,MAAM,IAAI0hB,MAAM,wBAAwB7C,IAG1CtC,EAAA5b,UAAAynE,2BAAA,SAA2BtjE,GACzB,IAEI+Z,EAFe/Z,EAAKhC,MAAMiJ,OAAOC,aAEH,IADvBlH,EAAKhC,MAAMugB,WAElBtc,EAAUrI,KAAKgqB,QAAQ1N,eAAepb,IAAIif,GAC9C,IAAK9X,GAAWA,EAAQzF,MAAQy5C,EAAAtgC,YAAY0G,gBAC1C,MAAM,IAAIO,MAAM,WAAW7C,EAAY,6CAA6CA,EAAY,iBAElG,OAAO9X,GAMTwV,EAAA5b,UAAAsnE,0BAAA,SAA0BnjE,GACxB,IAAI+Z,EAAe0lD,EAAAsD,QAAQM,gBAAgBrjE,GAC3CpG,KAAK2pE,6BAA6BxpD,IAGpCtC,EAAA5b,UAAA0nE,6BAAA,SAA6BxpD,GAC3B,IAAI9X,EAAUrI,KAAKgqB,QAAQ1N,eAAepb,IAAIif,GAC9C,IAAK9X,GAAWA,EAAQzF,MAAQy5C,EAAAtgC,YAAY0G,gBAC1C,MAAM,IAAIO,MAAM,WAAW7C,EAAY,6CAA6CA,EAAY,iBAElG,IAAIkG,EAAiChe,EACrCrI,KAAKuoE,4BAA4BliD,IAGnCxI,EAAA5b,UAAAsmE,4BAAA,SAA4BliD,WACtBra,EAAkCqa,EAAexe,YAAYmE,QAC7Dw7D,EAAS,IAAI1B,EAEjB,GADA0B,EAAO5mE,KAAOylB,EAAenB,WACzBllB,KAAKumE,cAAcrlE,IAAIsmE,EAAO5mE,MAChC,OAAO,KAET4mE,EAAOl4C,KAAO,OACd,IAAmB,IAAAs6C,EAAApoD,EAAAxV,GAAO69D,EAAAD,EAAAloD,QAAAmoD,EAAAloD,KAAAkoD,EAAAD,EAAAloD,OAAE,CAAvB,IAAI7K,EAAMgzD,EAAAvoE,MACb,GAAIuV,EAAOjU,MAAQ2W,EAAA9W,SAAS+U,iBAAkB,CAC5C,IAAIsyD,EAAmDjzD,EACnDyZ,EAAYzZ,EAAOjW,KAAKwD,MAAMugB,WAC9B6gD,EAAmCsE,EAAazlE,KAEpD,GAAImhE,IAAcK,EAAAsD,QAAQC,qBAAqBU,EAAcvwD,EAAAzH,cAAcW,QAAS,CAClF,IAAI5K,EAA4B,IAAI+9D,EAAAiC,aAAa7nE,KAAKgqB,QAASw7C,GAC3DuE,EAAgBvE,EAAUphE,MAAMugB,WACpC,GAAI9c,EAAYmiE,WACd,SAEF,IAAI3lE,EAAQwD,EAAYkgE,QAAalC,EAAAsD,QAAQc,iBAAiBF,GAAc,KAAOA,EACnFvC,EAAOzB,OAAOtgD,MAAM7kB,KAAQ0vB,EAAWjsB,KAAQA,wGAKrD,OADArE,KAAKkqE,UAAU1C,GACRA,GAGT3pD,EAAA5b,UAAAioE,UAAA,SAAU1C,GAEHxnE,KAAK8mE,cAAc7jD,IAAIukD,EAAO5mE,QACjCZ,KAAKinE,QAAQE,QAAQ1hD,KAAK+hD,GAC1BxnE,KAAK8mE,cAAc9iE,IAAIwjE,EAAO5mE,KAAM4mE,KAIxC3pD,EAAA5b,UAAAkoE,UAAA,SAAUhgD,GACRlY,OAAOkY,EAAItjB,OAAS,EAAG,iCACvBoL,OAAOkY,EAAItjB,QAAU,GAAI,eAAesjB,EAAG,wCAM7CtM,EAAA5b,UAAAmoE,uBAAA,SAAuBC,WACrB,GAAIA,EAAa1jD,iBAAmBk/C,EAAAsD,QAAQmB,iBAAiBD,GAAe,CAC1E,IAAIh7D,EAAO,IAAI0G,MACXw0D,GAAsB,EACtBC,EAAeH,EAAanlD,WAC5BulD,EAAkB,IAAMD,EAE5Bn7D,EAAKoW,KAAK,6BACVpW,EAAKoW,KAAK,WAAWglD,EAAe,UAAUD,EAAY,eAC1Dn7D,EAAKoW,KAAK,gBAAgBglD,EAAe,qBACzCp7D,EAAKoW,KAAK,OAAOglD,EAAe,+BAChCp7D,EAAKoW,KAAK,OAAOglD,EAAe,kBAEhC,IAAqB,IAAAv9C,EAAA1L,EAAA6oD,EAAa1jD,gBAAgBjd,UAAQkY,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAAvD,IAAIyB,EAAQvB,EAAAtgB,MAEb,GAAI6hB,EAASvgB,MAAQy5C,EAAAtgC,YAAYuH,oBAAsBtjB,KAAKipE,sBAAsB9lD,GAAW,CAC7FnjB,KAAK0qE,yBAA4CvnD,GACjDonD,GAAsB,EACtB,IAAI1iE,EAAuDsb,EAAUtb,YAEjE8iE,EAAW9iE,EAAYjH,KAAKwD,MAAMugB,WAClCq5B,EAAQn2C,EAAYuH,UAAUjK,WAElCnF,KAAKmqE,UAAUQ,GACft7D,EAAKoW,KAAK,WAAWglD,EAAe,cAAcE,EAAQ,QAG1D,IADA,IAAI5E,EAAS,IAAIhwD,MACRqV,EAAQ,EAAGA,EAAQ4yB,EAAMn3C,OAAQukB,IAAS,CACjD,IAAI/mB,EAAsB25C,EAAM5yB,GAC5BiC,EAAgBhpB,EAAKA,KAAKD,MAAMugB,WAChC2I,EAAgBjpB,EAAKzD,KAAKwD,MAAMugB,WAEhCmjD,EAAwB,IAAIlC,EAAAiC,aAAa7nE,KAAKgqB,QAAS3lB,EAAKA,MAEhE,GAAIyjE,EAAQC,QACND,EAAQllE,MAAQgjE,EAAAgF,aAAaC,OAC/Bx7D,EAAKoW,KAAK,aAAa6H,EAAa,oBAAoBw6C,EAAQgD,YAAW,QAClEhD,EAAQllE,MAAQgjE,EAAAgF,aAAaG,KACtC17D,EAAKoW,KAAK,aAAa6H,EAAa,2BAC3Bw6C,EAAQllE,MAAQgjE,EAAAgF,aAAan2D,OACtCpF,EAAKoW,KAAK,aAAa6H,EAAa,6BAEpCje,EAAKoW,KAAK,aAAa6H,EAAa,2BAA2Bw6C,EAAQE,aAAY,aAGrF,GAAIF,EAAQllE,MAAQgjE,EAAAgF,aAAan2D,OAC/BpF,EAAKoW,KAAK,aAAa6H,EAAa,4BAC/B,GAAIw6C,EAAQllE,MAAQgjE,EAAAgF,aAAaG,KACtC17D,EAAKoW,KAAK,aAAa6H,EAAa,+BAC/B,GAAIw6C,EAAQllE,MAAQgjE,EAAAgF,aAAaC,OACtCx7D,EAAKoW,KAAK,aAAa6H,EAAa,cAAcw6C,EAAQgD,YAAW,YAChE,CACL,IAAI3qD,EAAe0lD,EAAAsD,QAAQM,gBAAgBplE,EAAKA,MAChDrE,KAAK2pE,6BAA6BxpD,GAClC9Q,EAAKoW,KAAK,aAAa6H,EAAa,UAAUD,EAAa,OAC3Dhe,EAAKoW,KAAK,SAAS6H,EAAa,qBAGpCy4C,EAAOtgD,KAAK6H,GAEdje,EAAKoW,KAAK,SAASglD,EAAe,IAAIE,EAAQ,IAAI5E,EAAOzgD,KAAK,KAAI,MAClEjW,EAAKoW,KAAK,4GAMd,GAHApW,EAAKoW,KAAK,OAAOglD,EAAe,cAChCp7D,EAAKoW,KAAK,OACVzlB,KAAKqpE,yBAAyBgB,EAAaxiE,aACvC0iE,EACF,OAAOl7D,EAGX,OAAO,IAAI0G,OAGb8H,EAAA5b,UAAAyoE,yBAAA,SAAyBM,GAEvB,IACIL,EADmCK,EAAcnjE,YAC1BjH,KAAKwD,MAAMugB,WAClCvV,EAAY47D,EAAcnjE,YAAYuH,UACtCo4D,EAASxnE,KAAKsnE,4BAA4BqD,EAAUv7D,GAExDpP,KAAKkqE,UAAU1C,GACfxnE,KAAKinE,QAAQG,QAAQ3hD,KAAK,IAAI2gD,EAAOuE,EAAUA,KAGjD9sD,EAAA5b,UAAAgpE,mBAAA,uBAEMC,EAAkBlrE,KAAKgqB,QAAQxN,YAAY2uD,WAC/C,IAAgB,IAAAC,EAAA5pD,EAAA0pD,GAAeG,EAAAD,EAAA1pD,QAAA2pD,EAAA1pD,KAAA0pD,EAAAD,EAAA1pD,OAAE,CAA5B,IAAI9f,EAAGypE,EAAA/pE,OACNA,EAAQtB,KAAKgqB,QAAQxN,YAAYtb,IAAIU,KAEvCo1D,QAAQC,IAAI,qBAAqBr1D,EAAG,YAAYN,EAAMsB,wGAI1D,IAAI0oE,EAAiBtrE,KAAKgqB,QAAQvN,YAAY0uD,WAC9C,IAAgB,IAAAI,EAAA/pD,EAAA8pD,GAAcE,EAAAD,EAAA7pD,QAAA8pD,EAAA7pD,KAAA6pD,EAAAD,EAAA7pD,OAAE,CAA3B,IACCpgB,EADGM,EAAG4pE,EAAAlqE,OACNA,EAAQtB,KAAKgqB,QAAQvN,YAAYvb,IAAIU,KAEvCo1D,QAAQC,IAAI,mBAAmBr1D,EAAG,YAAYN,EAAM+C,KAAKD,MAAMugB,gHAKrE9G,EAAA5b,UAAAwpE,uBAAA,mBACMN,EAAOnrE,KAAKgqB,QAAQ1N,eAAe6uD,WACvC,IAAgB,IAAAO,EAAAlqD,EAAA2pD,GAAIQ,EAAAD,EAAAhqD,QAAAiqD,EAAAhqD,KAAAgqD,EAAAD,EAAAhqD,OAAE,CAAjB,IAAI9f,EAAG+pE,EAAArqE,MACNA,EAAQtB,KAAKgqB,QAAQ1N,eAAepb,IAAIU,GACxCN,GACF01D,QAAQC,IAAI,sBAAsBr1D,EAAG,SAASy6C,EAAAtgC,YAAYza,EAAMsB,2GAK9Dib,EAAA5b,UAAA2pE,wBAAR,mBACMT,EAAOnrE,KAAKgqB,QAAQ1N,eAAe6uD,WACvC,IAAgB,IAAAU,EAAArqD,EAAA2pD,GAAIW,EAAAD,EAAAnqD,QAAAoqD,EAAAnqD,KAAAmqD,EAAAD,EAAAnqD,OAAE,CAAjB,IAAI9f,EAAGkqE,EAAAxqE,MACNA,EAAwBtB,KAAKgqB,QAAQ1N,eAAepb,IAAIU,GAC5D,GAAIN,GAASA,EAAMsB,MAAQy5C,EAAAtgC,YAAY0G,gBAAiB,CAEtD,IAAI4D,EAAiD/kB,EACjD+kB,EAAe3D,eACjBs0C,QAAQC,IAAI,sBAAsBr1D,EAAG,oBAAoBykB,EAAe3D,cAAcwC,iHAM9FrH,EAAA5b,UAAA6b,QAAA,uBAMMiuD,EAAuC,IAAInG,EAAAoG,kBAAkBhsE,KAAKgqB,SAClEiiD,EAA+B,IAAIrG,EAAAsG,cAAclsE,KAAKgqB,SACtDmiD,EAAkBJ,EAAkBK,kBACpCC,EAAcJ,EAAcG,sBAEhC,IAAoB,IAAAE,EAAA9qD,EAAA6qD,GAAWE,EAAAD,EAAA5qD,QAAA6qD,EAAA5qD,KAAA4qD,EAAAD,EAAA5qD,OAAE,CAA5B,IAAI8qD,EAAOD,EAAAjrE,MACd6qE,EAAgB1mD,KAAK+mD,qGAGvBxsE,KAAKgnE,mBAAqBpB,EAAA6G,YAAYC,YAAYP,GAClD,IAAIQ,EAAiB,IAAI52D,UAEzB,IAAoB,IAAA6L,EAAAJ,EAAAxhB,KAAKgqB,QAAQ1N,eAAe5S,UAAQqZ,EAAAnB,EAAAF,QAAAqB,EAAApB,KAAAoB,EAAAnB,EAAAF,OAAE,CAArD,IAAIrZ,EAAO0a,EAAAzhB,MACd,GAAI+G,EAAQzF,MAAQy5C,EAAAtgC,YAAY0G,gBAAiB,CAC/C,IAAI4nD,EAA+BhiE,EACnC,IAAKrI,KAAK+mE,cAAc9jD,IAAIonD,EAAalqD,cACJngB,KAAKoqE,uBAAuBC,GACjDuC,QAAQ,SAACtrE,EAAe8pB,GACpCuhD,EAAelnD,KAAKnkB,KAEtBtB,KAAK+mE,cAAc/iE,IAAIqmE,EAAalqD,aAAc9X,sGAKpDskE,EAAe9lE,OAInB7G,KAAK6sE,SAAW7sE,KAAK8sE,iBAAiBH,IAGxC9uD,EAAA5b,UAAA8qE,WAAA,SAAWnsE,GAET,QAD8BZ,KAAKgqB,QAAQ1N,eAAepb,IAAIN,IAKxDid,EAAA5b,UAAA6qE,iBAAR,SAAyBz9D,GAEvB,IAAI2rB,EAAK,IAAIjlB,MAQb,OAPAilB,EAAGvV,KAAK,iFAERpW,EAAKu9D,QAAQ,SAACtrE,EAAe8pB,GAC3B4P,EAAGvV,KAAKnkB,KAEV05B,EAAGvV,KAAK,KAEDuV,EAAG1V,KAAK,OAEnBzH,EAjcA,GAAane,EAAAme,uRCpGb,IAAAsrD,EAAA,oBAAAA,KAoFA,OA7EWA,EAAAC,qBAAP,SAA4B98D,EAAiCuM,WACrD5M,EAAaK,EAAUL,WAC3B,IAAKA,EACD,OAAO,MAEX,IAAuB,IAAA+gE,EAAAxrD,EAAAvV,GAAUghE,EAAAD,EAAAtrD,QAAAurD,EAAAtrD,KAAAsrD,EAAAD,EAAAtrD,OAAE,CAC/B,GADeurD,EAAA3rE,MACAuE,eAAiBgT,EAC5B,OAAO,oGAGf,OAAO,GAOJswD,EAAAM,gBAAP,SAAuBxjE,GAInB,OAHmBA,EAAK7B,MAAMiJ,OAAOC,aAEH,IADvBrH,EAAK7B,MAAMugB,YAUnBwkD,EAAAc,iBAAP,SAAwBhC,GACpB,IAAIiF,EAAejF,EAAYkF,QAAQ,KACvC,IAAqB,GAAjBD,EAAoB,CACpB,IAAI9hD,GAAqC,GAA7B68C,EAAYkF,QAAQ,KAAaD,EAAejF,EAAYkF,QAAQ,KAChF,OAAOlF,EAAYnyD,UAAU,EAAGsV,GAGpC,IAAqB,IADrB8hD,EAAejF,EAAYkF,QAAQ,MACX,CACpB,IAAIC,EAAWnF,EAAYkF,QAAQ,KACnC,OAAOlF,EAAYnyD,UAAUo3D,EAAe,EAAGE,GAEnD,OAAOnF,GAMJkB,EAAApB,QAAP,SAAeE,GACX,OAAOA,EAAYjK,SAAS,MACvBiK,EAAYjK,SAAS,UAAYiK,EAAYjK,SAAS,MACI,GAAxDiK,EAAY5tC,QAAQ,QAAS,IAAIgzC,OAAOF,QAAQ,MAMpDhE,EAAAmE,mBAAP,SAA0BC,WAElBxhE,EAAkBwhE,EAAiBxhE,gBACvC,GAAIA,MACA,IAAkB,IAAAyhE,EAAAhsD,EAAAzV,GAAe0hE,EAAAD,EAAA9rD,QAAA+rD,EAAA9rD,KAAA8rD,EAAAD,EAAA9rD,OAAE,CAC/B,GAJc,gBAGJ+rD,EAAAnsE,MACAV,KAAKwD,MAAMugB,WACjB,OAAO,oGAInB,OAAO,GAGJwkD,EAAAmB,iBAAP,SAAwBjkD,GACpB,IACI3D,EAAuC2D,EAAe3D,cAC1D,SAAIA,GAFiB,YAEAA,EAAcwC,aAM3CikD,EApFA,GAAazpE,EAAAypE,y6BCNb,IAyDYuE,EAzDZr0D,EAAAlZ,EAAA,GAKAk8C,EAAAl8C,EAAA,GAmBAoZ,EAAApZ,EAAA,GAoBAmZ,EAAAnZ,EAAA,GAMAkC,EAAAlC,EAAA,IAOA,SAAYutE,GAEVA,IAAA,mBAEAA,IAAA,qBAJF,CAAYA,EAAAhuE,EAAAguE,aAAAhuE,EAAAguE,gBAQZ,IAAAjwD,EAAA,SAAApM,GAWE,SAAAoM,EAAYuM,GAAZ,IAAAzY,EACEF,EAAA7Q,KAAAR,KAAMgqB,EAAQ5N,cAAYpc,YAN5BuR,EAAAyqD,sBAA2C,KAE3CzqD,EAAAiqD,yBAA+C,KAK7CjqD,EAAKyY,QAAUA,IA+jCnB,OA5kC8B1Y,EAAAmM,EAAApM,GAiB5BoM,EAAAxb,UAAAitD,YAAA,SACEjpD,EACAylB,EACAiiD,GAIA,QALA,IAAAjiD,MAAA,WACA,IAAAiiD,MAAaD,EAAWE,QAIpB3nE,EAAKrD,MAAQ2W,EAAA9W,SAASsP,UAAW,CACnC,IAAI3C,EAAYpP,KAAK6tE,iBAAgC5nE,EAAMylB,EAAyBiiD,GACpF,OAAKv+D,EACEnJ,EAAK9B,WAAaiL,EAAU/K,KAAK+4C,aAAehuC,EAAU/K,KAD1C,KAKzB4N,OAAOhM,EAAKrD,MAAQ2W,EAAA9W,SAASgP,MAC7B,IAAIwrD,EAAqBh3D,EACrBif,EAAa+3C,EAASr8D,KAAKoF,KAC3B+d,EAAamB,EACbjE,EAAYg8C,EAAS74D,MAAMiJ,OAAOC,aAAejL,EAAAuT,eAAiBsP,EAIhE5I,EAAiBtc,KAAKgqB,QAAQ1N,eAC9BjU,OAAO,EACX,IACGA,EAAUiU,EAAepb,IAAI+f,MAC7B5Y,EAAUiU,EAAepb,IAAI6iB,IAE9B,OAAQ1b,EAAQzF,MACd,KAAKy5C,EAAAtgC,YAAY0O,KACf,OAA+B,OAA3BwyC,EAAS/4D,eAA0B+4D,EAAS/4D,cAAc2C,QACxD8mE,GAAcD,EAAWE,QAC3B5tE,KAAKohB,MACH/H,EAAAgI,eAAes7C,sBACf12D,EAAK7B,MAAOiE,EAAQ8X,cAGjB,MAEF7G,EAAA+E,KAAKG,IAEd,KAAK69B,EAAAtgC,YAAY0G,gBACf,IAAIU,EAAWnjB,KAAKqxD,8BACFhpD,EAChB40D,EAAS/4D,cACTwnB,EACAzlB,GAEF,OAAKkd,EACEld,EAAK9B,WAAagf,EAAS9e,KAAK+4C,aAAej6B,EAAS9e,KADzC,KAS5B,IAAIqM,EAAQ1Q,KAAKgqB,QAAQvN,YAAYvb,IAAIgkB,GACzC,GAAIxU,EAAO,OAAO1Q,KAAKkvD,YAAYx+C,EAAMrM,KAAMqnB,EAAyBiiD,GAKxE,IAAInQ,EAAoBP,EAAS/4D,cACjC,GAAIs5D,EAAmB,CAGrB,IAFA,IAAIsQ,EAAmBtQ,EAAkB32D,OACrCsgC,EAAa,IAAIpxB,MAAY+3D,GACxBztE,EAAI,EAAGA,EAAIytE,IAAoBztE,EAAG,CACzC,IAAI0tE,EAAY/tE,KAAKkvD,YACnBsO,EAAkBn9D,GAClBqrB,EACAiiD,GAEF,IAAKI,EAAW,OAAO,KACvB5mC,EAAW9mC,GAAK0tE,EAElB,GAAID,EAAkB,CACpB,IAAIE,EAAc10D,EAAA4kC,cAAc/W,GAC5B6mC,EAAYnnE,SACdoa,GAAa,IAAM+sD,EAAc,IACjCjqD,GAAc,IAAMiqD,EAAc,UAE/B,GAAItiD,EAAyB,CAClC,IAAIuiD,EAAkBviD,EAAwBxqB,IAAI6iB,GAClD,GAAIkqD,EAAiB,OAAOA,GAOhC,IAAIzxD,EAAcxc,KAAKgqB,QAAQxN,YAC3BnY,OAAI,EACR,OACGA,EAAOmY,EAAYtb,IAAI+f,MACvB5c,EAAOmY,EAAYtb,IAAI6iB,IAEjB1f,GAIPspE,GAAcD,EAAWE,QAC3B5tE,KAAKohB,MACH/H,EAAAgI,eAAec,mBACf86C,EAASr8D,KAAKwD,MAAO2f,GAGlB,OAITtG,EAAAxb,UAAA4rE,iBAAA,SACE5nE,EACAylB,EACAiiD,QADA,IAAAjiD,MAAA,WACA,IAAAiiD,MAAyBD,EAAWE,QAEpC,IAAIvoE,EAAmBY,EAAKZ,iBACxBynB,EAAwB,KAC5B,GAAIznB,KACFynB,EAAW9sB,KAAKkvD,YAAY7pD,EAAkBqmB,EAAyBiiD,IACxD,OAAO,KAQxB,IANA,IAAIO,EAAqBjoE,EAAKd,WAC1B05C,EAAgBqvB,EAAmBrnE,OACnC+c,EAAiB,IAAI7N,MAAY8oC,GACjCR,EAAiB,IAAItoC,MAAc8oC,GACnCP,EAAqB,EACrBC,GAAU,EACLl+C,EAAI,EAAGA,EAAIw+C,IAAiBx+C,EAAG,CACtC,IAAI8tE,EAAoBD,EAAmB7tE,GAC3C,OAAQ8tE,EAAkBlpE,eACxB,KAAKsU,EAAA5H,cAAcquC,QACjB1B,EAAqBj+C,EAAI,EACzB,MAEF,KAAKkZ,EAAA5H,cAAcy8D,KACjBn8D,OAAO5R,GAAKw+C,GACZN,GAAU,EAId,IAAIlxB,EAAgBrtB,KAAKkvD,YACvBj9C,OAAOk8D,EAAkB9pE,MACzBqnB,EACAiiD,GAEF,IAAKtgD,EAAe,OAAO,KAC3BzJ,EAAevjB,GAAKgtB,EACpBgxB,EAAeh+C,GAAK8tE,EAAkBvtE,KAAKoF,KAE7C,IACIZ,EADAipE,EAAiBpoE,EAAKb,WAE1B,GAAIipE,GAEF,KADAjpE,EAAapF,KAAKkvD,YAAYmf,EAAgB3iD,EAAyBiiD,IACtD,OAAO,UAExBvoE,EAAakU,EAAA+E,KAAKc,KAEpB,IAAI/P,EAAY,IAAIkK,EAAA6kC,UAAUv6B,EAAgBxe,EAAY0nB,GAI1D,OAHA1d,EAAUivC,eAAiBA,EAC3BjvC,EAAUkvC,mBAAqBA,EAC/BlvC,EAAUmvC,QAAUA,EACbnvC,GAITqO,EAAAxb,UAAAw7D,qBAAA,SACE3xD,EACA0xD,EACA9xC,EACA0lC,EACAuc,QAFA,IAAAjiD,MAAA,WACA,IAAA0lC,MAAA,WACA,IAAAuc,MAAyBD,EAAWE,QAEpC,IAAIU,EAAiBxiE,EAAejF,OAChC0nE,EAAgB/Q,EAAoBA,EAAkB32D,OAAS,EACnE,GAAIynE,GAAkBC,EAgBpB,OAfIA,EACFvuE,KAAKohB,MACH/H,EAAAgI,eAAemtD,oCACfj1D,EAAA/W,MAAM8iB,KACSk4C,EAAmB,GAAGp5D,MACtBo5D,EAAmB+Q,EAAgB,GAAGnqE,OAErDkqE,EAAe3pD,SAAS,IAAK4pD,EAAc5pD,SAAS,KAE7CysC,GACTpxD,KAAKohB,MACH/H,EAAAgI,eAAemtD,oCACfpd,EAAsBhtD,MAAMgrD,MAAOkf,EAAe3pD,SAAS,IAAK,KAG7D,KAGT,IADA,IAAIzgB,EAAgB,IAAI6R,MAAYu4D,GAC3BjuE,EAAI,EAAGA,EAAIiuE,IAAkBjuE,EAAG,CACvC,IAAIgE,EAAOrE,KAAKkvD,YACDsO,EAAmBn9D,GAChCqrB,EACAiiD,GAEF,IAAKtpE,EAAM,OAAO,KAElBH,EAAc7D,GAAKgE,EAErB,OAAOH,GAITuZ,EAAAxb,UAAAugB,kBAAA,SACE3W,EACAuoD,EACAuZ,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IACIvlE,EADAzH,EAAOiL,EAAW7F,KAGtB,GAAIouD,EAAS,CAEX,OAAQA,EAAQxxD,MACd,KAAKy5C,EAAAtgC,YAAY9H,SAEf,GADA5L,EAAqB+rD,EAAS5mC,KAAKsE,eAAelxB,GAIhD,OAFAZ,KAAKg8D,sBAAwB,KAC7Bh8D,KAAKw7D,yBAA2B,KACzBnzD,EAET+rD,EAAqBA,EAASnyD,UAAUwB,OACxC,MAEF,KAAK44C,EAAAtgC,YAAYlI,MACfugD,EAAkBA,EAASnyD,UAAUwB,OAMzC,KAAO2wD,GAAS,CACd,IAAIpoD,EAAUooD,EAAQpoD,QACtB,GAAIA,IACE3D,EAAU2D,EAAQ9K,IAAIN,IAGxB,OAFAZ,KAAKg8D,sBAAwB,KAC7Bh8D,KAAKw7D,yBAA2B,KACzBnzD,EAGX+rD,EAAUA,EAAQ3wD,QAKtB,IAAI6Y,EAAiBtc,KAAKgqB,QAAQ1N,eAClC,OAAIjU,EAAUiU,EAAepb,IAAI2K,EAAWzH,MAAMiJ,OAAOC,aAAejL,EAAAuT,eAAiBhV,KACvFZ,KAAKg8D,sBAAwB,KAC7Bh8D,KAAKw7D,yBAA2B,KACzBnzD,IAILA,EAAUiU,EAAepb,IAAIN,KAC/BZ,KAAKg8D,sBAAwB,KAC7Bh8D,KAAKw7D,yBAA2B,KACzBnzD,IAGLslE,GAAcD,EAAWE,QAC3B5tE,KAAKohB,MACH/H,EAAAgI,eAAec,mBACftW,EAAWzH,MAAOxD,GAGf,OAIT6c,EAAAxb,UAAAwiE,sBAAA,SACED,EACAiK,EACAd,QAAA,IAAAA,MAAyBD,EAAWE,QAGpC,IAAIc,EAAmBlK,EAAev9D,WAClC8oB,EAAS/vB,KAAKs7D,kBAAkBoT,EAAkBD,EAAoBd,GAC1E,IAAK59C,EAAQ,OAAO,KAGpB,IAAI4+C,EAAenK,EAAexiE,SAASgE,KAG3C,OAAQ+pB,EAAOntB,MACb,KAAKy5C,EAAAtgC,YAAYxJ,OACjB,KAAK8pC,EAAAtgC,YAAYsP,MACjB,KAAKgxB,EAAAtgC,YAAYoT,MACf,IAAI9qB,EAA6B0rB,EAAQ1rB,KAGzC,GAFA4N,OAAO5N,GAAQiV,EAAA+E,KAAKc,QAChBu9B,EAAiBr4C,EAAKq4C,gBAMxB,OAJA18C,KAAKohB,MACH/H,EAAAgI,eAAe6iD,oCACfM,EAAexiE,SAASoC,MAAOuqE,EAAoC5+C,EAAQ1rB,KAAKsgB,YAE3E,KAEToL,EAAS2sB,EACT,MAEF,KAAKL,EAAAtgC,YAAYgM,SACf,IAOI20B,EAPA77C,EAASb,KAAK2jB,gBAChB1R,OAAkB8d,EAAQ/H,iBAC1B,KACA,KACA2lD,GAEF,IAAK9sE,EAAQ,OAAO,KAEpB,KADI67C,EAAiB77C,EAAOuO,UAAUhK,WAAWs3C,gBAM/C,OAJA18C,KAAKohB,MACH/H,EAAAgI,eAAe6iD,oCACfM,EAAexiE,SAASoC,MAAOuqE,EAAc9tE,EAAOuO,UAAUhK,WAAWuf,YAEpE,KAEToL,EAAS2sB,EACT,MAEF,KAAKL,EAAAtgC,YAAYlI,MACf,IAAItL,EAAoBvI,KAAKw7D,yBAC7B,GAAIjzD,EAAmB,CACrB,IAAI8zD,EAAqBtsC,EAAQE,eAAeosB,EAAAjjC,aAAaY,aAC7D,IAAKqiD,EAKH,OAJAr8D,KAAKohB,MACH/H,EAAAgI,eAAeu6C,qCACfrzD,EAAkBnE,MAAe2rB,EAAQ5P,cAEpC,KAET,IAAI/a,EAAai3D,EAAWjtD,UAAUhK,WACtC,KAAM2qB,EAAS3qB,EAAWs3C,gBAKxB,OAJA18C,KAAKohB,MACH/H,EAAAgI,eAAe6iD,oCACfM,EAAexiE,SAASoC,MAAOuqE,EAAcvpE,EAAWuf,YAEnD,MAQf,OAAQoL,EAAOntB,MACb,KAAKy5C,EAAAtgC,YAAY0G,gBACjB,KAAK45B,EAAAtgC,YAAYlI,MACf,OAAG,CACD,IACIgD,OAAM,EACV,IAFI7K,EAAU+jB,EAAO/jB,WAEL6K,EAAS7K,EAAQ9K,IAAIytE,IAGnC,OAFA3uE,KAAKg8D,sBAAwB0S,EAC7B1uE,KAAKw7D,yBAA2B,KACzB3kD,EAGT,GAAIkZ,EAAOntB,MAAQy5C,EAAAtgC,YAAY0G,gBAAiB,CAC9C,IAAqBsN,EAAQrN,cAG3B,MAFAqN,EAA0CA,EAAQrN,kBAK/C,IAAIqN,EAAOntB,MAAQy5C,EAAAtgC,YAAYlI,MAOpC,MANA,IAAYkc,EAAQT,KAGlB,MAFAS,EAAwBA,EAAQT,MAQtC,MAEF,QACE,IAAItjB,EACJ,GADIA,EAAU+jB,EAAO/jB,QAGnB,GADI6K,EAAS7K,EAAQ9K,IAAIytE,GAIvB,OAFA3uE,KAAKg8D,sBAAwB0S,EAC7B1uE,KAAKw7D,yBAA2B,KACzB3kD,EAUf,OAJA7W,KAAKohB,MACH/H,EAAAgI,eAAe6iD,oCACfM,EAAexiE,SAASoC,MAAOuqE,EAAc5+C,EAAO5P,cAE/C,MAGT1C,EAAAxb,UAAAk+D,qBAAA,SACEyO,EACAH,EACAd,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IAAIc,EAAmBE,EAAc3nE,WACjC8oB,EAAS/vB,KAAKs7D,kBAAkBoT,EAAkBD,EAAoBd,GAC1E,IAAK59C,EAAQ,OAAO,KACpB,OAAQA,EAAOntB,MACb,KAAKy5C,EAAAtgC,YAAYxJ,OACjB,KAAK8pC,EAAAtgC,YAAYsP,MACjB,KAAKgxB,EAAAtgC,YAAYoT,MAEf,GAAIY,EAD6BA,EAAQ1rB,KACvBq4C,eAGhB,OAFA18C,KAAKg8D,sBAAwB0S,EAC7B1uE,KAAKw7D,yBAA2BoT,EAAcrmE,kBACvCwnB,EAET,MAEF,KAAKssB,EAAAtgC,YAAYlI,MACf,IAAIwoD,EAAqBtsC,EAAQE,eAAeosB,EAAAjjC,aAAaY,aAC7D,IAAKqiD,EAOH,OANIsR,GAAcD,EAAWE,QAC3B5tE,KAAKohB,MACH/H,EAAAgI,eAAeu6C,qCACfgT,EAAcxqE,MAAe2rB,EAAQ5P,cAGlC,KAGT,GAAI4P,EADassC,EAAWjtD,UAAUhK,WACds3C,eAGtB,OAFA18C,KAAKg8D,sBAAwB0S,EAC7B1uE,KAAKw7D,yBAA2BoT,EAAcrmE,kBACvCwnB,EAWb,OANI49C,GAAcD,EAAWE,QAC3B5tE,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfkpD,EAAiBtqE,OAGd,MAGTqZ,EAAAxb,UAAAq5D,kBAAA,SACEr0D,EACAwnE,EACAd,GAEA,SAFA,IAAAA,MAAyBD,EAAWE,QAE7B3mE,EAAWrE,MAAQ2W,EAAA9W,SAAS6R,eACjCrN,EAAuCA,EAAYA,WAErD,OAAQA,EAAWrE,MACjB,KAAK2W,EAAA9W,SAASkR,UACZ,IAAItP,EAAOrE,KAAKkvD,YACQjoD,EAAYC,OAClCunE,EAAmBjhD,KAAK9B,wBACxBiiD,GAEF,GAAItpE,EAEF,GADI84C,EAAY94C,EAAKq4C,eAInB,OAFA18C,KAAKg8D,sBAAwB,KAC7Bh8D,KAAKw7D,yBAA2B,KACzBre,EAGX,OAAO,KAET,KAAK5jC,EAAA9W,SAASmR,OACZ,MAAM,IAAIoP,MAAM,mBAElB,KAAKzJ,EAAA9W,SAASiS,KACZ,GAAI+5D,EAAmBjhD,KAAK3pB,GAAE,MAE5B,GADIgrE,EAAgBJ,EAAmBjhD,KAAKsE,eAAe,QAIzD,OAFA9xB,KAAKg8D,sBAAwB,KAC7Bh8D,KAAKw7D,yBAA2B,KACzBqT,EAIX,OADIprE,EAASgrE,EAAmBhrE,SAE9BzD,KAAKg8D,sBAAwB,KAC7Bh8D,KAAKw7D,yBAA2B,KACzB/3D,IAELkqE,GAAcD,EAAWE,QAC3B5tE,KAAKohB,MACH/H,EAAAgI,eAAei/C,+CACfr5D,EAAW7C,OAGR,MAET,KAAKmV,EAAA9W,SAASW,MAEV,IAAIyrE,EAOFprE,EARJ,GAAIgrE,EAAmBjhD,KAAK3pB,GAAE,MAE5B,GADIgrE,EAAgBJ,EAAmBjhD,KAAKsE,eAAe,SAIzD,OAFA9xB,KAAKg8D,sBAAwB,KAC7Bh8D,KAAKw7D,yBAA2B,KACzBqT,EAIX,OADIprE,EAASgrE,EAAmBhrE,SAClBA,EAAOb,MAAQy5C,EAAAtgC,YAAYlI,QAAUpQ,EAAiBA,EAAQ6rB,OAC1EtvB,KAAKg8D,sBAAwB,KAC7Bh8D,KAAKw7D,yBAA2B,KACzB/3D,IAELkqE,GAAcD,EAAWE,QAC3B5tE,KAAKohB,MACH/H,EAAAgI,eAAem/C,iDACfv5D,EAAW7C,OAGR,MAET,KAAKmV,EAAA9W,SAASS,WACZ,OAAOlD,KAAKwiB,kBAAwCvb,EAAYwnE,EAAoBd,GAEtF,KAAKp0D,EAAA9W,SAASI,QACZ,OAA4BoE,EAAYuM,aACtC,KAAK+F,EAAAjG,YAAYmB,OAGf,OAFAzU,KAAKg8D,sBAAwB/0D,EAC7BjH,KAAKw7D,yBAA2B,KACzBx7D,KAAKgqB,QAAQlN,eAIxB,MAEF,KAAKvD,EAAA9W,SAASa,eACZ,OAAOtD,KAAKykE,sBACgBx9D,EAC1BwnE,EACAd,GAGJ,KAAKp0D,EAAA9W,SAASY,cACZ,OAAOrD,KAAKmgE,qBACel5D,EACzBwnE,EACAd,GAGJ,KAAKp0D,EAAA9W,SAASU,KACZ,IAAIurE,EAAoCznE,EAAYA,WAChD8oB,EAAS/vB,KAAKs7D,kBAAkBoT,EAAkBD,EAAoBd,GAC1E,IAAK59C,EAAQ,OAAO,KACpB,GAAIA,EAAOntB,MAAQy5C,EAAAtgC,YAAYuH,mBAAoB,CACjD,IAAIH,EAAWnjB,KAAKswD,iCACCvgC,EACF9oB,EAAY/C,cAC7BuqE,EAAmBjhD,KAAK9B,wBACxBzkB,EACA0mE,GAEF,IAAKxqD,EAAU,OAAO,KACtB,IACIg6B,EADA/3C,EAAa+d,EAAS/T,UAAUhK,WAEpC,GADI+3C,EAAY/3C,EAAWs3C,eAIzB,OAAOS,EAEP,IAAI/tC,EAAYhK,EAAWye,mBAC3B,GAAIzU,EAAW,CACb,IAAI0/D,EAAiB1/D,EAAUgvC,qBAO/B,OANK0wB,IACHA,EAAiB,IAAIzyB,EAAAxtB,eAAe7uB,KAAKgqB,QAAS5a,GAClDA,EAAUgvC,qBAAuB0wB,GAI5BA,EASX,OANInB,GAAcD,EAAWE,QAC3B5tE,KAAKohB,MACH/H,EAAAgI,eAAei8C,uGACfoR,EAAiBtqE,MAAO2rB,EAAO5P,cAG5B,MAWb,OANIwtD,GAAcD,EAAWE,QAC3B5tE,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAGR,MAITqZ,EAAAxb,UAAA0hB,gBAAA,SACE1hB,EACAiC,EACAwnB,EACAiiD,gBADA,IAAAjiD,MAAA,WACA,IAAAiiD,MAAyBD,EAAWE,QAEpC,IAAII,EAAc9pE,EAAgBoV,EAAA4kC,cAAch6C,GAAiB,GAC7Dif,EAAWlhB,EAAUspB,UAAUrqB,IAAI8sE,GACvC,GAAI7qD,EAAU,OAAOA,EAErB,IAAItb,EAAc5F,EAAU4F,YACxBk3D,EAAa98D,EAAU4B,GAAGxB,EAAAsB,YAAYipB,UACtCvG,EAAiBpkB,EAAUokB,eAG3B0G,EAAyBrB,EAE7B,GADAA,EAA0B,IAAIxP,IAC1B6Q,MACF,IAA2C,IAAAC,EAAAxL,EAAAuL,GAAsBE,EAAAD,EAAAtL,QAAAuL,EAAAtL,KAAAsL,EAAAD,EAAAtL,OAAE,CAA1D,IAAAwL,EAAArL,EAAAoL,EAAA3rB,MAAA,GAAC6rB,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GACvBxB,EAAwB1nB,IACtBmpB,EACAC,qGAMN,IAAI5B,EAAqBvpB,EAAUupB,mBACnC,GAAIA,EAAoB,CACtBvZ,OAAOhQ,EAAU4B,GAAGxB,EAAAsB,YAAYipB,WAChC,IACImiD,EADmB98D,OAAOoU,GAAgBxe,YACHiE,eACvCkjE,EAAyBD,EAAoBloE,OACjDoL,OAAO+8D,GAA0BxjD,EAAmB3kB,QACpD,IAAK,IAAIxG,EAAI,EAAGA,EAAI2uE,IAA0B3uE,EAC5CqrB,EAAwB1nB,IACtB+qE,EAAoB1uE,GAAGO,KAAKoF,KAC5BwlB,EAAmBnrB,SAIvB4R,QAAQuZ,GAIV,IAEIyjD,EAFAC,EAAgBrnE,EAAYuH,UAC5B+/D,EAAyBtnE,EAAYiE,eAEzC,GAAI5H,IAAkB+qE,EAA2B/qE,EAAc2C,QAAS,CACtEoL,OAAOk9D,GAA0BF,GAA4BE,EAAuBtoE,QACpF,IAASxG,EAAI,EAAGA,EAAI4uE,IAA4B5uE,EAC9CqrB,EAAwB1nB,IACAmrE,EAAwB9uE,GAAGO,KAAKoF,KACtD9B,EAAc7D,SAIlB4R,QAAQk9D,GAA2D,GAAjCA,EAAuBtoE,QAI3D,IAAIw9D,EAA8B,KAC9Bv3C,EAAwB,KAC5B,GAAIiyC,EAAY,CAOd,KANAsF,EAAgBrkE,KAAKkjB,aACnBjR,OAAOoU,GACPmF,EACAE,EACAiiD,IAEkB,OAAO,KAC3B7gD,EAAWu3C,EAAchgE,KACzBqnB,EAAwB1nB,IAAI,OAAQ8oB,GAItC,IAiBI1nB,EAjBAgqE,EAAsBF,EAAc/pE,WACpCkqE,EAA0BD,EAAoBvoE,OAC9C+c,EAAiB,IAAI7N,MAAYs5D,GACjChxB,EAAiB,IAAItoC,MAAcs5D,GACnC/wB,EAAqB,EACzB,IAASj+C,EAAI,EAAGA,EAAIgvE,IAA2BhvE,EAAG,CAChD,IAAIivE,EAAuBF,EAAoB/uE,GAC3CivE,EAAqBrqE,eAAiBsU,EAAA5H,cAAcquC,UACtD1B,EAAqBj+C,EAAI,GAE3B,IAAI48D,EAAWhrD,OAAOq9D,EAAqBjrE,MACvCgpB,EAAgBrtB,KAAKkvD,YAAY+N,EAAUvxC,EAAyBiiD,GACxE,IAAKtgD,EAAe,OAAO,KAC3BzJ,EAAevjB,GAAKgtB,EACpBgxB,EAAeh+C,GAAKivE,EAAqB1uE,KAAKoF,KAIhD,GAAI/D,EAAU4B,GAAGxB,EAAAsB,YAAYuiB,KAC3B9gB,EAAakU,EAAA+E,KAAKc,UACb,GAAIld,EAAU4B,GAAGxB,EAAAsB,YAAYoQ,aAClC3O,EAAa6M,OAAOoyD,GAAehgE,SAC9B,CACD44D,EAAWhrD,OAAOi9D,EAAc9pE,YAApC,IACIf,EAAOrE,KAAKkvD,YAAY+N,EAAUvxC,EAAyBiiD,GAC/D,IAAKtpE,EAAM,OAAO,KAClBe,EAAaf,EAGf,IAAI+K,EAAY,IAAIkK,EAAA6kC,UAAUv6B,EAAgBxe,EAAY0nB,GAC1D1d,EAAUivC,eAAiBA,EAC3BjvC,EAAUkvC,mBAAqBA,EAE/B,IAAIn+B,EAAele,EAAUke,aAa7B,OAZI6tD,EAAYnnE,SAAQsZ,GAAgB,IAAM6tD,EAAc,KAC5D7qD,EAAW,IAAIk5B,EAAA5wB,SACbxpB,EACAke,EACA/Q,EACAi1D,GAEIh+C,EACJqF,GAEFzpB,EAAUspB,UAAUvnB,IAAIgqE,EAAa7qD,GACrCnjB,KAAKgqB,QAAQzN,gBAAgBvY,IAAImc,EAAcgD,GACxCA,GAIT1F,EAAAxb,UAAAstE,yBAAA,SACEttE,EACAiC,EACAypE,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC37D,OAAOhQ,EAAU4B,GAAGxB,EAAAsB,YAAYipB,WAChC,IAAIvG,EAAiBpU,OAAOhQ,EAAUokB,gBAEtC,IAAMniB,IAAiBA,EAAc2C,OAAS,OAAO5E,EAErD,IAAIijB,EAAajjB,EAAUijB,WACvBsqD,EAAal2D,EAAA4kC,cAAch6C,GAC3BurE,EAAmB,IAAIpzB,EAAAt1B,kBACzB/mB,KAAKgqB,QACL9E,EACAmB,EAAelG,aAAe,IAAMqvD,EAAa,IAAMntE,EAAAqW,mBAAqBwM,EAC5EjjB,EAAU4F,YACVwe,EACApkB,EAAU6kB,gBAKZ,OAHA2oD,EAAiB/rE,MAAQzB,EAAUyB,MACnC+rE,EAAiBjoD,aAAevlB,EAAUulB,aAC1CioD,EAAiBjkD,mBAAqBtnB,EAC/BurE,GAIThyD,EAAAxb,UAAAquD,iCAAA,SACEruD,EACAu7D,EACA9xC,EACAuiC,EACA0f,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IAAIvQ,EAAuC,KAC3C,OAAIp7D,EAAU4B,GAAGxB,EAAAsB,YAAY6f,WAC3BvR,OAA4B,MAArBurD,GAAyD,GAA5BA,EAAkB32D,QACtDw2D,EAAwBr9D,KAAKy9D,qBAC3BxrD,OAAOhQ,EAAU4F,YAAYiE,gBAC7B0xD,EACA9xC,EACAuiC,EACA0f,IAIG3tE,KAAK2jB,gBACV1hB,EACAo7D,EACA3xC,EACAiiD,GANmC,MAWvClwD,EAAAxb,UAAAihB,aAAA,SACEjhB,EACAiC,EACAwnB,EACAiiD,4BADA,IAAAjiD,MAAA,WACA,IAAAiiD,MAAyBD,EAAWE,QAEpC,IAAII,EAAc9pE,EAAgBoV,EAAA4kC,cAAch6C,GAAiB,GAG7Dif,EAAWlhB,EAAUspB,UAAUrqB,IAAI8sE,GACvC,GAAI7qD,EAAU,OAAOA,EAGrB,IAAI4J,EAAyBrB,EAE7B,GADAA,EAA0B,IAAIxP,IAC1B6Q,MACF,IAA2C,IAAA4C,EAAAnO,EAAAuL,GAAsB6C,EAAAD,EAAAjO,QAAAkO,EAAAjO,KAAAiO,EAAAD,EAAAjO,OAAE,CAA1D,IAAAmrC,EAAAhrC,EAAA+N,EAAAtuB,MAAA,GAAC6rB,EAAA0/B,EAAA,GAAez/B,EAAAy/B,EAAA,GACvBnhC,EAAwB1nB,IAAImpB,EAAeC,qGAM/C,IAAIvlB,EAAc5F,EAAU4F,YAC5B,GAAI3D,EAAe,CACjB,IAAI4H,EAAiBjE,EAAYiE,eAC7B4jE,EAAwB5jE,EAAejF,OACvC8oE,EAAsBzrE,EAAc2C,OACxCoL,OAAO09D,GAAuBD,GAC9B,IAAK,IAAIrvE,EAAI,EAAGA,EAAIsvE,IAAuBtvE,EACzCqrB,EAAwB1nB,IAAI8H,EAAezL,GAAGO,KAAKoF,KAAM9B,EAAc7D,SAGzE4R,OAA4C,GAArCpK,EAAYiE,eAAejF,QAIpC,IAAI+oE,EAA0B,KAC9B,GAAI/nE,EAAYlD,YAAa,CAC3B,IAAIkrE,EAAgB7vE,KAAKkvD,YACvBrnD,EAAYlD,YACZ+mB,EACAiiD,GAEF,IAAKkC,EAAe,OAAO,KAC3B,KAAMD,EAAYC,EAAcnzB,gBAO9B,OANIixB,GAAcD,EAAWE,QAC3B5tE,KAAKgqB,QAAQ5I,MACX/H,EAAAgI,eAAesB,sCACf9a,EAAYlD,YAAYP,OAGrB,KAET,GAAIwrE,EAAU7qD,aAAas3B,EAAArgC,eAAerJ,QAOxC,OANIg7D,GAAcD,EAAWE,QAC3B5tE,KAAKgqB,QAAQ5I,MACX/H,EAAAgI,eAAeyuD,yCACfjoE,EAAYlD,YAAYP,MAAOwrE,EAAUzvD,cAGtC,KAET,GAAIyvD,EAAU7qD,aAAas3B,EAAArgC,eAAepJ,YAAc3Q,EAAU8iB,aAAas3B,EAAArgC,eAAepJ,WAO5F,OANI+6D,GAAcD,EAAWE,QAC3B5tE,KAAKgqB,QAAQ5I,MACX/H,EAAAgI,eAAe0uD,+DACfx2D,EAAA/W,MAAM8iB,KAAKzd,EAAYjH,KAAKwD,MAAOyD,EAAYlD,YAAYP,QAGxD,KAKX,IAAI8gB,EAAajjB,EAAUijB,WACvB/E,EAAele,EAAUke,aACzB6tD,EAAYnnE,SACdqe,GAAc,IAAM8oD,EAAc,IAClC7tD,GAAgB,IAAM6tD,EAAc,MAEtC7qD,EAAW,IAAIk5B,EAAAhtB,MAAMptB,EAAWijB,EAAY/E,EAAcjc,EAAe0rE,IAChElkD,wBAA0BA,EACnCzpB,EAAUspB,UAAUvnB,IAAIgqE,EAAa7qD,GACrCnjB,KAAKgqB,QAAQzN,gBAAgBvY,IAAImc,EAAcgD,GAG/C,IAAIiM,EAAoB,EACxB,GAAIwgD,EAAW,CACb,GAAIA,EAAU5jE,QAAS,CAChBmX,EAASnX,UAASmX,EAASnX,QAAU,IAAIkQ,SAC9C,IAA4B,IAAA4wC,EAAAtrC,EAAAouD,EAAU5jE,QAAQtC,UAAQqjD,EAAAD,EAAAprC,QAAAqrC,EAAAprC,KAAAorC,EAAAD,EAAAprC,OAAE,CAAnD,IAAIsuD,EAAejjB,EAAAzrD,MACtB6hB,EAASnX,QAAQhI,IAAIgsE,EAAgB9qD,WAAY8qD,sGAGrD5gD,EAAewgD,EAAUrgD,oBAI3B,GAAIttB,EAAU+kB,qBAAsB,CAClC,IAAIipD,EAAqBjwE,KAAKuvE,yBAC5BttE,EAAU+kB,qBACV9iB,EACAypE,GAEF,IAAKsC,EAAoB,OAAO,KAChC9sD,EAASqM,oBAAsBxvB,KAAK2jB,gBAAgBssD,EAAoB,KAAM,KAAMtC,GAItF,GAAI1rE,EAAU0kB,oBACZ,IAAmB,IAAAqmC,EAAAxrC,EAAAvf,EAAU0kB,gBAAgBjd,UAAQgkD,EAAAV,EAAAtrC,QAAAgsC,EAAA/rC,KAAA+rC,EAAAV,EAAAtrC,OAAE,CAAlD,IAAI7K,EAAM62C,EAAApsD,MACb,OAAQuV,EAAOjU,MAGb,KAAKy5C,EAAAtgC,YAAYkT,gBACV9L,EAASnX,UAASmX,EAASnX,QAAU,IAAIkQ,KAC9C,IAAIwpD,EAAoC7uD,EAAQhP,YAC5C29D,EAAyB,KAE7B,GAAKE,EAAiBrhE,KAiBpBmhE,EAAYxlE,KAAKkvD,YACfwW,EAAiBrhE,KACjB8e,EAASuI,wBACTiiD,OApBwB,CAC1B,GAAkB,OAAdiC,GAA4C,OAAtBA,EAAU5jE,QAAkB,CACpD,IAAIkkE,EAAYN,EAAU5jE,QAAQ9K,IAAqB2V,EAAQqO,YAC3DgrD,IAAcA,EAAUrsE,GAAGxB,EAAAsB,YAAYm9C,WACzC7uC,OAAOi+D,EAAUttE,MAAQy5C,EAAAtgC,YAAYoT,OACrCq2C,EAAoB0K,EAAW7rE,MAG9BmhE,GACCmI,GAAcD,EAAWE,QAC3B5tE,KAAKohB,MACH/H,EAAAgI,eAAe8tC,cACfuW,EAAiB9kE,KAAKwD,MAAMgrD,OAWpC,IAAKoW,EAAW,MAChB,IAAI2K,EAAgB,IAAI9zB,EAAAntB,MACNrY,EAChBsJ,EAAe9d,EAAAqW,mBAAsC7B,EAAQqO,WAC7DsgD,EACAE,EACAviD,GAEF,OAAQqiD,EAAU1hD,UAChB,KAAK,EAAG,MACR,KAAK,EAAwB,EAAfsL,KAAoBA,EAAc,MAChD,KAAK,EAAwB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IAAuB,MACvE,KAAK,EAAwB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IAAuB,MACvE,QAASnd,QAAO,GAElBk+D,EAAc/gD,aAAeA,EAC7BA,GAAgBo2C,EAAU1hD,SAC1BX,EAASnX,QAAQhI,IAAI6S,EAAOqO,WAAYirD,GACxC,MAIF,KAAK9zB,EAAAtgC,YAAYuH,mBACVH,EAASnX,UAASmX,EAASnX,QAAU,IAAIkQ,KAC9C,IAAIuzD,EAAmBzvE,KAAKuvE,yBACP14D,EACnB3S,EACAypE,GAEF,IAAK8B,EAAkB,OAAO,KAC9BA,EAAiBtvD,aAAeA,EAAe9d,EAAAqW,mBAAqB+2D,EAAiBvqD,WACrF/B,EAASnX,QAAQhI,IAAI6S,EAAOqO,WAAYuqD,GACxC,MAIF,KAAKpzB,EAAAtgC,YAAYgM,SACV5E,EAASnX,UAASmX,EAASnX,QAAU,IAAIkQ,KAC9C,IAAI8L,EAAkB/V,OAAkB4E,EAAQmR,iBAC5CC,EAA6BpR,EAAQoR,gBACrCmoD,EAAmB,IAAI/zB,EAAAn0B,SACzBloB,KAAKgqB,QACLnT,EAAOqO,WACP/E,EAAe9d,EAAAqW,mBAAqB7B,EAAOqO,WAC3CjjB,GAEEouE,EAAyBrwE,KAAKuvE,yBAChCvnD,EACA9jB,EACAypE,GAEF,IAAK0C,EAAwB,OAAO,KAIpC,GAHAA,EACGlwD,aAAeA,EAAe9d,EAAAqW,mBAAqB23D,EAAuBnrD,WAC7EkrD,EAAiBpoD,gBAAkBqoD,EAC/BpoD,EAAiB,CACnB,IAAIqoD,GAAyBtwE,KAAKuvE,yBAChCtnD,EACA/jB,EACAypE,GAEF,IAAK2C,GAAwB,OAAO,KACpCA,GACGnwD,aAAeA,EAAe9d,EAAAqW,mBAAqB43D,GAAuBprD,WAC7EkrD,EAAiBnoD,gBAAkBqoD,GAErCntD,EAASnX,QAAQhI,IAAI6S,EAAOqO,WAAYkrD,GACxC,MAEF,QAASn+D,QAAO,sGAMtBkR,EAASoM,oBAAsBH,MAG/B,IAAsC,IAAAu+B,GAAAnsC,EAAAvf,EAAUqlB,oBAAkBumC,GAAAF,GAAAjsC,QAAAmsC,GAAAlsC,KAAAksC,GAAAF,GAAAjsC,OAAE,CAA3D,IAAAosC,GAAAjsC,EAAAgsC,GAAAvsD,MAAA,GAACsB,GAAAkrD,GAAA,GAAMyiB,GAAAziB,GAAA,GACd77C,OAAOrP,IAAQy5C,EAAAjjC,aAAa0C,SAC5B,IAAIk/C,QAAgB,EACpB,GAAIuV,GAAkB1sE,GAAGxB,EAAAsB,YAAYipB,UAAW,CAC9C,IAAI4jD,GAAkBxwE,KAAKuvE,yBACzBgB,GACArsE,EACAypE,GAEF,IAAK6C,GAAiB,SACtBxV,GAAmBh7D,KAAK2jB,gBAAgB6sD,GAAiB,KAAM,KAAM7C,QAErE3S,GAAmBh7D,KAAK2jB,gBAAgB4sD,GAAmB,KAAM,KAAM5C,GAEzE,GAAK3S,GAAL,CACA,IAAI3zC,GAAYlE,EAASkE,UACpBA,KAAWlE,EAASkE,UAAYA,GAAY,IAAInL,KACrDmL,GAAUrjB,IAAIpB,GAAMo4D,2GAEtB,OAAO73C,GAIT1F,EAAAxb,UAAAovD,8BAAA,SACEpvD,EACAu7D,EACA9xC,EACAuiC,EACA0f,QAAA,IAAAA,MAAyBD,EAAWE,QAEpC,IAAIvQ,EAAuC,KAG3C,GAAIp7D,EAAU4B,GAAGxB,EAAAsB,YAAY6f,SAAU,CACrC,IAAIitD,EAAqBxuE,EAAU4F,YAAYiE,eAC3C4jE,EAAwBe,EAAmB5pE,OAC/CoL,OAAOy9D,EAAwB,GAC/B,IAAIC,EAA4C,OAAtBnS,EAA6BA,EAAkB32D,OAAS,EAClF,GAAI6oE,GAAyBC,EAO3B,OANIhC,GAAcD,EAAWE,QAC3B5tE,KAAKohB,MACH/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAOsrE,EAAsB/qD,SAAS,IAAKgrD,EAAoBhrD,SAAS,KAGhF,KAST,KAPA04C,EAAwBr9D,KAAKy9D,qBAC3BgT,EACAjT,EACA9xC,EACAuiC,EACA0f,IAE0B,OAAO,UAInC,GAA0B,OAAtBnQ,GAA8BA,EAAkB32D,OAOlD,OANI8mE,GAAcD,EAAWE,QAC3B5tE,KAAKohB,MACH/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGzB,KAKX,OAAOngB,KAAKkjB,aACVjhB,EACAo7D,EACA3xC,EACAiiD,IAGNlwD,EA5kCA,CAA8BpE,EAAAyQ,mBAAjBpqB,EAAA+d,iIC9Dbtd,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IAEA,IAAAqZ,EAAArZ,EAAA,GAEAqZ,EAAA4sB,OAAOnkC,UAAUyxC,OAAS,WACxB,OAAO,IAAIg9B,SAAStqC,OAAOpmC,KAAKgsB,KAAK2kD,YAGvCn3D,EAAA4sB,OAAOnkC,UAAU0xC,QAAU,WACzB,OAAO,IAAI+8B,SAAStqC,OAAOpmC,KAAKgsB,KAAK4kD,+BCpBvC,SAAA7hB,GAEA,MAAA2hB,EAAA3hB,EAAA8hB,UAAoC1wE,EAAQ,IAG5C,QAAAyB,KAFAmtD,EAAA2hB,WAEAA,GACA9uE,EAAAuL,WAAA,cAAAvL,EAAAuL,WAAA,gBAAA4hD,EAAAntD,GAAA8uE,EAAA9uE,IAKAmtD,EAAA+hB,kBAAAJ,EAAAK,QACAhiB,EAAAiiB,cAAAN,EAAAO,MACAliB,EAAAmiB,cAAAR,EAAAS,SACApiB,EAAAqiB,QAAA,SAAA1nC,EAAAuR,GAAqCy1B,EAAAW,OAAA3nC,GAAAuR,GACrC8T,EAAAuiB,OAAA,SAAA5nC,GAA+B,OAAAgnC,EAAAW,OAAA3nC,qCCf/B/pC,EAAAD,QAAAO,oBCAA,SAAA8uD,GAEA,IAAAwiB,EAAA,oBAAAn1B,qBAAA,IAAA2S,MAAAhvD,KA6IA,SAAAyxE,IACAxuD,MAAAyuD,kBACAzuD,MAAAyuD,kBAAAzxE,KAAAwxE,GAEAxxE,KAAA0xE,MAAA1xE,KAAAY,KAAA,KAAAZ,KAAAi6B,QAAA,UAAAjX,OAAA0uD,MAWA,SAAAC,EAAA13C,GACAj6B,KAAAi6B,WAAA,mBACAjX,MAAAyuD,kBACAzuD,MAAAyuD,kBAAAzxE,KAAA2xE,GAEA3xE,KAAA0xE,MAAA1xE,KAAAY,KAAA,KAAAZ,KAAAi6B,QAAA,UAAAjX,OAAA0uD,MA/JAH,EAAAK,WAAA,EAEA7wE,OAAA8wE,iBACAN,EAAA,YAAAjwE,GAA0C,OAAAA,GAAA,SAE1Cq2B,WAAgBr2B,OAAA,IAAAwwE,UAAA,GAChBl6C,WAAgBt2B,MAAA,IAAAwwE,UAAA,KAGhB/wE,OAAA8wE,iBACAN,EAAA,aAAAjwE,GAA4C,OAAAA,GAAA,SAE5Cq2B,WAAgBr2B,OAAA,MAAAwwE,UAAA,GAChBl6C,WAAgBt2B,MAAA,MAAAwwE,UAAA,KAGhB/wE,OAAA8wE,iBACAN,EAAA,IAAAA,EAAA,eAAAjwE,GAAmE,SAAAA,IAEnEq2B,WAAgBr2B,OAAA,WAAAwwE,UAAA,GAChBl6C,WAAgBt2B,MAAA,WAAAwwE,UAAA,KAGhB/wE,OAAA8wE,iBACAN,EAAA,YAAAjwE,GAA0C,WAAAA,IAE1Cq2B,WAAgBr2B,MAAA,EAAAwwE,UAAA,GAChBl6C,WAAgBt2B,MAAA,IAAAwwE,UAAA,KAGhB/wE,OAAA8wE,iBACAN,EAAA,aAAAjwE,GAA4C,aAAAA,IAE5Cq2B,WAAgBr2B,MAAA,EAAAwwE,UAAA,GAChBl6C,WAAgBt2B,MAAA,MAAAwwE,UAAA,KAGhB/wE,OAAA8wE,iBACAN,EAAA,IAAAA,EAAA,eAAAjwE,GAAmE,OAAAA,IAAA,IAEnEq2B,WAAgBr2B,MAAA,EAAAwwE,UAAA,GAChBl6C,WAAgBt2B,MAAA,WAAAwwE,UAAA,KAGhB/wE,OAAA8wE,iBACAN,EAAA,cAAAjwE,GAA8C,QAAAA,IAE9Cq2B,WAAgBr2B,MAAA,EAAAwwE,UAAA,GAChBl6C,WAAgBt2B,MAAA,EAAAwwE,UAAA,KAGhB/wE,OAAA8wE,iBACAN,EAAA,aAAAjwE,GAA4C,OAAAywE,KAAAC,OAAA1wE,KAE5Cq2B,WAAgBr2B,MAAAywE,KAAAC,QAAA,eAAAF,UAAA,GAChBl6C,WAAgBt2B,MAAAywE,KAAAC,OAAA,eAAAF,UAAA,GAChBG,oBAAyB3wE,MAAAywE,KAAAC,OAAA,iBAAAF,UAAA,GACzBI,kBAAuB5wE,OAAA,SAAAwwE,UAAA,GACvBK,kBAAuB7wE,MAAA,SAAAwwE,UAAA,GACvBM,SAAc9wE,MAAAywE,KAAAC,OAAA,cAAAF,UAAA,KAGd/wE,OAAA8wE,iBACAN,EAAA,aAAAjwE,GAA4C,OAAAA,IAE5Cq2B,WAAgBr2B,OAAA,uBAAAwwE,UAAA,GAChBl6C,WAAgBt2B,MAAA,uBAAAwwE,UAAA,GAChBG,oBAAyB3wE,MAAA,wBAAAwwE,UAAA,GACzBI,kBAAuB5wE,OAAA,iBAAAwwE,UAAA,GACvBK,kBAAuB7wE,MAAA,iBAAAwwE,UAAA,GACvBM,SAAc9wE,MAAA,sBAAAwwE,UAAA,KAGdP,EAAA,IAAAQ,KAAAM,MAEAd,EAAA,aAAAjwE,GACA,IAAAZ,EAAAqxE,KAAAM,MAAA/wE,MACA,OAAAA,EAAA,GAAAZ,KAGA6wE,EAAA,gBAAAjwE,GAGA,kBADAA,GAAA,WADAA,OAAA,gBACAA,IAAA,eACAA,IAAA,oBAGAiwE,EAAA,cAAAjwE,EAAAk1B,GAEA,OAAAl1B,IADAk1B,GAAA,IACAl1B,IAAA,GAAAk1B,GAGA+6C,EAAA,cAAAjwE,EAAAk1B,GAEA,OAAAl1B,KADAk1B,GAAA,IACAl1B,GAAA,GAAAk1B,GAGA+6C,EAAA,IAAAQ,KAAAO,IAEAf,EAAA,IAAAQ,KAAAjmB,IAEAylB,EAAA,IAAAQ,KAAA7+C,IAEAq+C,EAAA,KAAAQ,KAAAt1B,KAEA80B,EAAA,MAAAQ,KAAAQ,MAGAhB,EAAA,iBAAAjwE,GACA,WAAAywE,KAAAO,IAAAhxE,EAAAywE,KAAAS,MAAAlxE,IACA,EAAAywE,KAAAU,MAAA,GAAAnxE,GAEAywE,KAAAU,MAAAnxE,IAGAiwE,EAAA,gBAAAvjE,EAAAC,EAAA5D,GACA,OAAAA,EAAA2D,EAAAC,GAGAsjE,EAAA,KAAAQ,KAAAW,KAEAnB,EAAA,MAAAQ,KAAAS,MAEAjB,EAAA,kBAAAoB,EAAAC,GACA,OAAAb,KAAAO,IAAAK,GAAAZ,KAAAc,KAAAD,IAGArB,EAAA,eAAAjwE,GACA,IAAAwiD,EAAAxiD,GAAA,WACAyiD,GAAA,SAAAziD,IAAA,EAIA,OAFAwiD,GADAxiD,EAAAwiD,EAAAC,IACA,WACAA,GAAA,MAAAziD,IAAA,KAIAiwE,EAAA,iBAAAjwE,GACA,OAAAA,GAAA,QAAAA,GAAA,iBAAAA,GAUAkwE,EAAAvvE,UAAAlB,OAAAY,OAAAqhB,MAAA/gB,WACAuvE,EAAAvvE,UAAArB,KAAA,mBACA4wE,EAAAvvE,UAAAg4B,QAAA,cAEAs3C,EAAA,uBACA,UAAAC,GAWAG,EAAA1vE,UAAAlB,OAAAY,OAAAqhB,MAAA/gB,WACA0vE,EAAA1vE,UAAArB,KAAA,iBAEA2wE,EAAA,gBAAAuB,EAAA74C,GACA,GAAA64C,EAAA,OAAAA,EACA,UAAAnB,EAAA13C,IAGAs3C,EAAA,oBAAAjwE,GACA,OAAAA,GAGAiwE,EAAA,kBAAApnD,EAAA4oD,GACA,SAAAC,SAAA7oD,OAAA4+C,IAGAptB,OAAA,uBAAAD,GACA,OAAAC,OAAAmM,aAAAt2C,MAAAmqC,OAAAD,IAGAC,OAAA,wBAAAD,GACA,OAAAC,OAAAs3B,cAAAzhE,MAAAmqC,OAAAD,IAGA61B,EAAA,UAAA2B,OAAAC,UAEA5B,EAAA,iBAAAx3D,GACA,uBAAAA,GAGAw3D,EAAA,qBAAAx3D,GACA,uBAAAA,GAAA,iBAAAA,GAGAw3D,EAAA,kBAAAx3D,GACA,uBAAAA,gBAAA4hC,QAGA41B,EAAA,QAAAx7D,MAAAgyD,QAEAwJ,EAAA,mBAAAnrE,GACA,OAAAA,GAGAmrE,EAAA,cAAAoB,EAAAC,GACA,OAAAD,EAAAC,GAGArB,EAAA,eAAAoB,EAAAC,GACA,OAAAb,KAAAC,OAAAW,EAAAC,IAGArB,EAAA,OAAAQ,KAEAR,EAAA,aACA,IAAA6B,EAAA,IAAA9/B,WAAA,GACA+/B,EAAA,EACA,OACAzsC,SAAA2qC,EAAA,4BAAA96C,GACA,KAAAA,KAAA,YACA,GAAA48C,EAAA58C,EAAA28C,EAAAvsE,OAAA,CACA,IAAAysE,EAAAF,GACAA,EAAA,IAAA9/B,WAAAy+B,KAAAjmB,IAAA,MAAAsnB,EAAAvsE,OAAA4vB,EAAA,EAAA28C,EAAAvsE,UACA7C,IAAAsvE,GAEA,IAAA5pC,EAAA2pC,EAEA,OADA,GAAAA,GAAA58C,KAAA48C,EAAA,KAAAA,IACA3pC,GAEAnY,KAAAggD,EAAA,wBAAA7nC,KACA6pC,KAAAhC,EAAA,wBAAAiC,EAAAC,EAAAh9C,GACA28C,EAAAM,WAAAF,EAAAC,IAAAh9C,MAjBA,GAsBA86C,EAAA,MAAAA,EAAA,kBAAA7nC,EAAApoC,EAAA4kC,GACAktC,KAAA1pC,GAAA,EAAAxD,IAAA5kC,GAGAiwE,EAAA,KAAAA,EAAA,iBAAA7nC,EAAAxD,GACA,OAAAktC,KAAA1pC,GAAA,EAAAxD,yCCvPA,SAAA6oB,GAAA,MAAA4kB,EAAA,IAAAC,aAAA,GACAC,EAAA,IAAAC,aAAAH,EAAA1tC,QACA8tC,EAAA,IAAAC,WAAAL,EAAA1tC,QAEA8oB,EAAAklB,WAAA,SAAA3yE,GAEA,OADAuyE,EAAA,GAAAvyE,EACAyyE,EAAA,IAGAhlB,EAAAmlB,WAAA,SAAA5yE,GAEA,OADAyyE,EAAA,GAAAzyE,EACAuyE,EAAA,IAGA9kB,EAAAolB,WAAA,SAAA7yE,GAEA,OADAqyE,EAAA,GAAAryE,EACA+d,QAAA00D,EAAA,GAAAA,EAAA,KAGAhlB,EAAAqlB,WAAA,SAAA9yE,GAGA,OAFAyyE,EAAA,GAAA7jC,QAAA5uC,GACAyyE,EAAA,GAAA5jC,SAAA7uC,GACAqyE,EAAA,wCCtBA,SAAA5kB,GAAA,MAAAslB,EAAAtlB,EAAAslB,MAA4Bl0E,EAAQ,IAEpC4uD,EAAAz8B,SAAA+hD,EAAAC,KAEAvlB,EAAA18B,QAAAgiD,EAAAE,IAEAxlB,EAAA1vC,QAAA,SAAAm1D,EAAAC,GACA,OAAAJ,EAAAK,SAAAF,EAAAC,IAGA1lB,EAAA7e,QAAA,SAAA5uC,GACA,OAAAA,EAAAqzE,KAGA5lB,EAAA5e,SAAA,SAAA7uC,GACA,OAAAA,EAAAszE,MAGA7lB,EAAAlG,QAAA,SAAAvhD,EAAAC,GACA,OAAAD,EAAA8hB,IAAA7hB,IAGAwnD,EAAAgS,QAAA,SAAAz5D,EAAAC,GACA,OAAAD,EAAAutE,IAAAttE,IAGAwnD,EAAAjG,QAAA,SAAAxhD,EAAAC,GACA,OAAAD,EAAAwtE,IAAAvtE,IAGAwnD,EAAAgmB,QAAA,SAAAztE,EAAAC,GACA,OAAAD,EAAA0tE,IAAAztE,IAGAwnD,EAAAkmB,UAAA,SAAA3tE,EAAAC,GACA,OAAAD,EAAA4tE,aAAAF,IAAAztE,EAAA2tE,cAAAC,YAGApmB,EAAAqmB,QAAA,SAAA9tE,EAAAC,GACA,OAAAD,EAAA+tE,IAAA9tE,IAGAwnD,EAAAumB,UAAA,SAAAhuE,EAAAC,GACA,OAAAD,EAAA4tE,aAAAG,IAAA9tE,EAAA2tE,cAAAC,YAGApmB,EAAA58B,QAAA,SAAA7qB,EAAAC,GACA,OAAAD,EAAAiuE,IAAAhuE,IAGAwnD,EAAAv8B,OAAA,SAAAlrB,EAAAC,GACA,OAAAD,EAAAkuE,GAAAjuE,IAGAwnD,EAAA0mB,QAAA,SAAAnuE,EAAAC,GACA,OAAAD,EAAAouE,IAAAnuE,IAGAwnD,EAAA38B,QAAA,SAAA9qB,EAAAC,GACA,OAAAD,EAAAquE,IAAApuE,IAGAwnD,EAAA6mB,QAAA,SAAAtuE,EAAAC,GACA,OAAAD,EAAAuuE,IAAAtuE,IAGAwnD,EAAAxC,UAAA,SAAAjlD,EAAAC,GACA,OAAAD,EAAAwuE,KAAAvuE,IAGAwnD,EAAAt8B,QAAA,SAAAnxB,GACA,OAAAA,EAAAy0E,OAGAhnB,EAAAinB,OAAA,SAAA1uE,EAAAC,GACA,OAAAD,EAAA2uE,GAAA1uE,IAGAwnD,EAAA78B,OAAA,SAAA5qB,EAAAC,GACA,OAAAD,EAAA4uE,GAAA3uE,IAGAwnD,EAAA1C,UAAA,SAAA/qD,EAAAowD,GACAz/C,OAAAy/C,GAAA,IAAAA,IAAA,IACA,IAAAkE,EAAAye,EAAA8B,QAAAzkB,EAAA,GACA,OAAApwD,EAAA8nB,IAAAwsC,GAAA2f,IAAA3f,EAAAmgB,QAGAhnB,EAAAiS,UAAA,SAAA1/D,GACA,WAAAA,EAAAszE,MAAAtzE,EAAAqzE,KAAA,GAAArzE,EAAAqzE,KAAAr2D,GAAAsZ,YACA,IAAAt2B,EAAAszE,MAAAtzE,EAAAqzE,KAAAr2D,GAAAqZ,WAAAr2B,EAAAqzE,IAAA,GAGA5lB,EAAAmS,WAAA,SAAA5/D,GACA,WAAAA,EAAAszE,MAAAtzE,EAAAqzE,KAAA,GAAArzE,EAAAqzE,KAAAp2D,IAAAqZ,YACA,IAAAt2B,EAAAszE,MAAAtzE,EAAAqzE,KAAAp2D,IAAAoZ,WAAAr2B,EAAAqzE,IAAA,GAGA5lB,EAAAqS,WAAA,SAAA9/D,GACA,WAAAA,EAAAszE,MAAAtzE,EAAAqzE,KAAA,IACA,IAAArzE,EAAAszE,MAAAtzE,EAAAqzE,IAAA,GAGA5lB,EAAAkS,UAAA,SAAA3/D,GACA,WAAAA,EAAAszE,MAAAtzE,EAAAqzE,KAAA,GAAArzE,EAAAqzE,KAAAh2D,GAAAiZ,WAGAm3B,EAAAoS,WAAA,SAAA7/D,GACA,WAAAA,EAAAszE,MAAAtzE,EAAAqzE,KAAA,GAAArzE,EAAAqzE,KAAA/1D,IAAAgZ,WAGAm3B,EAAAsS,WAAA,SAAA//D,GACA,WAAAA,EAAAszE,MAGA7lB,EAAAuS,YAAA,SAAAhgE,GACA,WAAAA,EAAAszE,OAAA,IAAAtzE,EAAAqzE,KAAA,IAAArzE,EAAAqzE,MAGA,MAAAyB,EAAA/B,EAAAgC,WAAAp3D,IAAAizD,kBACAoE,EAAAjC,EAAAgC,WAAAp3D,IAAAkzD,kBAEApjB,EAAAwS,WAAA,SAAAjgE,GACA,OAAAA,EAAAi1E,IAAAH,IAAA90E,EAAAk1E,IAAAF,IAGA,MAAAG,EAAApC,EAAAgC,WAAAn3D,IAAAgzD,kBACAwE,EAAArC,EAAAgC,WAAAn3D,IAAAizD,kBAEApjB,EAAA0S,WAAA,SAAAngE,GACA,OAAAA,EAAAi1E,IAAAE,IAAAn1E,EAAAk1E,IAAAE,IAGA3nB,EAAAyS,WAAA,SAAAlgE,GACA,OAAAytD,EAAAgjB,KAAAC,OAAA1wE,EAAAq1E,aAGA5nB,EAAA2S,WAAA,SAAApgE,GACA,OAAAA,EAAAq1E,YAGA5nB,EAAA6nB,cAAA,SAAAt1E,EAAAu1E,GACA,OAAAA,EAAAv1E,EAAA4zE,aAAA5zE,GAAAqjB,SAAA,sCC9IAhlB,EAAAD,QAAA20E,EAKA,IAAAyC,EAAA,KAEA,IACAA,EAAA,IAAAC,YAAAC,SAAA,IAAAD,YAAA3wC,OAAA,IAAAkN,YACA,u2BACS5zC,QACR,MAAAy8C,IAcD,SAAAk4B,EAAAM,EAAAC,EAAAiC,GAMA72E,KAAA20E,IAAA,EAAAA,EAMA30E,KAAA40E,KAAA,EAAAA,EAMA50E,KAAA62E,aAoCA,SAAAI,EAAAC,GACA,YAAAA,KAAA,YAXA7C,EAAApyE,UAAAk1E,WAEAp2E,OAAAC,eAAAqzE,EAAApyE,UAAA,cAAqDX,OAAA,IAkBrD+yE,EAAA4C,SAOA,IAAAG,KAOAC,KAQA,SAAAlB,EAAA70E,EAAAu1E,GACA,IAAAK,EAAAI,EAAAC,EACA,OAAAV,GAEAU,EAAA,IADAj2E,KAAA,IACAA,EAAA,OACAg2E,EAAAD,EAAA/1E,IAEAg2E,GAEAJ,EAAAxC,EAAApzE,GAAA,EAAAA,GAAA,WACAi2E,IACAF,EAAA/1E,GAAA41E,GACAA,IAGAK,GAAA,MADAj2E,GAAA,IACAA,EAAA,OACAg2E,EAAAF,EAAA91E,IAEAg2E,GAEAJ,EAAAxC,EAAApzE,IAAA,WACAi2E,IACAH,EAAA91E,GAAA41E,GACAA,GAmBA,SAAAb,EAAA/0E,EAAAu1E,GACA,GAAAW,MAAAl2E,GACA,OAAAu1E,EAAAY,EAAAnD,EACA,GAAAuC,EAAA,CACA,GAAAv1E,EAAA,EACA,OAAAm2E,EACA,GAAAn2E,GAAAo2E,EACA,OAAAC,MACK,CACL,GAAAr2E,IAAAs2E,EACA,OAAAjgD,EACA,GAAAr2B,EAAA,GAAAs2E,EACA,OAAAhgD,EAEA,OAAAt2B,EAAA,EACA+0E,GAAA/0E,EAAAu1E,GAAAgB,MACAnD,EAAApzE,EAAAw2E,EAAA,EAAAx2E,EAAAw2E,EAAA,EAAAjB,GAmBA,SAAAnC,EAAAqD,EAAAC,EAAAnB,GACA,WAAAxC,EAAA0D,EAAAC,EAAAnB,GA5CAxC,EAAA8B,UAkCA9B,EAAAgC,aAsBAhC,EAAAK,WASA,IAAAuD,EAAAlG,KAAAmG,IASA,SAAAC,EAAAhuD,EAAA0sD,EAAA9D,GACA,OAAA5oD,EAAAtjB,OACA,MAAAmc,MAAA,gBACA,WAAAmH,GAAA,aAAAA,GAAA,cAAAA,GAAA,cAAAA,EACA,OAAAmqD,EASA,GARA,iBAAAuC,GAEA9D,EAAA8D,EACAA,GAAA,GAEAA,OAEA9D,KAAA,IACA,MAAAA,EACA,MAAAqF,WAAA,SAEA,IAAAj2E,EACA,IAAAA,EAAAgoB,EAAAgjD,QAAA,QACA,MAAAnqD,MAAA,mBACA,OAAA7gB,EACA,OAAAg2E,EAAAhuD,EAAArU,UAAA,GAAA+gE,EAAA9D,GAAA8E,MAQA,IAHA,IAAAQ,EAAAhC,EAAA4B,EAAAlF,EAAA,IAEA3oD,EAAAkqD,EACAj0E,EAAA,EAAmBA,EAAA8pB,EAAAtjB,OAAgBxG,GAAA,GACnC,IAAAo2B,EAAAs7C,KAAA7+C,IAAA,EAAA/I,EAAAtjB,OAAAxG,GACAiB,EAAA0xE,SAAA7oD,EAAArU,UAAAzV,IAAAo2B,GAAAs8C,GACA,GAAAt8C,EAAA,GACA,IAAA6hD,EAAAjC,EAAA4B,EAAAlF,EAAAt8C,IACArM,IAAA0qD,IAAAwD,GAAAlvD,IAAAitD,EAAA/0E,SAGA8oB,GADAA,IAAA0qD,IAAAuD,IACAjvD,IAAAitD,EAAA/0E,IAIA,OADA8oB,EAAAysD,WACAzsD,EAoBA,SAAAmuD,EAAAt9B,EAAA47B,GACA,uBAAA57B,EACAo7B,EAAAp7B,EAAA47B,GACA,iBAAA57B,EACAk9B,EAAAl9B,EAAA47B,GAEAnC,EAAAz5B,EAAA05B,IAAA15B,EAAA25B,KAAA,kBAAAiC,IAAA57B,EAAA47B,UAfAxC,EAAA8D,aAyBA9D,EAAAkE,YAUA,IAcAT,EAAAU,WAOAd,EAAAI,IAOAF,EAAAF,EAAA,EAOAe,EAAAtC,EA5BA,OAkCA7B,EAAA6B,EAAA,GAMA9B,EAAAC,OAMA,IAAAmD,EAAAtB,EAAA,MAMA9B,EAAAoD,QAMA,IAAAlD,EAAA4B,EAAA,GAMA9B,EAAAE,MAMA,IAAAmE,EAAAvC,EAAA,MAMA9B,EAAAqE,OAMA,IAAAC,EAAAxC,GAAA,GAMA9B,EAAAsE,UAMA,IAAA/gD,EAAA88C,GAAA,iBAMAL,EAAAz8C,YAMA,IAAA+/C,EAAAjD,GAAA,SAMAL,EAAAsD,qBAMA,IAAAhgD,EAAA+8C,EAAA,kBAMAL,EAAA18C,YAMA,IAAAihD,EAAAvE,EAAApyE,UAMA22E,EAAAC,MAAA,WACA,OAAA74E,KAAA62E,SAAA72E,KAAA20E,MAAA,EAAA30E,KAAA20E,KAOAiE,EAAAjC,SAAA,WACA,OAAA32E,KAAA62E,UACA72E,KAAA40E,OAAA,GAAAkD,GAAA93E,KAAA20E,MAAA,GACA30E,KAAA40E,KAAAkD,GAAA93E,KAAA20E,MAAA,IAUAiE,EAAAj0D,SAAA,SAAAouD,GAEA,IADAA,KAAA,IACA,MAAAA,EACA,MAAAqF,WAAA,SACA,GAAAp4E,KAAA84E,SACA,UACA,GAAA94E,KAAA+4E,aAAA,CACA,GAAA/4E,KAAAi2E,GAAAt+C,GAAA,CAGA,IAAAqhD,EAAA3C,EAAAtD,GACAiC,EAAAh1E,KAAAg1E,IAAAgE,GACAC,EAAAjE,EAAAF,IAAAkE,GAAAnE,IAAA70E,MACA,OAAAg1E,EAAArwD,SAAAouD,GAAAkG,EAAAJ,QAAAl0D,SAAAouD,GAEA,UAAA/yE,KAAA63E,MAAAlzD,SAAAouD,GAQA,IAHA,IAAAsF,EAAAhC,EAAA4B,EAAAlF,EAAA,GAAA/yE,KAAA62E,UACAqC,EAAAl5E,KACAoqB,EAAA,KACA,CACA,IAAA+uD,EAAAD,EAAAlE,IAAAqD,GAEAe,GADAF,EAAArE,IAAAsE,EAAArE,IAAAuD,IAAAQ,UAAA,GACAl0D,SAAAouD,GAEA,IADAmG,EAAAC,GACAL,SACA,OAAAM,EAAAhvD,EAEA,KAAAgvD,EAAAvyE,OAAA,GACAuyE,EAAA,IAAAA,EACAhvD,EAAA,GAAAgvD,EAAAhvD,IASAwuD,EAAAS,YAAA,WACA,OAAAr5E,KAAA40E,MAOAgE,EAAAU,oBAAA,WACA,OAAAt5E,KAAA40E,OAAA,GAOAgE,EAAAW,WAAA,WACA,OAAAv5E,KAAA20E,KAOAiE,EAAAY,mBAAA,WACA,OAAAx5E,KAAA20E,MAAA,GAOAiE,EAAAa,cAAA,WACA,GAAAz5E,KAAA+4E,aACA,OAAA/4E,KAAAi2E,GAAAt+C,GAAA,GAAA33B,KAAA63E,MAAA4B,gBAEA,IADA,IAAAx+B,EAAA,GAAAj7C,KAAA40E,KAAA50E,KAAA40E,KAAA50E,KAAA20E,IACA+E,EAAA,GAAsBA,EAAA,GACtB,IAAAz+B,EAAA,GAAAy+B,GAD+BA,KAG/B,UAAA15E,KAAA40E,KAAA8E,EAAA,GAAAA,EAAA,GAOAd,EAAAE,OAAA,WACA,WAAA94E,KAAA40E,MAAA,IAAA50E,KAAA20E,KAOAiE,EAAAe,IAAAf,EAAAE,OAMAF,EAAAG,WAAA,WACA,OAAA/4E,KAAA62E,UAAA72E,KAAA40E,KAAA,GAOAgE,EAAAgB,WAAA,WACA,OAAA55E,KAAA62E,UAAA72E,KAAA40E,MAAA,GAOAgE,EAAAiB,MAAA,WACA,aAAA75E,KAAA20E,MAOAiE,EAAAkB,OAAA,WACA,aAAA95E,KAAA20E,MAQAiE,EAAAmB,OAAA,SAAApnD,GAGA,OAFAskD,EAAAtkD,KACAA,EAAA4lD,EAAA5lD,KACA3yB,KAAA62E,WAAAlkD,EAAAkkD,UAAA72E,KAAA40E,OAAA,OAAAjiD,EAAAiiD,OAAA,SAEA50E,KAAA40E,OAAAjiD,EAAAiiD,MAAA50E,KAAA20E,MAAAhiD,EAAAgiD,MASAiE,EAAA3C,GAAA2C,EAAAmB,OAOAnB,EAAAoB,UAAA,SAAArnD,GACA,OAAA3yB,KAAAi2E,GAAAtjD,IASAimD,EAAAqB,IAAArB,EAAAoB,UAQApB,EAAA1C,GAAA0C,EAAAoB,UAOApB,EAAAsB,SAAA,SAAAvnD,GACA,OAAA3yB,KAAAm6E,KAAAxnD,GAAA,GASAimD,EAAAwB,GAAAxB,EAAAsB,SAOAtB,EAAAyB,gBAAA,SAAA1nD,GACA,OAAA3yB,KAAAm6E,KAAAxnD,IAAA,GASAimD,EAAApC,IAAAoC,EAAAyB,gBAQAzB,EAAA0B,GAAA1B,EAAAyB,gBAOAzB,EAAA2B,YAAA,SAAA5nD,GACA,OAAA3yB,KAAAm6E,KAAAxnD,GAAA,GASAimD,EAAA4B,GAAA5B,EAAA2B,YAOA3B,EAAA6B,mBAAA,SAAA9nD,GACA,OAAA3yB,KAAAm6E,KAAAxnD,IAAA,GASAimD,EAAArC,IAAAqC,EAAA6B,mBAQA7B,EAAA8B,GAAA9B,EAAA6B,mBAQA7B,EAAA+B,QAAA,SAAAhoD,GAGA,GAFAskD,EAAAtkD,KACAA,EAAA4lD,EAAA5lD,IACA3yB,KAAAi2E,GAAAtjD,GACA,SACA,IAAAioD,EAAA56E,KAAA+4E,aACA8B,EAAAloD,EAAAomD,aACA,OAAA6B,IAAAC,GACA,GACAD,GAAAC,EACA,EAEA76E,KAAA62E,SAGAlkD,EAAAiiD,OAAA,EAAA50E,KAAA40E,OAAA,GAAAjiD,EAAAiiD,OAAA50E,KAAA40E,MAAAjiD,EAAAgiD,MAAA,EAAA30E,KAAA20E,MAAA,OAFA30E,KAAA60E,IAAAliD,GAAAomD,cAAA,KAYAH,EAAAuB,KAAAvB,EAAA+B,QAMA/B,EAAAkC,OAAA,WACA,OAAA96E,KAAA62E,UAAA72E,KAAAi2E,GAAAt+C,GACAA,EACA33B,KAAA+1E,MAAA3sD,IAAAmrD,IAQAqE,EAAAf,IAAAe,EAAAkC,OAOAlC,EAAAxvD,IAAA,SAAA2xD,GACA9D,EAAA8D,KACAA,EAAAxC,EAAAwC,IAIA,IAAAC,EAAAh7E,KAAA40E,OAAA,GACAqG,EAAA,MAAAj7E,KAAA40E,KACAsG,EAAAl7E,KAAA20E,MAAA,GACAwG,EAAA,MAAAn7E,KAAA20E,IAEAyG,EAAAL,EAAAnG,OAAA,GACAyG,EAAA,MAAAN,EAAAnG,KACA0G,EAAAP,EAAApG,MAAA,GAGA4G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAYA,OAVAD,IADAC,GAAAP,GAHA,MAAAJ,EAAApG,QAIA,GAGA6G,IADAC,GAAAP,EAAAI,KACA,GAGAC,IADAC,GAAAP,EAAAI,KACA,GAEAE,GAAAP,EAAAI,EAEA1G,GANA+G,GAAA,QAMA,IATAC,GAAA,QAQAH,GAAA,QACA,IAHAC,GAAA,OAGAx7E,KAAA62E,WAQA+B,EAAA+C,SAAA,SAAAC,GAGA,OAFA3E,EAAA2E,KACAA,EAAArD,EAAAqD,IACA57E,KAAAopB,IAAAwyD,EAAA/D,QASAe,EAAA/D,IAAA+D,EAAA+C,SAOA/C,EAAAiD,SAAA,SAAAC,GACA,GAAA97E,KAAA84E,SACA,OAAAxE,EAKA,GAJA2C,EAAA6E,KACAA,EAAAvD,EAAAuD,IAGAhF,EAKA,OAAApC,EAJAoC,EAAAhC,IAAA90E,KAAA20E,IACA30E,KAAA40E,KACAkH,EAAAnH,IACAmH,EAAAlH,MACAkC,EAAAiF,WAAA/7E,KAAA62E,UAGA,GAAAiF,EAAAhD,SACA,OAAAxE,EACA,GAAAt0E,KAAAi2E,GAAAt+C,GACA,OAAAmkD,EAAAjC,QAAAliD,EAAA28C,EACA,GAAAwH,EAAA7F,GAAAt+C,GACA,OAAA33B,KAAA65E,QAAAliD,EAAA28C,EAEA,GAAAt0E,KAAA+4E,aACA,OAAA+C,EAAA/C,aACA/4E,KAAA63E,MAAA/C,IAAAgH,EAAAjE,OAEA73E,KAAA63E,MAAA/C,IAAAgH,GAAAjE,MACK,GAAAiE,EAAA/C,aACL,OAAA/4E,KAAA80E,IAAAgH,EAAAjE,aAGA,GAAA73E,KAAAo6E,GAAA3B,IAAAqD,EAAA1B,GAAA3B,GACA,OAAApC,EAAAr2E,KAAA22E,WAAAmF,EAAAnF,WAAA32E,KAAA62E,UAKA,IAAAmE,EAAAh7E,KAAA40E,OAAA,GACAqG,EAAA,MAAAj7E,KAAA40E,KACAsG,EAAAl7E,KAAA20E,MAAA,GACAwG,EAAA,MAAAn7E,KAAA20E,IAEAyG,EAAAU,EAAAlH,OAAA,GACAyG,EAAA,MAAAS,EAAAlH,KACA0G,EAAAQ,EAAAnH,MAAA,GACAqH,EAAA,MAAAF,EAAAnH,IAEA4G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAqBA,OAnBAD,IADAC,GAAAP,EAAAa,KACA,GAGAR,IADAC,GAAAP,EAAAc,KACA,GACAP,GAAA,MAEAD,IADAC,GAAAN,EAAAG,KACA,GAGAC,IADAC,GAAAP,EAAAe,KACA,GACAR,GAAA,MAEAD,IADAC,GAAAN,EAAAI,KACA,GACAE,GAAA,MAEAD,IADAC,GAAAL,EAAAE,KACA,GAEAE,GAAAP,EAAAgB,EAAAf,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA1G,GAZA+G,GAAA,QAYA,IAlBAC,GAAA,QAiBAH,GAAA,QACA,IAHAC,GAAA,OAGAx7E,KAAA62E,WASA+B,EAAA9D,IAAA8D,EAAAiD,SAQAjD,EAAAqD,OAAA,SAAAC,GAGA,GAFAjF,EAAAiF,KACAA,EAAA3D,EAAA2D,IACAA,EAAApD,SACA,MAAA91D,MAAA,oBAaA,IAWAm5D,EAAAjD,EAAAkD,EArBA,GAAAtF,EAIA,OAAA92E,KAAA62E,WACA,aAAA72E,KAAA40E,OACA,IAAAsH,EAAAvH,MAAA,IAAAuH,EAAAtH,KAUAF,GANA10E,KAAA62E,SAAAC,EAAAuF,MAAAvF,EAAAwF,OACAt8E,KAAA20E,IACA30E,KAAA40E,KACAsH,EAAAvH,IACAuH,EAAAtH,MAEAkC,EAAAiF,WAAA/7E,KAAA62E,UARA72E,KAWA,GAAAA,KAAA84E,SACA,OAAA94E,KAAA62E,SAAAY,EAAAnD,EAEA,GAAAt0E,KAAA62E,SA6BK,CAKL,GAFAqF,EAAArF,WACAqF,IAAAhH,cACAgH,EAAA1B,GAAAx6E,MACA,OAAAy3E,EACA,GAAAyE,EAAA1B,GAAAx6E,KAAA81E,KAAA,IACA,OAAA4C,EACA0D,EAAA3E,MAtCA,CAGA,GAAAz3E,KAAAi2E,GAAAt+C,GACA,OAAAukD,EAAAjG,GAAA1B,IAAA2H,EAAAjG,GAAA0C,GACAhhD,EACAukD,EAAAjG,GAAAt+C,GACA48C,GAIA4H,EADAn8E,KAAA61E,IAAA,GACAb,IAAAkH,GAAAvG,IAAA,IACAM,GAAA3B,GACA4H,EAAAnD,aAAAxE,EAAAoE,GAEAO,EAAAl5E,KAAA60E,IAAAqH,EAAApH,IAAAqH,IACAC,EAAAD,EAAA/yD,IAAA8vD,EAAAlE,IAAAkH,UAIS,GAAAA,EAAAjG,GAAAt+C,GACT,OAAA33B,KAAA62E,SAAAY,EAAAnD,EACA,GAAAt0E,KAAA+4E,aACA,OAAAmD,EAAAnD,aACA/4E,KAAA63E,MAAA7C,IAAAkH,EAAArE,OACA73E,KAAA63E,MAAA7C,IAAAkH,GAAArE,MACS,GAAAqE,EAAAnD,aACT,OAAA/4E,KAAAg1E,IAAAkH,EAAArE,aACAuE,EAAA9H,EAmBA,IADA4E,EAAAl5E,KACAk5E,EAAA3C,IAAA2F,IAAA,CAGAC,EAAApK,KAAAjmB,IAAA,EAAAimB,KAAAQ,MAAA2G,EAAAvC,WAAAuF,EAAAvF,aAWA,IAPA,IAAA4F,EAAAxK,KAAAt1B,KAAAs1B,KAAA9a,IAAAklB,GAAApK,KAAAyK,KACAC,EAAAF,GAAA,KAAAtE,EAAA,EAAAsE,EAAA,IAIAG,EAAArG,EAAA8F,GACAQ,EAAAD,EAAA5H,IAAAoH,GACAS,EAAA5D,cAAA4D,EAAAnC,GAAAtB,IAGAyD,GADAD,EAAArG,EADA8F,GAAAM,EACAz8E,KAAA62E,WACA/B,IAAAoH,GAKAQ,EAAA5D,WACA4D,EAAAnI,GAEA6H,IAAAhzD,IAAAszD,GACAxD,IAAArE,IAAA8H,GAEA,OAAAP,GASAxD,EAAA5D,IAAA4D,EAAAqD,OAOArD,EAAAgE,OAAA,SAAAV,GAKA,OAJAjF,EAAAiF,KACAA,EAAA3D,EAAA2D,IAGApF,EAOApC,GANA10E,KAAA62E,SAAAC,EAAA+F,MAAA/F,EAAAgG,OACA98E,KAAA20E,IACA30E,KAAA40E,KACAsH,EAAAvH,IACAuH,EAAAtH,MAEAkC,EAAAiF,WAAA/7E,KAAA62E,UAGA72E,KAAA60E,IAAA70E,KAAAg1E,IAAAkH,GAAApH,IAAAoH,KASAtD,EAAAvD,IAAAuD,EAAAgE,OAQAhE,EAAAM,IAAAN,EAAAgE,OAMAhE,EAAA7C,IAAA,WACA,OAAArB,GAAA10E,KAAA20E,KAAA30E,KAAA40E,KAAA50E,KAAA62E,WAQA+B,EAAArD,IAAA,SAAA5iD,GAGA,OAFAskD,EAAAtkD,KACAA,EAAA4lD,EAAA5lD,IACA+hD,EAAA10E,KAAA20E,IAAAhiD,EAAAgiD,IAAA30E,KAAA40E,KAAAjiD,EAAAiiD,KAAA50E,KAAA62E,WAQA+B,EAAApD,GAAA,SAAA7iD,GAGA,OAFAskD,EAAAtkD,KACAA,EAAA4lD,EAAA5lD,IACA+hD,EAAA10E,KAAA20E,IAAAhiD,EAAAgiD,IAAA30E,KAAA40E,KAAAjiD,EAAAiiD,KAAA50E,KAAA62E,WAQA+B,EAAAlD,IAAA,SAAA/iD,GAGA,OAFAskD,EAAAtkD,KACAA,EAAA4lD,EAAA5lD,IACA+hD,EAAA10E,KAAA20E,IAAAhiD,EAAAgiD,IAAA30E,KAAA40E,KAAAjiD,EAAAiiD,KAAA50E,KAAA62E,WAQA+B,EAAAmE,UAAA,SAAAC,GAGA,OAFA/F,EAAA+F,KACAA,IAAAnE,SACA,IAAAmE,GAAA,IACAh9E,KACAg9E,EAAA,GACAtI,EAAA10E,KAAA20E,KAAAqI,EAAAh9E,KAAA40E,MAAAoI,EAAAh9E,KAAA20E,MAAA,GAAAqI,EAAAh9E,KAAA62E,UAEAnC,EAAA,EAAA10E,KAAA20E,KAAAqI,EAAA,GAAAh9E,KAAA62E,WASA+B,EAAAjD,IAAAiD,EAAAmE,UAOAnE,EAAAqE,WAAA,SAAAD,GAGA,OAFA/F,EAAA+F,KACAA,IAAAnE,SACA,IAAAmE,GAAA,IACAh9E,KACAg9E,EAAA,GACAtI,EAAA10E,KAAA20E,MAAAqI,EAAAh9E,KAAA40E,MAAA,GAAAoI,EAAAh9E,KAAA40E,MAAAoI,EAAAh9E,KAAA62E,UAEAnC,EAAA10E,KAAA40E,MAAAoI,EAAA,GAAAh9E,KAAA40E,MAAA,OAAA50E,KAAA62E,WASA+B,EAAA/C,IAAA+C,EAAAqE,WAOArE,EAAAsE,mBAAA,SAAAF,GAIA,GAHA/F,EAAA+F,KACAA,IAAAnE,SAEA,KADAmE,GAAA,IAEA,OAAAh9E,KAEA,IAAA40E,EAAA50E,KAAA40E,KACA,OAAAoI,EAAA,GAEAtI,EADA10E,KAAA20E,MACAqI,EAAApI,GAAA,GAAAoI,EAAApI,IAAAoI,EAAAh9E,KAAA62E,UAEAnC,EADS,KAAAsI,EACTpI,EAEAA,IAAAoI,EAAA,GAFA,EAAAh9E,KAAA62E,WAYA+B,EAAA9C,KAAA8C,EAAAsE,mBAQAtE,EAAAuE,MAAAvE,EAAAsE,mBAMAtE,EAAAzD,SAAA,WACA,OAAAn1E,KAAA62E,SAEAnC,EAAA10E,KAAA20E,IAAA30E,KAAA40E,MAAA,GADA50E,MAQA44E,EAAA1D,WAAA,WACA,OAAAl1E,KAAA62E,SACA72E,KACA00E,EAAA10E,KAAA20E,IAAA30E,KAAA40E,MAAA,IAQAgE,EAAAwE,QAAA,SAAA9C,GACA,OAAAA,EAAAt6E,KAAAq9E,YAAAr9E,KAAAs9E,aAOA1E,EAAAyE,UAAA,WACA,IAAA5I,EAAAz0E,KAAA40E,KACAJ,EAAAx0E,KAAA20E,IACA,OACA,IAAAH,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,GACA,IAAAC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,KAQAmE,EAAA0E,UAAA,WACA,IAAA7I,EAAAz0E,KAAA40E,KACAJ,EAAAx0E,KAAA20E,IACA,OACAF,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,IAWAH,EAAAkJ,UAAA,SAAA/zC,EAAAqtC,EAAAyD,GACA,OAAAA,EAAAjG,EAAAmJ,YAAAh0C,EAAAqtC,GAAAxC,EAAAoJ,YAAAj0C,EAAAqtC,IASAxC,EAAAmJ,YAAA,SAAAh0C,EAAAqtC,GACA,WAAAxC,EACA7qC,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAqtC,IAUAxC,EAAAoJ,YAAA,SAAAj0C,EAAAqtC,GACA,WAAAxC,EACA7qC,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAA,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAqtC,qRC7xCA,IAAAx9D,EAAAlZ,EAAA,GAIAoZ,EAAApZ,EAAA,GASAmZ,EAAAnZ,EAAA,GAMAqZ,EAAArZ,EAAA,GAcAk8C,EAAAl8C,EAAA,GAWAuZ,EAAAvZ,EAAA,IAIAkC,EAAAlC,EAAA,GAKA,SAAgBu9D,EACdggB,EACAz7E,EACAiC,EACA4kC,EACA4sB,EACAzH,GAEA,IAEI/zB,EACAC,EACAC,EACA+Y,EALAxzC,EAAS+9E,EAAS/9E,OAWtB,OAAQsC,EAAUke,cAIhB,IAAK,YACH,IAAI9b,EAAOs5E,EAAqBD,EAAUx5E,EAAe4kC,EAAUmlB,GAEnE,OADAyvB,EAASvyB,YAAc7xC,EAAA+E,KAAKW,KACvB3a,EACEA,EAAKR,GAAE,KAAwBQ,EAAKR,GAAE,KACzClE,EAAOioC,UAAU,GACjBjoC,EAAOioC,UAAU,GAHHjoC,EAAOqtC,oBAK3B,IAAK,UACC3oC,EAAOs5E,EAAqBD,EAAUx5E,EAAe4kC,EAAUmlB,GAEnE,OADAyvB,EAASvyB,YAAc7xC,EAAA+E,KAAKW,KACvB3a,EACEA,EAAKR,GAAE,GACVlE,EAAOioC,UAAU,GACjBjoC,EAAOioC,UAAU,GAHHjoC,EAAOqtC,oBAK3B,IAAK,WACC3oC,EAAOs5E,EAAqBD,EAAUx5E,EAAe4kC,EAAUmlB,GAEnE,OADAyvB,EAASvyB,YAAc7xC,EAAA+E,KAAKW,KACvB3a,EACEA,EAAKR,GAAE,GACVlE,EAAOioC,UAAU,GACjBjoC,EAAOioC,UAAU,GAHHjoC,EAAOqtC,oBAK3B,IAAK,cACC3oC,EAAOs5E,EAAqBD,EAAUx5E,EAAe4kC,EAAUmlB,GAEnE,OADAyvB,EAASvyB,YAAc7xC,EAAA+E,KAAKW,KACvB3a,GACLq5E,EAASvyB,YAAc7xC,EAAA+E,KAAKW,KACrB3a,EAAKR,GAAE,KACVlE,EAAOioC,UAAU,GACjBjoC,EAAOioC,UAAU,IAJHjoC,EAAOqtC,oBAM3B,IAAK,WACC3oC,EAAOs5E,EAAqBD,EAAUx5E,EAAe4kC,EAAUmlB,GAEnE,GADAyvB,EAASvyB,YAAc7xC,EAAA+E,KAAKW,MACvB3a,EAAM,OAAO1E,EAAOqtC,oBAEzB,GADImQ,EAAY94C,EAAKq4C,eACN,CACb,IAAI5/B,EAAiB4gE,EAAS1zD,QAAQlN,eACtC,GAAIA,GAAkBqgC,EAAUrtB,eAAehT,GAAiB,OAAOnd,EAAOioC,UAAU,GAE1F,OAAOjoC,EAAOioC,UAAU,GAE1B,IAAK,UACCvjC,EAAOs5E,EAAqBD,EAAUx5E,EAAe4kC,EAAUmlB,GAEnE,OADAyvB,EAASvyB,YAAc7xC,EAAA+E,KAAKW,KACvB3a,EAEgB,QADjB84C,EAAY94C,EAAKq4C,iBAC+D,OAAvDS,EAAUltB,eAAeosB,EAAAjjC,aAAaY,aAC/Dra,EAAOioC,UAAU,GACjBjoC,EAAOioC,UAAU,GAJHjoC,EAAOqtC,oBAM3B,IAAK,YAQH,GAPA0wC,EAASvyB,YAAc7xC,EAAA+E,KAAKW,KACxB9a,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,OAKX,OAJA62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,IAAI3kC,EAAUq1E,EAASlgE,SAAS89C,kBAAkBxyB,EAAS,GAAI40C,EAAS9sD,gBAAiBlX,EAAAg0D,WAAWkQ,SACpG,OAAOj+E,EAAOioC,UAAUv/B,EAAU,EAAI,GAExC,IAAK,aAQH,GAPAq1E,EAASvyB,YAAc7xC,EAAA+E,KAAKW,KACxB9a,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,OAKX,OAJA62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,IAAI6wC,EAAOH,EAASruB,4BAA4BvmB,EAAS,GAAIxvB,EAAA+E,KAAKG,IAAG,GAErE,OADAk/D,EAASvyB,YAAc7xC,EAAA+E,KAAKW,KACrBrf,EAAOioC,UAAUpuB,EAAA4Z,gBAAgByqD,IAASrkE,EAAA6Z,aAAa6C,MAAQ,EAAI,GAE5E,IAAK,YACH,IAAKwnD,EAAS1zD,QAAQ9M,MAEpB,OADAwgE,EAASvyB,YAAc7xC,EAAA+E,KAAKW,KACrBrf,EAAOioC,UAAU,GAEtBvjC,EAAOs5E,EAAqBD,EAAUx5E,EAAe4kC,EAAUmlB,GAEnE,OADAyvB,EAASvyB,YAAc7xC,EAAA+E,KAAKW,KACvB3a,EAEgB,QADjB84C,EAAY94C,EAAKq4C,iBACSS,EAAUp4B,aAAas3B,EAAArgC,eAAepJ,WAEhEjT,EAAOioC,UAAU,GADjBjoC,EAAOioC,UAAU,GAHHjoC,EAAOqtC,oBAS3B,IAAK,MACH,GAAuB,GAAnBlE,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKG,IAAG,KAEzD,OAAQk/D,EAASvyB,YAAYvoD,MAC3B,OACA,OACA,OACA,OACEuwC,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQG,OAAQ8C,GACzC,MAEF,QACA,OACA,OACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQG,OAAQ8C,GACzC,MAEF,OACE,GAAIwjD,EAASvyB,YAAYtnD,GAAE,KAAuB,CAChD65E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBACb,MAIJ,OACEmG,EAAMxzC,EAAO6oC,YACXk1C,EAASt/D,QAAQkB,SACb9F,EAAAyd,QAAQ6mD,OACRtkE,EAAAyd,QAAQG,OACZ8C,GAEF,MAEF,OACA,OACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQ6mD,OAAQ5jD,GACzC,MAEF,QACEwjD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBrK,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKG,IAAG,KAEzD,OAAQk/D,EAASvyB,YAAYvoD,MAC3B,OACA,OACA,OACA,OACEuwC,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQI,OAAQ6C,GACzC,MAEF,QACA,OACA,OACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQI,OAAQ6C,GACzC,MAEF,OACE,GAAIwjD,EAASvyB,YAAYtnD,GAAE,KAAuB,CAChD65E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBACb,MAIJ,OACEmG,EAAMxzC,EAAO6oC,YACXk1C,EAASt/D,QAAQkB,SACb9F,EAAAyd,QAAQ8mD,OACRvkE,EAAAyd,QAAQI,OACZ6C,GAEF,MAEF,OACA,OACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQ8mD,OAAQ7jD,GACzC,MAEF,QACEwjD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAET,IAAK,SACH,GAAuB,GAAnBrK,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKG,IAAG,KAEzD,OAAQk/D,EAASvyB,YAAYvoD,MAC3B,OACA,OACA,OACA,OACEuwC,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQK,UAAW4C,GAC5C,MAEF,QACA,OACA,OACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQK,UAAW4C,GAC5C,MAEF,OACE,GAAIwjD,EAASvyB,YAAYtnD,GAAE,KAAuB,CAChD65E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBACb,MAIJ,OACEmG,EAAMxzC,EAAO6oC,YACXk1C,EAASt/D,QAAQkB,SACb9F,EAAAyd,QAAQ+mD,UACRxkE,EAAAyd,QAAQK,UACZ4C,GAEF,MAEF,OACA,OACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQ+mD,UAAW9jD,GAC5C,MAEF,QACEwjD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBrK,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKG,IAAG,KAGzD,OADA2b,EAAOujD,EAAS/tB,kBAAkB7mB,EAAS,GAAI40C,EAASvyB,YAAW,KAC3DuyB,EAASvyB,YAAYvoD,MAC3B,OACA,OACA,OACA,OACA,QACEuwC,EAAMuqC,EAASvmB,uBACbx3D,EAAOgpC,aAAanvB,EAAAua,SAASkqD,QAAS/jD,EAAMC,GAC5CujD,EAASvyB,aAIb,OACA,OACEhY,EAAMxzC,EAAOgpC,aAAanvB,EAAAua,SAASkqD,QAAS/jD,EAAMC,GAClD,MAEF,OACE,GAAIujD,EAASvyB,YAAYtnD,GAAE,KAAuB,CAChD65E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBACb,MAIJ,OACEmG,EAAMxzC,EAAOgpC,aACX+0C,EAASt/D,QAAQkB,SACb9F,EAAAua,SAASmqD,QACT1kE,EAAAua,SAASkqD,QACb/jD,EACAC,GAEF,MAEF,OACA,OACEgZ,EAAMxzC,EAAOgpC,aAAanvB,EAAAua,SAASmqD,QAAShkD,EAAMC,GAClD,MAEF,QACEujD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBrK,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKG,IAAG,KAGzD,OADA2b,EAAOujD,EAAS/tB,kBAAkB7mB,EAAS,GAAI40C,EAASvyB,YAAW,KAC3DuyB,EAASvyB,YAAYvoD,MAC3B,OACA,OACA,OACA,OACA,QACEuwC,EAAMuqC,EAASvmB,uBACbx3D,EAAOgpC,aAAanvB,EAAAua,SAASoqD,QAASjkD,EAAMC,GAC5CujD,EAASvyB,aAEX,MAEF,OACA,OACEhY,EAAMxzC,EAAOgpC,aAAanvB,EAAAua,SAASoqD,QAASjkD,EAAMC,GAClD,MAEF,OACE,GAAIujD,EAASvyB,YAAYtnD,GAAE,KAAuB,CAChD65E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBACb,MAIJ,OACEmG,EAAMxzC,EAAOgpC,aACX+0C,EAASt/D,QAAQkB,SACb9F,EAAAua,SAASqqD,QACT5kE,EAAAua,SAASoqD,QACbjkD,EACAC,GAEF,MAEF,OACA,OACEgZ,EAAMxzC,EAAOgpC,aAAanvB,EAAAua,SAASqqD,QAASlkD,EAAMC,GAClD,MAEF,QACEujD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBrK,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKa,IAAG,KAEzD,OAAQw+D,EAASvyB,YAAYvoD,MAC3B,OACA,OACA,OAEE,IAAIyxD,EAAYqpB,EAAS9sD,gBAAgB1C,oBAAoB5U,EAAA+E,KAAKG,KAAK,GACvE20B,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAekrB,EAAUjpC,MAAO8O,GACvCv6B,EAAOgpC,aAAanvB,EAAAua,SAASulC,OAC3B35D,EAAOioC,UAAU,GACjBjoC,EAAOspC,eAAeorB,EAAUjpC,MAAK,IAEvCzrB,EAAOgpC,aAAanvB,EAAAua,SAASqB,MAC3Bz1B,EAAOspC,eAAeorB,EAAUjpC,MAAK,GACrCzrB,EAAOioC,UAAU,KAGrB,MAEF,OACMysB,EAAYqpB,EAAS9sD,gBAAgB1C,oBAAoBwvD,EAASt/D,QAAQW,WAAW,GACzFo0B,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAekrB,EAAUjpC,MAAO8O,GACvCv6B,EAAOgpC,aACL+0C,EAASt/D,QAAQkB,SACb9F,EAAAua,SAASwlC,OACT//C,EAAAua,SAASulC,OACbokB,EAASt/D,QAAQW,UAAU6+B,aAAaj+C,GACxCA,EAAOspC,eAAeorB,EAAUjpC,MAAOsyD,EAASt/D,QAAQmvC,iBAE1D5tD,EAAOgpC,aACL+0C,EAASt/D,QAAQkB,SACb9F,EAAAua,SAASuB,MACT9b,EAAAua,SAASqB,MACbz1B,EAAOspC,eAAeorB,EAAUjpC,MAAOsyD,EAASt/D,QAAQmvC,gBACxDmwB,EAASt/D,QAAQW,UAAU6+B,aAAaj+C,KAG5C,MAEF,OACM00D,EAAYqpB,EAAS9sD,gBAAgB1C,oBAAoB5U,EAAA+E,KAAKI,KAAK,GACvE00B,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAekrB,EAAUjpC,MAAO8O,GACvCv6B,EAAOgpC,aAAanvB,EAAAua,SAASwlC,OAC3B55D,EAAOqoC,UAAU,EAAG,GACpBroC,EAAOspC,eAAeorB,EAAUjpC,MAAK,IAEvCzrB,EAAOgpC,aAAanvB,EAAAua,SAASuB,MAC3B31B,EAAOspC,eAAeorB,EAAUjpC,MAAK,GACrCzrB,EAAOqoC,UAAU,EAAG,KAGxB,MAEF,OACE,GAAI01C,EAASvyB,YAAYtnD,GAAE,KAAuB,CAChD65E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBACb,MAIJ,OACA,OACA,OACA,OACA,QACEmG,EAAMjZ,EACN,MAEF,QACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQonD,OAAQnkD,GACzC,MAEF,QACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQqnD,OAAQpkD,GACzC,MAEF,QACEiZ,EAAMxzC,EAAOqtC,oBACb,MAEF,QACE0wC,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBrK,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKa,IAAG,KAGzD,OADAib,EAAOujD,EAAS/tB,kBAAkB7mB,EAAS,GAAI40C,EAASvyB,YAAW,KAC3DuyB,EAASvyB,YAAYvoD,MAC3B,OACA,OACA,OACE,IAAI4qB,EAAOkwD,EAAS9sD,gBAAgBpD,KAChC+wD,EAAab,EAAS9sD,gBAAgBjD,aACxC+vD,EAASvyB,aACR39B,EAAK2F,YAAY+G,EAAMwjD,EAASvyB,cAE/BqzB,EAAad,EAAS9sD,gBAAgB1C,oBACxCwvD,EAASvyB,aACR39B,EAAK2F,YAAYgH,EAAMujD,EAASvyB,cAEnCuyB,EAAS9sD,gBAAgB3C,cAAcswD,GACvCprC,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAeo1C,EAAWnzD,MAAO8O,GACxCv6B,EAAOwpC,eAAeq1C,EAAWpzD,MAAO+O,GACxCx6B,EAAOgpC,aAAanvB,EAAAua,SAASqB,MAC3Bz1B,EAAOspC,eAAes1C,EAAWnzD,MAAK,GACtCzrB,EAAOspC,eAAeu1C,EAAWpzD,MAAK,KAG1C,MAEF,OACA,OACA,OACA,QACMoC,EAAOkwD,EAAS9sD,gBAAgBpD,KAChC+wD,EAAab,EAAS9sD,gBAAgBjD,aACxC+vD,EAASvyB,aACR39B,EAAK2F,YAAY+G,EAAMwjD,EAASvyB,cAE/BqzB,EAAad,EAAS9sD,gBAAgB1C,oBACxCwvD,EAASvyB,aACR39B,EAAK2F,YAAYgH,EAAMujD,EAASvyB,cAEnCuyB,EAAS9sD,gBAAgB3C,cAAcswD,GACvCprC,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAeo1C,EAAWnzD,MAAO8O,GACxCv6B,EAAOwpC,eAAeq1C,EAAWpzD,MAAO+O,GACxCx6B,EAAOgpC,aAAanvB,EAAAua,SAASsB,MAC3B11B,EAAOspC,eAAes1C,EAAWnzD,MAAK,GACtCzrB,EAAOspC,eAAeu1C,EAAWpzD,MAAK,KAG1C,MAEF,OACMmzD,EAAab,EAAS9sD,gBAAgBjD,aAAarU,EAAA+E,KAAKI,KAAK,GAC7D+/D,EAAad,EAAS9sD,gBAAgB1C,oBAAoB5U,EAAA+E,KAAKI,KAAK,GACxEi/D,EAAS9sD,gBAAgB3C,cAAcswD,GACvCprC,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAeo1C,EAAWnzD,MAAO8O,GACxCv6B,EAAOwpC,eAAeq1C,EAAWpzD,MAAO+O,GACxCx6B,EAAOgpC,aAAanvB,EAAAua,SAASuB,MAC3B31B,EAAOspC,eAAes1C,EAAWnzD,MAAK,GACtCzrB,EAAOspC,eAAeu1C,EAAWpzD,MAAK,KAG1C,MAEF,OACMmzD,EAAab,EAAS9sD,gBAAgBjD,aAAarU,EAAA+E,KAAKI,KAAK,GAC7D+/D,EAAad,EAAS9sD,gBAAgB1C,oBAAoB5U,EAAA+E,KAAKI,KAAK,GACxEi/D,EAAS9sD,gBAAgB3C,cAAcswD,GACvCprC,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAeo1C,EAAWnzD,MAAO8O,GACxCv6B,EAAOwpC,eAAeq1C,EAAWpzD,MAAO+O,GACxCx6B,EAAOgpC,aAAanvB,EAAAua,SAASwB,MAC3B51B,EAAOspC,eAAes1C,EAAWnzD,MAAK,GACtCzrB,EAAOspC,eAAeu1C,EAAWpzD,MAAK,KAG1C,MAEF,OACMmzD,EAAab,EAAS9sD,gBAAgBjD,aAAa+vD,EAASt/D,QAAQW,WAAW,GAC/Ey/D,EAAad,EAAS9sD,gBAAgB1C,oBAAoBwvD,EAASt/D,QAAQW,WAAW,GAC1F2+D,EAAS9sD,gBAAgB3C,cAAcswD,GACvCprC,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAeo1C,EAAWnzD,MAAO8O,GACxCv6B,EAAOwpC,eAAeq1C,EAAWpzD,MAAO+O,GACxCx6B,EAAOgpC,aACL+0C,EAASt/D,QAAQkB,SACb9F,EAAAua,SAASuB,MACT9b,EAAAua,SAASqB,MACbz1B,EAAOspC,eAAes1C,EAAWnzD,MAAOsyD,EAASt/D,QAAQmvC,gBACzD5tD,EAAOspC,eAAeu1C,EAAWpzD,MAAOsyD,EAASt/D,QAAQmvC,kBAG7D,MAEF,OACE,GAAImwB,EAASvyB,YAAYtnD,GAAE,KAAuB,CAChD65E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBACb,MAEEuxC,EAAab,EAAS9sD,gBAAgBjD,aAAa+vD,EAASt/D,QAAQW,WAAW,GAC/Ey/D,EAAad,EAAS9sD,gBAAgB1C,oBAAoBwvD,EAASt/D,QAAQW,WAAW,GAC1F2+D,EAAS9sD,gBAAgB3C,cAAcswD,GACvCprC,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAeo1C,EAAWnzD,MAAO8O,GACxCv6B,EAAOwpC,eAAeq1C,EAAWpzD,MAAO+O,GACxCx6B,EAAOgpC,aACL+0C,EAASt/D,QAAQkB,SACb9F,EAAAua,SAASwB,MACT/b,EAAAua,SAASsB,MACb11B,EAAOspC,eAAes1C,EAAWnzD,MAAOsyD,EAASt/D,QAAQmvC,gBACzD5tD,EAAOspC,eAAeu1C,EAAWpzD,MAAOsyD,EAASt/D,QAAQmvC,kBAG7D,MAEF,QACEpa,EAAMxzC,EAAOgpC,aAAanvB,EAAAua,SAAS0qD,OAAQvkD,EAAMC,GACjD,MAEF,QACEgZ,EAAMxzC,EAAOgpC,aAAanvB,EAAAua,SAAS2qD,OAAQxkD,EAAMC,GACjD,MAEF,QACEujD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBrK,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKa,IAAG,KAGzD,OADAib,EAAOujD,EAAS/tB,kBAAkB7mB,EAAS,GAAI40C,EAASvyB,YAAW,KAC3DuyB,EAASvyB,YAAYvoD,MAC3B,OACA,OACA,OACM4qB,EAAOkwD,EAAS9sD,gBAAgBpD,KAChC+wD,EAAab,EAAS9sD,gBAAgBjD,aACxC+vD,EAASvyB,aACR39B,EAAK2F,YAAY+G,EAAMwjD,EAASvyB,cAE/BqzB,EAAad,EAAS9sD,gBAAgB1C,oBACxCwvD,EAASvyB,aACR39B,EAAK2F,YAAYgH,EAAMujD,EAASvyB,cAEnCuyB,EAAS9sD,gBAAgB3C,cAAcswD,GACvCprC,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAeo1C,EAAWnzD,MAAO8O,GACxCv6B,EAAOwpC,eAAeq1C,EAAWpzD,MAAO+O,GACxCx6B,EAAOgpC,aAAanvB,EAAAua,SAASS,MAC3B70B,EAAOspC,eAAes1C,EAAWnzD,MAAK,GACtCzrB,EAAOspC,eAAeu1C,EAAWpzD,MAAK,KAG1C,MAEF,OACA,OACA,OACA,QACMoC,EAAOkwD,EAAS9sD,gBAAgBpD,KAChC+wD,EAAab,EAAS9sD,gBAAgBjD,aACxC+vD,EAASvyB,aACR39B,EAAK2F,YAAY+G,EAAMwjD,EAASvyB,cAE/BqzB,EAAad,EAAS9sD,gBAAgB1C,oBACxCwvD,EAASvyB,aACR39B,EAAK2F,YAAYgH,EAAMujD,EAASvyB,cAEnCuyB,EAAS9sD,gBAAgB3C,cAAcswD,GACvCprC,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAeo1C,EAAWnzD,MAAO8O,GACxCv6B,EAAOwpC,eAAeq1C,EAAWpzD,MAAO+O,GACxCx6B,EAAOgpC,aAAanvB,EAAAua,SAASU,MAC3B90B,EAAOspC,eAAes1C,EAAWnzD,MAAK,GACtCzrB,EAAOspC,eAAeu1C,EAAWpzD,MAAK,KAG1C,MAEF,OACMmzD,EAAab,EAAS9sD,gBAAgBjD,aAAarU,EAAA+E,KAAKI,KAAK,GAC7D+/D,EAAad,EAAS9sD,gBAAgB1C,oBAAoB5U,EAAA+E,KAAKI,KAAK,GACxEi/D,EAAS9sD,gBAAgB3C,cAAcswD,GACvCprC,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAeo1C,EAAWnzD,MAAO8O,GACxCv6B,EAAOwpC,eAAeq1C,EAAWpzD,MAAO+O,GACxCx6B,EAAOgpC,aAAanvB,EAAAua,SAASW,MAC3B/0B,EAAOspC,eAAes1C,EAAWnzD,MAAK,GACtCzrB,EAAOspC,eAAeu1C,EAAWpzD,MAAK,KAG1C,MAEF,OACMmzD,EAAab,EAAS9sD,gBAAgBjD,aAAarU,EAAA+E,KAAKI,KAAK,GAC7D+/D,EAAad,EAAS9sD,gBAAgB1C,oBAAoB5U,EAAA+E,KAAKI,KAAK,GACxEi/D,EAAS9sD,gBAAgB3C,cAAcswD,GACvCprC,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAeo1C,EAAWnzD,MAAO8O,GACxCv6B,EAAOwpC,eAAeq1C,EAAWpzD,MAAO+O,GACxCx6B,EAAOgpC,aAAanvB,EAAAua,SAASY,MAC3Bh1B,EAAOspC,eAAes1C,EAAWnzD,MAAK,GACtCzrB,EAAOspC,eAAeu1C,EAAWpzD,MAAK,KAG1C,MAEF,OACMmzD,EAAab,EAAS9sD,gBAAgBjD,aAAa+vD,EAASt/D,QAAQW,WAAW,GAC/Ey/D,EAAad,EAAS9sD,gBAAgB1C,oBAAoBwvD,EAASt/D,QAAQW,WAAW,GAC1F2+D,EAAS9sD,gBAAgB3C,cAAcswD,GACvCprC,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAeo1C,EAAWnzD,MAAO8O,GACxCv6B,EAAOwpC,eAAeq1C,EAAWpzD,MAAO+O,GACxCx6B,EAAOgpC,aACL+0C,EAASt/D,QAAQkB,SACb9F,EAAAua,SAASW,MACTlb,EAAAua,SAASS,MACb70B,EAAOspC,eAAes1C,EAAWnzD,MAAOsyD,EAASt/D,QAAQmvC,gBACzD5tD,EAAOspC,eAAeu1C,EAAWpzD,MAAOsyD,EAASt/D,QAAQmvC,kBAG7D,MAEF,OACE,GAAImwB,EAASvyB,YAAYtnD,GAAE,KAAuB,CAChD65E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBACb,MAEEuxC,EAAab,EAAS9sD,gBAAgBjD,aAAa+vD,EAASt/D,QAAQW,WAAW,GAC/Ey/D,EAAad,EAAS9sD,gBAAgB1C,oBAAoBwvD,EAASt/D,QAAQW,WAAW,GAC1F2+D,EAAS9sD,gBAAgB3C,cAAcswD,GACvCprC,EAAMxzC,EAAOusC,aACXvsC,EAAOwpC,eAAeo1C,EAAWnzD,MAAO8O,GACxCv6B,EAAOwpC,eAAeq1C,EAAWpzD,MAAO+O,GACxCx6B,EAAOgpC,aACL+0C,EAASt/D,QAAQkB,SACb9F,EAAAua,SAASY,MACTnb,EAAAua,SAASU,MACb90B,EAAOspC,eAAes1C,EAAWnzD,MAAOsyD,EAASt/D,QAAQmvC,gBACzD5tD,EAAOspC,eAAeu1C,EAAWpzD,MAAOsyD,EAASt/D,QAAQmvC,kBAG7D,MAEF,QACEpa,EAAMxzC,EAAOgpC,aAAanvB,EAAAua,SAAS4qD,OAAQzkD,EAAMC,GACjD,MAEF,QACEgZ,EAAMxzC,EAAOgpC,aAAanvB,EAAAua,SAAS6qD,OAAQ1kD,EAAMC,GACjD,MAEF,QACEujD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBrK,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKa,IAAG,KAEzD,OAAQw+D,EAASvyB,YAAYvoD,MAC3B,OACE,GAAI86E,EAASvyB,YAAYtnD,GAAE,KAAuB,CAChD65E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBACb,MAIJ,QACEmG,EAAMjZ,EACN,MAEF,QACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQ4nD,QAAS3kD,GAC1C,MAEF,QACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQ6nD,QAAS5kD,GAC1C,MAEF,QACEwjD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAET,IAAK,QACH,GAAuB,GAAnBrK,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKa,IAAG,KAEzD,OAAQw+D,EAASvyB,YAAYvoD,MAC3B,OACE,GAAI86E,EAASvyB,YAAYtnD,GAAE,KAAuB,CAChD65E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBACb,MAIJ,QACEmG,EAAMjZ,EACN,MAEF,QACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQ8nD,SAAU7kD,GAC3C,MAEF,QACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQ+nD,SAAU9kD,GAC3C,MAEF,QACEwjD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAET,IAAK,WACH,GAAuB,GAAnBrK,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKa,IAAG,KAGzD,OADAib,EAAOujD,EAAS/tB,kBAAkB7mB,EAAS,GAAI40C,EAASvyB,YAAW,KAC3DuyB,EAASvyB,YAAYvoD,MAC3B,QACEuwC,EAAMxzC,EAAOgpC,aAAanvB,EAAAua,SAASkrD,YAAa/kD,EAAMC,GACtD,MAEF,QACEgZ,EAAMxzC,EAAOgpC,aAAanvB,EAAAua,SAASmrD,YAAahlD,EAAMC,GACtD,MAEF,QACEujD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAET,IAAK,UACH,GAAuB,GAAnBrK,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKa,IAAG,KAEzD,OAAQw+D,EAASvyB,YAAYvoD,MAC3B,OACE,GAAI86E,EAASvyB,YAAYtnD,GAAE,KAAuB,CAChD65E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBACb,MAIJ,QACEmG,EAAMjZ,EACN,MAEF,QACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQkoD,WAAYjlD,GAC7C,MAEF,QACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQmoD,WAAYllD,GAC7C,MAEF,QACEwjD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAET,IAAK,cACH,GAAuB,GAAnBrK,EAASjiC,OAYX,OAXM3C,GAAyC,GAAxBA,EAAc2C,SAC/B3C,GAAiBA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAChFw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO8d,SAAS,IAAM,MAG/E+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,IAAM9oC,GAAyC,GAAxBA,EAAc2C,OAMnC,OALI3C,GAAiBA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAChFw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO8d,SAAS,IAAM,KAEtEhlB,EAAOqtC,oBAEhB,OAAQ9oC,EAAc,GAAGtB,MACvB,OACA,OACEs3B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKY,IAAG,KACvDk0B,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQooD,eAAgBnlD,GACjD,MAEF,OACA,OACEA,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKa,IAAG,KACvDi0B,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQqoD,eAAgBplD,GACjD,MAEF,OACE,GAAIh2B,EAAc,GAAGL,GAAE,KAMrB,OALA65E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEbs5E,EAASvyB,YAAcjnD,EAAc,GAC9BvE,EAAOqtC,oBAIlB,OACE9S,EAAOwjD,EAAS/tB,kBACd7mB,EAAS,GACT40C,EAASt/D,QAAQkB,SACbhG,EAAA+E,KAAKa,IACL5F,EAAA+E,KAAKY,IAAG,KAIdk0B,EAAMxzC,EAAO6oC,YACXk1C,EAASt/D,QAAQkB,SACb9F,EAAAyd,QAAQqoD,eACR9lE,EAAAyd,QAAQooD,eACZnlD,GAEF,MAEF,QACEA,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKG,IAAG,KACvD20B,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQsoD,eAAgBrlD,GACjD,MAEF,QACEA,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKI,IAAG,KACvD00B,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQuoD,eAAgBtlD,GACjD,MAEF,QACEwjD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAKjB,OADA0wC,EAASvyB,YAAcjnD,EAAc,GAC9BivC,EAET,IAAK,OACH,GAAuB,GAAnBrK,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKa,IAAG,KAEzD,OAAQw+D,EAASvyB,YAAYvoD,MAC3B,QACEuwC,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQwoD,QAASvlD,GAC1C,MAEF,QACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQyoD,QAASxlD,GAC1C,MAGF,QACEwjD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAET,IAAK,QACH,GAAuB,GAAnBrK,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,GAAiBA,EAAc2C,OAAQ,CAEzC,GADA62E,EAASvyB,YAAcjnD,EAAc,GACT,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKa,IAAG,KAEzD,OAAQw+D,EAASvyB,YAAYvoD,MAC3B,OACE,GAAI86E,EAASvyB,YAAYtnD,GAAE,KAAuB,CAChD65E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBACb,MAIJ,QACEmG,EAAMjZ,EACN,MAGF,QACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQ0oD,SAAUzlD,GAC3C,MAEF,QACEiZ,EAAMxzC,EAAO6oC,YAAYhvB,EAAAyd,QAAQ2oD,SAAU1lD,GAC3C,MAEF,QACEwjD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAKT,IAAK,OACH,OAAIrK,EAASjiC,OAAS,GAAKiiC,EAASjiC,OAAS,GACrC3C,GAAyC,GAAxBA,EAAc2C,QACnC62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO8d,SAAS,IAAM,KAG3EmkB,EAASjiC,OAAS,EACpB62E,EAASt8D,MACP/H,EAAAgI,eAAey8C,wCACf7P,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAGlD+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAG7ChlB,EAAOqtC,qBAEV9oC,GAAyC,GAAxBA,EAAc2C,QAQrCqzB,EAAOwjD,EAAS/tB,kBACd7mB,EAAS,GACT40C,EAASt/D,QAAQW,UAAS,MAIxBmnB,EAA4B,GAAnB4C,EAASjiC,OAAcg5E,EAAuBnC,EAAU50C,EAAS,IAAM,GACvE,EACJnpC,EAAOqtC,qBAEhB0wC,EAASvyB,YAAcjnD,EAAc,GAC9BvE,EAAO4pC,WACZrlC,EAAc,GAAG4f,SACjB5f,EAAc,GAAGL,GAAG,GACpBq2B,EACAh2B,EAAc,GAAGL,GAAE,IACnB6xD,EAAe7xD,GAAE,IACjB6xD,EAAej/B,KAAOvyB,EAAc,GAAGuyB,MAClCinD,EAASvyB,YAAcuK,GAAgB5nC,gBACvC4vD,EAASvyB,YAAcjnD,EAAc,IAAI4pB,eAC9CoY,MA3BIhiC,GAAiBA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAChFw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO8d,SAAS,IAAM,KAEtEhlB,EAAOqtC,qBAyBlB,IAAK,QAEH,GADA0wC,EAASvyB,YAAc7xC,EAAA+E,KAAKc,KACxB2pB,EAASjiC,OAAS,GAAKiiC,EAASjiC,OAAS,EAkB3C,OAjBM3C,GAAyC,GAAxBA,EAAc2C,QACnC62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO8d,SAAS,IAAM,KAG3EmkB,EAASjiC,OAAS,EACpB62E,EAASt8D,MACP/H,EAAAgI,eAAey8C,wCACf7P,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAGlD+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAG7ChlB,EAAOqtC,oBAEhB,IAAM9oC,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJA62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO8d,SAAS,IAAM,KAEtEhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBACd7mB,EAAS,GACT40C,EAASt/D,QAAQW,UAAS,KAI5Bob,EAAOujD,EAAS/tB,kBACd7mB,EAAS,GACT5kC,EAAc,GACdA,EAAc,GAAGL,GAAE,GAChB,EACA,EAAwB,GAGzBQ,OAAI,EAoBR,OAlBEH,EAAc,GAAGL,GAAE,MAEhB65E,EAASvyB,YAAYtnD,GAAE,IACxB65E,EAASvyB,YAAY10B,KAAOvyB,EAAc,GAAGuyB,OAG/C0D,EAAOujD,EAASxmB,kBACd/8B,EACAujD,EAASvyB,YAAajnD,EAAc,GAAE,IAGtC4kC,EAAS,IAEXzkC,EAAOH,EAAc,IAErBG,EAAOq5E,EAASvyB,aAEdjlB,EAA4B,GAAnB4C,EAASjiC,OAAcg5E,EAAuBnC,EAAU50C,EAAS,IAAM,GACvE,EACJnpC,EAAOqtC,qBAEhB0wC,EAASvyB,YAAc7xC,EAAA+E,KAAKc,KACrBxf,EAAOiqC,YAAY1lC,EAAc,GAAG4f,SAAUoW,EAAMC,EAAM91B,EAAKypB,eAAgBoY,IAExF,IAAK,SAEH,GADAw3C,EAASvyB,YAAcuyB,EAASt/D,QAAQW,UACjB,GAAnB+pB,EAASjiC,OAWX,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnC62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO8d,SAAS,IAAM,KAG/E+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEV9oC,GAAyC,GAAxBA,EAAc2C,QACnC62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO8d,SAAS,IAAM,KAG/E,IAAIb,EAAoB5f,EAAe,GAAG4f,SAkB1C,OAjBI45D,EAASt/D,QAAQkB,SAEfo2C,EAAe7xD,GAAE,IAAuB6xD,EAAej/B,MAAQ,IACjEinD,EAASvyB,YAAc7xC,EAAA+E,KAAKQ,IAC5Bs0B,EAAMxzC,EAAOioC,UAAU9jB,IAEvBqvB,EAAMxzC,EAAOqoC,UAAUlkB,EAAU,GAI/B4xC,EAAe7xD,GAAE,IAA8C,IAAvB6xD,EAAej/B,MACzDinD,EAASvyB,YAAc7xC,EAAA+E,KAAKS,IAC5Bq0B,EAAMxzC,EAAOqoC,UAAUlkB,EAAU,IAEjCqvB,EAAMxzC,EAAOioC,UAAU9jB,GAGpBqvB,EAET,IAAK,UAEH,GADAuqC,EAASvyB,YAAcuyB,EAASt/D,QAAQW,UACjB,GAAnB+pB,EAASjiC,OAWX,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnC62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO8d,SAAS,IAAM,KAG/E+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,IAAM9oC,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJA62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO8d,SAAS,IAAM,KAEtEhlB,EAAOqtC,oBAEhB,IACI8yC,OAAS,EACb,OAFIh8D,EAAoB5f,EAAe,GAAG4f,UAGxC,KAAK,EAAKg8D,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,QAA0B,OAAf7tE,QAAO,GAAetS,EAAOqtC,oBAmB1C,OAjBI0wC,EAASt/D,QAAQkB,SAEfo2C,EAAe7xD,GAAE,IAAuB6xD,EAAej/B,MAAQ,IACjEinD,EAASvyB,YAAc7xC,EAAA+E,KAAKQ,IAC5Bs0B,EAAMxzC,EAAOioC,UAAUk4C,IAEvB3sC,EAAMxzC,EAAOqoC,UAAU83C,EAAW,GAIhCpqB,EAAe7xD,GAAE,IAA8C,IAAvB6xD,EAAej/B,MACzDinD,EAASvyB,YAAc7xC,EAAA+E,KAAKS,IAC5Bq0B,EAAMxzC,EAAOqoC,UAAU83C,EAAW,IAElC3sC,EAAMxzC,EAAOioC,UAAUk4C,GAGpB3sC,EAET,IAAK,WAEH,GADAuqC,EAASvyB,YAAcuyB,EAASt/D,QAAQW,UACpC+pB,EAASjiC,OAAS,EAWpB,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnC62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO8d,SAAS,IAAM,KAG/E+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,IAAM9oC,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJA62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO8d,SAAS,IAAM,KAEtEhlB,EAAOqtC,oBAEhB,IAAImQ,EACJ,KADIA,EAAYj5C,EAAc,GAAGw4C,gBAM/B,OAJAghC,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAENzE,EAAOqtC,oBAEhB,IAAI9G,OAAM,EACV,GAAI4C,EAASjiC,OAAQ,CACnB,GACEiiC,EAAS,GAAGlmC,MAAQ2W,EAAA9W,SAASI,SACTimC,EAAS,GAAIt1B,aAAe+F,EAAAjG,YAAYmB,OAM5D,OAJAipE,EAASt8D,MACP/H,EAAAgI,eAAeoG,wBACfqhB,EAAS,GAAG1kC,OAEPzE,EAAOqtC,oBAEhB,IAAI1c,EAAsCwY,EAAS,GAAIxnC,MACnDivB,EAAQ4sB,EAAUnxC,QAAUmxC,EAAUnxC,QAAQ9K,IAAIovB,GAAa,KACnE,IAAMC,GAASA,EAAM3tB,MAAQy5C,EAAAtgC,YAAYoT,MAKvC,OAJAuuD,EAASt8D,MACP/H,EAAAgI,eAAe0+D,yBACfj3C,EAAS,GAAG1kC,MAAO+4C,EAAUh9B,aAAcmQ,GAEtC3wB,EAAOqtC,oBAEhB9G,EAAiB3V,EAAOnB,kBAExB8W,EAASiX,EAAU5tB,oBAErB,OAAImuD,EAASt/D,QAAQkB,SAEfo2C,EAAe7xD,GAAE,IAAuB6xD,EAAej/B,MAAQ,IACjEinD,EAASvyB,YAAc7xC,EAAA+E,KAAKQ,IACrBlf,EAAOioC,UAAU1B,IAEjBvmC,EAAOqoC,UAAU9B,GAItBwvB,EAAe7xD,GAAE,IAA8C,IAAvB6xD,EAAej/B,MACzDinD,EAASvyB,YAAc7xC,EAAA+E,KAAKS,IACrBnf,EAAOqoC,UAAU9B,IAEjBvmC,EAAOioC,UAAU1B,GAO9B,IAAK,SACH,GAAuB,GAAnB4C,EAASjiC,OAcX,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAASruB,4BAA4BvmB,EAAS,GAAIxvB,EAAA+E,KAAKG,IAAG,GAE/Dna,EAAOq5E,EAASvyB,YAOpB,OANAhxB,EAAOujD,EAAS/tB,kBAAkB7mB,EAAS,GAAIzkC,EAAI,KACnD+1B,EAAOsjD,EAASzqB,cACdyqB,EAASruB,4BAA4BvmB,EAAS,GAAIxvB,EAAA+E,KAAKW,KAAI,GAC3D0+D,EAASvyB,aAEXuyB,EAASvyB,YAAc9mD,EACfq5E,EAASvyB,YAAYvoD,MAC3B,OACA,OACA,OACA,OACA,QAIA,QACEuwC,EAAMxzC,EAAOusC,aAAahS,EAAMC,EAAMC,GACtC,MAEF,QACEsjD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAMxzC,EAAOqtC,oBAIjB,OAAOmG,EAET,IAAK,cAaH,OAZuB,GAAnBrK,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAGhDzgB,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGzBxgB,EAAOqtC,oBAKhB,IAAK,cAcH,OAbA0wC,EAASvyB,YAAc7xC,EAAA+E,KAAKG,IACL,GAAnBsqB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAGhDzgB,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGzBxgB,EAAOkpC,WAAWrvB,EAAA4rB,OAAO46C,eAElC,IAAK,cAiBH,OAhBAtC,EAASvyB,YAAc7xC,EAAA+E,KAAKG,IACL,GAAnBsqB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElDuV,EAAOv6B,EAAOqtC,qBAEd9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAIxvB,EAAA+E,KAAKG,IAAG,KAErDta,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGzBxgB,EAAOkpC,WAAWrvB,EAAA4rB,OAAO66C,WAAY,MAAQ/lD,IAGtD,IAAK,cAOH,GANIh2B,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,OAMX,OALA62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAc7xC,EAAA+E,KAAKc,KACrBxf,EAAOqtC,oBAqBhB,MAnBA9S,EAAOwjD,EAAS/tB,kBACd7mB,EAAS,GACT40C,EAASt/D,QAAQW,UAAS,KAI5Bob,EAAOujD,EAAS/tB,kBACd7mB,EAAS,GACT40C,EAASt/D,QAAQW,UAAS,KAI5Bqb,EAAOsjD,EAAS/tB,kBACd7mB,EAAS,GACT40C,EAASt/D,QAAQW,UAAS,KAI5B2+D,EAASvyB,YAAc7xC,EAAA+E,KAAKc,KACtB,IAAI6D,MAAM,mBAGlB,IAAK,cAOH,GANI9e,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,OAMX,OALA62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAc7xC,EAAA+E,KAAKc,KACrBxf,EAAOqtC,oBAqBhB,MAnBA9S,EAAOwjD,EAAS/tB,kBACd7mB,EAAS,GACT40C,EAASt/D,QAAQW,UAAS,KAI5Bob,EAAOujD,EAAS/tB,kBACd7mB,EAAS,GACTxvB,EAAA+E,KAAKQ,IAAG,KAIVub,EAAOsjD,EAAS/tB,kBACd7mB,EAAS,GACT40C,EAASt/D,QAAQW,UAAS,KAI5B2+D,EAASvyB,YAAc7xC,EAAA+E,KAAKc,KACtB,IAAI6D,MAAM,mBAMlB,IAAK,aACH,OAAM9e,GAAyC,GAAxBA,EAAc2C,OAQd,GAAnBiiC,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAcjnD,EAAc,GAC9BvE,EAAOqtC,sBAEhB9S,EAAOwjD,EAASruB,4BACdvmB,EAAS,GACT5kC,EAAc,GAAE,GAGlBw5E,EAASvyB,YAAcjnD,EAAc,GACjCw5E,EAASvyB,YAAY10B,MAAQvyB,EAAc,GAAGuyB,MAChDinD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAENzE,EAAOqtC,qBAIT9S,IA9BDh2B,GAAiBA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAChFw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO8d,SAAS,IAAM,KAEtEhlB,EAAOqtC,qBA2BlB,IAAK,SACH,GAAIlE,EAASjiC,OAAS,GAAKiiC,EAASjiC,OAAS,EAqB3C,OApBI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,GAAGy4C,iBACtC,GAAxBz4C,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAIvDmkB,EAASjiC,OAAS,EACpB62E,EAASt8D,MACP/H,EAAAgI,eAAey8C,wCACf7P,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAEzCmkB,EAASjiC,OAAS,GAC3B62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAG7ChlB,EAAOqtC,oBAEhB,GAAI9oC,EAAe,CAEjB,GADIA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,GAAGy4C,iBACtC,GAAxBz4C,EAAc2C,OAKhB,OAJA62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB9S,EAAOwjD,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,UAE/Dg2B,EAAOwjD,EAASruB,4BAA4BvmB,EAAS,GAAIxvB,EAAA+E,KAAKW,KAAI,GAGhE3a,EAAOq5E,EAASvyB,YAIpB,GAHAuyB,EAASvyB,YAAc9mD,EAAKs4C,gBAGxB+gC,EAASt/D,QAAQoB,SACnB,OAAIk2C,GAAkBp8C,EAAA+E,KAAKc,MACzBu+D,EAASvyB,YAAc7xC,EAAA+E,KAAKc,KACrBxf,EAAOmsC,aAET5R,EAGT,IAAIgmD,EAAQhrB,EAAawoB,EAA6B,GAAnB50C,EAASjiC,OAAciiC,EAAS,GAAK,KAAMmlB,GAI9E,GAFAyvB,EAASvyB,YAAc9mD,EAAKs4C,gBAExB+Y,GAAkBp8C,EAAA+E,KAAKc,KAAM,CAC/B,OAAQu+D,EAASvyB,YAAYvoD,MAC3B,QACEuwC,EAAMxzC,EAAOisC,SACXjsC,EAAO6oC,YAAYhvB,EAAAyd,QAAQC,OACzBgD,GAEFgmD,GAEF,MAEF,OACA,OACE/sC,EAAMxzC,EAAOisC,SACXjsC,EAAO6oC,YAAYhvB,EAAAyd,QAAQE,OACzB+C,GAEFgmD,GAEF,MAEF,OACA,OACE/sC,EAAMxzC,EAAOisC,SACXjsC,EAAO6oC,YACLk1C,EAASt/D,QAAQkB,SACb9F,EAAAyd,QAAQE,OACR3d,EAAAyd,QAAQC,OACZgD,GAEFgmD,GAEF,MAGF,QACE/sC,EAAMxzC,EAAOisC,SACXjsC,EAAOgpC,aAAanvB,EAAAua,SAASG,MAC3BgG,EACAv6B,EAAOyoC,UAAU,IAEnB83C,GAEF,MAEF,QACE/sC,EAAMxzC,EAAOisC,SACXjsC,EAAOgpC,aAAanvB,EAAAua,SAASI,MAC3B+F,EACAv6B,EAAO2oC,UAAU,IAEnB43C,GAEF,MAEF,QACExC,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAM+sC,EAIVxC,EAASvyB,YAAc7xC,EAAA+E,KAAKc,UAE5B,OAAQu+D,EAASvyB,YAAYvoD,MAC3B,OACA,OACA,OACA,OACA,QACM4qB,EAAOkwD,EAAS9sD,gBAAgBpD,KAChC6mC,EAAYqpB,EAAS9sD,gBAAgB1C,oBACvCwvD,EAASvyB,aACR39B,EAAK2F,YAAY+G,EAAMwjD,EAASvyB,cAEnChY,EAAMxzC,EAAOisC,SACXjsC,EAAOwpC,eAAekrB,EAAUjpC,MAAO8O,GACvCv6B,EAAOspC,eAAeorB,EAAUjpC,MAAK,GACrC80D,GAEF,MAEF,OACA,OACA,QACM7rB,EAAYqpB,EAAS9sD,gBAAgB1C,oBAAoB5U,EAAA+E,KAAKG,KAAK,GACvE20B,EAAMxzC,EAAOisC,SACXjsC,EAAOwpC,eAAekrB,EAAUjpC,MAAO8O,GACvCv6B,EAAOspC,eAAeorB,EAAUjpC,MAAK,GACrC80D,GAEF,MAEF,OACA,OACM7rB,EAAYqpB,EAAS9sD,gBAAgB1C,oBAAoB5U,EAAA+E,KAAKI,KAAK,GACvE00B,EAAMxzC,EAAOisC,SACXjsC,EAAO6oC,YAAYhvB,EAAAyd,QAAQE,OACzBx3B,EAAOwpC,eAAekrB,EAAUjpC,MAAO8O,IAEzCgmD,EACAvgF,EAAOspC,eAAeorB,EAAUjpC,MAAK,IAEvC,MAEF,OACA,OACMipC,EAAYqpB,EAAS9sD,gBAAgB1C,oBAAoBwvD,EAASt/D,QAAQW,WAAW,GACzFo0B,EAAMxzC,EAAOisC,SACXjsC,EAAO6oC,YACLk1C,EAASt/D,QAAQkB,SACb9F,EAAAyd,QAAQE,OACR3d,EAAAyd,QAAQC,OACZv3B,EAAOwpC,eAAekrB,EAAUjpC,MAAO8O,IAEzCgmD,EACAvgF,EAAOspC,eAAeorB,EAAUjpC,MAAOsyD,EAASt/D,QAAQmvC,iBAE1D,MAEF,QACM8G,EAAYqpB,EAAS9sD,gBAAgB1C,oBAAoB5U,EAAA+E,KAAKY,KAAK,GACvEk0B,EAAMxzC,EAAOisC,SACXjsC,EAAOgpC,aAAanvB,EAAAua,SAASG,MAC3Bv0B,EAAOwpC,eAAekrB,EAAUjpC,MAAO8O,GACvCv6B,EAAOyoC,UAAU,IAEnB83C,EACAvgF,EAAOspC,eAAeorB,EAAUjpC,MAAK,IAEvC,MAEF,QACMipC,EAAYqpB,EAAS9sD,gBAAgB1C,oBAAoB5U,EAAA+E,KAAKa,KAAK,GACvEi0B,EAAMxzC,EAAOisC,SACXjsC,EAAOgpC,aAAanvB,EAAAua,SAASI,MAC3Bx0B,EAAOwpC,eAAekrB,EAAUjpC,MAAO8O,GACvCv6B,EAAO2oC,UAAU,IAEnB43C,EACAvgF,EAAOspC,eAAeorB,EAAUjpC,MAAK,IAEvC,MAEF,QACEsyD,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAEb+uC,EAAM+sC,EAKZ,OAAO/sC,EAET,IAAK,YAOH,OANIjvC,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,uBAEZxf,EAAOkwD,EAAS9sD,gBAAgBpD,MAC/BxpB,IAAG,MACRmvC,EAAMuqC,EAASruB,4BAA4BvmB,EAAS,GAAI4sB,EAAc,GACtEloC,EAAK2D,MAAK,MACHgiB,GAET,IAAK,gBACH,GAAIrK,EAASjiC,OAAS,EAcpB,OAbI3C,IACEA,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IACnC,GAAxBA,EAAc2C,QAChB62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,MAI3D+4D,EAASt8D,MACP/H,EAAAgI,eAAey8C,wCACf7P,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3ChlB,EAAOqtC,oBAEhB,IAAI5nC,OAAU,EACd,GAAIlB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQ62E,EAASvyB,YAAcjnD,EAAc,IAC/Dw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhDhlB,EAAOqtC,oBAEhB5nC,EAAalB,EAAc,QAE3BkB,EAAaswD,EAGf,GADAx7B,EAAOwjD,EAASruB,4BAA4BvmB,EAAS,GAAIxvB,EAAA+E,KAAKQ,IAAG,GACpC,GAAzB6+D,EAASvyB,YAAYvoD,KAKvB,OAJA86E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfsjB,EAAS,GAAG1kC,OAEPzE,EAAOqtC,oBAOhB,IALA,IAAI4yB,EAAc92B,EAASjiC,OAAS,EAChCs5E,EAAe,IAAIpqE,MAAqB6pD,GACxCwgB,EAAiB,IAAIrqE,MAAc6pD,EAAc,GACjDxD,EAAmBh3D,EAAW0oB,eAC9BuyD,EAAmB,IAAItqE,MAAkB6pD,GACpCv/D,EAAI,EAAGA,EAAIu/D,IAAev/D,EAAG,CACpC8/E,EAAa9/E,GAAKq9E,EAASruB,4BAA4BvmB,EAAS,EAAIzoC,GAAIiZ,EAAA+E,KAAKG,IAAG,GAChF,IAAI8hE,EAAc5C,EAASvyB,YAC3Bi1B,EAAe//E,GAAKigF,EAAYvxD,oBAChCsxD,EAAiBhgF,GAAKigF,EAAYxyD,eAEpCsyD,EAAexgB,GAAex6D,EAAW2pB,oBACzC,IAAI+d,EAAWszC,EAAe96D,KAAK,IAC/BsoB,EAAUjuC,EAAO6nC,2BAA2B40B,EAAkBikB,GAKlE,OAJKzyC,IAASA,EAAUjuC,EAAOunC,gBAAgB4F,EAAUsvB,EAAkBikB,IAC3E3C,EAASvyB,YAAc/lD,EAGhBzF,EAAOktC,mBAAmB3S,EAAMimD,EAAcrzC,GAKvD,IAAK,QAKH,OAJA4wC,EAASt8D,MACP/H,EAAAgI,eAAek/D,eACftyB,EAAW7pD,OAAQ0kC,EAASjiC,OAASiiC,EAAS,GAAKmlB,GAAY7pD,MAAMugB,YAEhEhlB,EAAOqtC,oBAEhB,IAAK,UAKH,OAJA0wC,EAASn4D,QACPlM,EAAAgI,eAAek/D,eACftyB,EAAW7pD,OAAQ0kC,EAASjiC,OAASiiC,EAAS,GAAKmlB,GAAY7pD,MAAMugB,YAEhEhlB,EAAOmsC,YAEhB,IAAK,OAKH,OAJA4xC,EAAStiD,KACP/hB,EAAAgI,eAAek/D,eACftyB,EAAW7pD,OAAQ0kC,EAASjiC,OAASiiC,EAAS,GAAKmlB,GAAY7pD,MAAMugB,YAEhEhlB,EAAOmsC,YAKhB,IAAK,KAOH,OANI5nC,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAc7xC,EAAA+E,KAAKC,GACrB3e,EAAOqtC,qBAET0wC,EAAS/tB,kBACd7mB,EAAS,GACTxvB,EAAA+E,KAAKC,GAAE,KAKX,IAAK,MAOH,OANIpa,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAc7xC,EAAA+E,KAAKE,IACrB5e,EAAOqtC,qBAET0wC,EAAS/tB,kBACd7mB,EAAS,GACTxvB,EAAA+E,KAAKE,IAAG,KAKZ,IAAK,MAOH,OANIra,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAc7xC,EAAA+E,KAAKG,IACrB7e,EAAOqtC,qBAET0wC,EAAS/tB,kBACd7mB,EAAS,GACTxvB,EAAA+E,KAAKG,IAAG,KAKZ,IAAK,MAOH,OANIta,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAc7xC,EAAA+E,KAAKI,IACrB9e,EAAOqtC,qBAET0wC,EAAS/tB,kBACd7mB,EAAS,GACTxvB,EAAA+E,KAAKI,IAAG,KAKZ,IAAK,QAOH,OANIva,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAcuyB,EAASt/D,QAAQkB,SACpChG,EAAA+E,KAAKu+B,QACLtjC,EAAA+E,KAAKw+B,QACFl9C,EAAOqtC,qBAET0wC,EAAS/tB,kBACd7mB,EAAS,GACT40C,EAASt/D,QAAQkB,SACbhG,EAAA+E,KAAKu+B,QACLtjC,EAAA+E,KAAKw+B,QAAO,KAKpB,IAAK,KAOH,OANI34C,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAc7xC,EAAA+E,KAAKM,GACrBhf,EAAOqtC,qBAET0wC,EAAS/tB,kBACd7mB,EAAS,GACTxvB,EAAA+E,KAAKM,GAAE,KAKX,IAAK,MAOH,OANIza,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAc7xC,EAAA+E,KAAKO,IACrBjf,EAAOqtC,qBAET0wC,EAAS/tB,kBACd7mB,EAAS,GACTxvB,EAAA+E,KAAKO,IAAG,KAKZ,IAAK,MAOH,OANI1a,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAc7xC,EAAA+E,KAAKQ,IACrBlf,EAAOqtC,qBAET0wC,EAAS/tB,kBACd7mB,EAAS,GACTxvB,EAAA+E,KAAKQ,IAAG,KAKZ,IAAK,MAOH,OANI3a,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAc7xC,EAAA+E,KAAKS,IACrBnf,EAAOqtC,qBAET0wC,EAAS/tB,kBACd7mB,EAAS,GACTxvB,EAAA+E,KAAKS,IAAG,KAKZ,IAAK,QAOH,OANI5a,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAcuyB,EAASt/D,QAAQW,UACjCpf,EAAOqtC,qBAET0wC,EAAS/tB,kBACd7mB,EAAS,GACT40C,EAASt/D,QAAQW,UAAS,KAK9B,IAAK,OAOH,OANI7a,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAc7xC,EAAA+E,KAAKW,KACrBrf,EAAOqtC,qBAET0wC,EAAS/tB,kBACd7mB,EAAS,GACTxvB,EAAA+E,KAAKW,KAAI,KAKb,IAAK,MAOH,OANI9a,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAc7xC,EAAA+E,KAAKY,IACrBtf,EAAOqtC,qBAET0wC,EAAS/tB,kBACd7mB,EAAS,GACTxvB,EAAA+E,KAAKY,IAAG,KAKZ,IAAK,MAOH,OANI/a,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,QACX62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAc7xC,EAAA+E,KAAKa,IACrBvf,EAAOqtC,qBAET0wC,EAAS/tB,kBACd7mB,EAAS,GACTxvB,EAAA+E,KAAKa,IAAG,KAQZ,IAAK,eAOH,GANIhb,GACFw5E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGT,GAAnB2oB,EAASjiC,OAMX,OALA62E,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAElD+4D,EAASvyB,YAAc7xC,EAAA+E,KAAKc,KACrBxf,EAAOqtC,oBAEhB,IAAIwzC,EAAO9C,EAASruB,4BAA4BvmB,EAAS,GAAIxvB,EAAA+E,KAAKQ,IAAG,GAEjEgF,GADAxf,EAAOq5E,EAASvyB,aACUtnC,mBAE9B,OADA65D,EAASvyB,YAAc7xC,EAAA+E,KAAKc,KAEzB9a,EAAKR,GAAE,MACPggB,GAC2C,GAA5CA,EAAmBD,eAAe/c,QAClCgd,EAAmBD,eAAe,IAAM85D,EAASt/D,QAAQW,WAQ3D2+D,EAASvyB,YAAc7xC,EAAA+E,KAAKc,KAE5Bu+D,EAASjyB,mBAAoB,EACtB9rD,EAAO8sC,WAAW,iBAAmB+zC,GAAM,KAThD9C,EAASt8D,MACP/H,EAAAgI,eAAeiuC,mCACfrB,EAAW7pD,MAAOC,EAAKsgB,WAAY,wBAE9BhlB,EAAOqtC,qBAQpB,IAAI5mC,EAkBN,SACEs3E,EACAz7E,EACA6mC,EACA4sB,EACAzH,GAEA,OAAQhsD,EAAUke,cAOhB,IAAK,UAAW,OAAOsgE,EAAS,MAAO/C,EAAUpkE,EAAA+E,KAAKG,IAAKsqB,EAAUxvB,EAAA+E,KAAKG,IAAKyvC,GAC/E,IAAK,UAAW,OAAOwyB,EAAS,MAAO/C,EAAUpkE,EAAA+E,KAAKI,IAAKqqB,EAAUxvB,EAAA+E,KAAKI,IAAKwvC,GAE/E,IAAK,UAAW,OAAOwyB,EAAS,MAAO/C,EAAUpkE,EAAA+E,KAAKG,IAAKsqB,EAAUxvB,EAAA+E,KAAKG,IAAKyvC,GAC/E,IAAK,UAAW,OAAOwyB,EAAS,MAAO/C,EAAUpkE,EAAA+E,KAAKI,IAAKqqB,EAAUxvB,EAAA+E,KAAKI,IAAKwvC,GAE/E,IAAK,aAAc,OAAOwyB,EAAS,SAAU/C,EAAUpkE,EAAA+E,KAAKG,IAAKsqB,EAAUxvB,EAAA+E,KAAKG,IAAKyvC,GACrF,IAAK,aAAc,OAAOwyB,EAAS,SAAU/C,EAAUpkE,EAAA+E,KAAKI,IAAKqqB,EAAUxvB,EAAA+E,KAAKI,IAAKwvC,GAErF,IAAK,WAAY,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKG,IAAKsqB,EAAUxvB,EAAA+E,KAAKG,IAAKyvC,GACjF,IAAK,WAAY,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKI,IAAKqqB,EAAUxvB,EAAA+E,KAAKI,IAAKwvC,GAEjF,IAAK,WAAY,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKG,IAAKsqB,EAAUxvB,EAAA+E,KAAKG,IAAKyvC,GACjF,IAAK,WAAY,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKI,IAAKqqB,EAAUxvB,EAAA+E,KAAKI,IAAKwvC,GAEjF,IAAK,UAAW,OAAOwyB,EAAS,MAAO/C,EAAUpkE,EAAA+E,KAAKY,IAAK6pB,EAAUxvB,EAAA+E,KAAKY,IAAKgvC,GAC/E,IAAK,UAAW,OAAOwyB,EAAS,MAAO/C,EAAUpkE,EAAA+E,KAAKa,IAAK4pB,EAAUxvB,EAAA+E,KAAKa,IAAK+uC,GAE/E,IAAK,UAAW,OAAOwyB,EAAS,MAAO/C,EAAUpkE,EAAA+E,KAAKY,IAAK6pB,EAAUxvB,EAAA+E,KAAKY,IAAKgvC,GAC/E,IAAK,UAAW,OAAOwyB,EAAS,MAAO/C,EAAUpkE,EAAA+E,KAAKa,IAAK4pB,EAAUxvB,EAAA+E,KAAKa,IAAK+uC,GAE/E,IAAK,UAAW,OAAOwyB,EAAS,MAAO/C,EAAUpkE,EAAA+E,KAAKY,IAAK6pB,EAAUxvB,EAAA+E,KAAKY,IAAKgvC,GAC/E,IAAK,UAAW,OAAOwyB,EAAS,MAAO/C,EAAUpkE,EAAA+E,KAAKa,IAAK4pB,EAAUxvB,EAAA+E,KAAKa,IAAK+uC,GAE/E,IAAK,WAAY,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKY,IAAK6pB,EAAUxvB,EAAA+E,KAAKY,IAAKgvC,GACjF,IAAK,WAAY,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKa,IAAK4pB,EAAUxvB,EAAA+E,KAAKa,IAAK+uC,GAEjF,IAAK,YAAa,OAAOwyB,EAAS,QAAS/C,EAAUpkE,EAAA+E,KAAKY,IAAK6pB,EAAUxvB,EAAA+E,KAAKY,IAAKgvC,GACnF,IAAK,YAAa,OAAOwyB,EAAS,QAAS/C,EAAUpkE,EAAA+E,KAAKa,IAAK4pB,EAAUxvB,EAAA+E,KAAKa,IAAK+uC,GAEnF,IAAK,eAAgB,OAAOwyB,EAAS,WAAY/C,EAAUpkE,EAAA+E,KAAKY,IAAK6pB,EAAUxvB,EAAA+E,KAAKY,IAAKgvC,GACzF,IAAK,eAAgB,OAAOwyB,EAAS,WAAY/C,EAAUpkE,EAAA+E,KAAKa,IAAK4pB,EAAUxvB,EAAA+E,KAAKa,IAAK+uC,GAEzF,IAAK,cAAe,OAAOwyB,EAAS,UAAW/C,EAAUpkE,EAAA+E,KAAKY,IAAK6pB,EAAUxvB,EAAA+E,KAAKY,IAAKgvC,GACvF,IAAK,cAAe,OAAOwyB,EAAS,UAAW/C,EAAUpkE,EAAA+E,KAAKa,IAAK4pB,EAAUxvB,EAAA+E,KAAKa,IAAK+uC,GAEvF,IAAK,sBAAuB,OAAOwyB,EAAS,cAAe/C,EAAUpkE,EAAA+E,KAAKG,IAAKsqB,EAAUxvB,EAAA+E,KAAKY,IAAKgvC,GACnG,IAAK,sBAAuB,OAAOwyB,EAAS,cAAe/C,EAAUpkE,EAAA+E,KAAKI,IAAKqqB,EAAUxvB,EAAA+E,KAAKa,IAAK+uC,GACnG,IAAK,sBAAuB,OAAOwyB,EAAS,cAAe/C,EAAUpkE,EAAA+E,KAAKY,IAAK6pB,EAAUxvB,EAAA+E,KAAKG,IAAKyvC,GACnG,IAAK,sBAAuB,OAAOwyB,EAAS,cAAe/C,EAAUpkE,EAAA+E,KAAKa,IAAK4pB,EAAUxvB,EAAA+E,KAAKI,IAAKwvC,GAEnG,IAAK,WAAY,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKY,IAAK6pB,EAAUxvB,EAAA+E,KAAKY,IAAKgvC,GACjF,IAAK,WAAY,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKa,IAAK4pB,EAAUxvB,EAAA+E,KAAKa,IAAK+uC,GAEjF,IAAK,YAAa,OAAOwyB,EAAS,QAAS/C,EAAUpkE,EAAA+E,KAAKY,IAAK6pB,EAAUxvB,EAAA+E,KAAKY,IAAKgvC,GACnF,IAAK,YAAa,OAAOwyB,EAAS,QAAS/C,EAAUpkE,EAAA+E,KAAKa,IAAK4pB,EAAUxvB,EAAA+E,KAAKa,IAAK+uC,GAEnF,IAAK,cAAe,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKC,GAAIwqB,EAAUxvB,EAAA+E,KAAKG,IAAKyvC,GACnF,IAAK,cAAe,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKM,GAAImqB,EAAUxvB,EAAA+E,KAAKQ,IAAKovC,GACnF,IAAK,eAAgB,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKE,IAAKuqB,EAAUxvB,EAAA+E,KAAKG,IAAKyvC,GACrF,IAAK,eAAgB,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKO,IAAKkqB,EAAUxvB,EAAA+E,KAAKQ,IAAKovC,GACrF,IAAK,WAAY,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKG,IAAKsqB,EAAUxvB,EAAA+E,KAAKG,IAAKyvC,GACjF,IAAK,cAAe,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKC,GAAIwqB,EAAUxvB,EAAA+E,KAAKI,IAAKwvC,GACnF,IAAK,cAAe,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKM,GAAImqB,EAAUxvB,EAAA+E,KAAKS,IAAKmvC,GACnF,IAAK,eAAgB,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKE,IAAKuqB,EAAUxvB,EAAA+E,KAAKI,IAAKwvC,GACrF,IAAK,eAAgB,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKO,IAAKkqB,EAAUxvB,EAAA+E,KAAKS,IAAKmvC,GACrF,IAAK,eAAgB,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKG,IAAKsqB,EAAUxvB,EAAA+E,KAAKI,IAAKwvC,GACrF,IAAK,eAAgB,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKQ,IAAKiqB,EAAUxvB,EAAA+E,KAAKS,IAAKmvC,GACrF,IAAK,WAAY,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKI,IAAKqqB,EAAUxvB,EAAA+E,KAAKI,IAAKwvC,GACjF,IAAK,WAAY,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKY,IAAK6pB,EAAUxvB,EAAA+E,KAAKY,IAAKgvC,GACjF,IAAK,WAAY,OAAOwyB,EAAS,OAAQ/C,EAAUpkE,EAAA+E,KAAKa,IAAK4pB,EAAUxvB,EAAA+E,KAAKa,IAAK+uC,GAEjF,IAAK,aAAc,OAAOwyB,EAAS,QAAS/C,EAAUpkE,EAAA+E,KAAKC,GAAIwqB,EAAUxvB,EAAA+E,KAAKG,IAAKyvC,GACnF,IAAK,cAAe,OAAOwyB,EAAS,QAAS/C,EAAUpkE,EAAA+E,KAAKE,IAAKuqB,EAAUxvB,EAAA+E,KAAKG,IAAKyvC,GACrF,IAAK,YAAa,OAAOwyB,EAAS,QAAS/C,EAAUpkE,EAAA+E,KAAKG,IAAKsqB,EAAUxvB,EAAA+E,KAAKG,IAAKyvC,GACnF,IAAK,aAAc,OAAOwyB,EAAS,QAAS/C,EAAUpkE,EAAA+E,KAAKC,GAAIwqB,EAAUxvB,EAAA+E,KAAKI,IAAKwvC,GACnF,IAAK,cAAe,OAAOwyB,EAAS,QAAS/C,EAAUpkE,EAAA+E,KAAKE,IAAKuqB,EAAUxvB,EAAA+E,KAAKI,IAAKwvC,GACrF,IAAK,cAAe,OAAOwyB,EAAS,QAAS/C,EAAUpkE,EAAA+E,KAAKG,IAAKsqB,EAAUxvB,EAAA+E,KAAKI,IAAKwvC,GACrF,IAAK,YAAa,OAAOwyB,EAAS,QAAS/C,EAAUpkE,EAAA+E,KAAKI,IAAKqqB,EAAUxvB,EAAA+E,KAAKI,IAAKwvC,GACnF,IAAK,YAAa,OAAOwyB,EAAS,QAAS/C,EAAUpkE,EAAA+E,KAAKY,IAAK6pB,EAAUxvB,EAAA+E,KAAKY,IAAKgvC,GACnF,IAAK,YAAa,OAAOwyB,EAAS,QAAS/C,EAAUpkE,EAAA+E,KAAKa,IAAK4pB,EAAUxvB,EAAA+E,KAAKa,IAAK+uC,GAErF,OAAO,EAxGIyyB,CAAahD,EAAUz7E,EAAW6mC,EAAU4sB,EAAgBzH,GACvE,OAAI7nD,GACElC,GAAiBA,EAAc2C,QACjC62E,EAASt8D,MACP/H,EAAAgI,eAAes7C,sBACf1O,EAAW7pD,MAAOnC,EAAUke,cAGzB/Z,IAETs3E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfyoC,EAAW7pD,OAENzE,EAAOqtC,qBA8FhB,SAASyzC,EACP7/E,EACA88E,EACAiD,EACA73C,EACA83C,EACA3yB,GAEA,IAAIhsD,EAAYgQ,OAAOyrE,EAAS1zD,QAAQ1N,eAAepb,IAAIN,IAE3D,OADAqR,OAAOhQ,EAAUW,MAAQy5C,EAAAtgC,YAAYuH,oBAC9Bo6C,EAAYggB,EAA6Bz7E,GAAa0+E,GAAgB73C,EAAU83C,EAAW3yB,GAIpG,SAAS0vB,EACPD,EACAx5E,EACA4kC,EACAmlB,GAEA,GAAuB,GAAnBnlB,EAASjiC,OACX,OAAK3C,GAAyC,GAAxBA,EAAc2C,OAO7B3C,EAAc,IANnBw5E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAgBA,EAAc2C,OAAO8d,SAAS,IAAM,KAEtE,MAIX,GAAuB,GAAnBmkB,EAASjiC,OAAa,CACxB,GAAI3C,EACF,GAA4B,GAAxBA,EAAc2C,OAChB62E,EAAS/tB,kBAAkB7mB,EAAS,GAAI5kC,EAAc,GAAE,SACnD,CACL,GAAIA,EAAc2C,OAKhB,OAJA62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAEhD,KAET+4D,EAASruB,4BAA4BvmB,EAAS,GAAIxvB,EAAA+E,KAAKG,IAAG,QAG5Dk/D,EAASruB,4BAA4BvmB,EAAS,GAAIxvB,EAAA+E,KAAKG,IAAG,GAE5D,OAAOk/D,EAASvyB,YAYlB,OAVIjnD,GAAiBA,EAAc2C,OAAS,GAC1C62E,EAASt8D,MACP/H,EAAAgI,eAAemtD,oCACfvgB,EAAW7pD,MAAO,IAAKF,EAAc2C,OAAO8d,SAAS,KAGzD+4D,EAASt8D,MACP/H,EAAAgI,eAAeqG,+BACfumC,EAAW7pD,MAAO,IAAK0kC,EAASjiC,OAAO8d,SAAS,KAE3C,KAIT,SAASk7D,EAAuBnC,EAAoBz2E,GAClD,IAAIb,EACA9E,EA6BJ,OA5BIo8E,EAASt/D,QAAQkB,UACnBlZ,EAAOs3E,EAASzrC,qBAAqBhrC,EAAYqS,EAAA+E,KAAKy+B,QAAO,MAE3DtjC,EAAA4Z,gBAAgBhtB,IAASoT,EAAA6Z,aAAa6C,OACf,GAAvB1c,EAAA+d,kBAAkBnxB,IACY,GAA9BoT,EAAA08B,qBAAqB9vC,KACpB9E,EAAQkY,EAAAge,oBAAoBpxB,IAAS,KAEtCs3E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAEb9C,GAAS,KAGX8E,EAAOs3E,EAASzrC,qBAAqBhrC,EAAYqS,EAAA+E,KAAK0+B,QAAO,MAE3DvjC,EAAA4Z,gBAAgBhtB,IAASoT,EAAA6Z,aAAa6C,OACf,GAAvB1c,EAAA+d,kBAAkBnxB,KACjB9E,EAAQkY,EAAA2c,iBAAiB/vB,IAAS,KAEnCs3E,EAASt8D,MACP/H,EAAAgI,eAAemE,wBACfve,EAAW7C,OAEb9C,GAAS,IAGNA,EAwDT,SAAgB4zD,EACdwoB,EACAzjD,EACAg0B,GAEA,IAAIjkC,EAAU0zD,EAAS1zD,QACnBrqB,EAAS+9E,EAAS/9E,OAElBkhF,EAAa72D,EAAQxN,YAAYtb,IAAI,UACzC,IAAK2/E,EAAY,OAAOlhF,EAAOqtC,oBAE/B,IAAIhwB,EAAgBgN,EAAQhN,cAC5B,IAAMA,IAAiB0gE,EAASntB,gBAAgBvzC,GAAiB,OAAOrd,EAAOqtC,oBAEnD,MAAX/S,EACbyjD,EAAS/tB,kBAAkB11B,EAAS4mD,EAAU,KAC9CA,EAAWjjC,aAAaj+C,GAEV+9E,EAAS7b,mBAAmB5T,EAAW7pD,MAAMiJ,OAAOJ,gBAGtE,OADAywE,EAASvyB,YAAc7xC,EAAA+E,KAAKc,KACrBxf,EAAOwrC,YAAY,MACxBxrC,EAAOgtC,iBACL3vB,EAAcmD,gBAAgB,GAGhCxgB,EAAOqtC,sBAwDX,SAAgBo1B,EACdsb,EACArZ,WAEIr6C,EAAU0zD,EAAS1zD,QACvB/X,OAAOoyD,EAAchgE,KAAK24C,UAAUhzB,IAIlC,IAAI82D,EAAgBzc,EAAc50C,YAClC,IAA2B,GAAvBqxD,EAA0B,OAAOA,EAIvC,IAAI90E,EAAUq4D,EAAcr4D,QAC5B,GAAIq4D,EAAcpiE,UAAU4F,YAAYzD,MAAMiJ,OAAOoX,WACnC,OAAZzY,GAAoBA,EAAQiX,IAAI,QAAS,CAC3C,IAAI89D,EAAc9uE,OAAOjG,EAAQ9K,IAAI,SACrC+Q,OAAO8uE,EAAYn+E,MAAQy5C,EAAAtgC,YAAYuH,oBACvC,IAAI09D,EAAa/uE,OAAO+X,EAAQxM,SAASmG,gBAAmCo9D,EAAa,OACzF9uE,OAAO+uE,EAAWn9E,GAAGxB,EAAAsB,YAAYm9C,QAAUz+C,EAAAsB,YAAYipB,WACvD3a,QAAQ+uE,EAAWj9E,MAAM1B,EAAAsB,YAAY8f,QAAUphB,EAAAsB,YAAYs9E,UAC3DhvE,OAAqD,GAA9C+uE,EAAW5xE,UAAUwU,eAAe/c,QAC3CoL,OAAO+uE,EAAW5xE,UAAUhK,YAAckU,EAAA+E,KAAKc,MAC/C6hE,EAAW7gE,aAAekkD,EAAclkD,aAAe,MACvDlO,OAAOyrE,EAASntB,gBAAgBywB,IAChC,IAAI51D,EAAQsyD,EAAS/rB,yBAAyBqvB,GAE9C,OADA3c,EAAc50C,YAAcrE,EACrBA,EAIX,IAAIzrB,EAAS+9E,EAAS/9E,OAClBye,EAAUs/D,EAASt/D,QACnBmvC,EAAiBnvC,EAAQmvC,eACzB2zB,EAAiB9iE,EAAQW,UAAU+E,SACnCzU,EAAO,IAAI0G,MAGf1G,EAAKoW,KACH9lB,EAAOisC,SACLjsC,EAAO6oC,YACLpqB,EAAQkB,SACJ9F,EAAAyd,QAAQE,OACR3d,EAAAyd,QAAQC,OACZv3B,EAAOspC,eAAe,EAAGskB,IAE3B5tD,EAAOqsC,iBAKX,IAAIsf,EAAgBoyB,EAASpyB,cACzB77B,EAAc67B,EAAczkD,OAChCykD,EAAc7lC,KAAK,GACnB4+C,EAAc50C,YAAcA,EAG5B,IAAI0xD,EAAe9c,EAAc/0C,KAyBjC,GAxBI6xD,GACFlvE,OAAOkvE,EAAa98E,KAAK24C,UAAUhzB,IACnC3a,EAAKoW,KACH9lB,EAAOktC,mBACLltC,EAAOioC,UACLw6B,EAAasb,EAAiByD,EAAa98E,KAAKq4C,kBAGhD/8C,EAAOspC,eAAe,EAAGskB,IAEb,GAAdA,EAAmC,KAAO,QAM9Cl+C,EAAKoW,KACH9lB,EAAO8sC,WAAWx6B,OAAO+X,EAAQ3M,gBAAgB8C,cAC/CxgB,EAAOspC,eAAe,EAAGskB,IAC1B,IAKDvhD,MACF,IAAmB,IAAAkhB,EAAA1L,EAAAxV,EAAQtC,UAAQkY,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAAhC,IAAI7K,EAAM+K,EAAAtgB,MACb,GAAIuV,EAAOjU,MAAQy5C,EAAAtgC,YAAYoT,MAC7B,GAAYtY,EAAQpT,SAAW4gE,EAE7B,GADmBxtD,EAAQxS,KAClB24C,UAAUhzB,GAAU,CAC3B,IAAIkc,EAAiBrvB,EAAQuY,aAC7Bnd,OAAOi0B,GAAU,GACjB72B,EAAKoW,KACH9lB,EAAO8sC,WAAWx6B,OAAO+X,EAAQ3M,gBAAgB8C,cAC/CxgB,EAAO4pC,WACL23C,GACA,EACAvhF,EAAOspC,eAAe,EAAGskB,GACzBA,EACArnB,IAEH,uGAeb,OANAolB,EAAc77B,GAAe9vB,EAAO0tC,YAClCg3B,EAAclkD,aAAe,MAC7Bu9D,EAAStxB,mBAAmB,KAAM9yC,EAAA+E,KAAKc,KAAMf,EAAQW,WACrD,KACApf,EAAOwrC,YAAY,KAAM97B,IAEpBogB,EAhgGT/vB,EAAAg+D,cAuwFAh+D,EAAAykE,gBAAA,SACEuZ,EACArZ,EACApW,GAEA,IAAIjkC,EAAU0zD,EAAS1zD,QACvB/X,OAAOoyD,EAAcr6C,SAAWA,GAChC,IAAIrqB,EAAS+9E,EAAS/9E,OAClBye,EAAUs/D,EAASt/D,QAGvB,GAAI4L,EAAQ9M,OAASmnD,EAAchgE,KAAK24C,UAAUhzB,GAAU,CAC1D,IAAIo3D,EAAmBnvE,OAAO+X,EAAQ7M,oBACtC,OAAKugE,EAASntB,gBAAgB6wB,IAC9B1D,EAASvyB,YAAckZ,EAAchgE,KAC9B1E,EAAO8sC,WACZ20C,EAAiBjhE,cACf/B,EAAQkB,SACJ3f,EAAOqoC,UAAUq8B,EAAc90C,qBAC/B5vB,EAAOioC,UAAUy8B,EAAc90C,qBACnC5vB,EAAOioC,UACLw6B,EAAasb,EAAUrZ,KAG3BjmD,EAAQmvC,iBAX8C5tD,EAAOqtC,oBAiB/D,OADIo0C,EAAmBp3D,EAAQ/M,wBAQ1BygE,EAASntB,gBAAgB6wB,IAE9B1D,EAASvyB,YAAckZ,EAAchgE,KAC9B1E,EAAO8sC,WACZ20C,EAAiBjhE,cACf/B,EAAQkB,SACJ3f,EAAOqoC,UAAUq8B,EAAc90C,qBAC/B5vB,EAAOioC,UAAUy8B,EAAc90C,sBAErCnR,EAAQmvC,iBAT8C5tD,EAAOqtC,qBAN7DhjB,EAAQ5I,MACN/H,EAAAgI,eAAec,mBACf8rC,EAAW7pD,MAAO,mBAEbzE,EAAOqtC,sBAiBpBttC,EAAAw1D,eA+BAx1D,EAAAitD,oBAAA,SAAoC+wB,WAC9B/9E,EAAS+9E,EAAS/9E,OAClBugE,EAAQ,IAAInqD,UAEhB,IAAoB,IAAAmX,EAAA1L,EAAAk8D,EAAS1zD,QAAQ1N,eAAe5S,UAAQkY,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAAzD,IAAIrZ,EAAOuZ,EAAAtgB,MACd,GAAI+G,EAAQzF,MAAQy5C,EAAAtgC,YAAYxJ,OAAhC,CACA,IAAIqX,EAAiBvhB,EACjBq0C,EAAiB9yB,EAAOvlB,KAAKq4C,eACjC,GACE9yB,EAAO/lB,GAAGxB,EAAAsB,YAAYypD,WACH,OAAnB1Q,IACCA,EAAe33B,aAAas3B,EAAArgC,eAAepJ,WAE5C,GAAIgX,EAAO/lB,GAAGxB,EAAAsB,YAAYqnB,SAAU,CAClC,IAAI1pB,EAAQsoB,EAAOmB,qBACnBm1C,EAAMz6C,KACJ9lB,EAAOktC,mBACLltC,EAAOspC,eAAe,EAAC,IAErBy0C,EAASt/D,QAAQkB,SACb3f,EAAOqoC,UAAUkI,QAAQ5uC,GAAQ6uC,SAAS7uC,IAC1C3B,EAAOioC,UAAUsI,QAAQ5uC,KAE/B,YAIJ4+D,EAAMz6C,KACJ9lB,EAAOktC,mBACLltC,EAAOspC,eAAe,EAAC,IAErBtpC,EAAO0pC,gBACLzf,EAAOzJ,aACPu9D,EAASt/D,QAAQmvC,iBAGrB,0GAMV,IAAI3f,EAAU8vC,EAAStxB,oBAAqB9yC,EAAA+E,KAAKG,KAAOlF,EAAA+E,KAAKc,MAC7Dxf,EAAO0tC,YAAY,gBAAiBO,KAClCsyB,EAAMr5D,OACFlH,EAAOwrC,YAAY,KAAM+0B,GACzBvgE,EAAOmsC,cAKfpsC,EAAA0iE,8FC18FA,SAAkBif,GAEhBA,IAAA,eACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,8CACAA,IAAA,yBAEAA,IAAA,kBACAA,IAAA,yCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,oCACAA,IAAA,gCACAA,IAAA,0CACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,8CACAA,IAAA,2CACAA,IAAA,4CACAA,IAAA,oBAEAA,IAAA,UAEAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UAEAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,6BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,mBAEAA,IAAA,yBACAA,IAAA,wBACAA,IAAA,qCACAA,IAAA,aACAA,IAAA,8BAnIF,CAAkB3hF,EAAA2hF,WAAA3hF,EAAA2hF,cAuIlB3hF,EAAAq7B,YAAA,SAA4Br6B,GAC1B,OAAQA,GACN,QACA,QACA,UACA,UACE,OAAO,EAET,QACE,OAAO,IAMbhB,EAAA4mD,aAAA,SAA6B5lD,GAC3B,OAAQA,GACN,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACE,OAAO,EAET,QACE,OAAOA,GAAC,MAAuBA,GAAC,OAMtChB,EAAAklD,eAAA,SAA+BlkD,GAC7B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAA8oD,aAAA,SAA6B9nD,GAC3B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAqmD,kBAAA,SAAkCrlD,GAChC,OAAOA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACnB,IAADA,GACC,IAADA,GACAA,EAAI,KAiLb,SAAkCs5B,GAChC,QAAOA,EAAO,GAAKA,EAAO,QACnBsnD,EAAmBtnD,EAAaunD,GAnLpBC,CAAyB9gF,IAI9ChB,EAAAsmD,mBAAA,SAAmCtlD,GACjC,OAAOA,GAAC,IAAkBA,GAAC,KAI7BhB,EAAAwmD,iBAAA,SAAiCxlD,GAC/B,OAAOA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAmBA,GAAC,IACpB,IAADA,GACC,IAADA,GACAA,EAAI,KAuKb,SAAiCs5B,GAC/B,QAAOA,EAAO,GAAKA,EAAO,QACnBsnD,EAAmBtnD,EAAaynD,GAzKpBC,CAAwBhhF,IAI7C,IAAM6gF,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASH,EAAmBtnD,EAAWhI,GACrC,GAAIgI,EAAOhI,EAAI,GAAI,OAAO,EAM1B,IAJA,IAEI2vD,EAFAnN,EAAK,EACLC,EAAKziD,EAAInrB,OAGN2tE,EAAK,EAAIC,GAAI,CAGlB,GAFAkN,EAAMnN,GAAMC,EAAKD,GAAM,EAEnBxiD,EADJ2vD,GAAOA,EAAM,IACG3nD,GAAQA,GAAQhI,EAAI2vD,EAAM,GACxC,OAAO,EAEL3nD,EAAOhI,EAAI2vD,GACblN,EAAKkN,EAELnN,EAAKmN,EAAM,EAGf,OAAO,kFCtWT,IAAMC,EAAS,GAMf,SAAgB10E,EAAcH,GAK5B,IAJA,IAiBIqiD,EAjBA15C,EAAM,EACNklB,EAAM7tB,EAAKlG,OAGR6O,EAAM,EAAIklB,GACK,IAApB7tB,EAAKmF,WAAWwD,IAChB3I,EAAKmF,WAAWwD,EAAM,IAAMksE,GAE5BlsE,GAAO,EAUT,KAPIA,EAAM,GAAKklB,EAAM7tB,EAAKlG,UACxBkG,EAAOA,EAAK+I,UAAUJ,EAAKklB,GAC3BA,GAAOllB,EACPA,EAAM,GAIDA,EAAM,EAAIklB,GAAK,CAIpB,GAHAw0B,GAAQ,EAINriD,EAAKmF,WAAWwD,IAAQksE,GACA,IAAxB70E,EAAKmF,WAAWwD,EAAM,GACtB,CAGA,IADA05C,EAAQ15C,EAAM,GAAKklB,IAEjBllB,EAAM,EAAIklB,GACV7tB,EAAKmF,WAAWwD,EAAM,IAAMksE,EAC5B,CACA70E,EAAOqiD,EACHriD,EAAK+I,UAAU,EAAGJ,GAClB3I,EAAK+I,UAAU,EAAGJ,GAAO3I,EAAK+I,UAAUJ,EAAM,GAClDklB,GAAO,EACP,SAKF,IADAw0B,EAAQ15C,EAAM,GAAKklB,IACkB,IAAxB7tB,EAAKmF,WAAWwD,EAAM,IACjCA,EAAM,EAAIklB,GACc,IAAxB7tB,EAAKmF,WAAWwD,EAAM,IACtB3I,EAAKmF,WAAWwD,EAAM,IAAMksE,EAC5B,CAGA,IADA,IAAIC,EAAOnsE,IACFmsE,GAAQ,GACf,GAAI90E,EAAKmF,WAAW2vE,IAASD,EAAW,CAClClsE,EAAMmsE,GAAQ,GACS,IAAzB90E,EAAKmF,WAAW2vE,EAAO,IACE,IAAzB90E,EAAKmF,WAAW2vE,EAAO,KAEvB90E,EAAOqiD,EACHriD,EAAK+I,UAAU,EAAG+rE,GAClB90E,EAAK+I,UAAU,EAAG+rE,GAAQ90E,EAAK+I,UAAUJ,EAAM,GACnDklB,GAAOllB,EAAM,EAAImsE,EACjBnsE,EAAMmsE,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAKnsE,EAAM,IACT,GAAPA,GACgB,IAAlB3I,EAAKmF,WAAW,IACE,IAAlBnF,EAAKmF,WAAW,IAChB,CAEA0oB,GADA7tB,EAAOA,EAAK+I,UAAUJ,EAAM,IACjB7O,OACX,WAKR6O,IAEF,OAAOklB,EAAM,EAAI7tB,EAAO,IAc1B,SAAgB+0E,EAAQ70E,GAEtB,IADA,IAAIyI,EAAMzI,EAAepG,SAChB6O,EAAM,GACb,GAAIzI,EAAeiF,WAAWwD,IAAQksE,EACpC,OAAO30E,EAAe6I,UAAU,EAAGJ,GAGvC,MAAO,IArGThW,EAAAwN,gBAoFAxN,EAAA0N,YAAA,SAA4BH,EAAwB80E,GAClD,OAAI90E,EAAeE,WAAW,QACrBF,EAEFC,EACL40E,EAAQC,GAAUpmC,OAAOmM,aAAa85B,GAAa30E,IAKvDvN,EAAAoiF,yFCxGA,IAAME,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjBxiF,EAAAyiF,OAAA,SAAuBnnD,EAAciW,GACnC,KAAOA,GAAS,GACdjW,EAAGvV,KAAKy8D,GACRjxC,GAAS,EAEPA,GAAS,IACXjW,EAAGvV,KAAKw8D,GACRhxC,GAAS,GAEPA,GACFjW,EAAGvV,KAAKu8D,kCCQZ,SAAgBI,EAAQn8C,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAgBi8B,EAAS7gE,EAAY2kC,EAAoBC,GACvDD,EAAOC,GAAc5kC,EACrB2kC,EAAOC,EAAS,GAAK5kC,IAAU,EAC/B2kC,EAAOC,EAAS,GAAK5kC,IAAU,GAC/B2kC,EAAOC,EAAS,GAAK5kC,IAAU,GAIjC,SAAgB+gF,EAAQp8C,EAAoBC,GAC1C,IAAIsuC,EAAK4N,EAAQn8C,EAAQC,GACrBuuC,EAAK2N,EAAQn8C,EAAQC,EAAS,GAClC,OAAO7mB,QAAQm1D,EAAIC,oDAzCrB/0E,EAAA4iF,OAAA,SAAuBr8C,EAAoBC,GACzC,OAAOD,EAAOC,IAIhBxmC,EAAAqjE,QAAA,SAAwBzhE,EAAY2kC,EAAoBC,GACtDD,EAAOC,GAAU5kC,GAInB5B,EAAA6iF,QAAA,SAAwBt8C,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,GAI/BxmC,EAAA2iE,SAAA,SAAyB/gE,EAAY2kC,EAAoBC,GACvDD,EAAOC,GAAc5kC,EACrB2kC,EAAOC,EAAS,GAAK5kC,IAAU,GAIjC5B,EAAA0iF,UAQA1iF,EAAAyiE,WAQAziE,EAAA2iF,UAOA3iF,EAAAsjE,SAAA,SAAyB1hE,EAAY2kC,EAAoBC,GACvDi8B,EAASjyB,QAAQ5uC,GAAQ2kC,EAAQC,GACjCi8B,EAAShyB,SAAS7uC,GAAQ2kC,EAAQC,EAAS,IAI7CxmC,EAAA8iF,QAAA,SAAwBv8C,EAAoBC,GAC1C,OAAOguC,WAAWkO,EAAQn8C,EAAQC,KAIpCxmC,EAAAujE,SAAA,SAAyB3hE,EAAY2kC,EAAoBC,GACvDi8B,EAAS8R,WAAW3yE,GAAQ2kC,EAAQC,IAItCxmC,EAAA+iF,QAAA,SAAwBx8C,EAAoBC,GAC1C,OAAOkuC,WAAWiO,EAAQp8C,EAAQC,KAIpCxmC,EAAAwjE,SAAA,SAAyB5hE,EAAY2kC,EAAoBC,GACvD,IAAIw8C,EAAWvO,WAAW7yE,GAC1B6gE,EAASjyB,QAAQwyC,GAAWz8C,EAAQC,GACpCi8B,EAAShyB,SAASuyC,GAAWz8C,EAAQC,EAAS,m6BCxEhD,IA0CY0kC,EA1CZnxD,EAAAtZ,EAAA,IAIAoZ,EAAApZ,EAAA,GAcAk8C,EAAAl8C,EAAA,GAkBA0lE,EAAA1lE,EAAA,KAMA,SAAYyqE,GACRA,IAAA,eACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,iBALJ,CAAYA,EAAAlrE,EAAAkrE,eAAAlrE,EAAAkrE,kBAQZ,IAAA6B,EAAA,WA8BI,SAAAA,EAAYroE,EAAcu+E,QAAA,IAAAA,MAAA,IACtB3iF,KAAKoE,MAAQA,EACbpE,KAAK2iF,WAAaA,EAClB3iF,KAAKg6B,QAyBb,OAhDWyyC,EAAAC,YAAP,SAAmBkW,eAEX5wD,EAAM,IAAI9V,QACd,IAAwB,IAAA2mE,EAAArhE,EAAAohE,GAAYE,EAAAD,EAAAnhE,QAAAohE,EAAAnhE,KAAAmhE,EAAAD,EAAAnhE,OAAE,CAAjC,IAAIqhE,EAAWD,EAAAxhF,MACZ2L,EAAiB81E,EAAY91E,eAC7B+1E,EAA4ChxD,EAAI9wB,IAAI+L,GAEnD+1E,IACDA,EAAiB,IAAIjtE,MACrBic,EAAIhuB,IAAIiJ,EAAgB+1E,IAE5BA,EAAev9D,KAAKs9D,yGAGxB,IAAwB,IAAAE,EAAAzhE,EAAAwQ,GAAGkxD,EAAAD,EAAAvhE,QAAAwhE,EAAAvhE,KAAAuhE,EAAAD,EAAAvhE,OAAE,CAApB,IAAAE,EAAAC,EAAAqhE,EAAA5hF,MAAA,GAACsgB,EAAA,GAAGA,EAAA,GACFuhE,KAAK1W,EAAY2W,kHAE5B,OAAOpxD,GASXjxB,OAAAC,eAAIyrE,EAAAxqE,UAAA,YAAJ,WACI,OAA6B,GAArBjC,KAAKoE,MAAMwqB,OAAe5uB,KAAKoE,MAAMgrD,MAAMzgC,KAAO,EAAI3uB,KAAKoE,MAAMgrD,MAAMzgC,sCAEnF5tB,OAAAC,eAAIyrE,EAAAxqE,UAAA,sBAAJ,WACI,OAAOjC,KAAKoE,MAAMiJ,OAAOJ,gDAG7BlM,OAAAC,eAAIyrE,EAAAxqE,UAAA,iBAAJ,WACI,OAAOjC,KAAKoE,MAAMiJ,OAAOJ,eAAiBjN,KAAKoE,MAAMugB,4CAGzD8nD,EAAAxqE,UAAA0iB,SAAA,WACI,OAAO3kB,KAAKoE,MAAMugB,YAGtB8nD,EAAAxqE,UAAAohF,cAAA,SAAcrpD,GACVh6B,KAAKg6B,KAAKvU,KAAKuU,IAGnByyC,EAAAxqE,UAAAqhF,cAAA,WACI,OAAOtjF,KAAK2iF,YAlDDlW,EAAA2W,eAAiB,SAACt/B,EAAgBC,GAC7C,OAAQA,EAAEp1B,KAAOm1B,EAAEn1B,MAmD3B89C,EA1DA,GAAa/sE,EAAA+sE,cAmEb,IAAA5E,EAAA,WAqBI,SAAAA,EAAY79C,EAAkBu5D,GAf9BvjF,KAAAumE,cAAqC,IAAIrqD,IAgBrClc,KAAKgqB,QAAUA,EACfhqB,KAAKujF,eAAiBA,EACtBvjF,KAAKumE,cAAgB9sD,EAAA6sD,UAAUC,cAC/BvmE,KAAK8d,UAyFb,OAjGI/c,OAAAC,eAAI6mE,EAAA5lE,UAAA,eAAJ,WACI,OAAO4jE,EAAAsD,QAAQpB,QAAQ/nE,KAAKioE,8CAcxBJ,EAAA5lE,UAAA6b,QAAR,WACI,IAAImqD,EAAcjoE,KAAKujF,eAAen/E,MAAMugB,WAC5C3kB,KAAKioE,YAAcA,EAEnB,IAAIub,EAAwB3d,EAAAsD,QAAQc,iBAAiBhC,GAErD,GADAjoE,KAAKgoE,aAAewb,EACC,UAAjBA,GAA8C,UAAjBA,EAG7B,OAFAxjF,KAAK4C,KAAOgoE,EAAan2D,YACzBzU,KAAK8qE,YAAc,UAIvB,IAAI2Y,EAA4BzjF,KAAK0jF,oBAAoBF,GACpDC,EAEuB,IAAjBA,EAAa7gF,MACpB5C,KAAK4C,KAAOgoE,EAAaG,KACzB/qE,KAAK8qE,YAAc2Y,EAAa9+D,aAEhC3kB,KAAK4C,KAAOgoE,EAAaC,OACzB7qE,KAAK8qE,YAAc2Y,EAAa9+D,YANhC3kB,KAAK4C,KAAOgoE,EAAa/2D,OAUjCg0D,EAAA5lE,UAAAqmE,mBAAA,WACI,IACIqb,EADe3jF,KAAKujF,eAAen/E,MAAMiJ,OAAOC,aACjB,IAAItN,KAAKgoE,aAE5C,OADmBhoE,KAAKgqB,QAAQ1N,eAAepb,IAAIyiF,IAIvD9b,EAAA5lE,UAAA+nE,SAAA,WACI,IAAI4Z,EAAY5jF,KAAKioE,aACiB,GAAlCjoE,KAAKioE,YAAYkF,QAAQ,OACzByW,EAAY5jF,KAAKioE,YAAY4b,OAAO,EAAE7jF,KAAKioE,YAAYkF,QAAQ,MAAME,QAGzE,IAAI//D,EAAkBtN,KAAKujF,eAAen/E,MAAMiJ,OAAOC,aAAY,IAAIs2E,EACnEv7E,EAA0BrI,KAAKgqB,QAAQ1N,eAAepb,IAAIoM,GAG9D,GAAIjF,GACA,GAAIA,EAAQzF,MAAQy5C,EAAAtgC,YAAY0G,gBAAiB,CAC7C,IAAIxgB,EAA4BoG,EAChC,OAAOw9D,EAAAsD,QAAQC,qBAAqBnnE,EAAU4F,YAAa0R,EAAAzH,cAAcW,aAE1E,CACH,IAAIqxE,EAAyB9jF,KAAKgqB,QAAQ1N,eAAepb,IAAI0iF,GAC7D,GAAIE,GAAUA,EAAOlhF,MAAQy5C,EAAAtgC,YAAY0G,gBAAiB,CAClDxgB,EAA4B6hF,EAChC,OAAOje,EAAAsD,QAAQC,qBAAqBnnE,EAAU4F,YAAa0R,EAAAzH,cAAcW,SAGjF,OAAO,GAQHo1D,EAAA5lE,UAAA8hF,wBAAR,SAAgC3b,GAC5B,IAAIM,EAAY1oE,KAAKgqB,QAAQvN,YAAYvb,IAAIknE,GAC7C,GAAIM,EAAW,CACX,IAAIC,EAAkBD,EAAUrkE,KAAKD,MAAMugB,WAC3C,OAAO3kB,KAAK+jF,wBAAwBpb,GAExC,OAAOP,GASHP,EAAA5lE,UAAAyhF,oBAAR,SAA4Btb,GACxB,IAAI1J,EAAe1+D,KAAK+jF,wBAAwB3b,GAGhD,OADgCpoE,KAAKgqB,QAAQxN,YAAYtb,IAAIw9D,IAGrEmJ,EAlHA,GAAanoE,EAAAmoE,eAuHb,IAAAmc,EAAA,WAgBI,SAAAA,EAAY39D,GAdZrmB,KAAAikF,sBAAgC,YAEhCjkF,KAAAkkF,wBAAkC,cAElClkF,KAAAmkF,oBAA8B,aAItBnkF,KAAAokF,mBAA6B,EAE7BpkF,KAAAqkF,qBAA+B,EAE/BrkF,KAAAskF,iBAA2B,EAG/BtkF,KAAKqmB,eAAiBA,EA0I9B,OAvII29D,EAAA/hF,UAAAsiF,eAAA,mBAEI,IAAKvkF,KAAKqmB,eAAeM,gBACrB,OAAO,MAGX,IAAyB,IAAAuG,EAAA1L,EAAAxhB,KAAKqmB,eAAeM,iBAAe/E,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAArD,IAAAqB,EAAAlB,EAAAD,EAAAtgB,MAAA,GAAI+G,GAAH0a,EAAA,GAAGA,EAAA,IACT,GAAI1a,EAAQzF,MAAQy5C,EAAAtgC,YAAYuH,mBAAoB,CAChD,IAAIkhE,EAAuCn8E,EACvCm8E,EAAkB38E,YAAYjH,KAAKwD,MAAMugB,YAAc3kB,KAAKikF,wBAC5DjkF,KAAKokF,mBAAoB,GAEzBI,EAAkB38E,YAAYjH,KAAKwD,MAAMugB,YAAc3kB,KAAKkkF,0BAC5DlkF,KAAKqkF,qBAAsB,GAE3BG,EAAkB38E,YAAYjH,KAAKwD,MAAMugB,YAAc3kB,KAAKmkF,sBAC5DnkF,KAAKskF,iBAAkB,sGAInC,OAAOtkF,KAAKqkF,qBAAuBrkF,KAAKskF,iBAAmBtkF,KAAKokF,mBAGpEJ,EAAA/hF,UAAAwiF,wBAAA,SAAwBxnB,GAEpB,IAAI98C,EAAe0lD,EAAAsD,QAAQM,gBAAgBxM,GACvC50D,EAA0BrI,KAAKqmB,eAAe2D,QAAQ1N,eAAepb,IAAIif,GAE7E,GAAI9X,GAAWA,EAAQzF,MAAQy5C,EAAAtgC,YAAY0G,kBACzBojD,EAAAsD,QAAQmE,mBAAoCjlE,EAASR,aAE/D,MAAM,IAAImb,MAAM,SAAS7C,EAAY,iDAG7C,OAAO,GAIX6jE,EAAA/hF,UAAAyiF,mBAAA,mBAEQC,EAAiC,IAAIC,EAAe5kF,KAAKqmB,eAAexe,YAAYzD,OAMxF,GALAugF,EAAepX,iBAAmBvtE,KAAKqmB,eAAexe,YACtD88E,EAAeE,gBAAkB7kF,KAAKqkF,oBACtCM,EAAeG,cAAgB9kF,KAAKokF,kBACpCO,EAAeI,eAAiB/kF,KAAKskF,iBAEhCtkF,KAAKqmB,eAAeM,gBACrB,OAAOg+D,MAGX,IAAiC,IAAAz3D,EAAA1L,EAAAxhB,KAAKqmB,eAAeM,iBAAe/E,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAA7D,IAAAqB,EAAAlB,EAAAD,EAAAtgB,MAAA,GAACgvB,EAAAvN,EAAA,GAAW1a,EAAA0a,EAAA,GACjB,GAAI1a,EAAQzF,MAAQy5C,EAAAtgC,YAAYkT,gBAAiB,CAE7C,IACIy2C,EADiDr9D,EACGR,YACpDixD,EAAoC4M,EAAiBrhE,KAEzD,GAAIy0D,GAAcA,EAAWl2D,MAAQ2W,EAAA9W,SAASgP,OACzCo0D,EAAAsD,QAAQC,qBAAqB1D,EAAkBnsD,EAAAzH,cAAcW,QAAS,CACvE,IAAIwqD,EAAqBnE,EACrB94D,KAAKqkF,qBAAuBrkF,KAAKykF,wBAAwB3rB,IACzD6rB,EAAeK,iBAAiBhlF,KAAKilF,eAAe30D,EAAW2sC,IAG/Dj9D,KAAKokF,mBAAqBpkF,KAAKykF,wBAAwB3rB,IACvD6rB,EAAeO,mBAAmBllF,KAAKmlF,iBAAiB70D,EAAW2sC,wGAQnF,OAHA0nB,EAAeO,mBAAmB,QAClCP,EAAeK,iBAAiB,QAEzBL,GAIXX,EAAA/hF,UAAAgjF,eAAA,SAAe30D,EAAmB2sC,GAE9B,IAAImoB,EAAiC,IAAIvd,EAAa7nE,KAAKqmB,eAAe2D,QAASizC,GAC/E5tD,EAAsB,IAAI0G,MAuB9B,OArBIqvE,EAAiBrd,QACbqd,EAAiBxiF,MAAQgoE,EAAaC,OACtCx7D,EAAKoW,KAAK,wBAAwB2/D,EAAiBpd,aAAY,UAAU13C,EAAS,MAC3E80D,EAAiBxiF,MAAQgoE,EAAaG,KAC7C17D,EAAKoW,KAAK,iCAAiC6K,EAAS,MAC7C80D,EAAiBxiF,MAAQgoE,EAAan2D,OAC7CpF,EAAKoW,KAAK,mCAAmC6K,EAAS,MAEtDjhB,EAAKoW,KAAK,+BAA+B2/D,EAAiBpd,aAAY,UAAU13C,EAAS,MAGzF80D,EAAiBxiF,MAAQgoE,EAAan2D,OACtCpF,EAAKoW,KAAK,6BAA6B6K,EAAS,MACzC80D,EAAiBxiF,MAAQgoE,EAAaG,KAC7C17D,EAAKoW,KAAK,2BAA2B6K,EAAS,MACvC80D,EAAiBxiF,MAAQgoE,EAAaC,OAC7Cx7D,EAAKoW,KAAK,kBAAkB2/D,EAAiBnd,YAAW,UAAU33C,EAAS,MAE3EjhB,EAAKoW,KAAK,cAAc6K,EAAS,mBAGlCjhB,EAAKiW,KAAK,OAGrB0+D,EAAA/hF,UAAAkjF,iBAAA,SAAiB70D,EAAmBjsB,GAEhC,IAAIghF,EAA6B,IAAIxd,EAAa7nE,KAAKqmB,eAAe2D,QAAS3lB,GAE3EgL,EAAsB,IAAI0G,MAuB9B,OArBIsvE,EAAatd,QACTsd,EAAaziF,MAAQgoE,EAAaC,OAClCx7D,EAAKoW,KAAK,cAAc6K,EAAS,oBAAoB+0D,EAAava,YAAW,QACtEua,EAAaziF,MAAQgoE,EAAaG,KACzC17D,EAAKoW,KAAK,cAAc6K,EAAS,2BAC1B+0D,EAAaziF,MAAQgoE,EAAan2D,OACzCpF,EAAKoW,KAAK,cAAc6K,EAAS,6BAEjCjhB,EAAKoW,KAAK,cAAc6K,EAAS,2BAA2B+0D,EAAard,aAAY,QAGrFqd,EAAaziF,MAAQgoE,EAAan2D,OAClCpF,EAAKoW,KAAK,cAAc6K,EAAS,uBAC1B+0D,EAAaziF,MAAQgoE,EAAaG,KACzC17D,EAAKoW,KAAK,cAAc6K,EAAS,0BAC1B+0D,EAAaziF,MAAQgoE,EAAaC,OACzCx7D,EAAKoW,KAAK,cAAc6K,EAAS,cAAc+0D,EAAava,YAAW,QAEvEz7D,EAAKoW,KAAK,cAAc6K,EAAS,qBAGlCjhB,EAAKiW,KAAK,OAEzB0+D,EA3JA,GA6JAY,EAAA,SAAAvzE,GAgBI,SAAAuzE,EAAYxgF,GAAZ,IAAAmN,EACIF,EAAA7Q,KAAAR,KAAMoE,EAAMgrD,QAAMpvD,YAfduR,EAAA+zE,UAA2B,IAAIvvE,MAE/BxE,EAAAg0E,YAA6B,IAAIxvE,MAEjCxE,EAAAi0E,WAA4B,IAAIzvE,MAYpCxE,EAAK+zE,UAAU7/D,KAAK,yCACpBlU,EAAKg0E,YAAY9/D,KAAK,2CAEtBlU,EAAKi0E,WAAW//D,KAAK,gCACrBlU,EAAKi0E,WAAW//D,KAAK,oBACrBlU,EAAKi0E,WAAW//D,KAAK,WA6B7B,OApDoCnU,EAAAszE,EAAAvzE,GA0BhCuzE,EAAA3iF,UAAA+iF,iBAAA,SAAiB5+E,GACbpG,KAAKslF,UAAU7/D,KAAKrf,IAGxBw+E,EAAA3iF,UAAAijF,mBAAA,SAAmB9+E,GACfpG,KAAKulF,YAAY9/D,KAAKrf,IAG1BrF,OAAAC,eAAI4jF,EAAA3iF,UAAA,iBAAJ,WACI,OAAOjC,KAAKoE,MAAMiJ,OAAOJ,eAAiBjN,KAAKoE,MAAMugB,WAAa3kB,KAAKutE,iBAAiB3sE,KAAKwD,MAAMugB,4CAGvGigE,EAAA3iF,UAAAqhF,cAAA,WACI,IAAImC,KAWJ,OATIzlF,KAAK6kF,iBACLY,EAAWhgE,KAAKzlB,KAAKulF,YAAYjgE,KAAK,OAEtCtlB,KAAK8kF,eACLW,EAAWhgE,KAAKzlB,KAAKslF,UAAUhgE,KAAK,OAEpCtlB,KAAK+kF,gBACLU,EAAWhgE,KAAKzlB,KAAKwlF,WAAWlgE,KAAK,OAElCmgE,EAAWngE,KAAK,OAE/Bs/D,EApDA,CAAoCnY,GAAvB/sE,EAAAklF,iBAsDb,IAAA5Y,EAAA,WAQI,SAAAA,EAAYhiD,GAJJhqB,KAAA0lF,mBAAkC,IAAIv8D,IAEtCnpB,KAAA4iF,gBAGJ5iF,KAAKgqB,QAAUA,EACfhqB,KAAK8d,UA4Bb,OAzBIkuD,EAAA/pE,UAAA6b,QAAA,uBACI,IAAyB,IAAAoP,EAAA1L,EAAAxhB,KAAKgqB,QAAQ1N,gBAAcsF,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAA7C,IAAAqB,EAAAlB,EAAAD,EAAAtgB,MAAA,GAAI+G,GAAH0a,EAAA,GAAGA,EAAA,IACT,GAAI1a,GAAWA,EAAQzF,MAAQy5C,EAAAtgC,YAAY0G,gBAAiB,CACxD,IAAI8qD,EAAsDllE,EAASR,YACnE,GAAIg+D,EAAAsD,QAAQmE,mBAAmBC,GAAmB,CAC9C,IAAIoY,EAAgC,IAAI3B,EAAmC37E,GAC3E,IAAKs9E,EAAUpB,iBACX,SAGJ,IAAII,EAAiCgB,EAAUjB,qBAE1C1kF,KAAK0lF,mBAAmBziE,IAAI0hE,EAAeiB,aAC5C5lF,KAAK4iF,aAAan9D,KAAKk/D,GACvB3kF,KAAK0lF,mBAAmBt8D,IAAIu7D,EAAeiB,kHAO/D5Z,EAAA/pE,UAAAmqE,gBAAA,WACI,OAAOpsE,KAAK4iF,cAGpB5W,EAtCA,GAAatsE,EAAAssE,oBAwCb,IAAAE,EAAA,WAUI,SAAAA,EAAYliD,GANJhqB,KAAA4iF,gBAEA5iF,KAAA6lF,WAA0B,IAAI18D,IAE9BnpB,KAAA8lF,eAA8B,IAAI38D,IAGtCnpB,KAAKgqB,QAAUA,EACfhqB,KAAK8d,UA+Hb,OA7HIouD,EAAAjqE,UAAA6b,QAAA,uBACI,IAAyB,IAAAoP,EAAA1L,EAAAxhB,KAAKgqB,QAAQ1N,gBAAcsF,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAA7C,IAAAqB,EAAAlB,EAAAD,EAAAtgB,MAAA,GAAI+G,GAAH0a,EAAA,GAAGA,EAAA,IACT,GAAI1a,GAAWA,EAAQzF,MAAQy5C,EAAAtgC,YAAY0G,gBAAiB,CACxD,IAAI4D,EAAiChe,EACjCklE,EAAmBlnD,EAAexe,YAClCk+E,EAAWxY,EAAiBnpE,MAAMiJ,OAAOJ,eAAiBsgE,EAAiBnpE,MAAMugB,WAAa4oD,EAAiB3sE,KAAKwD,MAAMugB,WAC1H0B,EAAe3D,gBAAkB1iB,KAAK6lF,WAAW5iE,IAAI8iE,KACrD/lF,KAAKgmF,aAAa3/D,GAClBrmB,KAAK6lF,WAAWz8D,IAAI28D,yGAMpC7Z,EAAAjqE,UAAAmqE,gBAAA,WACI,OAAOpsE,KAAK4iF,cAGR1W,EAAAjqE,UAAA+jF,aAAR,SAAqB3/D,GAEjB,IAAIW,EAAiDX,EAAeW,qBACpE,GAAKX,EAAe3D,cAApB,CAGA,IAAIujE,EAAqD5/D,EAAe3D,cAAcsE,qBACtF,GAAKA,EAAL,CAGA,IAAIk/D,EAAkBlmF,KAAKmmF,yBAAyB9/D,EAAgBW,EAAqBnf,aACzF,GAAKo+E,EAAL,CAGAjmF,KAAK4iF,aAAan9D,KAAKygE,GACvB,IAAIE,EAA0BH,EAAyBp+E,YACnDwH,EAAyB+2E,EAAwB/2E,KAErD,GAAIA,EAAM,CAEN,IAAID,EAAYg3E,EAAwBh3E,UAAUhL,MAAMugB,WACpD0hE,EAASrmF,KAAKsmF,gBAAgBl3E,EAAWC,GAC7CrP,KAAK4iF,aAAan9D,KAAK,IAAIgnD,EAAYpmD,EAAexe,YAAYzD,MAAOiiF,SAgBzEna,EAAAjqE,UAAAkkF,yBAAR,SAAiC9/D,EAAgCkgE,WACzDC,EAAYngE,EAAenB,WAC/B,IAAKqhE,EAA4Bl3E,KAC7B,MAAM,IAAI2T,MAAM,SAASwjE,EAAS,yCAAyCxmF,KAAKymF,SAASF,EAA4BniF,QAEzH,IAAIsB,EAAO6gF,EAA4Bl3E,KACvC,GAAI3J,EAAK9C,MAAQ2W,EAAA9W,SAASsS,MAAO,CAC7B,IAAI2xE,EAA4BhhF,EAC5BihF,EAA8B,SAClC,IAAkB,IAAAz5D,EAAA1L,EAAAklE,EAAUn7E,YAAUqW,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAAnC,IAAIklE,EAAKhlE,EAAAtgB,MACV,GAAIslF,EAAMhkF,MAAQ2W,EAAA9W,SAAS2Q,QAAS,CACjCuzE,EAAYC,EACZ,yGAGP,GAAiB,MAAbD,GAAqBA,EAAU/jF,MAAQ2W,EAAA9W,SAAS8U,WAChD,MAAM,IAAIyL,MAASwjE,EAAS,yCAAyCxmF,KAAKymF,SAASF,EAA4BniF,QAEnH,IAAIyiF,EAAkCF,EACtC,GAAIE,EAAU5/E,WAAWrE,MAAQ2W,EAAA9W,SAASU,KACtC,MAAM,IAAI6f,MAAM,SAASwjE,EAAS,0CAA0CxmF,KAAKymF,SAASF,EAA4BniF,QAG1H,GAAqB,SADiByiF,EAAU5/E,WAAYA,WAAW7C,MAAMugB,WAEzE,MAAM,IAAI3B,MAAM,SAASwjE,EAAS,0CAA0CxmF,KAAKymF,SAASF,EAA4BniF,QAE1H,IACI0iF,EAAa,iBADDD,EAAUziF,MAAMugB,WACU,IAC1C,OAAO,IAAI8nD,EAAYka,EAAUviF,MAAO0iF,GAE5C,MAAM,IAAI9jE,MAASwjE,EAAS,yCAAyCxmF,KAAKymF,SAASF,EAA4BniF,SAM3G8nE,EAAAjqE,UAAAqkF,gBAAR,SAAwBl3E,EAAmBC,WACvC,GAAIA,EAAKzM,MAAQ2W,EAAA9W,SAASsS,MAAO,CAC7B,IAAI2xE,EAA4Br3E,EAC5B03E,SACJ,IAAkB,IAAA75D,EAAA1L,EAAAklE,EAAUn7E,YAAUqW,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAAnC,IAAIklE,EAAKhlE,EAAAtgB,MACV,GAAIslF,EAAMhkF,MAAQ2W,EAAA9W,SAAS2Q,QAA3B,CAGO,GAAIwzE,EAAMhkF,MAAQ2W,EAAA9W,SAAS8U,YACHqvE,EAAO3/E,WAAWrE,MAAQ2W,EAAA9W,SAASU,KAAM,CAEjE,GAAoB,SADsCyjF,EAAO3/E,WAAYA,WAAW7C,MAAMugB,WAG1F,SAEJoiE,EAAQthE,KAAKmhE,EAAMxiF,MAAMugB,YAGhCoiE,EAAQthE,KAAKmhE,EAAMxiF,MAAMugB,+GAE7B,MAAO,aAAavV,EAAS,YAAY23E,EAAQzhE,KAAK,MAAK,KAE/D,MAAO,aAAalW,EAAS,UAAUC,EAAKjL,MAAMugB,YAG9CunD,EAAAjqE,UAAAwkF,SAAR,SAAiBriF,GACb,MAAQ,MACRA,EAAMiJ,OAAOJ,eACb,IACA7I,EAAMuqB,KAAKhK,SAAS,IACpB,IACAvgB,EAAMwqB,OAAOjK,SAAS,KAE9BunD,EA3IA,GAAaxsE,EAAAwsE,+FCleb,IAAA5wC,EAAAn7B,EAAA,GAOA6mF,EAAA7mF,EAAA,IAIA8mF,EAAA9mF,EAAA,IAKAkZ,EAAAlZ,EAAA,GAyCoCT,EAAAwnF,iBAtClC7tE,EAAA4hB,wBAOF,IAAAksD,EAAAhnF,EAAA,IASAT,EAAA0nF,UAAA,SAA0BphF,EAAc+G,EAAc6Y,EACpDyhE,GAIA,YALoD,IAAAzhE,OAAA,QACpD,IAAAyhE,MAAA,MAEKA,IAAQA,EAAS,IAAIF,EAAAG,QAC1BD,EAAOD,UAAUphF,EAAM+G,EAAM6Y,GACtByhE,GAIT3nF,EAAA6nF,SAAA,SAAyBF,GACvB,OAAOA,EAAOE,YAIhB7nF,EAAA8nF,eAAA,SAA+BH,GAC7B,IAAIr9D,EAAUq9D,EAAOr9D,QACrB,OAAOA,EAAQ3N,kBAAoB2N,EAAQ5N,YAAYvV,OACnDmjB,EAAQ5N,YAAY4N,EAAQ3N,qBAC5B,MAON3c,EAAA+nF,OAAA,SAAuBxtD,GACrB,OAAOA,EAAQZ,UAAYhgB,EAAA4f,mBAAmBK,MAIhD55B,EAAAgoF,UAAA,SAA0BztD,GACxB,OAAOA,EAAQZ,UAAYhgB,EAAA4f,mBAAmBM,SAIhD75B,EAAAioF,QAAA,SAAwB1tD,GACtB,OAAOA,EAAQZ,UAAYhgB,EAAA4f,mBAAmBO,OAIhD95B,EAAAkoF,cAAA,WACE,OAAO,IAAItsD,EAAA8uB,SAIb1qD,EAAAmoF,UAAA,SAA0BzpE,EAAkB2R,GAC1C3R,EAAQ2R,OAASA,GAInBrwB,EAAAooF,iBAAA,SAAiC1pE,EAAkBmB,GACjDnB,EAAQmB,cAAgBA,GAI1B7f,EAAAqoF,YAAA,SAA4B3pE,EAAkBoB,GAC5CpB,EAAQoB,SAAWA,GAIrB9f,EAAAsoF,gBAAA,SAAgC5pE,EAAkBksC,GAChDlsC,EAAQksC,aAAeA,GAIzB5qD,EAAAuoF,eAAA,SAA+B7pE,EAAkBmsC,GAC/CnsC,EAAQmsC,YAAcA,GAIxB7qD,EAAAwoF,aAAA,SAA6B9pE,EAAkBmQ,GAC7CnQ,EAAQmQ,UAAYA,GAItB7uB,EAAAyoF,cAAA,SAA8B/pE,EAAkBqB,GAC9CrB,EAAQqB,WAAaA,GAIvB/f,EAAA0oF,eAAA,SAA+BhqE,EAAkBxd,EAAc8P,GAC7D,IAAIkS,EAAgBxE,EAAQwE,cACvBA,IAAexE,EAAQwE,cAAgBA,EAAgB,IAAI1G,KAChE0G,EAAc5e,IAAIpD,EAAM8P,IAIbhR,EAAA2oF,uBAAsB,EAEtB3oF,EAAA4oF,uBAAsB,EAGnC5oF,EAAA6oF,cAAA,SAA8BnqE,EAAkBqsC,GAC9CrsC,EAAQosC,UAAYC,GAItB/qD,EAAA8oF,sBAAA,SAAsCpqE,EAAkBqqE,EAAoBC,GAC1EtqE,EAAQsB,kBAAoB+oE,EAC5BrqE,EAAQuB,gBAAkB+oE,GAI5BhpF,EAAAipF,cAAA,SAA8BtB,GAC5B,OAAOA,EAAOn9B,UAIhBxqD,EAAAkpF,eAAA,SAA+B5+D,EAAkB5L,GAC/C,YAD+C,IAAAA,MAAA,MACxC,IAAIkd,EAAAyvB,SAAS/gC,EAAS5L,GAAS2tC,WAIxCrsD,EAAAmpF,gBAAA,SAAgClpF,GAC9B,IAAImpF,EAAa,IAAI9B,EAAA+B,WAErB,OADAD,EAAWE,UAAUrpF,GACdmpF,EAAW5+B,UAIpBxqD,EAAAupF,SAAA,SAAyBj/D,GACvB,OAAOi9D,EAAAiC,WAAWC,MAAMn/D,IAI1BtqB,EAAA0pF,SAAA,SAAyBp/D,GACvB,OAAOi9D,EAAAoC,WAAWF,MAAMn/D,IAI1B,IAAA3nB,EAAAlC,EAAA,GAAST,EAAA8O,eAAAnM,EAAAmM,8FCrKT,IAAAgL,EAAArZ,EAAA,GAwDA4oF,EAAA,WAWE,SAAAA,IAHA/oF,KAAAgG,QACAhG,KAAAspF,WAAkB,EAoyBpB,OA3yBSP,EAAAC,UAAP,SAAiBrpF,GACf,IAAImpF,EAAa,IAAIC,EAErB,OADAD,EAAWE,UAAUrpF,GACdmpF,EAAW5+B,UASpB6+B,EAAA9mF,UAAA+mF,UAAA,SAAUrpF,GACR,MAAM,IAAIqjB,MAAM,oBAGlB+lE,EAAA9mF,UAAAsnF,kBAAA,SAAkB34C,GAChB,IAAIhwC,EAAO4Y,EAAA2/B,gBAAgBvI,IAAS,IAAM5wC,KAAKspF,WAAW3kE,SAAS,IAC/DtV,EAAOmK,EAAA0/B,gBAAgBtI,GAC3B5wC,KAAKylB,KAAK,aACVzlB,KAAKylB,KAAK7kB,GACVZ,KAAKylB,KAAK,KACT,IAAK,IAAIplB,EAAW,EAAGuG,EAAW4S,EAAA6/B,sBAAsBzI,GAAOvwC,EAAIuG,IAAKvG,EACnEA,EAAI,GAAGL,KAAKylB,KAAK,MACrBzlB,KAAKylB,KAAK,KACVzlB,KAAKylB,KAAKplB,EAAEskB,SAAS,KACrB3kB,KAAKylB,KAAK,MACVzlB,KAAKylB,KAAK+jE,EAAiBhwE,EAAA+/B,qBAAqB3I,EAAMvwC,KAExDL,KAAKylB,KAAK,OACVzlB,KAAKylB,KAAK+jE,EAAiBhwE,EAAAigC,sBAAsB7I,KACjD5wC,KAAKylB,KAAK,KACNjM,EAAA4Z,gBAAgB/jB,IAASmK,EAAA6Z,aAAa4E,OACxCj4B,KAAKylB,KAAK,OAEZzlB,KAAKypF,oBAAoBp6E,GACrBmK,EAAA4Z,gBAAgB/jB,IAASmK,EAAA6Z,aAAa4E,OACxCj4B,KAAKylB,KAAK,WAEVzlB,KAAKspF,YAGTP,EAAA9mF,UAAAwnF,oBAAA,SAAoBrjF,GAClB,IAGIsjF,EACAC,EACAtpF,EAAUuG,EALVwnB,EAAK5U,EAAA4Z,gBAAgBhtB,GACrB/B,EAAOmV,EAAA+d,kBAAkBnxB,GAM7B,OAAQgoB,GACN,KAAK5U,EAAA6Z,aAAa4E,MAOhB,IANqC,OAAhC0xD,EAASnwE,EAAA0e,aAAa9xB,MACzBpG,KAAKylB,KAAKkkE,GACV3pF,KAAKylB,KAAK,OAEZzlB,KAAKylB,KAAK,OACV7e,EAAI4S,EAAA2e,mBAAmB/xB,GAClB/F,EAAI,EAAGA,EAAIuG,IAAKvG,EACnBL,KAAKypF,oBAAoBjwE,EAAA6e,cAAcjyB,EAAM/F,IAG/C,YADAL,KAAKylB,KAAK,OAGZ,KAAKjM,EAAA6Z,aAAaiF,GAiBhB,YAhBQ,GAAJj0B,GACFrE,KAAKylB,KAAK,QACVzlB,KAAKypF,oBAAoBjwE,EAAA69B,eAAejxC,IACxCpG,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAA+e,UAAUnyB,KAC/BsjF,EAASlwE,EAAAgf,WAAWpyB,MACtBpG,KAAKylB,KAAK,UACVzlB,KAAKypF,oBAAoBC,MAG3B1pF,KAAKypF,oBAAoBjwE,EAAA69B,eAAejxC,IACxCpG,KAAKylB,KAAK,OACVzlB,KAAKypF,oBAAoBjwE,EAAA+e,UAAUnyB,IACnCpG,KAAKylB,KAAK,OACVzlB,KAAKypF,oBAAoBjwE,EAAAgf,WAAWpyB,MAIxC,KAAKoT,EAAA6Z,aAAau2D,KACoB,OAA/BD,EAASnwE,EAAAi+B,YAAYrxC,MACxBpG,KAAKylB,KAAKkkE,GACV3pF,KAAKylB,KAAK,OAEZzlB,KAAKylB,KAAK,OACVzlB,KAAKypF,oBAAoBjwE,EAAAm+B,YAAYvxC,IACrCpG,KAAKylB,KAAK,gBAEZ,KAAKjM,EAAA6Z,aAAa0oB,MAahB,OAZI2tC,EAASlwE,EAAAu+B,kBAAkB3xC,MAC7BpG,KAAKylB,KAAK,QACVzlB,KAAKypF,oBAAoBC,GACzB1pF,KAAKylB,KAAK,YAEyB,OAAhCkkE,EAASnwE,EAAAq+B,aAAazxC,KACzBpG,KAAKylB,KAAK,UACVzlB,KAAKylB,KAAKkkE,GACV3pF,KAAKylB,KAAK,QAEVzlB,KAAKylB,KAAK,aAId,KAAKjM,EAAA6Z,aAAaw2D,OAClB,KAAKrwE,EAAA6Z,aAAauF,KAClB,KAAKpf,EAAA6Z,aAAay2D,WAClB,KAAKtwE,EAAA6Z,aAAa02D,aAChB,MAAM,IAAI/mE,MAAM,mBAElB,KAAKxJ,EAAA6Z,aAAaC,SAGhB,OAFAtzB,KAAKylB,KAAK,UACVzlB,KAAKylB,KAAKjM,EAAA+Z,iBAAiBntB,GAAMue,SAAS,KAG5C,KAAKnL,EAAA6Z,aAAaI,SAKhB,OAJAzzB,KAAKylB,KAAK,KACVzlB,KAAKylB,KAAKjM,EAAA28B,iBAAiB/vC,GAAMue,SAAS,KAC1C3kB,KAAKylB,KAAK,YACVzlB,KAAKypF,oBAAoBjwE,EAAAma,iBAAiBvtB,IAG5C,KAAKoT,EAAA6Z,aAAaO,UAClB,KAAKpa,EAAA6Z,aAAa22D,UAChB,MAAM,IAAIhnE,MAAM,mBAElB,KAAKxJ,EAAA6Z,aAAawE,KAQhB,OAPA73B,KAAKylB,KAAK,SACVzlB,KAAKylB,KAAK+jE,EAAiBnlF,IAC3BrE,KAAKylB,KAAK,MACVzlB,KAAKylB,KAAKjM,EAAAg9B,cAAcpwC,GAAMue,SAAS,KACvC3kB,KAAKylB,KAAK,OACVzlB,KAAKypF,oBAAoBjwE,EAAAi9B,WAAWrwC,SACpCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAA6Z,aAAa42D,MAUhB,OATAjqF,KAAKylB,KAAK,UACVzlB,KAAKylB,KAAK+jE,EAAiBnlF,IAC3BrE,KAAKylB,KAAK,MACVzlB,KAAKylB,KAAKjM,EAAAo9B,eAAexwC,GAAMue,SAAS,KACxC3kB,KAAKylB,KAAK,OACVzlB,KAAKypF,oBAAoBjwE,EAAAs9B,YAAY1wC,IACrCpG,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAAw9B,cAAc5wC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAA6Z,aAAa6C,MAChB,OAAQ7xB,GACN,OAEE,YADArE,KAAKylB,KAAKjM,EAAA2c,iBAAiB/vB,GAAMue,SAAS,KAG5C,OASE,YARA3kB,KAAKylB,KACHmxD,cACEv3D,QACE7F,EAAAge,oBAAoBpxB,GACpBoT,EAAA08B,qBAAqB9vC,MAM7B,OAEE,YADApG,KAAKylB,KAAKjM,EAAAie,iBAAiBrxB,GAAMue,SAAS,KAG5C,OAEE,YADA3kB,KAAKylB,KAAKjM,EAAAke,iBAAiBtxB,GAAMue,SAAS,KAI9C,MAEF,KAAKnL,EAAA6Z,aAAa0D,MAChB,OAAQvd,EAAAwd,WAAW5wB,IACjB,KAAKoT,EAAAyd,QAAQG,OAIX,OAHAp3B,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQI,OAIX,OAHAr3B,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQK,UAIX,OAHAt3B,KAAKylB,KAAK,gBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQkuC,OACb,KAAK3rD,EAAAyd,QAAQmuC,OAGX,OAFAplE,KAAKylB,KAAK,UACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQonD,OAIX,OAHAr+E,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQ4nD,QAIX,OAHA7+E,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQ8nD,SAIX,OAHA/+E,KAAKylB,KAAK,eACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQ0oD,SAIX,OAHA3/E,KAAKylB,KAAK,eACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQkoD,WAIX,OAHAn/E,KAAKylB,KAAK,iBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQwoD,QAIX,OAHAz/E,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQC,OACb,KAAK1d,EAAAyd,QAAQE,OAGX,OAFAn3B,KAAKylB,KAAK,UACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQ6mD,OAIX,OAHA99E,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQ8mD,OAIX,OAHA/9E,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQ+mD,UAIX,OAHAh+E,KAAKylB,KAAK,gBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQqnD,OAIX,OAHAt+E,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQ6nD,QAIX,OAHA9+E,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQ+nD,SAIX,OAHAh/E,KAAKylB,KAAK,eACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQ2oD,SAIX,OAHA5/E,KAAKylB,KAAK,eACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQmoD,WAIX,OAHAp/E,KAAKylB,KAAK,iBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQyoD,QAIX,OAHA1/E,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQuhC,UAGX,OAFAx4D,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQwhC,UAGX,OAFAz4D,KAAKylB,KAAK,mBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQshC,QAKb,KAAK/+C,EAAAyd,QAAQugC,cAGX,OAFAx3D,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQsgC,cAGX,OAFAv3D,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQygC,cAGX,OAFA13D,KAAKylB,KAAK,mBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQwgC,cAGX,OAFAz3D,KAAKylB,KAAK,mBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQ2gC,cAGX,OAFA53D,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQ0gC,cAGX,OAFA33D,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQ6gC,cAGX,OAFA93D,KAAKylB,KAAK,mBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQ4gC,cAGX,OAFA73D,KAAKylB,KAAK,mBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQooD,eAIX,OAHAr/E,KAAKylB,KAAK,yBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQqoD,eAIX,OAHAt/E,KAAKylB,KAAK,yBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQghC,gBAGX,OAFAj4D,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQohC,gBAGX,OAFAr4D,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQihC,gBAGX,OAFAl4D,KAAKylB,KAAK,mBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQqhC,gBAGX,OAFAt4D,KAAKylB,KAAK,mBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQ8gC,gBAGX,OAFA/3D,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQkhC,gBAGX,OAFAn4D,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQ+gC,gBAGX,OAFAh4D,KAAKylB,KAAK,mBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQmhC,gBAGX,OAFAp4D,KAAKylB,KAAK,mBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQogC,WAGX,OAFAr3D,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQqgC,UAGX,OAFAt3D,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,IAGzC,KAAKoT,EAAAyd,QAAQsoD,eAIX,OAHAv/E,KAAKylB,KAAK,yBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAyd,QAAQuoD,eAIX,OAHAx/E,KAAKylB,KAAK,yBACVzlB,KAAKypF,oBAAoBjwE,EAAA+8B,cAAcnwC,SACvCpG,KAAKylB,KAAK,KAId,MAEF,KAAKjM,EAAA6Z,aAAaQ,OAChB,OAAQra,EAAAsa,YAAY1tB,IAClB,KAAKoT,EAAAua,SAASq8B,OACd,KAAK52C,EAAAua,SAASolC,OACd,KAAK3/C,EAAAua,SAASqlC,OACd,KAAK5/C,EAAAua,SAASslC,OAIZ,OAHAr5D,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,YACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASulC,OACd,KAAK9/C,EAAAua,SAASwlC,OACd,KAAK//C,EAAAua,SAASylC,OACd,KAAKhgD,EAAAua,SAAS0lC,OAIZ,OAHAz5D,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,YACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASiC,OACd,KAAKxc,EAAAua,SAAS2lC,OACd,KAAKlgD,EAAAua,SAAS4lC,OACd,KAAKngD,EAAAua,SAAS6lC,OAIZ,OAHA55D,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,YACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAAS+lC,OACd,KAAKtgD,EAAAua,SAASgmC,OACd,KAAKvgD,EAAAua,SAASkmC,OACd,KAAKzgD,EAAAua,SAASmmC,OAIZ,OAHAl6D,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,YACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAAS6C,OAMZ,OALA52B,KAAKylB,KAAK,eACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,YACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,SACxCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAua,SAAS8C,OACd,KAAKrd,EAAAua,SAASomC,OAIZ,OAHAn6D,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,YACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAAS+C,OAMZ,OALA92B,KAAKylB,KAAK,eACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,YACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,SACxCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAua,SAASsC,OACd,KAAK7c,EAAAua,SAAS2mC,OAIZ,OAHA16D,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,YACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAAS4mC,MACd,KAAKnhD,EAAAua,SAAS6mC,MAIZ,OAHA56D,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,YACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAAS8mC,OACd,KAAKrhD,EAAAua,SAAS+mC,OAIZ,OAHA96D,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,YACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASwC,OACd,KAAK/c,EAAAua,SAASumC,OAIZ,OAHAt6D,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAAS4C,OACd,KAAKnd,EAAAua,SAAS0mC,OAIZ,OAHAz6D,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAAS2C,OACd,KAAKld,EAAAua,SAASymC,OAIZ,OAHAx6D,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASkqD,QAMZ,OALAj+E,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,SACxCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAua,SAASoqD,QAMZ,OALAn+E,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,SACxCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAua,SAASC,MACd,KAAKxa,EAAAua,SAASE,MACd,KAAKza,EAAAua,SAASG,MACd,KAAK1a,EAAAua,SAASI,MAIZ,OAHAn0B,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASK,MACd,KAAK5a,EAAAua,SAASM,MACd,KAAK7a,EAAAua,SAASO,MACd,KAAK9a,EAAAua,SAASQ,MAIZ,OAHAv0B,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASS,MACd,KAAKhb,EAAAua,SAASW,MACd,KAAKlb,EAAAua,SAASa,MACd,KAAKpb,EAAAua,SAASc,MAIZ,OAHA70B,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,YACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASU,MAKZ,OAJAz0B,KAAKylB,KAAK,SACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,iBACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASe,MACd,KAAKtb,EAAAua,SAASiB,MACd,KAAKxb,EAAAua,SAASmB,MACd,KAAK1b,EAAAua,SAASoB,MAIZ,OAHAn1B,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASgB,MAKZ,OAJA/0B,KAAKylB,KAAK,SACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,kBACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASqB,MACd,KAAK5b,EAAAua,SAASuB,MACd,KAAK9b,EAAAua,SAASyB,MACd,KAAKhc,EAAAua,SAAS0B,MAIZ,OAHAz1B,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,YACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASsB,MAKZ,OAJAr1B,KAAKylB,KAAK,SACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,iBACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAAS2B,MACd,KAAKlc,EAAAua,SAAS6B,MACd,KAAKpc,EAAAua,SAAS+B,MACd,KAAKtc,EAAAua,SAASgC,MAIZ,OAHA/1B,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAAS4B,MAKZ,OAJA31B,KAAKylB,KAAK,SACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,kBACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASimC,OAKZ,OAJAh6D,KAAKylB,KAAK,SACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,iBACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASqmC,OAKZ,OAJAp6D,KAAKylB,KAAK,SACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,iBACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASmqD,QAMZ,OALAl+E,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,SACxCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAua,SAASqqD,QAMZ,OALAp+E,KAAKylB,KAAK,cACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,SACxCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAua,SAASY,MAKZ,OAJA30B,KAAKylB,KAAK,SACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,iBACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASkB,MAKZ,OAJAj1B,KAAKylB,KAAK,SACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,kBACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASwB,MAKZ,OAJAv1B,KAAKylB,KAAK,SACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,iBACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAAS8B,MAKZ,OAJA71B,KAAKylB,KAAK,SACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,kBACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,IAG1C,KAAKoT,EAAAua,SAASkrD,YAMZ,OALAj/E,KAAKylB,KAAK,kBACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,SACxCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAua,SAAS4qD,OAMZ,OALA3+E,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,SACxCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAua,SAAS0qD,OAMZ,OALAz+E,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,SACxCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAua,SAASmrD,YAMZ,OALAl/E,KAAKylB,KAAK,kBACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,SACxCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAua,SAAS6qD,OAMZ,OALA5+E,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,SACxCpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAAua,SAAS2qD,OAMZ,OALA1+E,KAAKylB,KAAK,aACVzlB,KAAKypF,oBAAoBjwE,EAAAyc,cAAc7vB,IACvCpG,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAA4c,eAAehwB,SACxCpG,KAAKylB,KAAK,KAId,OAEF,KAAKjM,EAAA6Z,aAAaoF,OAUhB,OATAz4B,KAAKylB,KAAK,WACVzlB,KAAKylB,KAAK+jE,EAAiBnlF,IAC3BrE,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAAkf,cAActyB,IACvCpG,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAAmf,cAAcvyB,IACvCpG,KAAKylB,KAAK,MACVzlB,KAAKypF,oBAAoBjwE,EAAA2+B,mBAAmB/xC,SAC5CpG,KAAKylB,KAAK,KAGZ,KAAKjM,EAAA6Z,aAAa62D,KAGhB,OAFAlqF,KAAKypF,oBAAoBjwE,EAAA6+B,aAAajyC,SACtCpG,KAAKylB,KAAK,OAGZ,KAAKjM,EAAA6Z,aAAayoB,OAQhB,aAPI4tC,EAASlwE,EAAA++B,eAAenyC,KAC1BpG,KAAKylB,KAAK,WACVzlB,KAAKypF,oBAAoBC,GACzB1pF,KAAKylB,KAAK,QAEVzlB,KAAKylB,KAAK,cAId,KAAKjM,EAAA6Z,aAAa82D,KAChB,OAAQ3wE,EAAAk/B,UAAUtyC,IAChB,KAAKoT,EAAA4rB,OAAO46C,cAEV,YADAhgF,KAAKylB,KAAK,iBAGZ,KAAKjM,EAAA4rB,OAAO66C,WAIV,OAHAjgF,KAAKylB,KAAK,gBACVzlB,KAAKypF,oBAAoBjwE,EAAAs/B,eAAe1yC,EAAM,SAC9CpG,KAAKylB,KAAK,KAId,MAEF,KAAKjM,EAAA6Z,aAAaw/B,IAEhB,YADA7yD,KAAKylB,KAAK,OAGZ,KAAKjM,EAAA6Z,aAAayF,YAEhB,YADA94B,KAAKylB,KAAK,iBAGZ,KAAKjM,EAAA6Z,aAAa+2D,cAClB,KAAK5wE,EAAA6Z,aAAag3D,UAClB,KAAK7wE,EAAA6Z,aAAai3D,WAClB,KAAK9wE,EAAA6Z,aAAak3D,YAEpB,MAAM,IAAIvnE,MAAM,oBAGV+lE,EAAA9mF,UAAAwjB,KAAR,SAAazf,GAEXhG,KAAKgG,KAAKyf,KAAKzf,IAGjB+iF,EAAA9mF,UAAAioD,OAAA,WACE,IAAI/W,EAAMnzC,KAAKgG,KAAKsf,KAAK,IAEzB,OADAtlB,KAAKgG,QACEmtC,GAEX41C,EA7yBA,GA+yBA,SAASS,EAAiBnlF,GACxB,OAAQA,GACN,OAAsB,MAAO,OAC7B,OAAqB,MAAO,MAC5B,OAAqB,MAAO,MAC5B,OAAqB,MAAO,MAC5B,OAAqB,MAAO,MAC5B,OAA6B,MAAM,IAAI2e,MAAM,oBAC7C,OAAsB,MAAM,IAAIA,MAAM,aACtC,QAAS,MAAM,IAAIA,MAAM,oBAxzBhBtjB,EAAAqpF,46BCxDb,IAAA1mF,EAAAlC,EAAA,GAIAk8C,EAAAl8C,EAAA,GAuBAuC,EAAAvC,EAAA,GAKAqqF,EAAA,WAYE,SAAAA,EAAYxgE,EAAkBygE,QAAA,IAAAA,OAAA,GAL9BzqF,KAAA0qF,QAEA1qF,KAAAkpB,KAAqB,IAAIC,IAIvBnpB,KAAKgqB,QAAUA,EACfhqB,KAAKyqF,eA0ET,OAtEED,EAAAvoF,UAAA0oF,KAAA,uBACE,IAAyB,IAAAz9D,EAAA1L,EAAAxhB,KAAKgqB,QAAQrN,mBAAmBjT,UAAQkY,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAA9D,IAAI+qC,EAAY7qC,EAAAtgB,MAEnBtB,KAAK4qF,aAAan+B,EAAapkD,2GAGjC,IADA,IAAIqiF,EAAO1qF,KAAK0qF,KACH,EAAOA,EAAK7jF,QAAU7G,KAAK4qF,aAAaF,EAAxC,KAIfF,EAAAvoF,UAAA2oF,aAAA,SAAaviF,GACX,KAAIA,EAAQxE,GAAGxB,EAAAsB,YAAYm9C,UAAa9gD,KAAKyqF,kBACzCzqF,KAAKkpB,KAAKjG,IAAI5a,GAElB,OADArI,KAAKkpB,KAAKE,IAAI/gB,GACNA,EAAQzF,MACd,KAAKy5C,EAAAtgC,YAAYxJ,OACXlK,EAAQxE,GAAGxB,EAAAsB,YAAYypD,WAAWptD,KAAK6qF,YAAoBxiF,GAC/D,MAEF,KAAKg0C,EAAAtgC,YAAY0O,KACXpiB,EAAQxE,GAAGxB,EAAAsB,YAAYypD,WAAWptD,KAAK8qF,UAAgBziF,GAC3D,MAEF,KAAKg0C,EAAAtgC,YAAYuH,mBACftjB,KAAK+qF,uBAA0C1iF,GAC/C,MAEF,KAAKg0C,EAAAtgC,YAAY0G,gBACfziB,KAAKgrF,oBAAoC3iF,GACzC,MAEF,KAAKg0C,EAAAtgC,YAAYoT,MACH9mB,EAASxE,GAAGxB,EAAAsB,YAAYypD,WAAWptD,KAAKirF,WAAkB5iF,GACtE,MAEF,KAAKg0C,EAAAtgC,YAAYgM,SACf,IAAImjE,EAAiB7iF,EACjBxH,EAASqqF,EAAKljE,gBACdnnB,GAAQb,KAAK+qF,uBAAuBlqF,GACxC,IAAIwsD,EAAS69B,EAAKjjE,gBACdolC,GAAQrtD,KAAK+qF,uBAAuB19B,GACxC,MAEF,KAAKhR,EAAAtgC,YAAYyO,WA8ZvB,SAAS2gE,EAAkB9iF,mBACzB,IAAI2D,EAAU3D,EAAQ2D,QACtB,GAAIA,MACF,IAAmB,IAAA+W,EAAAvB,EAAAxV,EAAQtC,UAAQmjD,EAAA9pC,EAAArB,QAAAmrC,EAAAlrC,KAAAkrC,EAAA9pC,EAAArB,OAAE,CAAhC,IAAI7K,EAAMg2C,EAAAvrD,MACb,OAAQuV,EAAOjU,MACb,KAAKy5C,EAAAtgC,YAAYuH,uBACf,IAAqB,IAAAwpC,EAAAtrC,EAAoB3K,EAAQ0U,UAAU7hB,UAAQqjD,EAAAD,EAAAprC,QAAAqrC,EAAAprC,KAAAorC,EAAAD,EAAAprC,OAAE,CAAhE,IAAIyB,EAAQ4pC,EAAAzrD,MACf,GAAI6hB,EAAStf,GAAGxB,EAAAsB,YAAYypD,UAAW,OAAO,oGAEhD,MAEF,KAAK/Q,EAAAtgC,YAAY0G,oBACf,IAAqB,IAAAuqC,EAAAxrC,EAAiB3K,EAAQ0U,UAAU7hB,UAAQgkD,EAAAV,EAAAtrC,QAAAgsC,EAAA/rC,KAAA+rC,EAAAV,EAAAtrC,OAAE,CAA7D,IAAIyB,EAAQuqC,EAAApsD,MACf,GAAI6hB,EAAStf,GAAGxB,EAAAsB,YAAYypD,UAAW,OAAO,oGAEhD,MAEF,QACE,GAAIv2C,EAAOhT,GAAGxB,EAAAsB,YAAYypD,WAAa+9B,EAAkBt0E,GAAS,OAAO,qGAMjF,OAAO,GArbGs0E,CAAkB9iF,IAAUrI,KAAKorF,eAAe/iF,GACpD,MAEF,QAAS4J,QAAO,KAIZu4E,EAAAvoF,UAAA8oF,uBAAR,SAA+B1iF,eAC7B,IAAqB,IAAA6kB,EAAA1L,EAAAnZ,EAAQkjB,UAAU7hB,UAAQkY,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAA5C,IAAIyB,EAAQvB,EAAAtgB,MACX6hB,EAAStf,GAAGxB,EAAAsB,YAAYypD,WAAWptD,KAAKqrF,cAAwBloE,uGAIhEqnE,EAAAvoF,UAAA+oF,oBAAR,SAA4B3iF,eAC1B,IAAqB,IAAA6kB,EAAA1L,EAAAnZ,EAAQkjB,UAAU7hB,UAAQkY,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAE,CAA5C,IAAIyB,EAAQvB,EAAAtgB,MACX6hB,EAAStf,GAAGxB,EAAAsB,YAAYypD,WAAWptD,KAAKsrF,WAAkBnoE,uGAWpEqnE,EAxFA,GA2FAtB,EAAA,SAAA73E,GAWE,SAAA63E,EAAYl/D,EAAkBygE,QAAA,IAAAA,OAAA,GAA9B,IAAAl5E,EACEF,EAAA7Q,KAAAR,KAAMgqB,EAASygE,IAAezqF,YALxBuR,EAAAypB,MACAzpB,EAAAg6E,YAAmB,IAkK7B,OA1KgCj6E,EAAA43E,EAAA73E,GAGvB63E,EAAAC,MAAP,SAAan/D,GACX,OAAO,IAAIk/D,EAAWl/D,GAASm/D,SAWjCD,EAAAjnF,UAAA4oF,YAAA,SAAYxiF,GACV,IAAI2yB,EAAKh7B,KAAKg7B,GACVuoC,EAAUl7D,EAAQxE,GAAGxB,EAAAsB,YAAYqnB,SAMrC,GALAtoB,EAAAy/E,OAAOnnD,EAAIh7B,KAAKurF,aACZhoB,GAASvoC,EAAGvV,KAAK,UACrBuV,EAAGvV,KAAKzlB,KAAKwrF,aAAanjF,EAAQhE,OAClC22B,EAAGvV,KAAK,KACRuV,EAAGvV,KAAKpd,EAAQ6c,YACZq+C,EACF,OAAQl7D,EAAQyiB,mBACd,OACEkQ,EAAGvV,KAAK,OACRuV,EAAGvV,KAAKmxD,cAAcvuE,EAAQ0iB,uBAC9B,MAEF,OACEiQ,EAAGvV,KAAK,OACRuV,EAAGvV,KAAKpd,EAAQ4iB,mBAAmBtG,YACnC,MAEF,QAAS1S,QAAO,GAGpB+oB,EAAGvV,KAAK,QAGVyjE,EAAAjnF,UAAA6oF,UAAA,SAAUziF,eACJ2yB,EAAKh7B,KAAKg7B,GACdt4B,EAAAy/E,OAAOnnD,EAAIh7B,KAAKurF,eAChBvwD,EAAGvV,KAAK,cACRuV,EAAGvV,KAAKpd,EAAQ6c,YAChB8V,EAAGvV,KAAK,QACR,IAAIzZ,EAAU3D,EAAQ2D,QACtB,GAAIA,EAAS,KACX,IAA2B,IAAA49D,EAAApoD,EAAAxV,GAAO69D,EAAAD,EAAAloD,QAAAmoD,EAAAloD,KAAAkoD,EAAAD,EAAAloD,OAAE,CAA3B,IAAAE,EAAAC,EAAAgoD,EAAAvoE,MAAA,GAACV,EAAAghB,EAAA,GACR,IADc/K,EAAA+K,EAAA,IACHhf,MAAQy5C,EAAAtgC,YAAY2O,UAAW,CACxC,IAAI64C,EAAsB1sD,EAAQhT,GAAGxB,EAAAsB,YAAYqnB,SACjDtoB,EAAAy/E,OAAOnnD,EAAIh7B,KAAKurF,aACZhoB,EAASvoC,EAAGvV,KAAK,UAChBuV,EAAGvV,KAAK,aACbuV,EAAGvV,KAAK,kBACRuV,EAAGvV,KAAK7kB,GACJ2iE,IACFvoC,EAAGvV,KAAK,OACRuV,EAAGvV,KAAiB5O,EAAQ8T,cAAchG,SAAS,MAErDqW,EAAGvV,KAAK,8GAGZ,IAAmB,IAAA1C,EAAAvB,EAAAxV,EAAQtC,UAAQmjD,EAAA9pC,EAAArB,QAAAmrC,EAAAlrC,KAAAkrC,EAAA9pC,EAAArB,OAAE,CAAhC,IAAI7K,KAAMg2C,EAAAvrD,OACFsB,MAAQy5C,EAAAtgC,YAAY2O,WAAW1qB,KAAK4qF,aAAa/zE,sGAGhEnU,EAAAy/E,OAAOnnD,IAAMh7B,KAAKurF,aAClBvwD,EAAGvV,KAAK,QAGVyjE,EAAAjnF,UAAAopF,cAAA,SAAchjF,WACR2yB,EAAKh7B,KAAKg7B,GACV5rB,EAAY/G,EAAQ+G,UACxB1M,EAAAy/E,OAAOnnD,EAAIh7B,KAAKurF,aAChBvwD,EAAGvV,KAAKzlB,KAAKwrF,aAAap8E,EAAUhK,aACpC41B,EAAGvV,KAAK,KACRuV,EAAGvV,KAAKpd,EAAQ6c,YAChB8V,EAAGvV,KAAK,KAIR,IAHA,IAAItgB,EAAaiK,EAAUwU,eACvBi7B,EAAgB15C,EAAW0B,OAEtBxG,EAAI,EAAGA,EAAIw+C,IAAiBx+C,EAC/BA,GAAG26B,EAAGvV,KAAK,MAEfuV,EAAGvV,KAAKzlB,KAAKwrF,aAAarmF,EAAW9E,KACrC26B,EAAGvV,KAAK,KACRuV,EAAGvV,KAAKrW,EAAUme,iBAAiBltB,IAErC26B,EAAGvV,KAAK,QACR,IAAIzZ,EAAU3D,EAAQ2D,QACtB,GAAIA,GAAWA,EAAQyqB,KAAM,CAC3B/zB,EAAAy/E,OAAOnnD,EAAIh7B,KAAKurF,aAChBvwD,EAAGvV,KAAK,cACRuV,EAAGvV,KAAKpd,EAAQ6c,YAChB8V,EAAGvV,KAAK,YACR,IAAmB,IAAAyH,EAAA1L,EAAAxV,EAAQtC,UAAQkY,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAA,CAA9B,IAAI7K,EAAM+K,EAAAtgB,MAAsBtB,KAAK4qF,aAAa/zE,qGACvDnU,EAAAy/E,OAAOnnD,IAAMh7B,KAAKurF,aAClBvwD,EAAGvV,KAAK,SAIZyjE,EAAAjnF,UAAAqpF,WAAA,SAAWjjF,GACT,IAAI2yB,EAAKh7B,KAAKg7B,GACdt4B,EAAAy/E,OAAOnnD,EAAIh7B,KAAKurF,eAChBvwD,EAAGvV,KAAK,cACRuV,EAAGvV,KAAKpd,EAAQ6c,YAChB8V,EAAGvV,KAAK,QAER/iB,EAAAy/E,OAAOnnD,IAAMh7B,KAAKurF,aAClBvwD,EAAGvV,KAAK,QAGVyjE,EAAAjnF,UAAAwpF,eAAA,SAAepjF,GACbrI,KAAKsrF,WAAWjjF,IAGlB6gF,EAAAjnF,UAAAgpF,WAAA,SAAW5iF,KAIX6gF,EAAAjnF,UAAAmpF,eAAA,SAAe/iF,WACT2yB,EAAKh7B,KAAKg7B,GACdt4B,EAAAy/E,OAAOnnD,EAAIh7B,KAAKurF,eAChBvwD,EAAGvV,KAAK,cACRuV,EAAGvV,KAAKpd,EAAQ6c,YAChB8V,EAAGvV,KAAK,QACR,IAAIzZ,EAAU3D,EAAQ2D,QACtB,GAAIA,MACF,IAAmB,IAAAkhB,EAAA1L,EAAAxV,EAAQtC,UAAQkY,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAA,CAA9B,IAAI7K,EAAM+K,EAAAtgB,MAAsBtB,KAAK4qF,aAAa/zE,qGAEzDnU,EAAAy/E,OAAOnnD,IAAMh7B,KAAKurF,aAClBvwD,EAAGvV,KAAK,QAGVyjE,EAAAjnF,UAAAupF,aAAA,SAAannF,GACX,OAAQA,EAAKzB,MACX,OAAkB,MAAO,OACzB,OAAmB,MAAO,QAC1B,OAAmB,MAAO,OAC1B,OAAmB,MAAO,YAC1B,OAAqB,OAAO5C,KAAKgqB,QAAQ5L,QAAQkB,SAAW,YAAc,OAC1E,OAAkB,MAAO,QACzB,OAAmB,MAAO,iBAC1B,OAAmB,MAAO,gBAE1B,OAAmB,MAAO,qBAC1B,OAAqB,OAAOtf,KAAKgqB,QAAQ5L,QAAQkB,SAAW,qBAAuB,gBAEnF,QAAoB,MAAO,UAC3B,QAAmB,MAAO,qBAC1B,QAAmB,MAAO,sBAC1B,QAAoB,MAAO,OAC3B,QAEE,OADArN,QAAO,GACA,KAKbi3E,EAAAjnF,UAAAknF,MAAA,WACE,IAAInuD,EAAKh7B,KAAKg7B,GAMd,OALAA,EAAGvV,KAAK,4BACNzlB,KAAKurF,YACPvrF,KAAK2qF,SACH3qF,KAAKurF,YACPvwD,EAAGvV,KAAK,OACDuV,EAAG1V,KAAK,KAEnB4jE,EA1KA,CAAgCsB,GAAnB9qF,EAAAwpF,aA6Kb,IAAAG,EAAA,SAAAh4E,GAWE,SAAAg4E,EAAYr/D,EAAkBygE,QAAA,IAAAA,OAAA,GAA9B,IAAAl5E,EACEF,EAAA7Q,KAAAR,KAAMgqB,EAASygE,IAAezqF,YALxBuR,EAAAypB,MACAzpB,EAAAg6E,YAAmB,IAsM7B,OA9MgCj6E,EAAA+3E,EAAAh4E,GAGvBg4E,EAAAF,MAAP,SAAan/D,GACX,OAAO,IAAIq/D,EAAWr/D,GAASm/D,SAWjCE,EAAApnF,UAAA4oF,YAAA,SAAYxiF,GACV,IAAI2yB,EAAKh7B,KAAKg7B,GACVuoC,EAAUl7D,EAAQxE,GAAGxB,EAAAsB,YAAYqnB,SACrCtoB,EAAAy/E,OAAOnnD,EAAIh7B,KAAKurF,aACZljF,EAAQxE,GAAGxB,EAAAsB,YAAYgT,QACrB4sD,EAASvoC,EAAGvV,KAAK,oBAChBuV,EAAGvV,KAAK,WAET89C,EAASvoC,EAAGvV,KAAK,UAChBuV,EAAGvV,KAAK,QAEfuV,EAAGvV,KAAKpd,EAAQ6c,YAChB8V,EAAGvV,KAAK,MACRuV,EAAGvV,KAAKzlB,KAAKwrF,aAAanjF,EAAQhE,OAClC22B,EAAGvV,KAAK,OACRzlB,KAAKorF,eAAe/iF,IAGtBghF,EAAApnF,UAAA6oF,UAAA,SAAUziF,WACJ2yB,EAAKh7B,KAAKg7B,GACdt4B,EAAAy/E,OAAOnnD,EAAIh7B,KAAKurF,eAChBvwD,EAAGvV,KAAK,SACRuV,EAAGvV,KAAKpd,EAAQ6c,YAChB8V,EAAGvV,KAAK,QACR,IAAIzZ,EAAU3D,EAAQ2D,QACtB,GAAIA,EAAS,CACX,IAAI0/E,EAAa1/E,EAAQyqB,SACzB,IAA2B,IAAAk1D,EAAAnqE,EAAAxV,GAAO4/E,EAAAD,EAAAjqE,QAAAkqE,EAAAjqE,KAAAiqE,EAAAD,EAAAjqE,OAAE,CAA3B,IAAAwL,EAAArL,EAAA+pE,EAAAtqF,MAAA,GAACV,EAAAssB,EAAA,GAAMrW,EAAAqW,EAAA,GACVrW,EAAOjU,MAAQy5C,EAAAtgC,YAAY2O,YAC7BhoB,EAAAy/E,OAAOnnD,EAAIh7B,KAAKurF,aAChBvwD,EAAGvV,KAAK7kB,GACJiW,EAAOhT,GAAGxB,EAAAsB,YAAYqnB,WACxBgQ,EAAGvV,KAAK,OACRuV,EAAGvV,KAAiB5O,EAAQ8T,cAAchG,SAAS,MAErDqW,EAAGvV,KAAK,SACNimE,qGAGFA,GAAY1rF,KAAKorF,eAAe/iF,GAEtC3F,EAAAy/E,OAAOnnD,IAAMh7B,KAAKurF,aAClBvwD,EAAGvV,KAAK,QAGV4jE,EAAApnF,UAAAopF,cAAA,SAAchjF,GACZ,IAAIA,EAAQtE,MAAM1B,EAAAsB,YAAYm9C,QAAUz+C,EAAAsB,YAAYuiB,KAApD,CACA,IAAI8U,EAAKh7B,KAAKg7B,GACV5rB,EAAY/G,EAAQ+G,UAIxB,GAHA1M,EAAAy/E,OAAOnnD,EAAIh7B,KAAKurF,aACZljF,EAAQxE,GAAGxB,EAAAsB,YAAYo9C,YAAY/lB,EAAGvV,KAAK,cAC3Cpd,EAAQxE,GAAGxB,EAAAsB,YAAYgT,SAASqkB,EAAGvV,KAAK,WACxCpd,EAAQxE,GAAGxB,EAAAsB,YAAYsiB,KAKzB,OAJA+U,EAAGvV,KAAKpd,EAAQpG,UAAU4F,YAAYjH,KAAKoF,MAC3Cg1B,EAAGvV,KAAK,MACRuV,EAAGvV,KAAKzlB,KAAKwrF,aAAap8E,EAAUhK,kBACpC41B,EAAGvV,KAAK,OAGHpd,EAAQtE,MAAM1B,EAAAsB,YAAYgT,OAAStU,EAAAsB,YAAYipB,WAAWoO,EAAGvV,KAAK,aACvEuV,EAAGvV,KAAKpd,EAAQ6c,YAElB8V,EAAGvV,KAAK,KAIR,IAHA,IAAItgB,EAAaiK,EAAUwU,eACvBi7B,EAAgB15C,EAAW0B,OAEtBxG,EAAI,EAAGA,EAAIw+C,IAAiBx+C,EAC/BA,GAAG26B,EAAGvV,KAAK,MAEfuV,EAAGvV,KAAKrW,EAAUme,iBAAiBltB,IACnC26B,EAAGvV,KAAK,MACRuV,EAAGvV,KAAKzlB,KAAKwrF,aAAarmF,EAAW9E,KAEnCgI,EAAQtE,MAAM1B,EAAAsB,YAAYoQ,YAAc1R,EAAAsB,YAAYuiB,KACtD8U,EAAGvV,KAAK,MAERuV,EAAGvV,KAAK,OACRuV,EAAGvV,KAAKzlB,KAAKwrF,aAAap8E,EAAUhK,cAEtC41B,EAAGvV,KAAK,OACRzlB,KAAKorF,eAAe/iF,KAGtBghF,EAAApnF,UAAAqpF,WAAA,SAAWjjF,eACL2yB,EAAKh7B,KAAKg7B,GACV1U,EAAcje,EAAQzF,MAAQy5C,EAAAtgC,YAAY0U,UAC9C/tB,EAAAy/E,OAAOnnD,EAAIh7B,KAAKurF,eACZjlE,EACF0U,EAAGvV,KAAK,eAEJpd,EAAQxE,GAAGxB,EAAAsB,YAAY+iB,WAAWsU,EAAGvV,KAAK,aAC9CuV,EAAGvV,KAAK,WAEVuV,EAAGvV,KAAKpd,EAAQ6c,YAChB,IAAIoK,EAAOjnB,EAAQinB,KACfA,GAAQA,EAAKzrB,GAAGxB,EAAAsB,YAAYypD,SAAW/qD,EAAAsB,YAAY+hB,iBACrDsV,EAAGvV,KAAK,aACRuV,EAAGvV,KAAK6J,EAAKpK,aAEf8V,EAAGvV,KAAK,QACR,IAAIzZ,EAAU3D,EAAQpG,UAAU+J,QAChC,GAAIA,MACF,IAAmB,IAAA4V,EAAAJ,EAAAxV,EAAQtC,UAAQqZ,EAAAnB,EAAAF,QAAAqB,EAAApB,KAAAoB,EAAAnB,EAAAF,OAAE,CAAhC,IAAI7K,EAAMkM,EAAAzhB,MACbtB,KAAK4qF,aAAa/zE,qGAGtB,IAAIk3C,EAAO1lD,EAAQmnB,oBAGnB,GAFIu+B,GAAM/tD,KAAKqrF,cAAct9B,GAC7B/hD,EAAU3D,EAAQ2D,YAEhB,IAAmB,IAAA6gD,EAAArrC,EAAAxV,EAAQtC,UAAQojD,EAAAD,EAAAnrC,QAAAorC,EAAAnrC,KAAAmrC,EAAAD,EAAAnrC,OAAA,CAA1B7K,EAAMi2C,EAAAxrD,MAAsBtB,KAAK4qF,aAAa/zE,qGAEzDnU,EAAAy/E,OAAOnnD,IAAMh7B,KAAKurF,aAClBvwD,EAAGvV,KAAK,QAGV4jE,EAAApnF,UAAAwpF,eAAA,SAAepjF,GACbrI,KAAKsrF,WAAWjjF,IAGlBghF,EAAApnF,UAAAgpF,WAAA,SAAW5iF,GACT,IAAIA,EAAQxE,GAAGxB,EAAAsB,YAAYm9C,SAA3B,CACA,IAAI9lB,EAAKh7B,KAAKg7B,GACdt4B,EAAAy/E,OAAOnnD,EAAIh7B,KAAKurF,aACZljF,EAAQxE,GAAGxB,EAAAsB,YAAYo9C,YAAY/lB,EAAGvV,KAAK,cAC3Cpd,EAAQxE,GAAGxB,EAAAsB,YAAYgT,SAASqkB,EAAGvV,KAAK,WACxCpd,EAAQxE,GAAGxB,EAAAsB,YAAY8iB,WAAWuU,EAAGvV,KAAK,aAC9CuV,EAAGvV,KAAKpd,EAAQ6c,YAChB8V,EAAGvV,KAAK,MACRuV,EAAGvV,KAAKzlB,KAAKwrF,aAAanjF,EAAQhE,OAClC22B,EAAGvV,KAAK,SAGV4jE,EAAApnF,UAAAmpF,eAAA,SAAe/iF,WACT2D,EAAU3D,EAAQ2D,QACtB,GAAIA,GAAWA,EAAQyqB,KAAM,CAC3B,IAAIuE,EAAKh7B,KAAKg7B,GACdt4B,EAAAy/E,OAAOnnD,EAAIh7B,KAAKurF,eAChBvwD,EAAGvV,KAAK,cACRuV,EAAGvV,KAAKpd,EAAQ6c,YAChB8V,EAAGvV,KAAK,YACR,IAAmB,IAAAyH,EAAA1L,EAAAxV,EAAQtC,UAAQkY,EAAAsL,EAAAxL,QAAAE,EAAAD,KAAAC,EAAAsL,EAAAxL,OAAA,CAA9B,IAAI7K,EAAM+K,EAAAtgB,MAAsBtB,KAAK4qF,aAAa/zE,qGACvDnU,EAAAy/E,OAAOnnD,IAAMh7B,KAAKurF,aAClBvwD,EAAGvV,KAAK,SAIZ4jE,EAAApnF,UAAAupF,aAAA,SAAannF,GACX,OAAQA,EAAKzB,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,OAAO5C,KAAKgqB,QAAQ5L,QAAQkB,SAAW,MAAQ,MACpE,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAE1B,OAAmB,MAAO,MAC1B,OAAqB,OAAOtf,KAAKgqB,QAAQ5L,QAAQkB,SAAW,MAAQ,MAEpE,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAEE,OADArN,QAAO,GACA,KAKbo3E,EAAApnF,UAAAknF,MAAA,WACE,IAAInuD,EAAKh7B,KAAKg7B,GAgBd,OAfAA,EAAGvV,KAAK,+BACRuV,EAAGvV,KAAK,yBACRuV,EAAGvV,KAAK,0BACRuV,EAAGvV,KAAK,0BACRuV,EAAGvV,KAAK,yBACRuV,EAAGvV,KAAK,0BACRuV,EAAGvV,KAAK,0BACRuV,EAAGvV,KAAK,0BACRuV,EAAGvV,KAAK,0BACRuV,EAAGvV,KAAK,0BACNzlB,KAAKurF,YACPvrF,KAAK2qF,SACH3qF,KAAKurF,YACPvwD,EAAGvV,KAAK,OACRuV,EAAGvV,KAAK,8BACDzlB,KAAKg7B,GAAG1V,KAAK,KAExB+jE,EA9MA,CAAgCmB,GAAnB9qF,EAAA2pF,icCxSb,IAAAhnF,EAAAlC,EAAA,GAMAk8C,EAAAl8C,EAAA,GAIAmC,EAAAnC,EAAA,GAQAkZ,EAAAlZ,EAAA,GAKAuC,EAAAvC,EAAA,GAIAoZ,EAAApZ,EAAA,GAyDAmnF,EAAA,SAAAj2E,GAcE,SAAAi2E,IAAA,IAAA/1E,EACEF,EAAA7Q,KAAAR,OAAOA,YAVTuR,EAAAs6E,QAAoB,IAAI91E,MAExBxE,EAAAu6E,QAAuB,IAAI3iE,IAE3B5X,EAAAw6E,QAAuB,IAAI5iE,IAE3B5X,EAAA8yC,UAAmC,KA4b3B9yC,EAAAy6E,8BAAqC,EAsbrCz6E,EAAA06E,oBAAuC,KA72B7C16E,EAAKyY,QAAU,IAAIqyB,EAAAlgC,QAAQ5K,EAAK6K,eAw0GpC,OAx1G4B9K,EAAAg2E,EAAAj2E,GAoB1Bi2E,EAAArlF,UAAAmlF,UAAA,SACEphF,EACA+G,EACA6Y,GAEA,IAAI3Y,EAAiBvK,EAAAwK,cAAcH,GAC/BO,EAAeiM,EAAAhM,mBAAmBN,GAGtC,IAAIjN,KAAK+rF,QAAQ9oE,IAAI3V,GAArB,CACAtN,KAAK+rF,QAAQ3iE,IAAI9b,GACjBtN,KAAK8rF,QAAQ1iE,IAAI9b,GAGjB,IAAID,EAAS,IAAIkM,EAAAnE,OACfnI,EACAjH,EACA4f,EACIrM,EAAArE,WAAWc,MACXjJ,EAAKI,WAAW9K,EAAAmM,iBAAmBzB,EAAKogE,QAAQ9qE,EAAAuT,eAAgBvT,EAAAmM,eAAe3H,QAAU,EACvF0S,EAAArE,WAAWe,QACXsD,EAAArE,WAAW8qC,SAEfh2B,EAAUhqB,KAAKgqB,QACnBA,EAAQtM,QAAQ+H,KAAKpY,GAGrB,IAAI6+E,EAAK,IAAI5pF,EAAA0hD,UAAU32C,EAAQ2c,EAAQ5N,aACvC8vE,EAAG7nC,UAAYrkD,KAAKqkD,UACpBh3C,EAAOiI,UAAY42E,EAEnB,IADA,IAAI3gF,EAAa8B,EAAO9B,YAChB2gF,EAAGnlC,KAAKzkD,EAAAC,MAAMikD,YAAY,CAChC,IAAIl6C,EAAYtM,KAAKmsF,uBAAuBD,GACxC5/E,IACFA,EAAU7I,OAAS4J,EACnB9B,EAAWka,KAAKnZ,IAGpB4/E,EAAGhiC,WAILo9B,EAAArlF,UAAAkqF,uBAAA,SACED,EACAlnE,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIthB,EAAQrB,EAAAsB,YAAYC,KACpBwoF,GAAiB,EAGjBngF,EAAqC,KAClCigF,EAAGnlC,KAAKzkD,EAAAC,MAAMujD,KAAK,CACpBsmC,EAAW,IAAGA,EAAWF,EAAGjoC,UAChC,IAAIprC,EAAY7Y,KAAKqsF,eAAeH,GAC/BrzE,GAIA5M,IAAYA,MACjBA,EAAWwZ,KAAK5M,IAJd7Y,KAAKssF,cAAcJ,GAQvB,IAAIK,EAAmB,EACnBC,EAAiB,EACjBN,EAAGnlC,KAAKzkD,EAAAC,MAAMiU,UACZ01E,EAAGnlC,KAAKzkD,EAAAC,MAAMy9C,UAChBhgD,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACf0mE,EAAG9nF,SAGHgoF,EAAW,IAAGA,EAAWF,EAAGjoC,UAChCvgD,GAASrB,EAAAsB,YAAY6S,OACrB+1E,EAAcL,EAAGjoC,SACjBuoC,EAAYN,EAAGx2E,KAGjB,IAEI+2E,EAAgC,MAAbznE,GAAqBA,EAAUnhB,GAAGxB,EAAAsB,YAAY8f,SACjEyoE,EAAGnlC,KAAKzkD,EAAAC,MAAMw9C,UACZqsC,EAAW,IAAGA,EAAWF,EAAGjoC,UAC5BwoC,GACFzsF,KAAKohB,MACH/H,EAAAgI,eAAeqrE,gEACfR,EAAG9nF,SAGPV,GAASrB,EAAAsB,YAAYo8C,QAAU19C,EAAAsB,YAAY8f,SAClCgpE,IACT/oF,GAASrB,EAAAsB,YAAY8f,SAIvB,IAAInX,EAA8B,KAG9BqgF,EAAQT,EAAGzlC,OAEf,OADI2lC,EAAW,IAAGA,EAAWF,EAAG/nC,cACxBwoC,GACN,KAAKrqF,EAAAC,MAAMsnB,MAGT,GAFAqiE,EAAGxqE,OACHhe,GAASrB,EAAAsB,YAAYkmB,MACjBqiE,EAAGnlC,KAAKzkD,EAAAC,MAAMkoB,MAAO,CACvBne,EAAYtM,KAAK4sF,UAAUV,EAAIxoF,EAAOuI,EAAYmgF,GAClD,MAEA9/E,EAAYtM,KAAK6sF,cAAcX,EAAIxoF,EAAOuI,EAAYmgF,GACtDngF,EAAa,KAEf,MAEF,KAAK3J,EAAAC,MAAMm+C,IAAKh9C,GAASrB,EAAAsB,YAAY+8C,IACrC,KAAKp+C,EAAAC,MAAM2+C,IACTgrC,EAAGxqE,OACHpV,EAAYtM,KAAK6sF,cAAcX,EAAIxoF,EAAOuI,EAAYmgF,GACtDngF,EAAa,KACb,MAEF,KAAK3J,EAAAC,MAAMkoB,KACTyhE,EAAGxqE,OACHpV,EAAYtM,KAAK4sF,UAAUV,EAAIxoF,EAAOuI,EAAYmgF,GAClDngF,EAAa,KACb,MAEF,KAAK3J,EAAAC,MAAM0R,SACTi4E,EAAGxqE,OACHpV,EAAYtM,KAAK8sF,cAAcZ,EAAIxoF,EAAOuI,EAAYmgF,GACtDngF,EAAa,KACb,MAEF,KAAK3J,EAAAC,MAAMmkB,SACT,IAAIwgC,EAAQglC,EAAGjlC,OAEf,GADAilC,EAAGxqE,QACEwqE,EAAGnlC,KAAKzkD,EAAAC,MAAMsR,OAAQ,CACzBq4E,EAAG5kC,MAAMJ,GACT56C,EAAYtM,KAAK+sF,eAAeb,GAAI,GACpC,MAEAA,EAAG7kC,QAAQH,GAEbxjD,GAASrB,EAAAsB,YAAY+iB,SAGvB,KAAKpkB,EAAAC,MAAMsR,MACX,KAAKvR,EAAAC,MAAMkuB,UACTy7D,EAAGxqE,OACHpV,EAAYtM,KAAKgtF,sBAAsBd,EAAIxoF,EAAOuI,EAAYmgF,GAC9DngF,EAAa,KACb,MAEF,KAAK3J,EAAAC,MAAMioB,UACL08B,EAAQglC,EAAGjlC,OACfilC,EAAGxqE,OACCwqE,EAAGzlC,MAAK,EAAOnkD,EAAAi9C,mBAAmB8G,SAAW/jD,EAAAC,MAAMW,YACrDgpF,EAAG7kC,QAAQH,GACX56C,EAAYtM,KAAKitF,eAAef,EAAIxoF,EAAOuI,EAAYmgF,GACvDngF,EAAa,OAEbigF,EAAG5kC,MAAMJ,GACT56C,EAAYtM,KAAK+sF,eAAeb,GAAI,IAEtC,MAEF,KAAK5pF,EAAAC,MAAMsV,OACTq0E,EAAGxqE,OAGDpV,GAFF5I,GAASrB,EAAAsB,YAAYkU,QACTxV,EAAAsB,YAAY6S,OACVxW,KAAKktF,kBAAkBhB,EAAIE,GAE3BpsF,KAAKmtF,YAAYjB,GAE/B,MAEF,KAAK5pF,EAAAC,MAAMkP,KACLy1C,EAAQglC,EAAGjlC,OACfilC,EAAGxqE,OACCwqE,EAAGzlC,MAAK,EAAOnkD,EAAAi9C,mBAAmB8G,SAAW/jD,EAAAC,MAAMW,YACrDgpF,EAAG7kC,QAAQH,GACX56C,EAAYtM,KAAKotF,qBAAqBlB,EAAIxoF,EAAOuI,EAAYmgF,GAC7DngF,EAAa,OAEbigF,EAAG5kC,MAAMJ,GACT56C,EAAYtM,KAAK+sF,eAAeb,GAAI,IAEtC,MAEF,QAGMxoF,EAAQrB,EAAAsB,YAAY6S,OACtBlK,EAAYtM,KAAKqtF,YAAYnB,EAAIxoF,EAAO0oF,IAIpCI,GACFxsF,KAAKohB,MACH/H,EAAAgI,eAAeisE,gCACfpB,EAAG9nF,MAAMmoF,EAAaC,GAAY,UASjCxnE,IACH1Y,EAAYtM,KAAK+sF,eAAeb,GAAI,KAQ5C,GAAIjgF,EACF,IAAK,IAAI5L,EAAI,EAAGuG,EAAIqF,EAAWpF,OAAQxG,EAAIuG,IAAKvG,EAC9CL,KAAKohB,MACH/H,EAAAgI,eAAeksE,8BACfthF,EAAW5L,GAAG+D,OAIpB,OAAOkI,GAITg7E,EAAArlF,UAAAslF,SAAA,WACE,IAAIsE,EAAU7rF,KAAK6rF,QACnB,OAAOA,EAAQhlF,OAASglF,EAAQr1D,QAAU,MAI5C8wD,EAAArlF,UAAAioD,OAAA,WACE,GAAIlqD,KAAK6rF,QAAQhlF,OAAQ,MAAM,IAAImc,MAAM,wBAIzC,OAHAhjB,KAAK6rF,WACL7rF,KAAK8rF,QAAQ0B,QACbxtF,KAAK+rF,QAAQyB,QACNxtF,KAAKgqB,SAIds9D,EAAArlF,UAAAwrF,UAAA,SACEvB,EACAwB,EACAC,QADA,IAAAD,OAAA,QACA,IAAAC,OAAA,GAIA,IAGItpF,EAHAi9C,EAAQ4qC,EAAGxqE,OACX0qE,EAAWF,EAAGjoC,SAKlB,GAAI3C,GAASh/C,EAAAC,MAAMmiD,UAAW,CAG5B,IAAIkpC,EAAsB1B,EAAGnlC,KAAKzkD,EAAAC,MAAMmiD,WAEpCt1C,EAAYpP,KAAK6tF,kBAAkB3B,GACvC,GAAI98E,EAAW,CACb,GAAIw+E,EAAqB,CACvB,IAAK1B,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAKjB,OAJA3kD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,KAET,IAAK8nF,EAAGnlC,KAAKzkD,EAAAC,MAAMogD,KAKjB,OAJA3iD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,KAEJ8nF,EAAGnlC,KAAKzkD,EAAAC,MAAMO,OACjB9C,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,QAGhBgL,EAAUjL,YAAa,EAEzB,OAAOiL,EACF,GAAIw+E,GAAuB5tF,KAAKgsF,6BAKrC,OAJAhsF,KAAKohB,MACH/H,EAAAgI,eAAeysE,iBACf5B,EAAG9nF,SAEE,KAIT,IAAIspF,EAoBF,OAJA1tF,KAAKohB,MACH/H,EAAAgI,eAAeysE,iBACf5B,EAAG9nF,SAEE,KAnBP,IAAI2pF,EAAY/tF,KAAKytF,UAAUvB,GAAI,EAAOyB,GAC1C,IAAKI,EAAW,OAAO,KACvB,IAAK7B,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAOjB,OANKgpC,GACH3tF,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,MAAM8nF,EAAGx2E,KAAM,KAGf,MAETrR,EAAO0pF,GACF3pF,MAAMy2B,MAAQuxD,EACnB/nF,EAAKD,MAAM02B,IAAMoxD,EAAGx2E,SAUjB,GAAI4rC,GAASh/C,EAAAC,MAAM+V,KACxBjU,EAAOkV,EAAA/V,KAAKS,WACVsV,EAAA/V,KAAKiB,2BAA2B,OAAQynF,EAAG9nF,aAAc,EAAO8nF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,WAInF,GAAI4rC,GAASh/C,EAAAC,MAAMmS,KACxBrQ,EAAOkV,EAAA/V,KAAKS,WACVsV,EAAA/V,KAAKqH,qBAAqBqhF,EAAG9nF,aAAc,EAAO8nF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,WAIrE,GAAI4rC,GAASh/C,EAAAC,MAAMQ,MAAQu+C,GAASh/C,EAAAC,MAAMS,MAC/CqB,EAAOkV,EAAA/V,KAAKS,WACVsV,EAAA/V,KAAKiB,2BAA2B,OAAQynF,EAAG9nF,aAAc,EAAO8nF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,WAInF,GAAI4rC,GAASh/C,EAAAC,MAAMkiD,cACxBynC,EAAGz4C,aACHpvC,EAAOkV,EAAA/V,KAAKS,WACVsV,EAAA/V,KAAKiB,2BAA2B,SAAUynF,EAAG9nF,aAAc,EAAO8nF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,UAIrF,IAAI4rC,GAASh/C,EAAAC,MAAMW,WA6CxB,OANKyqF,GACH3tF,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAGA,KA5CP,IAAIyH,EAAa0N,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SACrEe,EAAa,IAAI4Q,MACjBk4E,GAAW,EAGf,GAAI/B,EAAGnlC,KAAKzkD,EAAAC,MAAMk/C,UAAW,CAC3B,EAAG,CACD,IAAIkmB,EAAY3nE,KAAKytF,UAAUvB,GAAI,EAAMyB,GACzC,IAAKhmB,EAAW,OAAO,KACvBxiE,EAAWsgB,KAAekiD,SACnBukB,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,QACvB,IAAKo4E,EAAGnlC,KAAKzkD,EAAAC,MAAMm/C,aAOjB,OANKisC,GACH3tF,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,MAAM8nF,EAAGx2E,KAAM,KAGf,KAIX,GAAIw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMogD,KAAM,CACtB,IAAIupC,EAAGnlC,KAAKzkD,EAAAC,MAAMO,MAShB,OANK6qF,GACH3tF,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,MAAM8nF,EAAGx2E,KAAM,QAGf,KARPu4E,GAAW,EAWf5pF,EAAOkV,EAAA/V,KAAKS,WAAW4H,EAAY1G,EAAY8oF,EAAU/B,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAYjF,KAAOw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMmjD,cAAc,CACjC,IAAIwoC,EAAehC,EAAGjoC,SACtB,IAAKioC,EAAGnlC,KAAKzkD,EAAAC,MAAMojD,cAOjB,OANKgoC,GACH3tF,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAGT,KAET,IAAI+pF,EAAejC,EAAG9nF,MAAM8pF,EAAchC,EAAGx2E,KAGzCu4E,GAAW,EACf,GAAI/B,EAAGnlC,KAAKzkD,EAAAC,MAAMogD,KAAM,CACtB,IAAIupC,EAAGnlC,KAAKzkD,EAAAC,MAAMO,MAShB,OANK6qF,GACH3tF,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,QAGT,KARP6pF,GAAW,EAiBf,GANA5pF,EAAOkV,EAAA/V,KAAKS,WACVsV,EAAA/V,KAAKiB,2BAA2B,QAAS0pF,IACvC9pF,GACF4pF,EACA/B,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAEpBu4E,EAAU,MAGhB,OAAO5pF,GAOTijF,EAAArlF,UAAA4rF,kBAAA,SACE3B,GAKA,IAuGI9mF,EAvGA8hD,EAAQglC,EAAGjlC,OACXmlC,EAAWF,EAAGjoC,SACd9+C,EAAqC,KACrC2nB,EAA4B,KAC5BshE,GAAoB,EAExB,GAAIlC,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAChBypC,GAAc,EACdlC,EAAG7kC,QAAQH,GACX/hD,SAEK,CACLipF,GAAc,EACd,EAAG,CACD,IAAIxrF,EAAO2W,EAAA5H,cAAcquC,QAMzB,GALIksC,EAAGnlC,KAAKzkD,EAAAC,MAAMi/C,eAChB4sC,GAAc,EACdlC,EAAG7kC,QAAQH,GACXtkD,EAAO2W,EAAA5H,cAAcy8D,MAEnB8d,EAAGnlC,KAAKzkD,EAAAC,MAAMmS,MAAO,CACvB,IAAIw3E,EAAGnlC,KAAKzkD,EAAAC,MAAM+iD,OAiBhB,OAFA4mC,EAAG5kC,MAAMJ,GACTlnD,KAAKgsF,8BAA+B,EAC7B,KAhBPoC,GAAc,EACdlC,EAAG7kC,QAAQH,GACX,IAAI3lD,EAAIvB,KAAKytF,UAAUvB,GAAI,GAC3B,IAAK3qF,EAAG,OAAO,KACf,GAAIA,EAAEqB,MAAQ2W,EAAA9W,SAASgP,KAMrB,OALAzR,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfjkB,EAAE6C,OAEJpE,KAAKgsF,8BAA+B,EAC7B,KAETl/D,EAAqBvrB,MAMlB,KAAI2qF,EAAGplC,iBA8CZ,OATIsnC,EACFpuF,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAGL8nF,EAAG5kC,MAAMJ,GAEXlnD,KAAKgsF,6BAA+BoC,EAC7B,KA7CP,IAAIxtF,EAAO2Y,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,MAAM8nF,EAAGjoC,SAAUioC,EAAGx2E,MAazF,GAZIw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMkjD,YAChB2oC,GAAc,EACdlC,EAAG7kC,QAAQH,GACPtkD,GAAQ2W,EAAA5H,cAAcy8D,KACxBpuE,KAAKohB,MACH/H,EAAAgI,eAAegtE,oCACfnC,EAAG9nF,SAGLxB,EAAO2W,EAAA5H,cAAc28E,UAGrBpC,EAAGnlC,KAAKzkD,EAAAC,MAAM+iD,OAAQ,CACxB8oC,GAAc,EACdlC,EAAG7kC,QAAQH,GACX,IAAI7iD,EAAOrE,KAAKytF,UAAUvB,GAC1B,IAAK7nF,EAEH,OADArE,KAAKgsF,6BAA+BoC,EAC7B,KAET,IAAIG,EAAQ,IAAIh1E,EAAAvU,cAChBupF,EAAMtpF,cAAgBrC,EACtB2rF,EAAM3tF,KAAOA,EACb2tF,EAAMlqF,KAAOA,EACRc,EACAA,EAAWsgB,KAAK8oE,GADJppF,GAAeopF,QAG5BH,GACFpuF,KAAKohB,MACH/H,EAAAgI,eAAe8tC,cACf+8B,EAAG9nF,gBAgBJ8nF,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,QACvB,IAAKo4E,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAUjB,OATIypC,EACFpuF,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAGd8nF,EAAG5kC,MAAMJ,GAEXlnD,KAAKgsF,6BAA+BoC,EAC7B,KAKX,OAAIlC,EAAGnlC,KAAKzkD,EAAAC,MAAMijD,qBAChB4oC,GAAc,EACdlC,EAAG7kC,QAAQH,IACX9hD,EAAapF,KAAKytF,UAAUvB,KAiB9BlsF,KAAKgsF,8BAA+B,EAC7BzyE,EAAA/V,KAAK0B,gBACVC,MACAC,EACA0nB,GACA,EACAo/D,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,QArBpB1V,KAAKgsF,6BAA+BoC,EAC7B,QAGLA,EACFpuF,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,MAGd8nF,EAAG5kC,MAAMJ,GAEXlnD,KAAKgsF,6BAA+BoC,EAC7B,OAcX9G,EAAArlF,UAAAoqF,eAAA,SACEH,GAKA,IAAIE,EAAWF,EAAGjoC,SAClB,GAAIioC,EAAGplC,iBAAkB,CAGvB,IAFA,IAAIlmD,EAAOsrF,EAAG3kC,iBACVtgD,EAAyBsS,EAAA/V,KAAKiB,2BAA2B7D,EAAMsrF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAClFw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMuiD,MAAM,CACzB,IAAIonC,EAAGplC,iBAYL,OAJA9mD,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAEE,KAXPxD,EAAOsrF,EAAG3kC,iBACVtgD,EAAasS,EAAA/V,KAAKsG,+BAChB7C,EACAsS,EAAA/V,KAAKiB,2BAA2B7D,EAAMsrF,EAAG9nF,SACzC8nF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAU5B,IAAIjQ,OAAI,EACR,IAAIymF,EAAGnlC,KAAKzkD,EAAAC,MAAMmiD,WAMhB,OAAOnrC,EAAA/V,KAAKgC,gBAAgByB,EAAY,KAAMilF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAJpE,GADAjQ,EAAOzF,KAAKwuF,eAAetC,GAEzB,OAAO3yE,EAAA/V,KAAKgC,gBAAgByB,EAAYxB,EAAMymF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,WAMxE1V,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAGP,OAAO,MAGTkjF,EAAArlF,UAAA4qF,cAAA,SACEX,EACAxoF,EACAuI,EACAmgF,GAKA,IAAIpgF,EAAU,IAAI+J,MAClB,EAAG,CACD,IAAIc,EAAS7W,KAAKyuF,yBAAyBvC,EAAIxoF,EAAOuI,GACtD,IAAK4K,EAAQ,OAAO,KACpB7K,EAAQyZ,KAA0B5O,SAC3Bq1E,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,QAEvB,IAAIq/B,EAAM55B,EAAA/V,KAAKoN,wBAAwB5E,EAASC,EAAYvI,EAAOwoF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAEzF,OADAw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,GAGTm0C,EAAArlF,UAAAwsF,yBAAA,SACEvC,EACAwC,EACAC,GAKA,IAAKzC,EAAGplC,iBAKN,OAJA9mD,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAEE,KAET,IAAIyH,EAAa0N,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SACrEV,EAAQgrF,EAERrqF,EAA8B,KAC9B6nF,EAAGnlC,KAAKzkD,EAAAC,MAAM+iD,SAChBjhD,EAAOrE,KAAKytF,UAAUvB,IAGxB,IAAInnF,EAAiC,KACrC,GAAImnF,EAAGnlC,KAAKzkD,EAAAC,MAAM0gD,SAQhB,GAPIv/C,EAAQrB,EAAAsB,YAAY8f,SACtBzjB,KAAKohB,MACH/H,EAAAgI,eAAeutE,iDACf1C,EAAG9nF,WAGPW,EAAc/E,KAAK6uF,gBAAgB3C,EAAI,IACrB,OAAO,UAErBxoF,EAAQrB,EAAAsB,YAAYkmB,MAChBnmB,EAAQrB,EAAAsB,YAAY8f,SACxBzjB,KAAKohB,MACH/H,EAAAgI,eAAek0C,wCACf1pD,EAAWzH,OAGLC,GACVrE,KAAKohB,MACH/H,EAAAgI,eAAe8tC,cACf+8B,EAAG9nF,MAAM8nF,EAAGx2E,MAIlB,OAAO6D,EAAA/V,KAAKsN,0BACVjF,EACAxH,EACAU,EACA4pF,EACAjrF,EACApB,EAAAE,MAAM8iB,KAAKzZ,EAAWzH,MAAO8nF,EAAG9nF,WAIpCkjF,EAAArlF,UAAA2qF,UAAA,SACEV,EACAxoF,EACAuI,EACAmgF,GAKA,GAAIF,EAAGxqE,QAAUpf,EAAAC,MAAMW,WAKrB,OAJAlD,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAEE,KAET,IAAIyH,EAAa0N,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SACzE,GAAI8nF,EAAGxqE,QAAUpf,EAAAC,MAAMqjD,UAKrB,OAJA5lD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,KAGT,IADA,IAAI4H,EAAU,IAAI+J,OACVm2E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,aAAa,CACjC,IAAIhvC,EAAS7W,KAAK8uF,eAAe5C,EAAI7pF,EAAAsB,YAAYC,MACjD,IAAKiT,EAAQ,OAAO,KAEpB,GADA7K,EAAQyZ,KAA2B5O,IAC9Bq1E,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,OAAQ,CACzB,GAAIo4E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,YAChB,MAMA,OAJA7lD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,MAIb,IAAI+uC,EAAM55B,EAAA/V,KAAKkJ,sBACbb,EACAG,EACAC,EACAvI,EACAwoF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAGxB,OADAw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,GAGTm0C,EAAArlF,UAAA6sF,eAAA,SACE5C,EACAwC,GAKA,IAAKxC,EAAGplC,iBAKN,OAJA9mD,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAEE,KAET,IAAIyH,EAAa0N,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SACrE9C,EAA2B,KAC/B,OAAI4qF,EAAGnlC,KAAKzkD,EAAAC,MAAM0gD,WAChB3hD,EAAQtB,KAAK6uF,gBAAgB3C,EAAI,IACd,KAEd3yE,EAAA/V,KAAKoJ,2BACVf,EACAvK,EACAotF,EACApsF,EAAAE,MAAM8iB,KAAKzZ,EAAWzH,MAAO8nF,EAAG9nF,WAIpCkjF,EAAArlF,UAAA8sF,YAAA,SACE7C,GAKA,IAAI9lF,EAA0B,KAC9B,GACE8lF,EAAGzlC,MAAK,IAASnkD,EAAAC,MAAMgjD,WACvB2mC,EAAGhoC,WAAa5hD,EAAAC,MAAMsjD,aACrBqmC,EAAG9nC,sBAEEh+C,EAAOpG,KAAK6uF,gBAAgB3C,IAAM,OAAO,KAGjD,IAAI/4C,EAAM55B,EAAA/V,KAAKmM,sBAAsBvJ,EAAM8lF,EAAG9nF,SAE9C,OADA8nF,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,GAGTm0C,EAAArlF,UAAA+sF,oBAAA,SACE9C,GAMA,IADA,IAAIpgF,EAAiB,IAAIiK,OACjBm2E,EAAGnlC,KAAKzkD,EAAAC,MAAMm/C,cAAc,CAClC,IAAIutC,EAAgBjvF,KAAKkvF,mBAAmBhD,GAC5C,IAAK+C,EAAe,OAAO,KAE3B,GADAnjF,EAAe2Z,KAAwBwpE,IAClC/C,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,OAAQ,CACzB,GAAIo4E,EAAGnlC,KAAKzkD,EAAAC,MAAMm/C,aAChB,MAMA,OAJA1hD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,MAUb,OAN8B,IAA1B0H,EAAejF,QACjB7G,KAAKohB,MACH/H,EAAAgI,eAAe8tE,oCACfjD,EAAG9nF,SAGA0H,GAGTw7E,EAAArlF,UAAAitF,mBAAA,SACEhD,GAKA,GAAIA,EAAGxqE,QAAUpf,EAAAC,MAAMW,WAAY,CACjC,IAAI2I,EAAa0N,EAAA/V,KAAKiB,2BACpBynF,EAAG3kC,iBACH2kC,EAAG9nF,SAEDO,EAA+B,KACnC,GAAIunF,EAAGnlC,KAAKzkD,EAAAC,MAAM49C,SAAU,CAC1B,IAAI5+C,EAAIvB,KAAKytF,UAAUvB,GACvB,IAAK3qF,EAAG,OAAO,KACf,GAAIA,EAAEqB,MAAQ2W,EAAA9W,SAASgP,KAKrB,OAJAzR,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfjkB,EAAE6C,OAEG,KAETO,EAAwBpD,EAE1B,OAAOgY,EAAA/V,KAAKkB,oBACVmH,EACAlH,EACArC,EAAAE,MAAM8iB,KAAKzZ,EAAWzH,MAAO8nF,EAAG9nF,UAQpC,OALEpE,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAGA,MAKTkjF,EAAArlF,UAAAmtF,gBAAA,SACElD,EACAv7B,QAAA,IAAAA,OAAA,GAKA,IAAIxrD,EAAa,IAAI4Q,MACjBs5E,EAAiC,KACjCC,GAAe,EACfC,GAAe,EACfziE,EAAkC,KAItC,GADA9sB,KAAKisF,oBAAsB,KACvBC,EAAGnlC,KAAKzkD,EAAAC,MAAMmS,MAAO,CACvB,IAAIw3E,EAAGnlC,KAAKzkD,EAAAC,MAAM+iD,OAgBhB,OAJAtlD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,KAdP,KADA0oB,EAAW9sB,KAAKytF,UAAUvB,IACX,OAAO,KAgBxB,GAfMp/D,EAASlqB,MAAQ2W,EAAA9W,SAASgP,KAC5BzR,KAAKisF,oBAAgCn/D,EAErC9sB,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfsH,EAAS1oB,QAUV8nF,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,OACjB,OAAIo4E,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YACTx/C,GAEPnF,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,MAKb,MAAQ8nF,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,aAAa,CACjC,IAAI4pC,EAAQvuF,KAAKwvF,eAAetD,EAAIv7B,GACpC,IAAK49B,EAAO,OAAO,KAQnB,OAPIc,IAAaE,IACfvvF,KAAKohB,MACH/H,EAAAgI,eAAeouE,kDACfJ,EAASzuF,KAAKwD,OAEhBmrF,GAAe,GAEThB,EAAMtpF,eACZ,QACMqqF,GACFtvF,KAAKohB,MACH/H,EAAAgI,eAAequE,yDACfnB,EAAM3tF,KAAKwD,OAGf,MAEF,KAAKmV,EAAA5H,cAAc28E,SACjBgB,GAAe,EACf,MAEF,KAAK/1E,EAAA5H,cAAcy8D,KACjBihB,EAAWd,EAKf,GADAppF,EAAWsgB,KAAK8oE,IACXrC,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,OAAQ,CACzB,GAAIo4E,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAChB,MAMA,OAJA3kD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,MAIb,OAAOe,GAGTmiF,EAAArlF,UAAAutF,eAAA,SACEtD,EACAv7B,QAAA,IAAAA,OAAA,GAKA,IAAIg/B,GAAS,EACTC,GAAa,EACbC,EAA2B,KAC3BC,EAA2BztF,EAAAsB,YAAYC,KAC3C,GAAI+sD,IACEu7B,EAAGnlC,KAAKzkD,EAAAC,MAAMy+C,SAChB6uC,EAAa3D,EAAG9nF,QAChB0rF,GAAeztF,EAAAsB,YAAYq9C,QAClBkrC,EAAGnlC,KAAKzkD,EAAAC,MAAMw+C,YACvB8uC,EAAa3D,EAAG9nF,QAChB0rF,GAAeztF,EAAAsB,YAAYo9C,WAClBmrC,EAAGnlC,KAAKzkD,EAAAC,MAAMu+C,WACvB+uC,EAAa3D,EAAG9nF,QAChB0rF,GAAeztF,EAAAsB,YAAYm9C,SAEzBorC,EAAGzlC,QAAUnkD,EAAAC,MAAMkkB,UAAU,CAC/B,IAAIygC,EAAQglC,EAAGjlC,OACfilC,EAAGxqE,OACCwqE,EAAGzlC,QAAUnkD,EAAAC,MAAM+iD,OACrB4mC,EAAG7kC,QAAQH,GACN2oC,IAAYA,EAAa3D,EAAG9nF,SACjC0rF,GAAeztF,EAAAsB,YAAY8iB,UAE3BylE,EAAG5kC,MAAMJ,GAef,GAXIglC,EAAGnlC,KAAKzkD,EAAAC,MAAMi/C,eACZsuC,EACF9vF,KAAKohB,MACH/H,EAAAgI,eAAe0uE,+DACf7D,EAAG9nF,SAGLyrF,EAAa3D,EAAG9nF,QAElBurF,GAAS,GAEPzD,EAAGplC,iBAAkB,CAClB6oC,IAAQE,EAAa3D,EAAG9nF,SAC7B,IAAIyH,EAAa0N,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SACrEC,EAA8B,KASlC,IARIurF,EAAa1D,EAAGnlC,KAAKzkD,EAAAC,MAAMkjD,YACzBkqC,GACF3vF,KAAKohB,MACH/H,EAAAgI,eAAegtE,oCACfxiF,EAAWzH,OAIb8nF,EAAGnlC,KAAKzkD,EAAAC,MAAM+iD,QAEhB,KADAjhD,EAAOrE,KAAKytF,UAAUvB,IACX,OAAO,UAElB7nF,EAAOkV,EAAA/V,KAAKgB,kBAAkB0nF,EAAG9nF,MAAM8nF,EAAGx2E,MAE5C,IAAI3Q,EAAiC,KACrC,GAAImnF,EAAGnlC,KAAKzkD,EAAAC,MAAM0gD,UACZ0sC,GACF3vF,KAAKohB,MACH/H,EAAAgI,eAAe2uE,4CACfnkF,EAAWzH,OAGXwrF,EACF5vF,KAAKohB,MACH/H,EAAAgI,eAAe4uE,oDACfpkF,EAAWzH,OAGbwrF,GAAa,IAEf7qF,EAAc/E,KAAK6uF,gBAAgB3C,EAAI,KACrB,OAAO,KAE3B,IAAIqC,EAAQh1E,EAAA/V,KAAKsB,gBACf+G,EACAxH,EACAU,EACA4qF,EACIp2E,EAAA5H,cAAcy8D,KACdwhB,EACEr2E,EAAA5H,cAAc28E,SACd/0E,EAAA5H,cAAcquC,QACpB19C,EAAAE,MAAM8iB,KAAYuqE,EAAY3D,EAAG9nF,UAGnC,OADAmqF,EAAM7qF,OAASosF,EACRvB,EAOT,OALEvuF,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAGA,MAGTkjF,EAAArlF,UAAA6qF,cAAA,SACEZ,EACAxoF,EACAuI,EACAmgF,GAUA,IAAKF,EAAGplC,iBAKN,OAJA9mD,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,MAAM8nF,EAAGx2E,MAEP,KAGT,IAAI9U,EAAO2Y,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SAC/D8rF,GAAuB,EAEvBpkF,EAA6C,KACjD,GAAIogF,EAAGnlC,KAAKzkD,EAAAC,MAAMk/C,UAAW,CAG3B,GAFAyuC,EAAiBhE,EAAGjoC,WACpBn4C,EAAiB9L,KAAKgvF,oBAAoB9C,IACrB,OAAO,KAC5BxoF,GAASrB,EAAAsB,YAAY6f,QAGvB,IAAK0oE,EAAGnlC,KAAKzkD,EAAAC,MAAMmiD,WAKjB,OAJA1kD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,MAAM8nF,EAAGx2E,KAAM,KAEb,KAGLw6E,EAAiB,IACnBA,EAAiBhE,EAAGjoC,UAGtB,IAAI9+C,EAAanF,KAAKovF,gBAAgBlD,GACtC,IAAK/mF,EAAY,OAAO,KACxB,IAAI2nB,EAAW9sB,KAAKisF,oBAEhBkE,EAAwC,IAA5BzsF,EAAQrB,EAAAsB,YAAYuiB,KAChCiqE,IACuB,GAArBhrF,EAAW0B,QACb7G,KAAKohB,MACH/H,EAAAgI,eAAe+uE,+CACfxvF,EAAKwD,OAGLe,EAAW0B,QAAU1B,EAAW,GAAGJ,aACrC/E,KAAKohB,MACH/H,EAAAgI,eAAegvE,oDACfzvF,EAAKwD,QAKPV,EAAQrB,EAAAsB,YAAYsiB,KAClB9gB,EAAW0B,QACb7G,KAAKohB,MACH/H,EAAAgI,eAAeivE,sCACf1vF,EAAKwD,OAKX,IAAIgB,EAAoC,KACxC,GAAI8mF,EAAGnlC,KAAKzkD,EAAAC,MAAM+iD,UAChBlgD,EAAapF,KAAKytF,UAAUvB,GAAI,EAAMiE,IACrB,OAAO,KAGrB/qF,IACHA,EAAamU,EAAA/V,KAAKgB,kBAChB0nF,EAAG9nF,MAAM8nF,EAAGx2E,MAETy6E,GACHnwF,KAAKohB,MACH/H,EAAAgI,eAAe8tC,cACf/pD,EAAWhB,QAKjB,IAAIgL,EAAYmK,EAAA/V,KAAK0B,gBACnBC,EACAC,EACA0nB,GACA,EACAo/D,EAAG9nF,MAAM8rF,EAAgBhE,EAAGx2E,MAG1BrG,EAAyB,KAC7B,GAAI68E,EAAGnlC,KAAKzkD,EAAAC,MAAMqjD,YAShB,GARIliD,EAAQrB,EAAAsB,YAAY8f,SACtBzjB,KAAKohB,MACH/H,EAAAgI,eAAeovC,yDACfy7B,EAAG9nF,WAIPiL,EAAOrP,KAAKuwF,oBAAoBrE,GAAI,IACzB,OAAO,UACPxoF,EAAQrB,EAAAsB,YAAY8f,SAC/BzjB,KAAKohB,MACH/H,EAAAgI,eAAeqvC,gFACfw7B,EAAG9nF,MAAM8nF,EAAGx2E,MAIhB,IAAIy9B,EAAM55B,EAAA/V,KAAK2L,0BACbvO,EACAkL,EACAsD,EACAC,EACApD,EACAvI,EACAwoF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAGxB,OADAw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,GAGTm0C,EAAArlF,UAAAuuF,wBAAA,SAAwBtE,GACtB,IACItrF,EADAwrF,EAAWF,EAAGjoC,SAEdwsC,GAAU,EAOd,GAAIvE,EAAG5qC,OAASh/C,EAAAC,MAAM0R,UAMpB,GAJErT,EADEsrF,EAAGplC,iBACEvtC,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SAExDmV,EAAA/V,KAAK8C,gCAAgC4lF,EAAG9nF,MAAM8nF,EAAGx2E,OAErDw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMmiD,WAKjB,OAJA1kD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,MAAM8nF,EAAGx2E,KAAM,KAEb,UAQT+6E,GAAU,EACVx+E,OAAOi6E,EAAG5qC,OAASh/C,EAAAC,MAAMmiD,WACzB9jD,EAAO2Y,EAAA/V,KAAK8C,gCAAgC4lF,EAAG9nF,MAAM8nF,EAAGjoC,WAK1D,IAAIisC,EAAiBhE,EAAGx2E,IACpBvQ,EAAanF,KAAKovF,gBAAgBlD,GACtC,OAAK/mF,EAEEnF,KAAK0wF,8BAA8BxE,EAAItrF,EAAMuE,EAAYsrF,EAASrE,EAAU8D,GAF3D,MAKlB5I,EAAArlF,UAAAyuF,8BAAR,SACExE,EACAtrF,EACAuE,EACAsrF,EACArE,EACA8D,QADA,IAAA9D,OAAiB,QACjB,IAAA8D,OAAuB,GAEnB9D,EAAW,IAAGA,EAAWxrF,EAAKwD,MAAMy2B,OACpCq1D,EAAiB,IAAGA,EAAiB9D,GAEzC,IAAIhnF,EAAoC,KACxC,GAAI8mF,EAAGnlC,KAAKzkD,EAAAC,MAAM+iD,QAEhB,KADAlgD,EAAapF,KAAKytF,UAAUvB,IACX,OAAO,UAExB9mF,EAAamU,EAAA/V,KAAKgB,kBAAkB0nF,EAAG9nF,MAAM8nF,EAAGx2E,MAChD1V,KAAKohB,MACH/H,EAAAgI,eAAe8tC,cACf/pD,EAAWhB,OAIf,GAAIqsF,IACGvE,EAAGnlC,KAAKzkD,EAAAC,MAAMijD,oBAKjB,OAJAxlD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,MAAM8nF,EAAGx2E,KAAM,MAEb,KAIX,IAQIrG,EARAD,EAAYmK,EAAA/V,KAAK0B,gBACnBC,EACAC,EACA,MACA,EACA8mF,EAAG9nF,MAAM8rF,EAAgBhE,EAAGx2E,MAI9B,GAAI+6E,EACFphF,EAAOrP,KAAK+sF,eAAeb,GAAI,OAC1B,CACL,IAAKA,EAAGnlC,KAAKzkD,EAAAC,MAAMqjD,WAKjB,OAJA5lD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,MAAM8nF,EAAGx2E,KAAM,KAEb,KAETrG,EAAOrP,KAAKuwF,oBAAoBrE,GAAI,GAEtC,IAAK78E,EAAM,OAAO,KAElB,IAAIxH,EAAc0R,EAAA/V,KAAK2L,0BACrBvO,EACA,KACAwO,EACAC,EACA,KACAohF,EAAUpuF,EAAAsB,YAAYmF,MAAQzG,EAAAsB,YAAYC,KAC1CsoF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAExB,OAAO6D,EAAA/V,KAAKoF,yBAAyBf,IAGvCy/E,EAAArlF,UAAA+qF,sBAAA,SACEd,EACAxoF,EACAuI,EACAmgF,GAUA,IAAI9lE,EAAc4lE,EAAG5qC,OAASh/C,EAAAC,MAAMkuB,UAEpC,IAAKy7D,EAAGplC,iBAKN,OAJA9mD,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAEE,KAGT,IAKI0H,EALAD,EAAa0N,EAAA/V,KAAKiB,2BACpBynF,EAAG3kC,iBACH2kC,EAAG9nF,SAIL,GAAI8nF,EAAGnlC,KAAKzkD,EAAAC,MAAMk/C,UAAW,CAE3B,KADA31C,EAAiB9L,KAAKgvF,oBAAoB9C,IACrB,OAAO,KAC5BxoF,GAASrB,EAAAsB,YAAY6f,aAErB1X,KAGF,IAAInH,EAA+B,KACnC,GAAIunF,EAAGnlC,KAAKzkD,EAAAC,MAAM49C,SAAU,CAC1B,IAAI5+C,EAAIvB,KAAKytF,UAAUvB,GACvB,IAAK3qF,EAAG,OAAO,KACf,GAAIA,EAAEqB,MAAQ2W,EAAA9W,SAASgP,KAKrB,OAJAzR,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACfjkB,EAAE6C,OAEG,KAETO,EAAwBpD,EAG1B,IAAIwK,EAAqC,KACzC,GAAImgF,EAAGnlC,KAAKzkD,EAAAC,MAAM+9C,YAAa,CACzBh6B,GACFtmB,KAAKohB,MACH/H,EAAAgI,eAAesvE,oDACfzE,EAAG9nF,SAGP,EAAG,CACD,IAAIC,EAAOrE,KAAKytF,UAAUvB,GAC1B,IAAK7nF,EAAM,OAAO,KACbiiB,IACEva,IAAiBA,MACtBA,EAAgB0Z,KAAephB,UAE1B6nF,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,QAGzB,IAAKo4E,EAAGnlC,KAAKzkD,EAAAC,MAAMqjD,WAKjB,OAJA5lD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,KAGT,IACIyD,EADAmE,EAAU,IAAI+J,MAyBlB,GAvBIuQ,GACFrU,QAAQlG,GACRlE,EAAc0R,EAAA/V,KAAKoL,2BACjB/C,EACAC,EACAnH,EACAqH,EACAC,EACAvI,EACAwoF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,OAGxB7N,EAAc0R,EAAA/V,KAAKoI,uBACjBC,EACAC,EACAnH,EACAoH,EACAC,EACAC,EACAvI,EACAwoF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,OAGrBw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,YACjB,EAAG,CACD,IAAIhvC,EAAS7W,KAAK4wF,iBAAiB1E,EAAIrkF,GACvC,IAAKgP,EAAQ,OAAO,KACpBA,EAAOpT,OAASoE,EAChBmE,EAAQyZ,KAA2B5O,UAC3Bq1E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,aAE1B,OAAOh+C,GAGTy/E,EAAArlF,UAAA4uF,qBAAA,SAAqB3E,GAInB,IACItrF,EADAwrF,EAAWF,EAAGjoC,SASlB,GALErjD,EADEsrF,EAAGplC,iBACEvtC,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SAExDmV,EAAA/V,KAAK8C,gCAAgC4lF,EAAG9nF,MAAM8nF,EAAGx2E,OAGrDw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMqjD,WAKjB,OAJA5lD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,MAAM8nF,EAAGx2E,KAAM,KAEb,KAGT,IAAI1J,EAAU,IAAI+J,MACdlO,EAAc0R,EAAA/V,KAAKoI,uBACrBhL,KAEA,KACA,KACAoL,EACA,KACA3J,EAAAsB,YAAYC,KACZsoF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAExB,IAAKw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,YACjB,EAAG,CACD,IAAIhvC,EAAS7W,KAAK4wF,iBAAiB1E,EAAIrkF,GACvC,IAAKgP,EAAQ,OAAO,KACpBA,EAAOpT,OAASoE,EAChBmE,EAAQyZ,KAA2B5O,UAC3Bq1E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,aAE1B,OAAOtsC,EAAA/V,KAAKoE,sBAAsBC,IAGpCy/E,EAAArlF,UAAA2uF,iBAAA,SACE1E,EACAzoF,GAcA,IAJA,IAAI2oF,EAAWF,EAAGx2E,IACd4Q,EAAc7iB,EAAOb,MAAQ2W,EAAA9W,SAASqV,qBAEtC7L,EAAa,IAAI8J,MACdm2E,EAAGnlC,KAAKzkD,EAAAC,MAAMujD,KAAK,CACxB,IAAIjtC,EAAY7Y,KAAKqsF,eAAeH,GACpC,IAAKrzE,EAAW,MACZyN,GACFtmB,KAAKohB,MACH/H,EAAAgI,eAAeksE,8BACf10E,EAAUzU,OAGd6H,EAAWwZ,KAAoB5M,GAIjC,IAAInV,EAAQD,EAAOC,MAAQrB,EAAAsB,YAAY8f,QAGnC6C,IAAa5iB,GAASrB,EAAAsB,YAAYs9E,SAElCiL,EAAGnlC,KAAKzkD,EAAAC,MAAMy+C,SACZ16B,GACFtmB,KAAKohB,MACH/H,EAAAgI,eAAeisE,gCACfpB,EAAG9nF,QAAS,UAGhBV,GAASrB,EAAAsB,YAAYq9C,QACZkrC,EAAGnlC,KAAKzkD,EAAAC,MAAMu+C,UACnBx6B,GACFtmB,KAAKohB,MACH/H,EAAAgI,eAAeisE,gCACfpB,EAAG9nF,QAAS,WAGhBV,GAASrB,EAAAsB,YAAYm9C,SACZorC,EAAGnlC,KAAKzkD,EAAAC,MAAMw+C,aACnBz6B,GACFtmB,KAAKohB,MACH/H,EAAAgI,eAAeisE,gCACfpB,EAAG9nF,QAAS,aAGhBV,GAASrB,EAAAsB,YAAYo9C,WAGvB,IAAI+vC,EAAmB,EACnBC,EAAiB,EACjBC,EAAqB,EACrBC,EAAmB,EACnB/E,EAAGnlC,KAAKzkD,EAAAC,MAAMoU,SACZ2P,GACFtmB,KAAKohB,MACH/H,EAAAgI,eAAeisE,gCACfpB,EAAG9nF,QAAS,UAGhBV,GAASrB,EAAAsB,YAAYgT,OACrBm6E,EAAc5E,EAAGjoC,SACjB8sC,EAAY7E,EAAGx2E,MAEfhS,GAASrB,EAAAsB,YAAYipB,SACjBs/D,EAAGnlC,KAAKzkD,EAAAC,MAAMmkB,YACZJ,GACFtmB,KAAKohB,MACH/H,EAAAgI,eAAeisE,gCACfpB,EAAG9nF,QAAS,YAGhBV,GAASrB,EAAAsB,YAAY+iB,SACrBsqE,EAAgB9E,EAAGjoC,SACnBgtC,EAAc/E,EAAGx2E,KAEfjS,EAAOC,MAAQrB,EAAAsB,YAAY6f,UAC7B9f,GAASrB,EAAAsB,YAAYkwD,kBAIzB,IAAIq9B,EAAqB,EACrBC,EAAmB,EACnBjF,EAAGnlC,KAAKzkD,EAAAC,MAAMkkB,YAChB/iB,GAASrB,EAAAsB,YAAY8iB,SACrByqE,EAAgBhF,EAAGjoC,SACnBktC,EAAcjF,EAAGx2E,KAInB,IAAIwxC,EAAQglC,EAAGjlC,OACX0J,GAAgB,EAChB9oC,GAAW,EAGXsoE,GAAW,EACXx/C,EAAgB,EAChBygD,EAAc,EAwDlB,GAvDK9qE,IACC4lE,EAAGnlC,KAAKzkD,EAAAC,MAAM0jB,KACZimE,EAAGzlC,MAAK,EAAMnkD,EAAAi9C,mBAAmB8G,SAAW/jD,EAAAC,MAAMW,YAAegpF,EAAG9nC,mBAYtE8nC,EAAG5kC,MAAMJ,IAXTxjD,GAASrB,EAAAsB,YAAYsiB,IACrB4B,GAAW,EACX8oB,EAAWu7C,EAAGjoC,SACdmtC,EAASlF,EAAGx2E,IACRhS,EAAQrB,EAAAsB,YAAY8iB,UACtBzmB,KAAKohB,MACH/H,EAAAgI,eAAeisE,gCACfpB,EAAG9nF,MAAM8sF,EAAeC,GAAc,aAMnCjF,EAAGnlC,KAAKzkD,EAAAC,MAAM2jB,KACnBgmE,EAAGzlC,MAAK,EAAMnkD,EAAAi9C,mBAAmB8G,SAAW/jD,EAAAC,MAAMW,YAAegpF,EAAG9nC,mBAYtE8nC,EAAG5kC,MAAMJ,IAXTxjD,GAASrB,EAAAsB,YAAYuiB,IAAM7jB,EAAAsB,YAAYuiB,IACvCiqE,GAAW,EACXx/C,EAAWu7C,EAAGjoC,SACdmtC,EAASlF,EAAGx2E,IACRhS,EAAQrB,EAAAsB,YAAY8iB,UACtBzmB,KAAKohB,MACH/H,EAAAgI,eAAeisE,gCACfpB,EAAG9nF,MAAM8sF,EAAeC,GAAc,aAMnCjF,EAAGnlC,KAAKzkD,EAAAC,MAAMwR,eAEvB48C,GAAgB,GADhBjtD,GAASrB,EAAAsB,YAAYoQ,aAET1R,EAAAsB,YAAYgT,QACtB3W,KAAKohB,MACH/H,EAAAgI,eAAeisE,gCACfpB,EAAG9nF,MAAM0sF,EAAaC,GAAY,UAGlCrtF,EAAQrB,EAAAsB,YAAY+iB,UACtB1mB,KAAKohB,MACH/H,EAAAgI,eAAeisE,gCACfpB,EAAG9nF,MAAM4sF,EAAeC,GAAc,YAGtCvtF,EAAQrB,EAAAsB,YAAY8iB,UACtBzmB,KAAKohB,MACH/H,EAAAgI,eAAeisE,gCACfpB,EAAG9nF,MAAM8sF,EAAeC,GAAc,eAMzCxgC,IAAkBu7B,EAAGplC,iBAKxB,OAJA9mD,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAEE,KAGT,IAAIxD,EAAO+vD,EACPp3C,EAAA/V,KAAK0E,4BAA4BgkF,EAAG9nF,SACpCmV,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SACxD0H,EAA6C,KACjD,GAAIogF,EAAGnlC,KAAKzkD,EAAAC,MAAMk/C,UAAW,CAC3B,IAAI4vC,EAAsBnF,EAAGjoC,SAE7B,KADAn4C,EAAiB9L,KAAKgvF,oBAAoB9C,IACrB,OAAO,KACxBv7B,EACF3wD,KAAKohB,MACH/H,EAAAgI,eAAeiwE,2DACfpF,EAAG9nF,MAAMitF,EAAqBnF,EAAGx2E,MAE1BmS,GAAYsoE,EACrBnwF,KAAKohB,MACH/H,EAAAgI,eAAekwE,wCACfrF,EAAG9nF,MAAMitF,EAAqBnF,EAAGx2E,MAGnChS,GAASrB,EAAAsB,YAAY6f,QAKzB,GAAI0oE,EAAGnlC,KAAKzkD,EAAAC,MAAMmiD,WAAY,CAC5B,IAAIwrC,EAAiBhE,EAAGjoC,SACpB9+C,EAAanF,KAAKovF,gBAAgBlD,EAAIv7B,GAC1C,IAAKxrD,EAAY,OAAO,KACxB,IAAI2nB,EAAW9sB,KAAKisF,oBACpB,GAAIt7B,EACF,IAAK,IAAItwD,EAAI,EAAGuG,EAAIzB,EAAW0B,OAAQxG,EAAIuG,IAAKvG,EAAG,CACjD,IAAIsnE,EAAYxiE,EAAW9E,GAC3B,GAAIsnE,EAAU5jE,MACZ1B,EAAAsB,YAAYq9C,OACZ3+C,EAAAsB,YAAYo9C,UACZ1+C,EAAAsB,YAAYm9C,QACZz+C,EAAAsB,YAAY8iB,UACX,CACD,IAAI5U,EAA2B0H,EAAA/V,KAAKsL,uBAClC64D,EAAU/mE,KACV+mE,EAAUtjE,KACV,KACA,KACAsjE,EAAUjkE,MAAQrB,EAAAsB,YAAYipB,SAC9B+6C,EAAUvjE,OAEZyN,EAAyB4F,eAAiBpX,EAC1CwR,EAAyBpO,OAASA,EAClCkkE,EAAU91D,yBAA2BA,EACrCpO,EAAOuI,QAAQyZ,KAAK5T,SAGfgW,EACL1iB,EAAW0B,QACb7G,KAAKohB,MACH/H,EAAAgI,eAAeivE,sCACf1vF,EAAKwD,OAGA+rF,IACgB,GAArBhrF,EAAW0B,QACb7G,KAAKohB,MACH/H,EAAAgI,eAAe+uE,+CACfxvF,EAAKwD,OAGLe,EAAW0B,QAAU1B,EAAW,GAAGJ,aACrC/E,KAAKohB,MACH/H,EAAAgI,eAAegvE,oDACfzvF,EAAKwD,QAKX,IAAIgB,EAAoC,KACxC,GAAI8mF,EAAGnlC,KAAKzkD,EAAAC,MAAM+iD,QAahB,GAZI1kD,EAAKgC,MAAQ2W,EAAA9W,SAASsR,YACxB/T,KAAKohB,MACH/H,EAAAgI,eAAemwE,2DACftF,EAAG9nF,SAEI+rF,GACTnwF,KAAKohB,MACH/H,EAAAgI,eAAeowE,oDACfvF,EAAG9nF,WAGPgB,EAAapF,KAAKytF,UAAUvB,EAAItrF,EAAKgC,MAAQ2W,EAAA9W,SAASsR,aAAeo8E,IACpD,OAAO,UAExB/qF,EAAamU,EAAA/V,KAAKgB,kBAAkB0nF,EAAG9nF,MAAM8nF,EAAGx2E,MAC3Cy6E,GAAYvvF,EAAKgC,MAAQ2W,EAAA9W,SAASsR,aACrC/T,KAAKohB,MACH/H,EAAAgI,eAAe8tC,cACf/pD,EAAWhB,OAKjB,IAAIgL,EAAYmK,EAAA/V,KAAK0B,gBACnBC,EACAC,EACA0nB,GACA,EACAo/D,EAAG9nF,MAAM8rF,EAAgBhE,EAAGx2E,MAG1BrG,EAAyB,KAC7B,GAAI68E,EAAGnlC,KAAKzkD,EAAAC,MAAMqjD,YAahB,GAZIliD,EAAQrB,EAAAsB,YAAY8f,QACtBzjB,KAAKohB,MACH/H,EAAAgI,eAAeovC,yDACfy7B,EAAG9nF,SAEIV,EAAQrB,EAAAsB,YAAY+iB,UAC7B1mB,KAAKohB,MACH/H,EAAAgI,eAAeqwE,qEACfxF,EAAG9nF,QAASxD,EAAKoF,QAGrBqJ,EAAOrP,KAAKuwF,oBAAoBrE,GAAI,IACzB,OAAO,UACPxoF,EAAQrB,EAAAsB,YAAY8f,SAAa6C,GAC5CtmB,KAAKohB,MACH/H,EAAAgI,eAAeqvC,gFACfw7B,EAAG9nF,SAIP,IAAIutF,EAAYp4E,EAAA/V,KAAK+L,wBACnB3O,EACAkL,EACAsD,EACAC,EACApD,EACAvI,EACAwoF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAGxB,OADAw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPosC,EAEF,GAAIhhC,EACT3wD,KAAKohB,MACH/H,EAAAgI,eAAeuwE,sCACfhxF,EAAKwD,WAGF,KAAIyjB,IAAYsoE,EAOhB,CACDzsF,EAAQrB,EAAAsB,YAAY+iB,UACtB1mB,KAAKohB,MACH/H,EAAAgI,eAAeisE,gCACfpB,EAAG9nF,MAAM4sF,EAAeC,GAAc,YAItCvtF,EAAQrB,EAAAsB,YAAYsiB,KACtBjmB,KAAKohB,MACH/H,EAAAgI,eAAeisE,gCACfpB,EAAG9nF,MAzOW,EACF,GAwOgB,OAI5BV,EAAQrB,EAAAsB,YAAYuiB,KACtBlmB,KAAKohB,MACH/H,EAAAgI,eAAeisE,gCACfpB,EAAG9nF,MAAMusC,EAAUygD,GAAS,OAIhC,IAAI/sF,EAA8B,KAClC,GAAI6nF,EAAGnlC,KAAKzkD,EAAAC,MAAM+iD,QAEhB,KADAjhD,EAAOrE,KAAKytF,UAAUvB,IACX,OAAO,UAElBlsF,KAAKohB,MACH/H,EAAAgI,eAAe8tC,cACf+8B,EAAG9nF,SAGP,IAAIW,EAAiC,KACrC,GAAImnF,EAAGnlC,KAAKzkD,EAAAC,MAAM0gD,WAChBl+C,EAAc/E,KAAK6uF,gBAAgB3C,IACjB,OAAO,KAE3B,IAAI2F,EAAWt4E,EAAA/V,KAAKsL,uBAClBlO,EACAyD,EACAU,EACAkH,EACAvI,EACAwoF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAGxB,OADAw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPssC,EApDP7xF,KAAKohB,MACH/H,EAAAgI,eAAeqvC,gFACf9vD,EAAKwD,OAoDT,OAAO,MAGTkjF,EAAArlF,UAAAgrF,eAAA,SACEf,EACAxoF,EACAuI,EACAmgF,GAKA,GAAIF,EAAGplC,iBAAkB,CACvB,IAAIj7C,EAAa0N,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SACzE,GAAI8nF,EAAGnlC,KAAKzkD,EAAAC,MAAMqjD,WAAY,CAS5B,IARA,IAAI55C,EAAU,IAAI+J,MACdrU,EAAK6X,EAAA/V,KAAKiM,2BACZ5D,EACAG,EACAC,EACAvI,EACAwoF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,OAEhBw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,aAAa,CACjC,IAAIhvC,EAAS7W,KAAKmsF,uBAAuBD,EAAIxqF,GAC7C,IAAKmV,EAAQ,OAAO,KACpBA,EAAOpT,OAAS/B,EAChBsK,EAAQyZ,KAAK5O,GAGf,OADAq1E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACP7jD,EAEP1B,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,UAIhBpE,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAGP,OAAO,MAGTkjF,EAAArlF,UAAAorF,YAAA,SACEnB,EACAxoF,EACA0oF,GAKA,IAAIr/E,EAAuC,KAC3C,GAAIm/E,EAAGnlC,KAAKzkD,EAAAC,MAAMqjD,WAAY,CAE5B,IADA,IAAI55C,EAAU,IAAI+J,OACVm2E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,aAAa,CAC/B,IAAIhvC,EAAS7W,KAAK8xF,kBAAkB5F,GACpC,IAAKr1E,EAAQ,OAAO,KAEtB,GADE7K,EAAQyZ,KAAK5O,IACVq1E,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,OAAQ,CACzB,GAAIo4E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,YAChB,MAMA,OAJA7lD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,MAIb,GAAI8nF,EAAGnlC,KAAKzkD,EAAAC,MAAM89C,MAAO,CACvB,IAAI6rC,EAAGnlC,KAAKzkD,EAAAC,MAAMkiD,eAOhB,OAJAzkD,KAAKohB,MACH/H,EAAAgI,eAAeoG,wBACfykE,EAAG9nF,SAEE,KANP2I,EAAOwM,EAAA/V,KAAKiH,8BAA8ByhF,EAAGz4C,aAAcy4C,EAAG9nF,SAgBlE,OALqB,QADjBkJ,GADA6lC,EAAM55B,EAAA/V,KAAKsJ,sBAAsBd,EAASe,EAAMrJ,EAAOwoF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,OAC1DpI,eACOtN,KAAK8rF,QAAQ7oE,IAAI3V,KAC7CtN,KAAK6rF,QAAQpmE,KAAKnY,GAClBtN,KAAK8rF,QAAQ1iE,IAAI9b,IAEnB4+E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,EACF,GAAI+4C,EAAGnlC,KAAKzkD,EAAAC,MAAM2/C,UACvB,GAAIgqC,EAAGnlC,KAAKzkD,EAAAC,MAAM89C,MAAO,CACvB,GAAI6rC,EAAGnlC,KAAKzkD,EAAAC,MAAMkiD,eAAgB,CAChC13C,EAAOwM,EAAA/V,KAAKiH,8BAA8ByhF,EAAGz4C,aAAcy4C,EAAG9nF,SAC9D,IAAI+uC,EAAM55B,EAAA/V,KAAKsJ,sBAAsB,KAAMC,EAAMrJ,EAAOwoF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAC1EpI,EAAe2E,OAAOkhC,EAAI7lC,cAC1BD,EAAS6+E,EAAG7+E,OAQhB,OAPKA,EAAOmI,cAAanI,EAAOmI,YAAc,IAAI2T,KAClD9b,EAAOmI,YAAY4T,IAAI9b,GAClBtN,KAAK8rF,QAAQ7oE,IAAI3V,KACpBtN,KAAK6rF,QAAQpmE,KAAKnY,GAClBtN,KAAK8rF,QAAQ1iE,IAAI9b,IAEnB4+E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,EAEPnzC,KAAKohB,MACH/H,EAAAgI,eAAeoG,wBACfykE,EAAG9nF,cAIPpE,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,aAIhBpE,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAGhB,OAAO,MAGTkjF,EAAArlF,UAAA6vF,kBAAA,SACE5F,GAKA,GAAIA,EAAGplC,iBAAkB,CACvB,IAAIj7C,EAAa0N,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SACrE2tF,EAA4C,KAChD,GAAI7F,EAAGnlC,KAAKzkD,EAAAC,MAAMk9C,IAAK,CACrB,IAAIysC,EAAGllC,qBAOL,OAJAhnD,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAEE,KANP2tF,EAAex4E,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SAS3E,OAAOmV,EAAA/V,KAAKmK,mBACV9B,EACAkmF,EACAA,EACIzvF,EAAAE,MAAM8iB,KAAKzZ,EAAWzH,MAAO2tF,EAAa3tF,OAC1CyH,EAAWzH,OAQnB,OALEpE,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAGA,MAGTkjF,EAAArlF,UAAAkrF,YAAA,SACEjB,GAOA,IAAIE,EAAWF,EAAGjoC,SACdj4C,EAAsC,KACtCuC,EAA6C,KAC7CyjF,GAAW,EACf,GAAI9F,EAAGnlC,KAAKzkD,EAAAC,MAAMqjD,WAEhB,IADA55C,EAAU,IAAI+J,OACNm2E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,aAAa,CACjC,IAAIhvC,EAAS7W,KAAKiyF,uBAAuB/F,GACzC,IAAKr1E,EAAQ,OAAO,KAEpB,GADA7K,EAAQyZ,KAAK5O,IACRq1E,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,OAAQ,CACzB,GAAIo4E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,YAChB,MAMA,OAJA7lD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,WAIR,GAAI8nF,EAAGnlC,KAAKzkD,EAAAC,MAAM2/C,UAAW,CAClC,IAAIgqC,EAAGnlC,KAAKzkD,EAAAC,MAAMk9C,IAehB,OAJAz/C,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,MAEP,KAdP,IAAI8nF,EAAGplC,iBAOL,OAJA9mD,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAEE,KANPmK,EAAgBgL,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,cAgB5E4tF,GAAW,EAGb,GAAIA,GAAY9F,EAAGnlC,KAAKzkD,EAAAC,MAAM89C,MAAO,CACnC,GAAI6rC,EAAGnlC,KAAKzkD,EAAAC,MAAMkiD,eAAgB,CAChC,IAAI13C,EAAOwM,EAAA/V,KAAKiH,8BAA8ByhF,EAAGz4C,aAAcy4C,EAAG9nF,SAC9D+uC,OAAG,EACH5kC,GACF0D,QAAQjG,GACRmnC,EAAM55B,EAAA/V,KAAKiL,kCAAkCF,EAAexB,EAAMm/E,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,OAExFy9B,EAAM55B,EAAA/V,KAAK2K,sBAAsBnC,EAASe,EAAMm/E,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAExE,IAAIpI,EAAe6lC,EAAI7lC,aAMvB,OALKtN,KAAK8rF,QAAQ7oE,IAAI3V,KACpBtN,KAAK6rF,QAAQpmE,KAAKnY,GAClBtN,KAAK8rF,QAAQ1iE,IAAI9b,IAEnB4+E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,EAEPnzC,KAAKohB,MACH/H,EAAAgI,eAAeoG,wBACfykE,EAAG9nF,cAIPpE,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,QAGhB,OAAO,MAGTkjF,EAAArlF,UAAAgwF,uBAAA,SACE/F,GAKA,GAAIA,EAAGllC,qBAAsB,CAC3B,IAAIn7C,EAAa0N,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SACrE2tF,EAA4C,KAChD,GAAI7F,EAAGnlC,KAAKzkD,EAAAC,MAAMk9C,IAAK,CACrB,IAAIysC,EAAGplC,iBAOL,OAJA9mD,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAEE,KANP2tF,EAAex4E,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SAS3E,OAAOmV,EAAA/V,KAAKkL,wBACV7C,EACAkmF,EACAA,EACIzvF,EAAAE,MAAM8iB,KAAKzZ,EAAWzH,MAAO2tF,EAAa3tF,OAC1CyH,EAAWzH,OAQnB,OALEpE,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAGA,MAGTkjF,EAAArlF,UAAAirF,kBAAA,SACEhB,EACAE,GAKA,GAAIF,EAAGplC,iBAAkB,CACvB,IAAIirC,EAAex4E,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SAC3E,GAAI8nF,EAAGnlC,KAAKzkD,EAAAC,MAAM0gD,QAAS,CACzB,GAAIipC,EAAGplC,iBAAkB,CACvB,IAAIj7C,EAAa0N,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SACrE+uC,EAAM55B,EAAA/V,KAAKgK,4BAA4B3B,EAAYkmF,EAAc7F,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAE3F,OADAw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,EAEPnzC,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,cAIPpE,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,UAIhBpE,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAGP,OAAO,MAGTkjF,EAAArlF,UAAA8qF,eAAA,SACEb,EACAgG,QAAA,IAAAA,OAAA,GAKA,IAAIhrC,EAAQglC,EAAGjlC,OAEX36C,EAA8B,KAClC,OAFY4/E,EAAGxqE,QAGb,KAAKpf,EAAAC,MAAMwU,MACTzK,EAAYtM,KAAKmyF,WAAWjG,GAC5B,MAEF,KAAK5pF,EAAAC,MAAMsnB,MACTvd,EAAYtM,KAAK6sF,cAAcX,EAAI7pF,EAAAsB,YAAYkmB,MAAO,KAAMqiE,EAAGjoC,UAC/D,MAEF,KAAK3hD,EAAAC,MAAMyU,SACT1K,EAAYtM,KAAKoyF,cAAclG,GAC/B,MAEF,KAAK5pF,EAAAC,MAAM0U,GACT3K,EAAYtM,KAAKqyF,iBAAiBnG,GAClC,MAEF,KAAK5pF,EAAAC,MAAMmV,IACTpL,EAAYtM,KAAKsyF,kBAAkBpG,GACnC,MAEF,KAAK5pF,EAAAC,MAAMoV,GACTrL,EAAYtM,KAAKuyF,iBAAiBrG,GAClC,MAEF,KAAK5pF,EAAAC,MAAMm+C,IACTp0C,EAAYtM,KAAK6sF,cAAcX,EAAI7pF,EAAAsB,YAAY+8C,IAAK,KAAMwrC,EAAGjoC,UAC7D,MAEF,KAAK3hD,EAAAC,MAAM2+C,IACT50C,EAAYtM,KAAK6sF,cAAcX,EAAI7pF,EAAAsB,YAAYC,KAAM,KAAMsoF,EAAGjoC,UAC9D,MAEF,KAAK3hD,EAAAC,MAAMqjD,UACTt5C,EAAYtM,KAAKuwF,oBAAoBrE,EAAIgG,GACzC,MAEF,KAAK5vF,EAAAC,MAAMwV,OACLm6E,GACFlyF,KAAKohB,MACH/H,EAAAgI,eAAemxE,2DACftG,EAAG9nF,SAGPkI,EAAYtM,KAAK+uF,YAAY7C,GAC7B,MAEF,KAAK5pF,EAAAC,MAAMgjD,UACT,OAAOhsC,EAAA/V,KAAKgJ,qBAAqB0/E,EAAG9nF,MAAM8nF,EAAGjoC,WAE/C,KAAK3hD,EAAAC,MAAM0V,OACT3L,EAAYtM,KAAKyyF,qBAAqBvG,GACtC,MAEF,KAAK5pF,EAAAC,MAAM2V,MACT5L,EAAYtM,KAAK0yF,oBAAoBxG,GACrC,MAEF,KAAK5pF,EAAAC,MAAM4V,IACT7L,EAAYtM,KAAK2yF,kBAAkBzG,GACnC,MAEF,KAAK5pF,EAAAC,MAAM+V,KACThM,EAAYtM,KAAK4yF,mBAAmB1G,GACpC,MAEF,KAAK5pF,EAAAC,MAAMgW,MACTjM,EAAYtM,KAAK6yF,oBAAoB3G,GACrC,MAEF,KAAK5pF,EAAAC,MAAMkP,KACT,GAAIy6E,EAAGzlC,MAAK,EAAOnkD,EAAAi9C,mBAAmB8G,SAAW/jD,EAAAC,MAAMW,WAAY,CACjEoJ,EAAYtM,KAAKotF,qBAAqBlB,EAAI7pF,EAAAsB,YAAYC,KAAM,KAAMsoF,EAAGjoC,UACrE,MAIJ,QACEioC,EAAG5kC,MAAMJ,GACT56C,EAAYtM,KAAK8yF,yBAAyB5G,GAU9C,OANK5/E,EAIH4/E,EAAG7kC,QAAQH,IAHXglC,EAAG5kC,MAAMJ,GACTlnD,KAAKssF,cAAcJ,IAId5/E,GAGTg7E,EAAArlF,UAAAsuF,oBAAA,SACErE,EACAgG,GAOA,IAFA,IAAI9F,EAAWF,EAAGjoC,SACd14C,EAAa,IAAIwK,OACbm2E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,aAAa,CACjC,IAAIqB,EAAQglC,EAAGjlC,OACX36C,EAAYtM,KAAK+sF,eAAeb,EAAIgG,GACxC,GAAK5lF,EAKH4/E,EAAG7kC,QAAQH,GACX37C,EAAWka,KAAKnZ,OANF,CACd,GAAI4/E,EAAG5qC,OAASh/C,EAAAC,MAAMikD,UAAW,OAAO,KACxC0lC,EAAG5kC,MAAMJ,GACTlnD,KAAKssF,cAAcJ,IAMvB,IAAI/4C,EAAM55B,EAAA/V,KAAK8H,qBAAqBC,EAAY2gF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAEtE,OADAw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,GAGTm0C,EAAArlF,UAAAkwF,WAAA,SACEjG,GAKA,IAAIrgF,EAA0C,KAC1CqgF,EAAGzlC,MAAK,IAASnkD,EAAAC,MAAMW,YAAegpF,EAAG9nC,qBAC3C8nC,EAAGxqE,KAAKpf,EAAAi9C,mBAAmB8G,QAC3Bx6C,EAAa0N,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,UAEvE,IAAI+uC,EAAM55B,EAAA/V,KAAKiI,qBAAqBI,EAAYqgF,EAAG9nF,SAEnD,OADA8nF,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,GAGTm0C,EAAArlF,UAAAmwF,cAAA,SACElG,GAKA,IAAIrgF,EAA0C,KAC1CqgF,EAAGzlC,MAAK,IAASnkD,EAAAC,MAAMW,YAAegpF,EAAG9nC,qBAC3C8nC,EAAGxqE,KAAKpf,EAAAi9C,mBAAmB8G,QAC3Bx6C,EAAa0N,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,UAEvE,IAAI+uC,EAAM55B,EAAA/V,KAAK2I,wBAAwBN,EAAYqgF,EAAG9nF,SAEtD,OADA8nF,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,GAGTm0C,EAAArlF,UAAAowF,iBAAA,SACEnG,GAKA,IAAIE,EAAWF,EAAGjoC,SACd33C,EAAYtM,KAAK+sF,eAAeb,GACpC,IAAK5/E,EAAW,OAAO,KAEvB,GAAI4/E,EAAGnlC,KAAKzkD,EAAAC,MAAMgW,OAEhB,GAAI2zE,EAAGnlC,KAAKzkD,EAAAC,MAAMmiD,WAAY,CAC5B,IAAIr6C,EAAYrK,KAAK6uF,gBAAgB3C,GACrC,IAAK7hF,EAAW,OAAO,KAEvB,GAAI6hF,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAAa,CAC7B,IAAIxR,EAAM55B,EAAA/V,KAAK6I,kBAA6BC,EAAuBjC,EAAW6hF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAEpG,OADAw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,EAEPnzC,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,UAIhBpE,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,UAIhBpE,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,SAGhB,OAAO,MAGTkjF,EAAArlF,UAAA6wF,yBAAA,SACE5G,GAKA,IAAI9lF,EAAOpG,KAAK6uF,gBAAgB3C,GAChC,IAAK9lF,EAAM,OAAO,KAElB,IAAI+sC,EAAM55B,EAAA/V,KAAKqK,0BAA0BzH,GAEzC,OADA8lF,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,GAGTm0C,EAAArlF,UAAAqwF,kBAAA,SACEpG,GAKA,IAAIE,EAAWF,EAAGjoC,SAElB,GAAIioC,EAAGnlC,KAAKzkD,EAAAC,MAAMmiD,WAAY,CAC5B,IAAI3/C,EAAgC,KAEpC,GAAImnF,EAAGnlC,KAAKzkD,EAAAC,MAAMsnB,OAChB9kB,EAAc/E,KAAK6sF,cAAcX,EAAI7pF,EAAAsB,YAAYkmB,MAAO,KAAMqiE,EAAGjoC,eAC5D,GAAIioC,EAAGnlC,KAAKzkD,EAAAC,MAAMm+C,KACvB37C,EAAc/E,KAAK6sF,cAAcX,EAAI7pF,EAAAsB,YAAY+8C,IAAK,KAAMwrC,EAAGjoC,eAC1D,GAAIioC,EAAGnlC,KAAKzkD,EAAAC,MAAM2+C,KACvBn8C,EAAc/E,KAAK6sF,cAAcX,EAAI7pF,EAAAsB,YAAYC,KAAM,KAAMsoF,EAAGjoC,eAE3D,IAAKioC,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,cACxBxgD,EAAc/E,KAAK8yF,yBAAyB5G,IAC1B,OAAO,KAG3B,GAAIA,EAAG5qC,OAASh/C,EAAAC,MAAMgjD,UAAW,CAC/B,IAAIl7C,EAAwC,KAC5C,IAAK6hF,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,cACjBl7C,EAAYrK,KAAK8yF,yBAAyB5G,IAC1B,OAAO,KAGzB,GAAIA,EAAG5qC,OAASh/C,EAAAC,MAAMgjD,UAAW,CAC/B,IAAIt2C,EAAiC,KACrC,IAAKi9E,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAAa,CAE9B,KADA11C,EAAcjP,KAAK6uF,gBAAgB3C,IACjB,OAAO,KAEzB,IAAKA,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAKjB,OAJA3kD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,KAIX,IAAIkI,EAAYtM,KAAK+sF,eAAeb,GACpC,OAAK5/E,EAEEiN,EAAA/V,KAAKwL,mBACVjK,EACAsF,EACIA,EAAUpD,WACV,KACJgI,EACA3C,EACA4/E,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MATD,KAavB1V,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,UAIhBpE,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,UAIhBpE,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAGhB,OAAO,MAGTkjF,EAAArlF,UAAAswF,iBAAA,SACErG,GAKA,IAAIE,EAAWF,EAAGjoC,SAClB,GAAIioC,EAAGnlC,KAAKzkD,EAAAC,MAAMmiD,WAAY,CAC5B,IAAIr6C,EAAYrK,KAAK6uF,gBAAgB3C,GACrC,IAAK7hF,EAAW,OAAO,KACvB,GAAI6hF,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAAa,CAC7B,IAAIr4C,EAAYtM,KAAK+sF,eAAeb,GACpC,IAAK5/E,EAAW,OAAO,KACvB,IAAIymF,EAAkC,KACtC,OAAI7G,EAAGnlC,KAAKzkD,EAAAC,MAAM29C,SAChB6yC,EAAgB/yF,KAAK+sF,eAAeb,IACT,KAEtB3yE,EAAA/V,KAAKuK,kBACV1D,EACAiC,EACAymF,EACA7G,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAGxB1V,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,UAIhBpE,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAGhB,OAAO,MAGTkjF,EAAArlF,UAAAwwF,qBAAA,SACEvG,GAKA,IAAIE,EAAWF,EAAGjoC,SAClB,GAAIioC,EAAGnlC,KAAKzkD,EAAAC,MAAMmiD,WAAY,CAC5B,IAAIr6C,EAAYrK,KAAK6uF,gBAAgB3C,GACrC,IAAK7hF,EAAW,OAAO,KACvB,GAAI6hF,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAAa,CAC7B,GAAIunC,EAAGnlC,KAAKzkD,EAAAC,MAAMqjD,WAAY,CAE5B,IADA,IAAI91C,EAAQ,IAAIiG,OACRm2E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,aAAa,CACjC,IAAImtC,EAAQhzF,KAAKizF,gBAAgB/G,GACjC,IAAK8G,EAAO,OAAO,KACnBljF,EAAM2V,KAAiButE,GAEzB,IAAI7/C,EAAM55B,EAAA/V,KAAKqM,sBAAsBxF,EAAWyF,EAAOo8E,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAE7E,OADAw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,EAEPnzC,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,UAIhBpE,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,UAIhBpE,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAGhB,OAAO,MAGTkjF,EAAArlF,UAAAgxF,gBAAA,SACE/G,GAGA,IACI3gF,EACAe,EAFA8/E,EAAWF,EAAGjoC,SAMlB,GAAIioC,EAAGnlC,KAAKzkD,EAAAC,MAAMq9C,MAAO,CACvB,IAAIl0C,EAAQ1L,KAAK6uF,gBAAgB3C,GACjC,IAAKxgF,EAAO,OAAO,KACnB,GAAIwgF,EAAGnlC,KAAKzkD,EAAAC,MAAM+iD,OAAQ,CAExB,IADA/5C,EAAa,IAAIwK,MACVm2E,EAAGzlC,QAAUnkD,EAAAC,MAAMq9C,MAAQssC,EAAGhoC,WAAa5hD,EAAAC,MAAMy9C,SAAWksC,EAAGhoC,WAAa5hD,EAAAC,MAAMsjD,YAAY,CAEnG,KADAv5C,EAAYtM,KAAK+sF,eAAeb,IAChB,OAAO,KACvB3gF,EAAWka,KAAKnZ,GAElB,OAAOiN,EAAA/V,KAAKwM,iBAAiBtE,EAAOH,EAAY2gF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAEtE1V,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,UAMX,GAAI8nF,EAAGnlC,KAAKzkD,EAAAC,MAAMy9C,SAAU,CACjC,GAAIksC,EAAGnlC,KAAKzkD,EAAAC,MAAM+iD,OAAQ,CAExB,IADA/5C,EAAa,IAAIwK,MACVm2E,EAAGzlC,QAAUnkD,EAAAC,MAAMq9C,MAAQssC,EAAGhoC,WAAa5hD,EAAAC,MAAMy9C,SAAWksC,EAAGhoC,WAAa5hD,EAAAC,MAAMsjD,YAAY,CAEnG,KADAv5C,EAAYtM,KAAK+sF,eAAeb,IAChB,OAAO,KACvB3gF,EAAWka,KAAKnZ,GAElB,OAAOiN,EAAA/V,KAAKwM,iBAAiB,KAAMzE,EAAY2gF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAErE1V,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,UAIhBpE,KAAKohB,MACH/H,EAAAgI,eAAe6xE,0BACfhH,EAAG9nF,SAGP,OAAO,MAGTkjF,EAAArlF,UAAAywF,oBAAA,SACExG,GAKA,IAAIE,EAAWF,EAAGjoC,SACdh9C,EAAajH,KAAK6uF,gBAAgB3C,GACtC,IAAKjlF,EAAY,OAAO,KACxB,IAAIksC,EAAM55B,EAAA/V,KAAK0M,qBAAiCjJ,EAAYilF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAElF,OADAw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,GAGTm0C,EAAArlF,UAAA0wF,kBAAA,SACEzG,GAQA,IACIxmF,EADA0mF,EAAWF,EAAGjoC,SAElB,GAAIioC,EAAGnlC,KAAKzkD,EAAAC,MAAMqjD,WAAY,CAE5B,IADA,IAAIr6C,EAAa,IAAIwK,OACbm2E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,aAAa,CAEjC,KADAngD,EAAO1F,KAAK+sF,eAAeb,IAChB,OAAO,KAClB3gF,EAAWka,KAAgB/f,GAE7B,IAAI2K,EAA6C,KAC7CC,EAAsC,KACtCC,EAAwC,KAC5C,GAAI27E,EAAGnlC,KAAKzkD,EAAAC,MAAMs9C,OAAQ,CACxB,IAAKqsC,EAAGnlC,KAAKzkD,EAAAC,MAAMmiD,WAKjB,OAJA1kD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,KAET,IAAK8nF,EAAGplC,iBAKN,OAJA9mD,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAEE,KAGT,GADAiM,EAAgBkJ,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,UACnE8nF,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAKjB,OAJA3kD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,KAET,IAAK8nF,EAAGnlC,KAAKzkD,EAAAC,MAAMqjD,WAKjB,OAJA5lD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,KAGT,IADAkM,MACQ47E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,aAAa,CAEjC,KADAngD,EAAO1F,KAAK+sF,eAAeb,IAChB,OAAO,KAClB57E,EAAgBmV,KAAgB/f,IAGpC,GAAIwmF,EAAGnlC,KAAKzkD,EAAAC,MAAM69C,SAAU,CAC1B,IAAK8rC,EAAGnlC,KAAKzkD,EAAAC,MAAMqjD,WAKjB,OAJA5lD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,KAGT,IADAmM,MACQ27E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,aAAa,CAEjC,KADAngD,EAAO1F,KAAK+sF,eAAeb,IAChB,OAAO,KAClB37E,EAAkBkV,KAAgB/f,IAGtC,IAAM4K,IAAmBC,EAKvB,OAJAvQ,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,SAEP,KAET,IAAI+uC,EAAM55B,EAAA/V,KAAK4M,mBACb7E,EACA8E,EACAC,EACAC,EACA27E,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAGxB,OADAw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,EAOT,OALEnzC,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAGT,MAGTkjF,EAAArlF,UAAAmrF,qBAAA,SACElB,EACAxoF,EACAuI,EACAmgF,GAKA,GAAIF,EAAGplC,iBAAkB,CACvB,IAAIlmD,EAAO2Y,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,SAC/D0H,EAA6C,KACjD,GAAIogF,EAAGnlC,KAAKzkD,EAAAC,MAAMk/C,UAAW,CAE3B,KADA31C,EAAiB9L,KAAKgvF,oBAAoB9C,IACrB,OAAO,KAC5BxoF,GAASrB,EAAAsB,YAAY6f,QAEvB,GAAI0oE,EAAGnlC,KAAKzkD,EAAAC,MAAM0gD,QAAS,CACzB,IAAI5+C,EAAOrE,KAAKytF,UAAUvB,GAC1B,IAAK7nF,EAAM,OAAO,KAClB,IAAI8uC,EAAM55B,EAAA/V,KAAKiN,sBACb7P,EACAkL,EACAzH,EACA4H,EACAvI,EACAwoF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAGxB,OADAw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,EAEPnzC,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,UAIhBpE,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAGP,OAAO,MAGTkjF,EAAArlF,UAAA2wF,mBAAA,SACE1G,GAKA,IAAIE,EAAWF,EAAGjoC,SACdh9C,EAAajH,KAAK6uF,gBAAgB3C,EAAE,IACxC,IAAKjlF,EAAY,OAAO,KACxB,IAAIksC,EAAM55B,EAAA/V,KAAKwN,oBAAoB/J,EAAYilF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAErE,OADAw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,GAGTm0C,EAAArlF,UAAA4wF,oBAAA,SACE3G,GAKA,IAAIE,EAAWF,EAAGjoC,SAClB,GAAIioC,EAAGnlC,KAAKzkD,EAAAC,MAAMmiD,WAAY,CAC5B,IAAIz9C,EAAajH,KAAK6uF,gBAAgB3C,GACtC,IAAKjlF,EAAY,OAAO,KACxB,GAAIilF,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAAa,CAC7B,IAAIr4C,EAAYtM,KAAK+sF,eAAeb,GACpC,IAAK5/E,EAAW,OAAO,KACvB,IAAI6mC,EAAM55B,EAAA/V,KAAK0N,qBAAqBjK,EAAYqF,EAAW4/E,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAEjF,OADAw2E,EAAGnlC,KAAKzkD,EAAAC,MAAMgjD,WACPpS,EAEPnzC,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,UAIhBpE,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAGhB,OAAO,MAMTkjF,EAAArlF,UAAAkxF,qBAAA,SACEjH,GAGA,IAAI5qC,EAAQ4qC,EAAGxqE,KAAKpf,EAAAi9C,mBAAmB8G,QACnC+lC,EAAWF,EAAGjoC,SACdmvC,EA6mBR,SAAkCxwF,GAChC,OAAQA,GACN,KAAKN,EAAAC,MAAMi/C,YAAa,SACxB,KAAKl/C,EAAAC,MAAM6+C,MAAO,SAClB,KAAK9+C,EAAAC,MAAMsgD,YACX,KAAKvgD,EAAAC,MAAMugD,MACX,KAAKxgD,EAAAC,MAAM+Y,KACX,KAAKhZ,EAAAC,MAAMiZ,MACX,KAAKlZ,EAAAC,MAAM8/C,UACX,KAAK//C,EAAAC,MAAM+/C,YACX,KAAKhgD,EAAAC,MAAM0+C,OACX,KAAK3+C,EAAAC,MAAM+V,KACX,KAAKhW,EAAAC,MAAM09C,OAAQ,UACnB,KAAK39C,EAAAC,MAAM6R,IAAK,UAElB,SA5nBmBi/E,CAAyB/xC,GAC1C,GAAc,GAAV8xC,EAA+B,CACjC,IAAIloF,OAAO,EAKX,OAAIo2C,GAASh/C,EAAAC,MAAM6R,KACjBlJ,EAAUlL,KAAK6uF,gBAAgB3C,EAAE,KAE7BhhF,EAAQtI,MAAQ2W,EAAA9W,SAASU,KACpBoW,EAAA/V,KAAK4F,oBACO8B,EAASjE,WACTiE,EAAShH,cACTgH,EAAStF,UAC1BsmF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,OAGxB1V,KAAKohB,MACH/H,EAAAgI,eAAemE,wBACf0mE,EAAG9nF,SAGA,MAdc,MAgBrB8G,EAAUlL,KAAK6uF,gBAAgB3C,EAAIkH,KAKjC9xC,GAASh/C,EAAAC,MAAM8/C,WAAaf,GAASh/C,EAAAC,MAAM+/C,aAE3Cp3C,EAAQtI,MAAQ2W,EAAA9W,SAASS,YACzBgI,EAAQtI,MAAQ2W,EAAA9W,SAASY,eACzB6H,EAAQtI,MAAQ2W,EAAA9W,SAASa,gBAEzBtD,KAAKohB,MACH/H,EAAAgI,eAAeiyE,0FACfpoF,EAAQ9G,OAIPmV,EAAA/V,KAAK4H,4BAA4Bk2C,EAAOp2C,EAASghF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,OAhBvD,KAmBzB,IAAItP,EAA0B,KAC9B,OAAQk7C,GAEN,KAAKh/C,EAAAC,MAAMO,KAAM,OAAOyW,EAAA/V,KAAK8F,qBAAqB4iF,EAAG9nF,SACrD,KAAK9B,EAAAC,MAAMQ,KAAM,OAAOwW,EAAA/V,KAAKuH,qBAAqBmhF,EAAG9nF,SACrD,KAAK9B,EAAAC,MAAMS,MAAO,OAAOuW,EAAA/V,KAAKgF,sBAAsB0jF,EAAG9nF,SAIvD,KAAK9B,EAAAC,MAAMmiD,UAGT,GAAIwnC,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAChB,OAAO3kD,KAAK0wF,8BACVxE,EACA3yE,EAAA/V,KAAK8C,gCAAgC4lF,EAAG9nF,MAAMgoF,QAE9C,GAGJ,IAAIllC,EAAQglC,EAAGjlC,OACXssC,GAAQ,EACZ,GACE,OAAQrH,EAAGxqE,KAAKpf,EAAAi9C,mBAAmB8G,SAGjC,KAAK/jD,EAAAC,MAAMi/C,YAET,OADA0qC,EAAG5kC,MAAMJ,GACFlnD,KAAKwwF,wBAAwBtE,GAGtC,KAAK5pF,EAAAC,MAAMW,WAET,OADAgpF,EAAG3kC,iBACK2kC,EAAGxqE,QAGT,KAAKpf,EAAAC,MAAMoiD,WACT,IAAKunC,EAAGnlC,KAAKzkD,EAAAC,MAAMijD,oBAAqB,CACtC+tC,GAAQ,EACR,MAKJ,KAAKjxF,EAAAC,MAAM+iD,MAET,OADA4mC,EAAG5kC,MAAMJ,GACFlnD,KAAKwwF,wBAAwBtE,GAGtC,KAAK5pF,EAAAC,MAAMkjD,SACX,KAAKnjD,EAAAC,MAAMuR,MACT,MAIF,QACEy/E,GAAQ,EAIZ,MAGF,QACEA,GAAQ,SAILA,GAKT,OAJArH,EAAG5kC,MAAMJ,IAGT9gD,EAAOpG,KAAK6uF,gBAAgB3C,IAEvBA,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAOZprC,EAAA/V,KAAKoG,8BAA8BxD,EAAM8lF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,OANpE1V,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,MANS,KAWpB,KAAK9B,EAAAC,MAAMmjD,YAET,IADA,IAAIh/C,EAAqB,IAAIqP,OACrBm2E,EAAGnlC,KAAKzkD,EAAAC,MAAMojD,eAAe,CACnC,GAAIumC,EAAGzlC,QAAUnkD,EAAAC,MAAMuR,MACrB1N,EAAO,UAGP,KADAA,EAAOpG,KAAK6uF,gBAAgB3C,EAAI,IACrB,OAAO,KAGpB,GADAxlF,EAAmB+e,KAAKrf,IACnB8lF,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,OAAQ,CACzB,GAAIo4E,EAAGnlC,KAAKzkD,EAAAC,MAAMojD,cAChB,MAMA,OAJA3lD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,MAIb,OAAOmV,EAAA/V,KAAK+C,6BAA6BG,EAAoBwlF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAGrF,KAAKpT,EAAAC,MAAMqjD,UAKT,IAJA,IAAI4tC,EAAWtH,EAAGjoC,SACdx6C,EAAQ,IAAIsM,MACZrM,EAAS,IAAIqM,MACbnV,OAAI,GACAsrF,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,aAAa,CACjC,GAAKqmC,EAAGplC,iBAWNlmD,EAAO2Y,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,aAXvC,CACxB,IAAK8nF,EAAGnlC,KAAKzkD,EAAAC,MAAMkiD,eAKjB,OAJAzkD,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACf9B,EAAG9nF,SAEE,MAETxD,EAAO2Y,EAAA/V,KAAKiB,2BAA2BynF,EAAGz4C,aAAcy4C,EAAG9nF,UACtDJ,IAAI3B,EAAAsB,YAAY8vF,QAKvB,GADAhqF,EAAMgc,KAAK7kB,GACPsrF,EAAGnlC,KAAKzkD,EAAAC,MAAM+iD,OAAQ,CACxB,IAAIhkD,EAAQtB,KAAK6uF,gBAAgB3C,EAAI,GACrC,IAAK5qF,EAAO,OAAO,KACnBoI,EAAO+b,KAAKnkB,OACP,IAAKV,EAAKiD,GAAGxB,EAAAsB,YAAY8vF,QAO9B,OAJAzzF,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,KANPsF,EAAO+b,KAAK7kB,GAQd,IAAKsrF,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,OAAQ,CACzB,GAAIo4E,EAAGnlC,KAAKzkD,EAAAC,MAAMsjD,YAChB,MAMA,OAJA7lD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,MAIb,OAAOmV,EAAA/V,KAAKgG,8BAA8BC,EAAOC,EAAQwiF,EAAG9nF,MAAMovF,EAAUtH,EAAGx2E,MAGjF,KAAKpT,EAAAC,MAAMk/C,SACT,IAAIv6C,EAASlH,KAAKytF,UAAUvB,GAC5B,OAAKhlF,EACAglF,EAAGnlC,KAAKzkD,EAAAC,MAAMm/C,cAOnBt7C,EAAOpG,KAAK6uF,gBAAgB3C,EAAE,KAEvB3yE,EAAA/V,KAAKuD,0BACVwS,EAAA7F,cAAcggF,OACdttF,EACAc,EACAglF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MALN,MAPhB1V,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,MANW,KAiBtB,KAAK9B,EAAAC,MAAMW,WACT,OAAOqW,EAAA/V,KAAKiB,2BAA2BynF,EAAG3kC,iBAAkB2kC,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAEpF,KAAKpT,EAAAC,MAAMmS,KACT,OAAO6E,EAAA/V,KAAKqH,qBAAqBqhF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAEzD,KAAKpT,EAAAC,MAAMwR,YACT,OAAOwF,EAAA/V,KAAK0E,4BAA4BgkF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAEhE,KAAKpT,EAAAC,MAAMa,MACT,OAAOmW,EAAA/V,KAAKmH,sBAAsBuhF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAE1D,KAAKpT,EAAAC,MAAMkiD,cACT,OAAOlrC,EAAA/V,KAAKiH,8BAA8ByhF,EAAGz4C,aAAcy4C,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAEnF,KAAKpT,EAAAC,MAAM8iD,eACT,OAAO9rC,EAAA/V,KAAK0F,+BAA+BgjF,EAAG9jC,cAAe8jC,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAErF,KAAKpT,EAAAC,MAAMsiD,aACT,OAAOtrC,EAAA/V,KAAKkF,6BAA6BwjF,EAAGziC,YAAayiC,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAIjF,KAAKpT,EAAAC,MAAM4/C,MACT,IAAIwxC,EAAgBzH,EAAGnkC,oBACvB,OAAKmkC,EAAGnlC,KAAKzkD,EAAAC,MAAM4/C,OAOZ5oC,EAAA/V,KAAKwG,8BACV2pF,EACAzH,EAAGhkC,kBACHgkC,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,OATtB1V,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,MAQX,KAAK9B,EAAAC,MAAM0R,SACT,OAAOjU,KAAKwwF,wBAAwBtE,GAEtC,KAAK5pF,EAAAC,MAAMsR,MACT,OAAO7T,KAAK6wF,qBAAqB3E,GAEnC,QAYE,OAXI5qC,GAASh/C,EAAAC,MAAMikD,UACjBxmD,KAAKohB,MACH/H,EAAAgI,eAAesmC,uBACfukC,EAAG9nF,MAAMgoF,IAGXpsF,KAAKohB,MACH/H,EAAAgI,eAAeuyE,oBACf1H,EAAG9nF,SAGA,OAKbkjF,EAAArlF,UAAA4xF,qCAAA,SACE3H,GAKA,IAAIhlC,EAAQglC,EAAGjlC,OACf,IAAKilC,EAAGnlC,KAAKzkD,EAAAC,MAAMk/C,UAAW,OAAO,KACrC,IAAIv9C,EAAgB,IAAI6R,MACxB,EAAG,CACD,GAAIm2E,EAAGzlC,SAAWnkD,EAAAC,MAAMm/C,YACtB,MAEF,IAAIr9C,EAAOrE,KAAKytF,UAAUvB,GAAI,GAAM,GACpC,IAAK7nF,EAEH,OADA6nF,EAAG5kC,MAAMJ,GACF,KAEThjD,EAAcuhB,KAAKphB,SACZ6nF,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,QACvB,OAAIo4E,EAAGnlC,KAAKzkD,EAAAC,MAAMm/C,cAAgBwqC,EAAGnlC,KAAKzkD,EAAAC,MAAMmiD,WACvCxgD,GAETgoF,EAAG5kC,MAAMJ,GACF,OAGTogC,EAAArlF,UAAAusF,eAAA,SACEtC,GAMA,IADA,IAAIzmF,EAAO,IAAIsQ,OACPm2E,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,aAAa,CACjC,IAAIv+C,EAAOpG,KAAK6uF,gBAAgB3C,EAAI,GACpC,IAAK9lF,EAAM,OAAO,KAElB,GADAX,EAAKggB,KAAKrf,IACL8lF,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,OAAQ,CACzB,GAAIo4E,EAAGnlC,KAAKzkD,EAAAC,MAAMoiD,YAChB,MAMA,OAJA3kD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,MAIb,OAAOqB,GAGT6hF,EAAArlF,UAAA4sF,gBAAA,SACE3C,EACAkH,QAAA,IAAAA,MAAA,GAEAnhF,OAAiB,GAAVmhF,GAEP,IAAIhtF,EAAOpG,KAAKmzF,qBAAqBjH,GACrC,IAAK9lF,EAAM,OAAO,KAClB,IAgBIk7C,EAhBA8qC,EAAWhmF,EAAKhC,MAAMy2B,MAG1B,GAAIthB,EAAAtW,eAAemD,EAAKxD,MAEtB,IADA,IAAIsB,EAAyC,KAE3CgoF,EAAGnlC,KAAKzkD,EAAAC,MAAMmiD,YAEdnrC,EAAAhW,sBAAsB6C,EAAKxD,OAA6E,QAAnEsB,EAAgBlE,KAAK6zF,qCAAqC3H,KAC/F,CACA,IAAIzmF,EAAOzF,KAAKwuF,eAAetC,GAC/B,IAAKzmF,EAAM,OAAO,KAClBW,EAAOmT,EAAA/V,KAAKiE,qBAAqBrB,EAAMlC,EAAeuB,EAAMymF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAOtF,IAFA,IACIo+E,EADApyE,EAA0B,MAG3BoyE,EAAiBC,EAAoBzyC,EAAQ4qC,EAAGzlC,UAAY2sC,GAG7D,OADAlH,EAAGxqE,OACK4/B,GAEN,KAAKh/C,EAAAC,MAAMk9C,GACT,IAAIv4C,EAASlH,KAAKytF,UAAUvB,GAC5B,IAAKhlF,EAAQ,OAAO,KACpBd,EAAOmT,EAAA/V,KAAKuD,0BACVwS,EAAA7F,cAAc+rC,GACdr5C,EACAc,EACAglF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAExB,MAGF,KAAKpT,EAAAC,MAAM2R,WACT,IAAIlL,EAAShJ,KAAKytF,UAAUvB,GAC5B,IAAKljF,EAAQ,OAAO,KACpB5C,EAAOmT,EAAA/V,KAAKuF,2BACV3C,EACA4C,EACAkjF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAExB,MAGF,KAAKpT,EAAAC,MAAMmjD,YAET,KADAhkC,EAAO1hB,KAAK6uF,gBAAgB3C,IACjB,OAAO,KAClB,IAAKA,EAAGnlC,KAAKzkD,EAAAC,MAAMojD,cAKjB,OAJA3lD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,KAETgC,EAAOmT,EAAA/V,KAAK4E,8BACVhC,EACAsb,EACAwqE,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAExB,MAGF,KAAKpT,EAAAC,MAAM8/C,UACX,KAAK//C,EAAAC,MAAM+/C,YAEPl8C,EAAKxD,MAAQ2W,EAAA9W,SAASS,YACtBkD,EAAKxD,MAAQ2W,EAAA9W,SAASY,eACtB+C,EAAKxD,MAAQ2W,EAAA9W,SAASa,gBAEtBtD,KAAKohB,MACH/H,EAAAgI,eAAeiyE,0FACfltF,EAAKhC,OAGTgC,EAAOmT,EAAA/V,KAAKyH,6BACVq2C,EACAl7C,EACA8lF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAExB,MAGF,KAAKpT,EAAAC,MAAMkjD,SACT,IAAIn7C,EAAStK,KAAK6uF,gBAAgB3C,GAClC,IAAK5hF,EAAQ,OAAO,KACpB,IAAK4hF,EAAGnlC,KAAKzkD,EAAAC,MAAM+iD,OAKjB,OAJAtlD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEP,KAET,IAAImG,EAASvK,KAAK6uF,gBAAgB3C,EAAIkH,EAAU,EAC5C,EACD,GAEH,IAAK7oF,EAAQ,OAAO,KACpBnE,EAAOmT,EAAA/V,KAAK4G,wBACVhE,EACAkE,EACAC,EACA2hF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAExB,MAGF,KAAKpT,EAAAC,MAAMuR,MACT,IAAIkgF,GAA6B5tF,GACjC,EAAG,CAED,KADAA,EAAOpG,KAAK6uF,gBAAgB3C,EAAI,IACrB,OAAO,KAClB8H,EAAWvuE,KAAKrf,SACT8lF,EAAGnlC,KAAKzkD,EAAAC,MAAMuR,QACvB1N,EAAOmT,EAAA/V,KAAKuE,sBAAsBisF,EAAY9H,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MACpE,MAEF,QAME,KALAgM,EAAO1hB,KAAK6uF,gBAAgB3C,EAC1B+H,EAAmB3yC,GACfwyC,EACAA,EAAiB,IAEZ,OAAO,KAGlB,GAAIxyC,GAASh/C,EAAAC,MAAMuiD,IACjB,GAAIpjC,EAAK9e,MAAQ2W,EAAA9W,SAASS,WACxBkD,EAAOmT,EAAA/V,KAAKsG,+BACV1D,EACsBsb,EACtBwqE,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,UAEnB,IAAIgM,EAAK9e,MAAQ2W,EAAA9W,SAASU,KAqB/B,OAJAnD,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACftsE,EAAKtd,OAEA,KApBP,IAAI8vF,EAA+BxyE,EACnC,GAAIwyE,EAAajtF,WAAWrE,MAAQ2W,EAAA9W,SAASS,WAW3C,OAJAlD,KAAKohB,MACH/H,EAAAgI,eAAe2sE,oBACfkG,EAAajtF,WAAW7C,OAEnB,KAVP8vF,EAAajtF,WAAasS,EAAA/V,KAAKsG,+BAC7B1D,EACsB8tF,EAAajtF,WACnCilF,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAS1BtP,EAAO8tF,OAWT9tF,EAAOmT,EAAA/V,KAAK4D,uBAAuBk6C,EAAOl7C,EAAMsb,EAAMwqE,EAAG9nF,MAAMgoF,EAAUF,EAAGx2E,MAMpF,OAAOtP,GAITkhF,EAAArlF,UAAAqqF,cAAA,SAAcJ,GAGZ,IAFAA,EAAGzlC,MAAK,GACJylC,EAAG9nC,oBAAoB8nC,EAAGxqE,SAC3B,CACD,IAAIwiC,EAAYgoC,EAAGzlC,MAAK,GACxB,GACEvC,GAAa5hD,EAAAC,MAAMikD,WACnBtC,GAAa5hD,EAAAC,MAAMgjD,UACnB,CACA2mC,EAAGxqE,OACH,MAEF,GAAIwqE,EAAG9nC,mBAAoB,MAC3B,OAAQ8nC,EAAGxqE,QACT,KAAKpf,EAAAC,MAAMW,WACTgpF,EAAG3kC,iBACH,MAEF,KAAKjlD,EAAAC,MAAMkiD,cACTynC,EAAGz4C,aACH,MAEF,KAAKnxC,EAAAC,MAAM8iD,eACT6mC,EAAG9jC,cACH,MAEF,KAAK9lD,EAAAC,MAAMsiD,aACTqnC,EAAGziC,eAQX69B,EAAArlF,UAAAkyF,UAAA,SAAUjI,GAER,IAAIkI,EAAQ,EACRb,GAAQ,EACZ,GACE,OAAQrH,EAAGxqE,QACT,KAAKpf,EAAAC,MAAMikD,UACTxmD,KAAKohB,MACH/H,EAAAgI,eAAe8jC,YACf+mC,EAAG9nF,QAAS,KAEdmvF,GAAQ,EACR,MAEF,KAAKjxF,EAAAC,MAAMqjD,YACPwuC,EACF,MAEF,KAAK9xF,EAAAC,MAAMsjD,aACPuuC,IACUb,GAAQ,GACpB,MAEF,KAAKjxF,EAAAC,MAAMW,WACTgpF,EAAG3kC,iBACH,MAEF,KAAKjlD,EAAAC,MAAMkiD,cACTynC,EAAGz4C,aACH,MAEF,KAAKnxC,EAAAC,MAAM8iD,eACT6mC,EAAG9jC,cACH,MAEF,KAAK9lD,EAAAC,MAAMsiD,aACTqnC,EAAGziC,mBAIA8pC,IAEbjM,EAx1GA,CAA4BjuE,EAAAyQ,mBAw4G5B,SAASiqE,EAAoBnxF,GAC3B,OAAQA,GACN,KAAKN,EAAAC,MAAMuR,MAAO,SAClB,KAAKxR,EAAAC,MAAM0gD,OACX,KAAK3gD,EAAAC,MAAM2gD,YACX,KAAK5gD,EAAAC,MAAM4gD,aACX,KAAK7gD,EAAAC,MAAM8gD,yBACX,KAAK/gD,EAAAC,MAAM6gD,gBACX,KAAK9gD,EAAAC,MAAM+gD,aACX,KAAKhhD,EAAAC,MAAMghD,eACX,KAAKjhD,EAAAC,MAAMihD,yBACX,KAAKlhD,EAAAC,MAAMkhD,+BACX,KAAKnhD,EAAAC,MAAMmhD,2CACX,KAAKphD,EAAAC,MAAMohD,iBACX,KAAKrhD,EAAAC,MAAMshD,aACX,KAAKvhD,EAAAC,MAAMqhD,WAAY,SACvB,KAAKthD,EAAAC,MAAMkjD,SAAU,SACrB,KAAKnjD,EAAAC,MAAMygD,QAAS,SACpB,KAAK1gD,EAAAC,MAAMwgD,oBAAqB,SAChC,KAAKzgD,EAAAC,MAAMogD,IAAK,SAChB,KAAKrgD,EAAAC,MAAMqgD,MAAO,SAClB,KAAKtgD,EAAAC,MAAMmgD,UAAW,UACtB,KAAKpgD,EAAAC,MAAMs/C,cACX,KAAKv/C,EAAAC,MAAMu/C,mBACX,KAAKx/C,EAAAC,MAAMw/C,qBACX,KAAKz/C,EAAAC,MAAMy/C,0BAA2B,UACtC,KAAK1/C,EAAAC,MAAMk9C,GACX,KAAKn9C,EAAAC,MAAMg+C,GACX,KAAKj+C,EAAAC,MAAM2R,WACX,KAAK5R,EAAAC,MAAMk/C,SACX,KAAKn/C,EAAAC,MAAMm/C,YACX,KAAKp/C,EAAAC,MAAMo/C,gBACX,KAAKr/C,EAAAC,MAAMq/C,mBAAoB,UAC/B,KAAKt/C,EAAAC,MAAMggD,kBACX,KAAKjgD,EAAAC,MAAMigD,wBACX,KAAKlgD,EAAAC,MAAMkgD,oCAAqC,UAChD,KAAKngD,EAAAC,MAAM+Y,KACX,KAAKhZ,EAAAC,MAAMiZ,MAAO,UAClB,KAAKlZ,EAAAC,MAAM2/C,SACX,KAAK5/C,EAAAC,MAAM4/C,MACX,KAAK7/C,EAAAC,MAAM6/C,QAAS,UACpB,KAAK9/C,EAAAC,MAAM0/C,kBAAmB,UAC9B,KAAK3/C,EAAAC,MAAM8/C,UACX,KAAK//C,EAAAC,MAAM+/C,YAAa,UACxB,KAAKhgD,EAAAC,MAAMuiD,IACX,KAAKxiD,EAAAC,MAAM6R,IACX,KAAK9R,EAAAC,MAAMmjD,YAAa,UAE1B,SAIF,SAASuuC,EAAmBrxF,GAC1B,OAAQA,GACN,KAAKN,EAAAC,MAAM0gD,OACX,KAAK3gD,EAAAC,MAAM2gD,YACX,KAAK5gD,EAAAC,MAAM4gD,aACX,KAAK7gD,EAAAC,MAAM8gD,yBACX,KAAK/gD,EAAAC,MAAM6gD,gBACX,KAAK9gD,EAAAC,MAAM+gD,aACX,KAAKhhD,EAAAC,MAAMghD,eACX,KAAKjhD,EAAAC,MAAMihD,yBACX,KAAKlhD,EAAAC,MAAMkhD,+BACX,KAAKnhD,EAAAC,MAAMmhD,2CACX,KAAKphD,EAAAC,MAAMohD,iBACX,KAAKrhD,EAAAC,MAAMshD,aACX,KAAKvhD,EAAAC,MAAMqhD,WACX,KAAKthD,EAAAC,MAAMkjD,SACX,KAAKnjD,EAAAC,MAAM0/C,kBAAmB,OAAO,EACrC,QAAS,OAAO,GA78GPviD,EAAA4nF,SA21Gb,SAAkB+M,GAChBA,IAAA,eACAA,IAAA,iBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,kCACAA,IAAA,gBACAA,IAAA,gCACAA,IAAA,wBAtBF,CAAkB30F,EAAA20F,aAAA30F,EAAA20F","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__17__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.SUPER: // TODO\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  IGNORE,\n  EXTERNAL,\n  BUILTIN\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a: {\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.d: {\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        if (nameStr == \"ignore\") return DecoratorKind.IGNORE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is compiled. */\n  COMPILED = 1 << 21,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 22,\n  /** Is scoped. */\n  SCOPED = 1 << 23,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 24,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 25,\n  /** Is the main function. */\n  MAIN = 1 << 26,\n\n  // Other\n\n  QUOTED = 1 << 27\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Abi\n} from \"./abi\";\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents a module-level export. */\nclass ModuleExport {\n  element: Element;\n  identifier: IdentifierExpression;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n  toAbi(): Abi {\n    var abi = new Abi(this);\n    abi.resolve();\n    return abi;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let element = this.elementsLookup.get(name);\n          if (element) this.elementsLookup.set(alias, element);\n          else throw new Error(\"element not found: \" + name);\n        }\n      }\n    }\n\n    // register 'ArrayBuffer'\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n    }\n\n    // register 'Array'\n    if (this.elementsLookup.has(\"Array\")) {\n      let element = assert(this.elementsLookup.get(\"Array\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>element;\n    }\n\n    // register 'String'\n    if (this.elementsLookup.has(\"String\")) {\n      let element = assert(this.elementsLookup.get(\"String\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\n      if (instance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>element).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = instance;\n          this.typesLookup.set(\"string\", instance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n\n    // register 'abort' if present\n    if (this.elementsLookup.has(\"abort\")) {\n      let element = <Element>this.elementsLookup.get(\"abort\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      if (instance) this.abortInstance = instance;\n    }\n\n    // register 'memory.allocate' if present\n    if (this.elementsLookup.has(\"memory\")) {\n      let element = <Element>this.elementsLookup.get(\"memory\");\n      let members = element.members;\n      if (members) {\n        if (members.has(\"allocate\")) {\n          element = assert(members.get(\"allocate\"));\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.memoryAllocateInstance = instance;\n        }\n      }\n    }\n\n    // register GC hooks if present\n    if (\n      this.elementsLookup.has(\"__gc_allocate\") &&\n      this.elementsLookup.has(\"__gc_link\") &&\n      this.elementsLookup.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (flag == DecoratorFlags.BUILTIN) {\n          if (decorator.range.source.isLibrary) {\n            presentFlags |= flag;\n          } else {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          }\n        } else if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias globally if explicitly annotated @global or exported from a top-level library file\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n      }\n    }\n    // builtins use the global name directly\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\n      element.internalName = declaration.programLevelInternalName;\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    externalIdentifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = externalIdentifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = externalIdentifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if a top-level export of a library file\n    var source = externalIdentifier.range.source;\n    if (source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          externalIdentifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n\n    // add module level export if a top-level export of an entry file\n    } else if (source.isEntry) {\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\n        element,\n        identifier: externalIdentifier\n      });\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (this.elementsLookup.has(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          <Element>this.elementsLookup.get(referencedName),\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          if (existingExport.element !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: namespace,\n            identifier: declaration.name\n          });\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.INLINE |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: global,\n            identifier: declaration.name\n          });\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is a database */\n  DATABASE = 1 << 9,\n  /** Is a action */\n  ACTION = 1 << 10,\n  /** Is a ignore */\n  IGNORE = 1 << 11\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    // case DecoratorKind.DATABASE: return DecoratorFlags.DATABASE;\n    // case DecoratorKind.IGNORE: return DecoratorFlags.IGNORE;\n    // case DecoratorKind.ACTION: return DecoratorFlags.ACTION;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  _internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this._internalName = internalName;\n  }\n\n  static replaceComma(str: string): string {\n    if (!str) return str;\n    var result  =  \"\";\n    for (let ch of str) {\n      result +=  ch == \",\" ? \"_\" : ch;\n    }\n    return result;\n  }\n\n  get internalName(): string {\n    return Element.replaceComma(this._internalName);\n  }\n\n  set internalName(internalName: string) {\n    this._internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport const enum NativeType {\n  None = 0,        // _BinaryenTypeNone(),\n  I32  = 1,        // _BinaryenTypeInt32(),\n  I64  = 2,        // _BinaryenTypeInt64(),\n  F32  = 3,        // _BinaryenTypeFloat32(),\n  F64  = 4,        // _BinaryenTypeFloat64(),\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\n  Auto = -1        // _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = memory.allocate(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n      memory.free(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocPtrArray(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0; // for free'ing\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    memory.free(this.cachedByValue);\n    memory.free(this.cachedTemporaryName);\n    memory.free(this.cachedPrecomputeName);\n    memory.free(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: FunctionRef[] = [];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      this.options.isWasm64\n        ? Module.MAX_MEMORY_WASM64\n        : Module.MAX_MEMORY_WASM32,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    var functionTableExported = false;\n    if (functionTableSize) {\n      module.setFunctionTable(functionTable);\n      module.addTableExport(\"0\", \"table\");\n      functionTableExported = true;\n    }\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\n    }\n\n    // set up module exports\n    for (let [name, moduleExport] of program.moduleLevelExports) {\n      this.makeModuleExport(name, moduleExport.element);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      }\n    }\n\n    switch (element.kind) {\n\n      // export global\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<Global>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<EnumValue>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n\n      // export function\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n\n      // export getter and setter\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>element).getterPrototype);\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterPrototype;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export a getter and a setter\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // skip prototype and export instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          let ctor = instance.constructorInstance;\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n\n      // all possible members already handled above\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE: break;\n\n      default: assert(false);\n    }\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration, global.parent);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (declaration !== null && declaration.initializer !== null) {\n      if (!initExpr) {\n        initExpr = this.compileExpression(\n          declaration.initializer,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        let initExpr: ExpressionRef;\n        if (valueDeclaration.value) {\n          initExpr = this.compileExpression(\n            <Expression>valueDeclaration.value,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueDeclaration.value.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              valueDeclaration.range\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          previousValueIsMut = true;\n        } else {\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration, instance.prototype.parent); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let element = fileLevelExports.get(\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\n      );\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.ref);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    try {\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        let exp = <CallExpression>expression;\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.SUPER: {\n        expr = this.compileNopExpression();\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n    } catch (exception) {\n      let normalizePath = expression.range.source.normalizedPath;\n      console.log(`Compile expression failed. The normalizePath: ${normalizePath} around line: ${expression.range.line}.`);\n      throw exception;\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.resolver.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(\n            prototype,\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n      case ElementKind.CLASS: {\n        return module.createNop();\n      }\n      case ElementKind.PROPERTY: // TODO\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        this.currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\n    return ret;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  compileNopExpression(): ExpressionRef {\n    var module = this.module;\n    return module.createNop();\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expr = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(compiledValues[i]);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var currentFunction = this.currentFunction;\n    var tempLocal = currentFunction.getTempLocal(arrayType, false);\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      compileAllocate(this, classReference, expression)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the top-most visible constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance: Function | null = null;\n    do {\n      constructorInstance = currentClassInstance.constructorInstance;\n      if (constructorInstance) break; // TODO: check visibility\n    } while (currentClassInstance = currentClassInstance.base);\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>target).getterPrototype;\n        if (prototype) {\n          let instance = this.resolver.resolveFunction(prototype, null);\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.parent);\n            assert(parent.kind == ElementKind.CLASS);\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr, inline);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, 0, inline);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement,\n  parentElement: Element | null = null\n): void {\n  mangleImportName_moduleName = parentElement ? parentElement.simpleName : declaration.range.source.simplePath;\n  mangleImportName_elementName = element.simpleName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","import {\n  SerializeInserter,\n  InsertPoint,\n  TypeNodeInfo,\n  VarialbeKind,\n  SuperInserter\n} from \"./inserter\";\n\nimport {\n  Type,\n} from \"./types\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  DecoratorNode,\n  SignatureNode,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  NodeKind,\n  ParameterNode,\n  Expression,\n  VariableLikeDeclarationStatement,\n  StringLiteralExpression,\n  ClassDeclaration,\n  MethodDeclaration,\n  CommonTypeNode\n} from \"./ast\";\n\nimport {\n  AstUtil\n} from \"./util/astutil\";\n\nclass Struct {\n\n  name: string;\n  base: string;\n  fields: Array<Object> = new Array<Object>();\n}\n\nclass AbiTypeAlias {\n  new_type_name: string;\n  type: string;\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\nclass Action {\n\n  name: string;\n  type: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string) {\n    this.name = name;\n    this.type = type;\n  }\n}\n\nexport class AbiHelper {\n\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"bool\", \"uint8\"], // eos not support the bool\n    [\"f32\", \"f32\"],\n    [\"f64\", \"f64\"],\n    [\"boolean\", \"uint8\"], // eos not suppot the bool\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass Table {\n  name: string;\n  type: string;\n  index_type: string = \"i64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string, indexType:string = \"i64\") {\n    this.name = name;\n    this.type = type;\n    this.index_type = indexType;\n  }\n}\n\nexport class Abi {\n\n  abiInfo: {\n    version: string,\n    types: Array<AbiTypeAlias>,\n    structs: Array<Struct>,\n    actions: Array<Action>,\n    tables: Array<Table>\n  };\n\n  dispatch: string;\n\n  program: Program;\n\n  abiTypeLookup: Map<string, string> = new Map();\n\n  typeAliasSet: Set<string> = new Set<string>();\n\n  structsLookup: Map<string, Struct> = new Map();\n\n  elementLookup: Map<string, Element> = new Map();\n\n  insertPointsLookup: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n  constructor(program: Program) {\n\n    this.program = program;\n\n    this.abiInfo = {\n      version: \"ultraio:1.0\",\n      types: new Array<AbiTypeAlias>(),\n      structs: new Array<Struct>(),\n      actions: new Array<Action>(),\n      tables: new Array<Table>()\n    };\n\n    this.abiTypeLookup = AbiHelper.abiTypeLookup;\n  }\n\n  /**\n  *  Add abi struct for abi info.\n  */\n  resolveSignatureToAbiStruct(methodName: string, signature: SignatureNode): Struct {\n\n    var struct = new Struct();\n    struct.name = methodName;\n    struct.base = \"\";\n\n    var parameters: ParameterNode[] = signature.parameters; \n    for (let parameter of parameters) {\n      let type: CommonTypeNode = parameter.type;\n      let typeInfo = new TypeNodeInfo(this.program, type);\n      let abiType = typeInfo.isArray ? `${typeInfo.ascBasicType}[]` : typeInfo.declareType;\n      this.addAbiTypeAlias(typeInfo);\n      struct.fields.push({ \"name\" : parameter.name.range.toString(), \"type\": abiType });\n    }\n    return struct;\n  }\n\n  addAbiTypeAlias(typeNodeInfo: TypeNodeInfo): void {\n    var typeKindName = typeNodeInfo.ascBasicType;\n\n    var basicElement = typeNodeInfo.getAscBasicElement();\n    if (basicElement &&  basicElement.kind == ElementKind.CLASS_PROTOTYPE) {\n      let classPrototype = <ClassPrototype>basicElement;\n      this.parseClassPrototypeToStruct(classPrototype);\n    }\n\n    if (!this.typeAliasSet.has(typeKindName)) {\n      // It's the assemblyscript internal type\n      let originalTypeName = this.findContractOriginalType(typeKindName);\n      let wasmType = this.abiTypeLookup.get(originalTypeName);\n      // console.log(`addAbiTypeAlias: ${typeKindName}`);\n      if (wasmType) {\n        this.abiInfo.types.push(new AbiTypeAlias(typeKindName, wasmType));\n      }\n      this.typeAliasSet.add(typeKindName);\n    }\n  }\n\n  /**\n  * Find the original type name,\n  * eg: declare type account_name = u64;\n        declare type account_name_alias = account_name;\n\n    findContractOriginalType(\"account_name_alias\") return \"account_name\";\n  */\n  findContractOriginalType(typeKindName: string): string {\n\n    var abiType: string | null = this.abiTypeLookup.get(typeKindName);\n    if (abiType) {\n      return typeKindName;\n    }\n    var typeAlias = this.program.typeAliases.get(typeKindName);\n    if (typeAlias) {\n      let commonaTypeName = typeAlias.type.range.toString();\n      return this.findContractOriginalType(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find the script original type name\n  * @param typeKindName\n  */\n  findScriptOriginalTypeName(typeKindName: string): string {\n    var typeAlias = this.program.typeAliases.get(typeKindName);\n    if (typeAlias) {\n      let commonaTypeName = typeAlias.type.range.toString();\n      return this.findScriptOriginalTypeName(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find assemblyscript original type name\n  * eg: account_name return 'u64'\n  *\n  * @param typeKindName\n  */\n  findScriptOriginalType(typeKindName: string): Type | null {\n    var originalName = this.findScriptOriginalTypeName(typeKindName);\n    //Get the AssemblyScript original type\n    var scriptType: Type | null = this.program.typesLookup.get(originalName);\n    return scriptType;\n  }\n\n  isWrapWithQutation(str: string): bool {\n\n    if (str == undefined || str == null) {\n      return false;\n    }\n    return str.charAt(0) == \"\\\"\" && str.charAt(str.length - 1) == \"\\\"\"\n      ? true : false;\n  }\n\n  /**\n  *  Check that element whether is functionPrototype\n  *\n  */\n  isActionFuncPrototype(element: Element): bool {\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return AstUtil.haveSpecifyDecorator(funcType.declaration, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  /**\n  * Resolve the class database decoreator\n  */\n  resolveDatabaseDecorator(statement : DeclarationStatement): void {\n    if (!statement.decorators) {\n      return ;\n    }\n    for (let decorator of statement.decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments\n        if (decorator.arguments.length < 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n        let type = decorator.arguments[0].range.toString();\n        let name = this.getExprValue(decorator.arguments[1]);\n        this.abiInfo.tables.push(new Table(name, type));\n        this.resolveExpressionToStruct(decorator.arguments[0]);\n      }\n    }\n  }\n\n  /**\n   * Get the expression value\n   * @param expr\n   */\n  getExprValue(expr: Expression): string {\n    var argu: string = expr.range.toString();\n    if (this.isWrapWithQutation(argu)) {\n      return argu.substring(1, argu.length - 1);\n    }\n    var internalName = AstUtil.getInternalName(expr);\n    var element: Element | null = this.program.elementsLookup.get(internalName);\n    if (element) {\n      let declaration: VariableLikeDeclarationStatement | null = (<VariableLikeElement>element).declaration;\n      if (declaration && declaration.initializer) {\n        let literal: StringLiteralExpression = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Cann't find constant ${internalName}`);\n  }\n\n  resolveExpressionToElement(expr: Expression): Element {\n    var internalPath = expr.range.source.internalPath;\n    var name = expr.range.toString();\n    var internalName = `${internalPath}/${name}`;\n    var element = this.program.elementsLookup.get(internalName);\n    if (!element || element.kind != ElementKind.CLASS_PROTOTYPE) {\n      throw new Error(`Element ${internalName} not found, pleasure make sure that class ${internalName} was existed.`);\n    }\n    return element;\n  }\n\n  /**\n  *  Get struct from expression.\n  */\n  resolveExpressionToStruct(expr: Expression): void {\n    var internalName = AstUtil.getInternalName(expr);\n    this.retrieveStructByInternalName(internalName);\n  }\n\n  retrieveStructByInternalName(internalName: string): void {\n    var element = this.program.elementsLookup.get(internalName);\n    if (!element || element.kind != ElementKind.CLASS_PROTOTYPE) {\n      throw new Error(`Element ${internalName} not found, pleasure make sure that class ${internalName} was existed.`);\n    }\n    var classPrototype = <ClassPrototype>element;\n    this.parseClassPrototypeToStruct(classPrototype);\n  }\n\n  parseClassPrototypeToStruct(classPrototype: ClassPrototype): Struct | null {\n    var members: DeclarationStatement[] = classPrototype.declaration.members;\n    var struct = new Struct();\n    struct.name = classPrototype.simpleName;\n    if (this.abiTypeLookup.get(struct.name)) {\n      return null;\n    }\n    struct.base = \"\";\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let fieldDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let fieldName = member.name.range.toString();\n        let fieldType: CommonTypeNode | null = fieldDeclare.type;\n\n        if (fieldType && !AstUtil.haveSpecifyDecorator(fieldDeclare, DecoratorKind.IGNORE)) {\n          let declaration: TypeNodeInfo = new TypeNodeInfo(this.program, fieldType);\n          let fieldTypeName = fieldType.range.toString();\n          if (declaration.isIgnore()) {\n            continue;\n          }\n          let type =  declaration.isArray ? `${AstUtil.getBasicTypeName(fieldTypeName)}[]` : fieldTypeName;\n          struct.fields.push({\"name\": fieldName, \"type\": type });\n        }\n      }\n    }\n    this.addStruct(struct);\n    return struct;\n  }\n\n  addStruct(struct: Struct): void {\n\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n  checkName(str: string): void {\n    assert(str.length > 0, `Action name should not empty.`);\n    assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n  }\n\n  /**\n  *  Resolve ClassPrototype to dispatcher\n  */\n  resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n    if (clzPrototype.instanceMembers && AstUtil.extendedContract(clzPrototype)) {\n      let body = new Array<string>();\n      let hasActionDecorators = false;\n      let contractName = clzPrototype.simpleName; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  if (receiver == code) {`);\n      body.push(`    let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n      body.push(`    ${contractVarName}.setActionName(actH, actL);`);\n      body.push(`    ${contractVarName}.onInit();`);\n\n      for (let instance of clzPrototype.instanceMembers.values()) {\n        // if (instance.kind == ElementKind.FUNCTION_PROTOTYPE && instance.hasDecorator(DecoratorFlags.ACTION)) {\n          if (instance.kind == ElementKind.FUNCTION_PROTOTYPE && this.isActionFuncPrototype(instance)) {\n          this.resolveFunctionPrototype(<FunctionPrototype>instance);\n          hasActionDecorators = true;\n          let declaration: FunctionDeclaration = (<FunctionPrototype>instance).declaration; // FunctionDeclaration\n\n          let funcName = declaration.name.range.toString();\n          let types = declaration.signature.parameters; // FunctionDeclaration parameter types\n\n          this.checkName(funcName);\n          body.push(`    if (${contractVarName}.isAction(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (let index = 0; index < types.length; index++) {\n            let type: ParameterNode = types[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n\n            let abiType: TypeNodeInfo = new TypeNodeInfo(this.program, type.type);\n\n            if (abiType.isArray) {\n              if (abiType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${abiType.ascFactType}>();`);\n              } else if (abiType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${parameterName} = ds.readVector<u8>();`);\n              } else if (abiType.kind == VarialbeKind.STRING) {\n                body.push(`      let ${parameterName} = ds.readStringVector();`);\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${abiType.ascBasicType}>();`);\n              }\n            } else {\n              if (abiType.kind == VarialbeKind.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${parameterName} = ds.read<u8>() != 0;`);\n              } else if (abiType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${abiType.ascFactType}>();`);\n              } else {\n                let internalName = AstUtil.getInternalName(type.type);\n                this.retrieveStructByInternalName(internalName);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n          body.push(`      ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n          body.push(\"    }\");\n        }\n      }\n      body.push(`    ${contractVarName}.onStop();`);\n      body.push(\"  }\");\n      this.resolveDatabaseDecorator(clzPrototype.declaration);\n      if (hasActionDecorators) {\n        return body;\n      }\n    }\n    return new Array();\n  }\n\n  resolveFunctionPrototype(funcPrototype: FunctionPrototype): void {\n\n    var declaration: FunctionDeclaration = funcPrototype.declaration;\n    var funcName = declaration.name.range.toString();\n    var signature = funcPrototype.declaration.signature;\n    var struct = this.resolveSignatureToAbiStruct(funcName, signature);\n\n    this.addStruct(struct);\n    this.abiInfo.actions.push(new Action(funcName, funcName));\n  }\n\n  printTypeAliasInfo(): void {\n\n    var typesLookupKeys = this.program.typesLookup.keys();\n    for (let key of typesLookupKeys) {\n      let value = this.program.typesLookup.get(key);\n      if (value) {\n        console.log(`type look up key: ${key}. value: ${value.kind}`);\n      }\n    }\n\n    var typesAliasKeys = this.program.typeAliases.keys();\n    for (let key of typesAliasKeys) {\n      let value = this.program.typeAliases.get(key);\n      if (value) {\n        console.log(`type alias key: ${key}. Value: ${value.type.range.toString()}`);\n      }\n    }\n  }\n\n  printElementLookUpInfo(): void {\n    var keys = this.program.elementsLookup.keys();\n    for (let key of keys) {\n      let value = this.program.elementsLookup.get(key);\n      if (value) {\n        console.log(`Element lookup key:${key}.Kind:${ElementKind[value.kind]}`);\n      }\n    }\n  }\n\n  private printClassProtoTypeInfo(): void {\n    var keys = this.program.elementsLookup.keys();\n    for (let key of keys) {\n      let value: Element | null = this.program.elementsLookup.get(key);\n      if (value && value.kind == ElementKind.CLASS_PROTOTYPE) {\n        // console.log(`Element lookup key:${key}.Kind:${value.kind}`);\n        let classPrototype: ClassPrototype = <ClassPrototype>value;\n        if (classPrototype.basePrototype) {\n          console.log(`Element lookup key:${key}. Base prototype:${classPrototype.basePrototype.simpleName}`);\n        }\n      }\n    }\n  }\n\n  resolve(): void {\n\n    // this.printTypeAliasInfo();\n    // this.printElementLookUpInfo();\n    // this.printClassProtoTypeInfo();\n\n    var serializeInserter: SerializeInserter = new SerializeInserter(this.program);\n    var superInserter: SuperInserter = new SuperInserter(this.program);\n    var serializePoints = serializeInserter.getInsertPoints();\n    var superPoints = superInserter.getInsertPoints();\n\n    for (let _points of superPoints) {\n      serializePoints.push(_points);\n    }\n\n    this.insertPointsLookup = InsertPoint.toSortedMap(serializePoints);\n    var dispatchBuffer = new Array<string>();\n\n    for (let element of this.program.elementsLookup.values()) {\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(clzPrototype.internalName)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          classDispatch.forEach((value: string, index: number): void => {\n            dispatchBuffer.push(value);\n          });\n          this.elementLookup.set(clzPrototype.internalName, element);\n        }\n      }\n    }\n\n    if (dispatchBuffer.length == 0) {\n      // throw new Error(`The smart contract must specify one action.`);\n    }\n\n    this.dispatch = this.assemblyDispatch(dispatchBuffer);\n  }\n\n  hasElement(name: string): bool {\n    var element: Element | null = this.program.elementsLookup.get(name);\n    return element ? true : false;\n  }\n\n  // Concat the dispatch message\n  private assemblyDispatch(body: Array<string>): string {\n\n    var sb = new Array<string>();\n    sb.push(\"export function apply(receiver: u64, code: u64, actH: u64, actL: u64): void {\");\n\n    body.forEach((value: string, index: number): void => {\n      sb.push(value);\n    });\n    sb.push(\"}\");\n\n    return sb.join(\"\\n\");\n  }\n}\n","import {\n    DeclarationStatement,\n    DecoratorKind,\n    Node,\n    ClassDeclaration\n} from \"../ast\";\n\nimport { \n    ClassPrototype\n} from \"../program\";\n\nexport class AstUtil {\n\n    /**\n     * Check the statment weather have the specify the decorator\n     * @param statement Ast declaration statement\n     * @param decorator The specify decorators\n     */\n    static haveSpecifyDecorator(statement: DeclarationStatement, decorator: DecoratorKind): bool {\n        var decorators = statement.decorators;\n        if (!decorators) {\n            return false;\n        }\n        for (let _decorator of decorators) {\n            if (_decorator.decoratorKind == decorator) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName;\n    }\n\n    /**\n     * Get the basic type name\n     * If the type name is string[], so the basic type name is string\n     * @param declareType\n     */\n    static getBasicTypeName(declareType: string): string {\n        var bracketIndex = declareType.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = declareType.indexOf(\" \") == -1 ? bracketIndex : declareType.indexOf(\" \");\n            return declareType.substring(0, index);\n        }\n        bracketIndex = declareType.indexOf(\"<\");\n        if (bracketIndex != -1) {\n            let endIndex = declareType.indexOf(\">\");\n            return declareType.substring(bracketIndex + 1, endIndex);\n        }\n        return declareType;\n    }\n\n    /**\n     * Whether the declare type is array or not\n     */\n    static isArray(declareType: string): bool {\n        return declareType.includes(\"[\") ||\n            (declareType.includes(\"Array\") && declareType.includes(\"<\") \n            && declareType.replace(\"Array\", \"\").trim().indexOf(\"<\") == 0);\n    }\n\n    /**\n     * Test the class whether to implments the Serializable interface\n     */\n    static impledSerializable(classDeclaration: ClassDeclaration): bool {\n        const interfaceName = \"Serializable\";\n        var implementsTypes = classDeclaration.implementsTypes;\n        if (implementsTypes) {\n            for (let _type of implementsTypes) {\n                if (_type.name.range.toString() == interfaceName) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static extendedContract(classPrototype: ClassPrototype): bool {\n        const contractName = \"Contract\";\n        var basePrototype: ClassPrototype | null = classPrototype.basePrototype;\n        if (basePrototype && basePrototype.simpleName == contractName) {\n            return true;\n        }\n        return false;\n    }\n\n}","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              contextualTypeArguments,\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    {\n      let typeArgumentNodes = typeNode.typeArguments;\n      if (typeArgumentNodes) {\n        let numTypeArguments = typeArgumentNodes.length;\n        let paramTypes = new Array<Type>(numTypeArguments);\n        for (let i = 0; i < numTypeArguments; ++i) {\n          let paramType = this.resolveType( // reports\n            typeArgumentNodes[i],\n            contextualTypeArguments,\n            reportMode\n          );\n          if (!paramType) return null;\n          paramTypes[i] = paramType;\n        }\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\n          let instanceKey = typesToString(paramTypes);\n          if (instanceKey.length) {\n            localName += \"<\" + instanceKey + \">\";\n            globalName += \"<\" + instanceKey + \">\";\n          }\n        } else if (contextualTypeArguments) {\n          let placeholderType = contextualTypeArguments.get(globalName);\n          if (placeholderType) return placeholderType;\n        }\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        return type;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          null,\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType(\n          (<AssertionExpression>expression).toType,\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this.program, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = prototype.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(prototype.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (prototype.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Copy contextual type arguments so we don't pollute the original map\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    if (prototype.constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        prototype.constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\n      } else {\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let typeParameterNodes = prototype.declaration.typeParameters;\n      let expectedTypeArguments = typeParameterNodes.length;\n      assert(expectedTypeArguments > 0);\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\n      if (expectedTypeArguments != actualTypeArguments) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\n          );\n        }\n        return null;\n      }\n      resolvedTypeArguments = this.resolveTypeArguments(\n        typeParameterNodes,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return new binaryen.Module(this.ref).emitText();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return new binaryen.Module(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__17__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[ptr + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[ptr + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags,\n  Global,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case \"isManaged\": { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"memory.size\": { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // user-defined diagnostic macros\n\n    case \"ERROR\": {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case \"WARNING\": {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case \"INFO\": {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n\n    // gc\n\n    case \"iterateRoots\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  // __gc_allocate(size, markFn)\n  if (program.hasGC && classInstance.type.isManaged(program)) {\n    let allocateInstance = assert(program.gcAllocateInstance);\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset),\n        module.createI32(\n          ensureGCHook(compiler, classInstance)\n        )\n      ],\n      options.nativeSizeType\n    );\n\n  // memory.allocate(size)\n  } else {\n    let allocateInstance = program.memoryAllocateInstance;\n    if (!allocateInstance) {\n      program.error(\n        DiagnosticCode.Cannot_find_name_0,\n        reportNode.range, \"memory.allocate\"\n      );\n      return module.createUnreachable();\n    }\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset)\n      ],\n      options.nativeSizeType\n    );\n  }\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\");\n  if (!stringType) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsLookup.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"iv\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"iv\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for internals)\n  var members = classInstance.members;\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(0);\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  functionTable[gcHookIndex] = module.addFunction(\n    classInstance.internalName + \"~gc\",\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  return gcHookIndex;\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","import {\n    AbiHelper\n} from \"./abi\";\n\nimport {\n    ClassDeclaration,\n    CommonTypeNode,\n    DecoratorKind,\n    FieldDeclaration,\n    NodeKind,\n    TypeNode,\n    BlockStatement,\n    Statement,\n    ExpressionStatement,\n    CallExpression,\n    FunctionDeclaration\n} from \"./ast\";\n\nimport {\n    ClassPrototype,\n    Element,\n    ElementKind,\n    FieldPrototype,\n    FunctionPrototype,\n    Program,\n} from \"./program\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    Type,\n    TypeKind\n} from \"./types\";\n\nimport {\n    AstUtil\n} from \"./util/astutil\";\nimport { DiagnosticCode } from \"./diagnosticMessages.generated\";\nimport { CommonFlags } from \"./common\";\n\nexport enum VarialbeKind {\n    BOOL, // boolean and bool\n    NUMBER, // original type except boolean and bool\n    STRING, // string kind\n    ARRAY, // array kind\n    CLASS // class kind\n}\n\nexport class InsertPoint {\n\n    protected range: Range;\n    protected insertCode: string;\n    protected code: string[];\n\n    private static descComparator = (a: InsertPoint, b: InsertPoint): i32 => {\n        return (b.line - a.line);\n    }\n\n    static toSortedMap(insertPoints: Array<InsertPoint>): Map<string, Array<InsertPoint>> {\n\n        var map = new Map<string, Array<InsertPoint>>();\n        for (let insertPoint of insertPoints) {\n            let normalizedPath = insertPoint.normalizedPath;\n            let insertPointArr: Array<InsertPoint> | null = map.get(normalizedPath);\n\n            if (!insertPointArr) {\n                insertPointArr = new Array<InsertPoint>();\n                map.set(normalizedPath, insertPointArr);\n            }\n            insertPointArr.push(insertPoint);\n        }\n\n        for (let [_, values] of map) {\n            values.sort(InsertPoint.descComparator);\n        }\n        return map;\n    }\n\n    constructor(range: Range, insertCode: string = \"\") {\n        this.range = range;\n        this.insertCode = insertCode;\n        this.code = [];\n    }\n\n    get line(): i32 {\n        return (this.range.column == 0) ? this.range.atEnd.line - 1 : this.range.atEnd.line;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    toString(): string {\n        return this.range.toString();\n    }\n\n    addInsertCode(code: string): void {\n        this.code.push(code);\n    }\n\n    getInsertCode(): string {\n        return this.insertCode;\n    }\n}\n\n/**\n * Various type\n * 1. abi Type,\n * 2. declare type, account_name, u64, \n * 3. asc type, u64, u64[]\n * 4. asc basic type, u64\n */\nexport class TypeNodeInfo {\n\n    kind: VarialbeKind;\n\n    program: Program;\n\n    abiTypeLookup: Map<string, string> = new Map();\n\n    commonTypeNode: CommonTypeNode;\n    /** Parameter name, u64 */\n    declareType: string;\n    /** Base Parameter type */\n    ascBasicType: string;\n    /** The field fact type, eg: u64, u32 */\n    ascFactType: string;\n    /** Whether parameter or field is array  */\n\n    get isArray(): bool {\n        return AstUtil.isArray(this.declareType);\n    }\n\n    constructor(program: Program, commonTypeNode: CommonTypeNode) {\n        this.program = program;\n        this.commonTypeNode = commonTypeNode;\n        this.abiTypeLookup = AbiHelper.abiTypeLookup;\n        this.resolve();\n    }\n\n    /**\n     * string TypeKind is 9, and usize TypeKind is also 9.\n     * @param type\n     */\n    private resolve(): void {\n        var declareType = this.commonTypeNode.range.toString();\n        this.declareType = declareType;\n\n        var basicTypeName: string = AstUtil.getBasicTypeName(declareType);\n        this.ascBasicType = basicTypeName;\n        if (basicTypeName == \"string\" || basicTypeName == \"String\") {\n            this.kind = VarialbeKind.STRING;\n            this.ascFactType = \"string\";\n            return;\n        }\n\n        var _ascFactType: Type | null = this.findOriginalAscType(basicTypeName);\n        if (!_ascFactType) {\n            this.kind = VarialbeKind.CLASS;\n        } else if (_ascFactType.kind == TypeKind.BOOL) {\n            this.kind = VarialbeKind.BOOL;\n            this.ascFactType = _ascFactType.toString();\n        } else {\n            this.kind = VarialbeKind.NUMBER;\n            this.ascFactType = _ascFactType.toString();\n        }\n    }\n\n    getAscBasicElement(): Element | null {\n        var internalPath = this.commonTypeNode.range.source.internalPath;\n        var basicTypePath = `${internalPath}/${this.ascBasicType}`;\n        var basicElement = this.program.elementsLookup.get(basicTypePath);\n        return basicElement;\n    }\n\n    isIgnore(): boolean {\n        var basicType = this.declareType;\n        if (this.declareType.indexOf(\"<\") != -1) {\n            basicType = this.declareType.substr(0,this.declareType.indexOf(\"<\")).trim();\n        }\n\n        var internalPath = `${this.commonTypeNode.range.source.internalPath}/${basicType}`;\n        var element: Element | null = this.program.elementsLookup.get(internalPath);\n        // console.log(`isIgnore basictype: ${basicType} internalPath: ${internalPath}`);\n\n        if (element) {\n            if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let prototype = <ClassPrototype>element;\n                return AstUtil.haveSpecifyDecorator(prototype.declaration, DecoratorKind.IGNORE);\n            }\n        } else {\n            var libEle: Element | null = this.program.elementsLookup.get(basicType);\n            if (libEle && libEle.kind == ElementKind.CLASS_PROTOTYPE) {\n                let prototype = <ClassPrototype>libEle;\n                return AstUtil.haveSpecifyDecorator(prototype.declaration, DecoratorKind.IGNORE); \n            }\n        }\n        return false;\n    }\n\n    /**\n     *  Find the script original type name\n     *  @param typeKindName\n     *\n     */\n    private findOriginalAscTypeName(typeKindName: string): string {\n        var typeAlias = this.program.typeAliases.get(typeKindName);\n        if (typeAlias) {\n            let commonaTypeName = typeAlias.type.range.toString();\n            return this.findOriginalAscTypeName(commonaTypeName);\n        }\n        return typeKindName;\n    }\n\n    /**\n    * Find assemblyscript original type name\n    * eg: account_name return 'u64'\n    *\n    * @param typeKindName\n    */\n    private findOriginalAscType(typeKindName: string): Type | null {\n        var originalName = this.findOriginalAscTypeName(typeKindName);\n        //Get the AssemblyScript original type\n        var originalType: Type | null = this.program.typesLookup.get(originalName);\n        return originalType;\n    }\n}\n\n/**\n * Serialiize Generateor\n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needImplSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needImplDeSerialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needImplPrimary: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n    }\n\n    toGenerateFlag(): bool {\n\n        if (!this.classPrototype.instanceMembers) {\n            return false;\n        }\n\n        for (let [_, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                let functionPrototype = <FunctionPrototype>element;\n                if (functionPrototype.declaration.name.range.toString() == this.SERIALIZE_METHOD_NAME) {\n                    this.needImplSerialize = false;\n                }\n                if (functionPrototype.declaration.name.range.toString() == this.DESERIALIZE_METHOD_NAME) {\n                    this.needImplDeSerialize = false;\n                }\n                if (functionPrototype.declaration.name.range.toString() == this.PRIMARY_METHOD_NAME) {\n                    this.needImplPrimary = false;\n                }\n            }\n        }\n        return this.needImplDeSerialize || this.needImplPrimary || this.needImplSerialize;\n    }\n\n    checkFieldImplSerialize(typeNode: CommonTypeNode): bool {\n\n        var internalName = AstUtil.getInternalName(typeNode);\n        var element: Element | null = this.classPrototype.program.elementsLookup.get(internalName);\n\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = AstUtil.impledSerializable((<ClassPrototype>element).declaration);\n            if (!hasImpl) {\n                throw new Error(`Class ${internalName} has not implement the interface serializable`);\n            }\n        }\n        return true;\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoints(): SerializePoint {\n\n        var serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.classDeclaration = this.classPrototype.declaration;\n        serializePoint.needDeserialize = this.needImplDeSerialize;\n        serializePoint.needSerialize = this.needImplSerialize;\n        serializePoint.needPrimaryKey = this.needImplPrimary;\n\n        if (!this.classPrototype.instanceMembers) {\n            return serializePoint;\n        }\n\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = fieldPrototype.declaration;\n                let commonType: CommonTypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.TYPE && \n                    !AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.IGNORE)) {\n                    let typeNode = <TypeNode>commonType;\n                    if (this.needImplDeSerialize && this.checkFieldImplSerialize(commonType)) {\n                        serializePoint.addSerializeExpr(this.serializeField(fieldName, typeNode));\n                    }\n\n                    if (this.needImplSerialize && this.checkFieldImplSerialize(commonType)) {\n                        serializePoint.addDeserializeExpr(this.deserializeField(fieldName, typeNode));\n                    }\n                }\n            }\n        }\n        serializePoint.addDeserializeExpr(`   }`);\n        serializePoint.addSerializeExpr(`   }`);\n\n        return serializePoint;\n    }\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: TypeNode): string {\n\n        var paramDeclaration: TypeNodeInfo = new TypeNodeInfo(this.classPrototype.program, typeNode);\n        var body: Array<string> = new Array<string>();\n\n        if (paramDeclaration.isArray) {\n            if (paramDeclaration.kind == VarialbeKind.NUMBER) {\n                body.push(`      ds.writeVector<${paramDeclaration.ascBasicType}>(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.BOOL) {\n                body.push(`      ds.writeVector<u8>(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.STRING) {\n                body.push(`      ds.writeStringVector(this.${fieldName});`);\n            } else {\n                body.push(`      ds.writeComplexVector<${paramDeclaration.ascBasicType}>(this.${fieldName});`);\n            }\n        } else {\n            if (paramDeclaration.kind == VarialbeKind.STRING) {\n                body.push(`      ds.writeString(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.BOOL) {\n                body.push(`      ds.write<u8>(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.NUMBER) {\n                body.push(`      ds.write<${paramDeclaration.declareType}>(this.${fieldName});`);\n            } else {\n                body.push(`      this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return body.join(\"\\n\");\n    }\n\n    deserializeField(fieldName: string, type: TypeNode): string {\n\n        var variableType: TypeNodeInfo = new TypeNodeInfo(this.classPrototype.program, type);\n\n        var body: Array<string> = new Array<string>();\n\n        if (variableType.isArray) {\n            if (variableType.kind == VarialbeKind.NUMBER) {\n                body.push(`      this.${fieldName} = ds.readVector<${variableType.ascFactType}>();`);\n            } else if (variableType.kind == VarialbeKind.BOOL) {\n                body.push(`      this.${fieldName} = ds.readVector<u8>();`);\n            } else if (variableType.kind == VarialbeKind.STRING) {\n                body.push(`      this.${fieldName} = ds.readStringVector();`);\n            } else {\n                body.push(`      this.${fieldName} = ds.readComplexVector<${variableType.ascBasicType}>();`);\n            }\n        } else {\n            if (variableType.kind == VarialbeKind.STRING) {\n                body.push(`      this.${fieldName} = ds.readString();`);\n            } else if (variableType.kind == VarialbeKind.BOOL) {\n                body.push(`      this.${fieldName} = ds.read<u8>() != 0;`);\n            } else if (variableType.kind == VarialbeKind.NUMBER) {\n                body.push(`      this.${fieldName} = ds.read<${variableType.ascFactType}>();`);\n            } else {\n                body.push(`      this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return body.join(\"\\n\");\n    }\n}\n\nexport class SerializePoint extends InsertPoint {\n\n    private serialize: Array<string> = new Array<string>();\n\n    private deserialize: Array<string> = new Array<string>();\n\n    private primaryKey: Array<string> = new Array<string>();\n\n    needSerialize: bool;\n\n    needDeserialize: bool;\n\n    needPrimaryKey: bool;\n\n    classDeclaration: ClassDeclaration;\n\n    constructor(range: Range) {\n        super(range.atEnd);\n        this.serialize.push(`    serialize(ds: DataStream): void {`);\n        this.deserialize.push(`    deserialize(ds: DataStream): void {`);\n\n        this.primaryKey.push(`     primaryKey(): id_type {`);\n        this.primaryKey.push(`       return 0;`);\n        this.primaryKey.push(`    }`);\n    }\n\n    addSerializeExpr(expr: string): void {\n        this.serialize.push(expr);\n    }\n\n    addDeserializeExpr(expr: string): void {\n        this.deserialize.push(expr);\n    }\n\n    get indentity(): string {\n        return this.range.source.normalizedPath + this.range.toString() + this.classDeclaration.name.range.toString();\n    }\n\n    getInsertCode(): string {\n        var insertData = [];\n\n        if (this.needDeserialize) {\n            insertData.push(this.deserialize.join(\"\\n\"));\n        }\n        if (this.needSerialize) {\n            insertData.push(this.serialize.join(\"\\n\"));\n        }\n        if (this.needPrimaryKey) {\n            insertData.push(this.primaryKey.join(\"\\n\"));\n        }\n        return insertData.join(\"\\n\");\n    }\n}\n\nexport class SerializeInserter {\n\n    program: Program;\n\n    private serializeClassname: Set<string> = new Set<string>();\n\n    private insertPoints: Array<InsertPoint> = [];\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n\n    resolve(): void {\n        for (let [_, element] of this.program.elementsLookup) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let classDeclaration: ClassDeclaration = (<ClassPrototype>element).declaration;\n                if (AstUtil.impledSerializable(classDeclaration)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n                    if (!generator.toGenerateFlag()) {\n                        continue;\n                    }\n\n                    let serializePoint: SerializePoint = generator.getSerializePoints();\n\n                    if (!this.serializeClassname.has(serializePoint.indentity)) {\n                        this.insertPoints.push(serializePoint);\n                        this.serializeClassname.add(serializePoint.indentity);\n                    }\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n\n}\n\nexport class SuperInserter {\n\n    program: Program;\n\n    private insertPoints: Array<InsertPoint> = [];\n\n    private classNames: Set<string> = new Set<string>();\n\n    private baseClassNames: Set<string> = new Set<string>();\n\n    constructor(program: Program) {\n        this.program = program;\n        this.resolve();\n    }\n    resolve(): void {\n        for (let [_, element] of this.program.elementsLookup) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let classPrototype = <ClassPrototype>element;\n                let classDeclaration = classPrototype.declaration;\n                let identity = classDeclaration.range.source.normalizedPath + classDeclaration.range.toString() + classDeclaration.name.range.toString();\n                if (classPrototype.basePrototype && !this.classNames.has(identity)) {\n                    this.processSuper(classPrototype);\n                    this.classNames.add(identity);\n                }\n            }\n        }\n    }\n\n    getInsertPoints(): InsertPoint[] {\n        return this.insertPoints;\n    }\n\n    private processSuper(classPrototype: ClassPrototype): void {\n    \n        var constructorPrototype: FunctionPrototype | null = classPrototype.constructorPrototype;\n        if (!classPrototype.basePrototype) {\n            return;\n        }\n        var baseConstructorPrototype: FunctionPrototype | null = classPrototype.basePrototype.constructorPrototype;\n        if (!constructorPrototype) {\n            return;\n        }\n        var insertCallSuper = this.checkAndGetSuperCallExpr(classPrototype, constructorPrototype.declaration);\n        if (!baseConstructorPrototype) {\n            return;\n        }\n        this.insertPoints.push(insertCallSuper);\n        var baseFunctionDeclaration = baseConstructorPrototype.declaration;\n        var body: Statement | null = baseFunctionDeclaration.body;\n\n        if (body) {\n            // var content = body.range.toString();\n            let signature = baseFunctionDeclaration.signature.range.toString();\n            let method = this.createSuperCall(signature, body);\n            this.insertPoints.push(new InsertPoint(classPrototype.declaration.range, method));\n\n            // let range = classPrototype.basePrototype.declaration.range;\n            // let indentity =  range.source.normalizedPath + range.toString()        \n            // if (!this.baseClassNames.has(indentity)) {\n            //     this.insertPoints.push(new InsertPoint(classPrototype.basePrototype.declaration.range, method));\n            //     this.baseClassNames.add(indentity);\n            // }\n        }\n    }\n\n    /**\n     * \n     * @param classPrototype concrete class prototype\n     * @param concreteFunctionDeclaration base class constructor\n     */\n    private checkAndGetSuperCallExpr(classPrototype: ClassPrototype, concreteFunctionDeclaration: FunctionDeclaration): InsertPoint {\n        var className = classPrototype.simpleName;\n        if (!concreteFunctionDeclaration.body) {\n            throw new Error(`Class ${className}'s constructor should have super call.${this.location(concreteFunctionDeclaration.range)}`);\n        }\n        var stmt = concreteFunctionDeclaration.body;\n        if (stmt.kind == NodeKind.BLOCK) {\n            let blockStmt = <BlockStatement>stmt;\n            let superStmt: Statement | null = null;\n            for (let _stmt of blockStmt.statements) {\n                if (_stmt.kind != NodeKind.COMMENT) {\n                   superStmt = _stmt;\n                   break;\n                }\n            }\n            if (superStmt == null || superStmt.kind != NodeKind.EXPRESSION) {\n                throw new Error(`${className}'s constructor should have super call.${this.location(concreteFunctionDeclaration.range)}`);\n            }\n            let superExpr = <ExpressionStatement> superStmt;\n            if (superExpr.expression.kind != NodeKind.CALL) {\n                throw new Error(`Class ${className}'s constructor should have super call. ${this.location(concreteFunctionDeclaration.range)}`);\n            }\n            let superCallExpr = (<CallExpression> superExpr.expression).expression.range.toString();\n            if (superCallExpr != \"super\") {\n                throw new Error(`Class ${className}'s constructor should have super call. ${this.location(concreteFunctionDeclaration.range)}`);\n            }\n            let callexpr =  superExpr.range.toString();\n            let _superCall = `        this._${callexpr};`;\n            return new InsertPoint(superStmt.range, _superCall);\n        }\n        throw new Error(`${className}'s constructor should have super call.${this.location(concreteFunctionDeclaration.range)}`);\n    }\n\n    /**\n     * Create super call function \n     */\n    private createSuperCall(signature: string, body: Statement): string {\n        if (body.kind == NodeKind.BLOCK) {\n            let blockStmt = <BlockStatement>body;\n            let content = [];\n            for (let _stmt of blockStmt.statements) {\n                if (_stmt.kind == NodeKind.COMMENT) {\n                    //Do nothing\n                    continue;\n                } else if (_stmt.kind == NodeKind.EXPRESSION) {\n                     if ((<ExpressionStatement>_stmt).expression.kind == NodeKind.CALL) {\n                       let callIdentity = (<CallExpression>(<ExpressionStatement>_stmt).expression).expression.range.toString();\n                       if (callIdentity == \"super\") {\n                           // Do nothing\n                           continue;\n                       }\n                       content.push(_stmt.range.toString());\n                     }\n                }\n                content.push(_stmt.range.toString());\n            }\n            return `    _super${signature}: void { ${content.join(\"\\n\")} }`;\n        }\n        return `    _super${signature}: void ${body.range.toString()}`;\n    }\n\n    private location(range: Range): string {\n        return  \"in \" +\n        range.source.normalizedPath +\n        \":\" +\n        range.line.toString(10) +\n        \":\" +\n        range.column.toString(10);\n    }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\n      // FIXME: doesn't honor the actual externally visible name\n      this.visitElement(moduleExport.element);\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorator.range\n        );\n      }\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET | CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression?\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) return null;\n        expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos)); // is again callable\n      }\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n"],"sourceRoot":""}