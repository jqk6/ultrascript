{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__24__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","common_1","tokenizer_1","Token","Range","NodeKind","util_1","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","range","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","text","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","length","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","declaration","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","values","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizedPath","normalizePath","startsWith","resolvePath","source","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","assert","charCodeAt","ACTION","DATABASE","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","substring","Array","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","__export","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","line","column","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","warning","error","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","ref","_BinaryenModuleCreate","cachedByValue","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","index","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","None","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","target","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","internalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","exportName","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeFunction","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","sourceMap","readString","toText","Error","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","i32","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","I32","_BinaryenConstGetValueI32","I64","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","F32","_BinaryenConstGetValueF32","F64","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","setDebugLocation","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","_BinaryenFunctionGetBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","OperatorKind","diagnostics_1","types_1","ast_1","module_1","abi_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","stringInstance","mainFunction","resolvedThisExpression","resolvedElementExpression","sources","toAbi","abi","Abi","resolve","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryResolveImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","stringPrototype","has","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","filterDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","Duplicate_decorator","Decorator_0_is_not_valid_here","checkGlobalOptions","parentNode","hasDecorator","BUILTIN","isLibrary","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","staticField","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","global_1","resolveSignature","contextualTypeArguments","reportNotFound","thisType","resolveType","parameterTypeNodes","numParameters","parameterTypes","parameterNames","requiredParameters","hasRest","parameterTypeNode","DEFAULT","REST","parameterType","returnTypeNode","Signature","asNullable","typeNode","ENUM","instance","resolveUsingTypeArguments","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","context","flow","getScopedLocal","CLASS","resolvePropertyAccess","propertyAccess","contextualFunction","targetExpression","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","indexedGet","lookupOverload","Index_signature_is_missing_in_type_0","base","resolveElementAccess","elementAccess","classType","explicitLocal","_this_cannot_be_referenced_in_current_location","_super_can_only_be_referenced_in_a_derived_class","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","Element","program","replaceComma","str_1","str_1_1","ch","NAMESPACE","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","CONST","INLINED","constantFloatValue","Parameter","Local","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","resolveBuiltinTypeArguments","resolvedType","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","DECLARE","localIndex","local","inheritedTypeArguments_2","inheritedTypeArguments_2_1","parameterName","getParameterName","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","debugLocation","debugInfoRef","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_3","inheritedTypeArguments_3_1","_e","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Class","currentMemoryOffset","_f","_g","inheritedMember","partialConstructor","constructorInstance","_h","_j","fieldDeclaration","fieldType","fieldInstance","byteSize","instanceProperty","partialGetterPrototype","partialSetterPrototype","_k","_l","_m","operatorInstance","operatorPartial","asClass","inheritedTypeArguments_4","inheritedTypeArguments_4_1","baseType","isAssignableTo","current","unchecked","uncheckedOverload","overload","INTERFACE_PROTOTYPE","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","canConversionOverflow","SetLocal","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","Block","last","If","Select","Call","Unreachable","fromSize","toSize","g","eval","e","window","TypeKind","TypeFlags","cachedNullableType","ceil","nonNullableType","isize64","isize32","usize64","usize32","computeSmallIntegerShift","targetType","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","builtins_1","program_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileInlineConstant","compileExpression","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureTrampoline","ensureArgcSet","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","staticMembers","setter","ctorInstance","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","repeatLabel","alwaysTrue","condPre","incrExpr","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","precomputeExpression","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","compileCallInlineUnchecked","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","elementType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","compileAllocate","field","nativeFieldType","parentElement","builtinsFile","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","ctor","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Break","Switch","CallImport","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Return","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","AbiParameterKind","Struct","fields","AbiTypeAlias","newTypeName","wasmType","new_type_name","Action","ricardian_contract","Table","index_type","keys_names","keys_types","abiTypeLookup","typeAliasSet","structsLookup","elementLookup","abiInfo","version","structs","actions","tables","toAbiStruct","methodName","struct","types_1_1","typeKind","addAbiTypeAlias","typeKindName","originalTypeName","findContractOriginalType","typeAlias","commonaTypeName","findScriptOriginalTypeName","findScriptOriginalType","checkFuncPrototypeDecorator","funcPrototype","isActionDecorator","decorators_1","decorators_1_1","isWrapWithQutation","undefined","charAt","isActionFuncPrototype","funcType","resolveClassDecorator","decorators_2","decorators_2_1","retrieveArgumentText","resolveExpressionToStruct","argu","internelName","getInternalName","retrieveStructByInternalName","resolveClassPrototypeToStruct","filedDeclare","filedName","filedType","addStruct","isArray","getBaseTypeName","bracketIndex","checkName","nameMap","resolveAbiParameterType","baseTypeName","originalType","BOOL","NUMBER","resolveClassDispatcher","clzPrototype","hasActionDecorator","contractName","contractVarName","resolveFunctionPrototype","funcName","abiType","printTypeAliasInfo","typesLookupKeys","keys","typesLookupKeys_1","typesLookupKeys_1_1","console","typesAliasKeys","typesAliasKeys_1","typesAliasKeys_1_1","printElementLookUpInfo","keys_1","keys_1_1","dispatchBuffer","forEach","dispatch","assemblyDispatch","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","compiler","evaluateConstantType","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","deferASM","deferASMCall","typeArgument","valueType","allocateInternalName","allocatePrototype","An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf","allocateInstance","abortInternalName","abortPrototype","abortInstance","binaryen","Binaryen","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","ASC_TARGET","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","y","sign","isTrueish","fromCodePoint","Number","isInteger"],"mappings":"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KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAAAH,EAA4BpsE,EAAWshC,GACrC,GAAIthC,EAAOshC,EAAI,GAAI,OAAO,EAM1B,IAJA,IAEImrC,EAFArI,EAAK,EACLD,EAAK7iC,EAAI5zC,OAGN02E,EAAK,EAAID,GAAI,CAGlB,GAFAsI,EAAMrI,GAAMD,EAAKC,GAAM,EAEnB9iC,EADJmrC,GAAOA,EAAM,IACGzsE,GAAQA,GAAQshC,EAAImrC,EAAM,GACxC,OAAO,EAELzsE,EAAOshC,EAAImrC,GACbtI,EAAKsI,EAELrI,EAAKqI,EAAM,EAGf,OAAO,kFCjWT,IAAAjnD,EAAAj/B,EAAA,GAIAm/B,EAAAn/B,EAAA,GASAk/B,EAAAl/B,EAAA,GAMAo/B,EAAAp/B,EAAA,GAcAstD,EAAAttD,EAAA,GAUA,SAAA2+D,EACEwnB,EACArkF,EACA0C,EACAmlB,EACA8tC,EACAvjB,GAEA,IAEIv6B,EACAC,EACAC,EACA+Z,EALAp0B,EAAS2mF,EAAS3mF,OAWtB,OAAQsC,EAAUktB,cAIhB,IAAK,YACH,IAAIrqB,EAAOyhF,EAAqBD,EAAU3hF,EAAemlB,EAAUuqB,GAEnE,OADAiyC,EAAS93B,YAAcnvB,EAAAoE,KAAKU,KACvBr/B,EACEA,EAAKR,GAAE,KAAwBQ,EAAKR,GAAE,KACzC3E,EAAOipB,UAAU,GACjBjpB,EAAOipB,UAAU,GAHHjpB,EAAOyuB,oBAK3B,IAAK,UACCtpB,EAAOyhF,EAAqBD,EAAU3hF,EAAemlB,EAAUuqB,GAEnE,OADAiyC,EAAS93B,YAAcnvB,EAAAoE,KAAKU,KACvBr/B,EACEA,EAAKR,GAAE,GACV3E,EAAOipB,UAAU,GACjBjpB,EAAOipB,UAAU,GAHHjpB,EAAOyuB,oBAK3B,IAAK,WACCtpB,EAAOyhF,EAAqBD,EAAU3hF,EAAemlB,EAAUuqB,GAEnE,OADAiyC,EAAS93B,YAAcnvB,EAAAoE,KAAKU,KACvBr/B,EACEA,EAAKR,GAAE,GACV3E,EAAOipB,UAAU,GACjBjpB,EAAOipB,UAAU,GAHHjpB,EAAOyuB,oBAK3B,IAAK,cACCtpB,EAAOyhF,EAAqBD,EAAU3hF,EAAemlB,EAAUuqB,GAEnE,OADAiyC,EAAS93B,YAAcnvB,EAAAoE,KAAKU,KACvBr/B,GACLwhF,EAAS93B,YAAcnvB,EAAAoE,KAAKU,KACrBr/B,EAAKR,GAAE,KACV3E,EAAOipB,UAAU,GACjBjpB,EAAOipB,UAAU,IAJHjpB,EAAOyuB,oBAM3B,IAAK,WACCtpB,EAAOyhF,EAAqBD,EAAU3hF,EAAemlB,EAAUuqB,GAEnE,GADAiyC,EAAS93B,YAAcnvB,EAAAoE,KAAKU,MACvBr/B,EAAM,OAAOnF,EAAOyuB,oBAEzB,GADI6iB,EAAYnsC,EAAK2rC,eACN,CACb,IAAI/N,EAAiB4jD,EAAS30C,QAAQjP,eACtC,GAAIA,GAAkBuO,EAAUoI,eAAe3W,GAAiB,OAAO/iC,EAAOipB,UAAU,GAE1F,OAAOjpB,EAAOipB,UAAU,GAE1B,IAAK,UACC9jB,EAAOyhF,EAAqBD,EAAU3hF,EAAemlB,EAAUuqB,GAEnE,OADAiyC,EAAS93B,YAAcnvB,EAAAoE,KAAKU,KACvBr/B,EAEe,OADhBmsC,EAAYnsC,EAAK2rC,iBAC6D,MAAtDQ,EAAUL,eAAe6c,EAAAtuB,aAAaW,aAC9DngC,EAAOipB,UAAU,GACjBjpB,EAAOipB,UAAU,GAJHjpB,EAAOyuB,oBAS3B,IAAK,MACH,GAAuB,GAAnBtE,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKxO,IAAG,KAEzD,OAAQqxD,EAAS93B,YAAYjrD,MAC3B,OACA,OACA,OACA,OACEwwB,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQqhC,OAAQvlC,GACzC,MAEF,QACA,OACA,OACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQqhC,OAAQvlC,GACzC,MAEF,OACE,GAAIwsE,EAAS93B,YAAYlqD,GAAE,KAAuB,CAChDgiF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBACb,MAIJ,OACE2F,EAAMp0B,EAAO6pB,YACX88D,EAAS9iD,QAAQiB,SACblF,EAAAvhB,QAAQwzD,OACRjyC,EAAAvhB,QAAQqhC,OACZvlC,GAEF,MAEF,OACA,OACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQwzD,OAAQ13D,GACzC,MAEF,QACEwsE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAET,IAAK,MACH,GAAuB,GAAnBjK,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKxO,IAAG,KAEzD,OAAQqxD,EAAS93B,YAAYjrD,MAC3B,OACA,OACA,OACA,OACEwwB,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQshC,OAAQxlC,GACzC,MAEF,QACA,OACA,OACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQshC,OAAQxlC,GACzC,MAEF,OACE,GAAIwsE,EAAS93B,YAAYlqD,GAAE,KAAuB,CAChDgiF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBACb,MAIJ,OACE2F,EAAMp0B,EAAO6pB,YACX88D,EAAS9iD,QAAQiB,SACblF,EAAAvhB,QAAQyzD,OACRlyC,EAAAvhB,QAAQshC,OACZxlC,GAEF,MAEF,OACA,OACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQyzD,OAAQ33D,GACzC,MAEF,QACEwsE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAET,IAAK,SACH,GAAuB,GAAnBjK,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKxO,IAAG,KAEzD,OAAQqxD,EAAS93B,YAAYjrD,MAC3B,OACA,OACA,OACA,OACEwwB,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQuhC,UAAWzlC,GAC5C,MAEF,QACA,OACA,OACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQuhC,UAAWzlC,GAC5C,MAEF,OACE,GAAIwsE,EAAS93B,YAAYlqD,GAAE,KAAuB,CAChDgiF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBACb,MAIJ,OACE2F,EAAMp0B,EAAO6pB,YACX88D,EAAS9iD,QAAQiB,SACblF,EAAAvhB,QAAQ0zD,UACRnyC,EAAAvhB,QAAQuhC,UACZzlC,GAEF,MAEF,OACA,OACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQ0zD,UAAW53D,GAC5C,MAEF,QACEwsE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAET,IAAK,OACH,GAAuB,GAAnBjK,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKxO,IAAG,KAGzD,OADAlb,EAAOusE,EAAS70B,kBAAkB3nC,EAAS,GAAIw8D,EAAS93B,YAAW,KAC3D83B,EAAS93B,YAAYjrD,MAC3B,OACA,OACA,OACA,OACA,QACEwwB,EAAMuyD,EAASrtB,uBACbt5D,EAAOgqB,aAAa4V,EAAAle,SAASgxD,QAASv4D,EAAMC,GAC5CusE,EAAS93B,aAIb,OACA,OACEz6B,EAAMp0B,EAAOgqB,aAAa4V,EAAAle,SAASgxD,QAASv4D,EAAMC,GAClD,MAEF,OACE,GAAIusE,EAAS93B,YAAYlqD,GAAE,KAAuB,CAChDgiF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBACb,MAIJ,OACE2F,EAAMp0B,EAAOgqB,aACX28D,EAAS9iD,QAAQiB,SACblF,EAAAle,SAASkxD,QACThzC,EAAAle,SAASgxD,QACbv4D,EACAC,GAEF,MAEF,OACA,OACEga,EAAMp0B,EAAOgqB,aAAa4V,EAAAle,SAASkxD,QAASz4D,EAAMC,GAClD,MAEF,QACEusE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAET,IAAK,OACH,GAAuB,GAAnBjK,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKxO,IAAG,KAGzD,OADAlb,EAAOusE,EAAS70B,kBAAkB3nC,EAAS,GAAIw8D,EAAS93B,YAAW,KAC3D83B,EAAS93B,YAAYjrD,MAC3B,OACA,OACA,OACA,OACA,QACEwwB,EAAMuyD,EAASrtB,uBACbt5D,EAAOgqB,aAAa4V,EAAAle,SAASixD,QAASx4D,EAAMC,GAC5CusE,EAAS93B,aAEX,MAEF,OACA,OACEz6B,EAAMp0B,EAAOgqB,aAAa4V,EAAAle,SAASixD,QAASx4D,EAAMC,GAClD,MAEF,OACE,GAAIusE,EAAS93B,YAAYlqD,GAAE,KAAuB,CAChDgiF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBACb,MAIJ,OACE2F,EAAMp0B,EAAOgqB,aACX28D,EAAS9iD,QAAQiB,SACblF,EAAAle,SAASmxD,QACTjzC,EAAAle,SAASixD,QACbx4D,EACAC,GAEF,MAEF,OACA,OACEga,EAAMp0B,EAAOgqB,aAAa4V,EAAAle,SAASmxD,QAAS14D,EAAMC,GAClD,MAEF,QACEusE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAET,IAAK,MACH,GAAuB,GAAnBjK,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKY,IAAG,KAEzD,OAAQiiD,EAAS93B,YAAYjrD,MAC3B,OACA,OACA,OAEE,IAAIizD,EAAY8vB,EAASvsC,gBAAgBvD,oBAAoBnX,EAAAoE,KAAKxO,KAAK,GACvElB,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeosC,EAAUtsC,MAAOpQ,GACvCna,EAAOgqB,aAAa4V,EAAAle,SAASg6C,OAC3B17D,EAAOipB,UAAU,GACjBjpB,EAAOsqB,eAAeusC,EAAUtsC,MAAOqV,EAAA7jB,WAAW8Z,MAEpD71B,EAAOgqB,aAAa4V,EAAAle,SAASu8B,MAC3Bj+C,EAAOsqB,eAAeusC,EAAUtsC,MAAOqV,EAAA7jB,WAAW8Z,KAClD71B,EAAOipB,UAAU,KAGrB,MAEF,OACM4tC,EAAY8vB,EAASvsC,gBAAgBvD,oBAAoB8vC,EAAS9iD,QAAQU,WAAW,GACzFnQ,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeosC,EAAUtsC,MAAOpQ,GACvCna,EAAOgqB,aACL28D,EAAS9iD,QAAQiB,SACblF,EAAAle,SAASi6C,OACT/7B,EAAAle,SAASg6C,OACbirB,EAAS9iD,QAAQU,UAAUsd,aAAa7hD,GACxCA,EAAOsqB,eAAeusC,EAAUtsC,MAAOo8D,EAAS9iD,QAAQqvB,iBAE1DlzD,EAAOgqB,aACL28D,EAAS9iD,QAAQiB,SACblF,EAAAle,SAASy8B,MACTve,EAAAle,SAASu8B,MACbj+C,EAAOsqB,eAAeusC,EAAUtsC,MAAOo8D,EAAS9iD,QAAQqvB,gBACxDyzB,EAAS9iD,QAAQU,UAAUsd,aAAa7hD,KAG5C,MAEF,OACM62D,EAAY8vB,EAASvsC,gBAAgBvD,oBAAoBnX,EAAAoE,KAAKG,KAAK,GACvE7P,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeosC,EAAUtsC,MAAOpQ,GACvCna,EAAOgqB,aAAa4V,EAAAle,SAASi6C,OAC3B37D,EAAOqpB,UAAU,EAAG,GACpBrpB,EAAOsqB,eAAeusC,EAAUtsC,MAAOqV,EAAA7jB,WAAWga,MAEpD/1B,EAAOgqB,aAAa4V,EAAAle,SAASy8B,MAC3Bn+C,EAAOsqB,eAAeusC,EAAUtsC,MAAOqV,EAAA7jB,WAAWga,KAClD/1B,EAAOqpB,UAAU,EAAG,KAGxB,MAEF,OACE,GAAIs9D,EAAS93B,YAAYlqD,GAAE,KAAuB,CAChDgiF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBACb,MAIJ,OACA,OACA,OACA,OACA,QACE2F,EAAMja,EACN,MAEF,QACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQkzD,OAAQp3D,GACzC,MAEF,QACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQ2zD,OAAQ73D,GACzC,MAEF,QACEia,EAAMp0B,EAAOyuB,oBACb,MAEF,QACEk4D,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAET,IAAK,MACH,GAAuB,GAAnBjK,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKY,IAAG,KAGzD,OADAtqB,EAAOusE,EAAS70B,kBAAkB3nC,EAAS,GAAIw8D,EAAS93B,YAAW,KAC3D83B,EAAS93B,YAAYjrD,MAC3B,OACA,OACA,OACE,IAAIusC,EAAOw2C,EAASvsC,gBAAgBjK,KAChC02C,EAAaF,EAASvsC,gBAAgB9D,aACxCqwC,EAAS93B,aACR1e,EAAKuM,YAAYviC,EAAMwsE,EAAS93B,cAE/Bi4B,EAAaH,EAASvsC,gBAAgBvD,oBACxC8vC,EAAS93B,aACR1e,EAAKuM,YAAYtiC,EAAMusE,EAAS93B,cAEnC83B,EAASvsC,gBAAgBxD,cAAciwC,GACvCzyD,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeo8D,EAAWt8D,MAAOpQ,GACxCna,EAAOyqB,eAAeq8D,EAAWv8D,MAAOnQ,GACxCpa,EAAOgqB,aAAa4V,EAAAle,SAASu8B,MAC3Bj+C,EAAOsqB,eAAeu8D,EAAWt8D,MAAOqV,EAAA7jB,WAAW8Z,KACnD71B,EAAOsqB,eAAew8D,EAAWv8D,MAAOqV,EAAA7jB,WAAW8Z,OAGvD,MAEF,OACA,OACA,OACA,QACMsa,EAAOw2C,EAASvsC,gBAAgBjK,KAChC02C,EAAaF,EAASvsC,gBAAgB9D,aACxCqwC,EAAS93B,aACR1e,EAAKuM,YAAYviC,EAAMwsE,EAAS93B,cAE/Bi4B,EAAaH,EAASvsC,gBAAgBvD,oBACxC8vC,EAAS93B,aACR1e,EAAKuM,YAAYtiC,EAAMusE,EAAS93B,cAEnC83B,EAASvsC,gBAAgBxD,cAAciwC,GACvCzyD,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeo8D,EAAWt8D,MAAOpQ,GACxCna,EAAOyqB,eAAeq8D,EAAWv8D,MAAOnQ,GACxCpa,EAAOgqB,aAAa4V,EAAAle,SAASw8B,MAC3Bl+C,EAAOsqB,eAAeu8D,EAAWt8D,MAAOqV,EAAA7jB,WAAW8Z,KACnD71B,EAAOsqB,eAAew8D,EAAWv8D,MAAOqV,EAAA7jB,WAAW8Z,OAGvD,MAEF,OACMgxD,EAAaF,EAASvsC,gBAAgB9D,aAAa5W,EAAAoE,KAAKG,KAAK,GAC7D6iD,EAAaH,EAASvsC,gBAAgBvD,oBAAoBnX,EAAAoE,KAAKG,KAAK,GACxE0iD,EAASvsC,gBAAgBxD,cAAciwC,GACvCzyD,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeo8D,EAAWt8D,MAAOpQ,GACxCna,EAAOyqB,eAAeq8D,EAAWv8D,MAAOnQ,GACxCpa,EAAOgqB,aAAa4V,EAAAle,SAASy8B,MAC3Bn+C,EAAOsqB,eAAeu8D,EAAWt8D,MAAOqV,EAAA7jB,WAAWga,KACnD/1B,EAAOsqB,eAAew8D,EAAWv8D,MAAOqV,EAAA7jB,WAAWga,OAGvD,MAEF,OACM8wD,EAAaF,EAASvsC,gBAAgB9D,aAAa5W,EAAAoE,KAAKG,KAAK,GAC7D6iD,EAAaH,EAASvsC,gBAAgBvD,oBAAoBnX,EAAAoE,KAAKG,KAAK,GACxE0iD,EAASvsC,gBAAgBxD,cAAciwC,GACvCzyD,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeo8D,EAAWt8D,MAAOpQ,GACxCna,EAAOyqB,eAAeq8D,EAAWv8D,MAAOnQ,GACxCpa,EAAOgqB,aAAa4V,EAAAle,SAAS08B,MAC3Bp+C,EAAOsqB,eAAeu8D,EAAWt8D,MAAOqV,EAAA7jB,WAAWga,KACnD/1B,EAAOsqB,eAAew8D,EAAWv8D,MAAOqV,EAAA7jB,WAAWga,OAGvD,MAEF,OACM8wD,EAAaF,EAASvsC,gBAAgB9D,aAAaqwC,EAAS9iD,QAAQU,WAAW,GAC/EuiD,EAAaH,EAASvsC,gBAAgBvD,oBAAoB8vC,EAAS9iD,QAAQU,WAAW,GAC1FoiD,EAASvsC,gBAAgBxD,cAAciwC,GACvCzyD,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeo8D,EAAWt8D,MAAOpQ,GACxCna,EAAOyqB,eAAeq8D,EAAWv8D,MAAOnQ,GACxCpa,EAAOgqB,aACL28D,EAAS9iD,QAAQiB,SACblF,EAAAle,SAASy8B,MACTve,EAAAle,SAASu8B,MACbj+C,EAAOsqB,eAAeu8D,EAAWt8D,MAAOo8D,EAAS9iD,QAAQqvB,gBACzDlzD,EAAOsqB,eAAew8D,EAAWv8D,MAAOo8D,EAAS9iD,QAAQqvB,kBAG7D,MAEF,OACE,GAAIyzB,EAAS93B,YAAYlqD,GAAE,KAAuB,CAChDgiF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBACb,MAEEo4D,EAAaF,EAASvsC,gBAAgB9D,aAAaqwC,EAAS9iD,QAAQU,WAAW,GAC/EuiD,EAAaH,EAASvsC,gBAAgBvD,oBAAoB8vC,EAAS9iD,QAAQU,WAAW,GAC1FoiD,EAASvsC,gBAAgBxD,cAAciwC,GACvCzyD,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeo8D,EAAWt8D,MAAOpQ,GACxCna,EAAOyqB,eAAeq8D,EAAWv8D,MAAOnQ,GACxCpa,EAAOgqB,aACL28D,EAAS9iD,QAAQiB,SACblF,EAAAle,SAAS08B,MACTxe,EAAAle,SAASw8B,MACbl+C,EAAOsqB,eAAeu8D,EAAWt8D,MAAOo8D,EAAS9iD,QAAQqvB,gBACzDlzD,EAAOsqB,eAAew8D,EAAWv8D,MAAOo8D,EAAS9iD,QAAQqvB,kBAG7D,MAEF,QACE9+B,EAAMp0B,EAAOgqB,aAAa4V,EAAAle,SAASsxD,OAAQ74D,EAAMC,GACjD,MAEF,QACEga,EAAMp0B,EAAOgqB,aAAa4V,EAAAle,SAASyxD,OAAQh5D,EAAMC,GACjD,MAEF,QACEusE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAET,IAAK,MACH,GAAuB,GAAnBjK,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKY,IAAG,KAGzD,OADAtqB,EAAOusE,EAAS70B,kBAAkB3nC,EAAS,GAAIw8D,EAAS93B,YAAW,KAC3D83B,EAAS93B,YAAYjrD,MAC3B,OACA,OACA,OACMusC,EAAOw2C,EAASvsC,gBAAgBjK,KAChC02C,EAAaF,EAASvsC,gBAAgB9D,aACxCqwC,EAAS93B,aACR1e,EAAKuM,YAAYviC,EAAMwsE,EAAS93B,cAE/Bi4B,EAAaH,EAASvsC,gBAAgBvD,oBACxC8vC,EAAS93B,aACR1e,EAAKuM,YAAYtiC,EAAMusE,EAAS93B,cAEnC83B,EAASvsC,gBAAgBxD,cAAciwC,GACvCzyD,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeo8D,EAAWt8D,MAAOpQ,GACxCna,EAAOyqB,eAAeq8D,EAAWv8D,MAAOnQ,GACxCpa,EAAOgqB,aAAa4V,EAAAle,SAAS27B,MAC3Br9C,EAAOsqB,eAAeu8D,EAAWt8D,MAAOqV,EAAA7jB,WAAW8Z,KACnD71B,EAAOsqB,eAAew8D,EAAWv8D,MAAOqV,EAAA7jB,WAAW8Z,OAGvD,MAEF,OACA,OACA,OACA,QACMsa,EAAOw2C,EAASvsC,gBAAgBjK,KAChC02C,EAAaF,EAASvsC,gBAAgB9D,aACxCqwC,EAAS93B,aACR1e,EAAKuM,YAAYviC,EAAMwsE,EAAS93B,cAE/Bi4B,EAAaH,EAASvsC,gBAAgBvD,oBACxC8vC,EAAS93B,aACR1e,EAAKuM,YAAYtiC,EAAMusE,EAAS93B,cAEnC83B,EAASvsC,gBAAgBxD,cAAciwC,GACvCzyD,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeo8D,EAAWt8D,MAAOpQ,GACxCna,EAAOyqB,eAAeq8D,EAAWv8D,MAAOnQ,GACxCpa,EAAOgqB,aAAa4V,EAAAle,SAAS47B,MAC3Bt9C,EAAOsqB,eAAeu8D,EAAWt8D,MAAOqV,EAAA7jB,WAAW8Z,KACnD71B,EAAOsqB,eAAew8D,EAAWv8D,MAAOqV,EAAA7jB,WAAW8Z,OAGvD,MAEF,OACMgxD,EAAaF,EAASvsC,gBAAgB9D,aAAa5W,EAAAoE,KAAKG,KAAK,GAC7D6iD,EAAaH,EAASvsC,gBAAgBvD,oBAAoBnX,EAAAoE,KAAKG,KAAK,GACxE0iD,EAASvsC,gBAAgBxD,cAAciwC,GACvCzyD,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeo8D,EAAWt8D,MAAOpQ,GACxCna,EAAOyqB,eAAeq8D,EAAWv8D,MAAOnQ,GACxCpa,EAAOgqB,aAAa4V,EAAAle,SAAS67B,MAC3Bv9C,EAAOsqB,eAAeu8D,EAAWt8D,MAAOqV,EAAA7jB,WAAWga,KACnD/1B,EAAOsqB,eAAew8D,EAAWv8D,MAAOqV,EAAA7jB,WAAWga,OAGvD,MAEF,OACM8wD,EAAaF,EAASvsC,gBAAgB9D,aAAa5W,EAAAoE,KAAKG,KAAK,GAC7D6iD,EAAaH,EAASvsC,gBAAgBvD,oBAAoBnX,EAAAoE,KAAKG,KAAK,GACxE0iD,EAASvsC,gBAAgBxD,cAAciwC,GACvCzyD,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeo8D,EAAWt8D,MAAOpQ,GACxCna,EAAOyqB,eAAeq8D,EAAWv8D,MAAOnQ,GACxCpa,EAAOgqB,aAAa4V,EAAAle,SAAS87B,MAC3Bx9C,EAAOsqB,eAAeu8D,EAAWt8D,MAAOqV,EAAA7jB,WAAWga,KACnD/1B,EAAOsqB,eAAew8D,EAAWv8D,MAAOqV,EAAA7jB,WAAWga,OAGvD,MAEF,OACM8wD,EAAaF,EAASvsC,gBAAgB9D,aAAaqwC,EAAS9iD,QAAQU,WAAW,GAC/EuiD,EAAaH,EAASvsC,gBAAgBvD,oBAAoB8vC,EAAS9iD,QAAQU,WAAW,GAC1FoiD,EAASvsC,gBAAgBxD,cAAciwC,GACvCzyD,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeo8D,EAAWt8D,MAAOpQ,GACxCna,EAAOyqB,eAAeq8D,EAAWv8D,MAAOnQ,GACxCpa,EAAOgqB,aACL28D,EAAS9iD,QAAQiB,SACblF,EAAAle,SAAS67B,MACT3d,EAAAle,SAAS27B,MACbr9C,EAAOsqB,eAAeu8D,EAAWt8D,MAAOo8D,EAAS9iD,QAAQqvB,gBACzDlzD,EAAOsqB,eAAew8D,EAAWv8D,MAAOo8D,EAAS9iD,QAAQqvB,kBAG7D,MAEF,OACE,GAAIyzB,EAAS93B,YAAYlqD,GAAE,KAAuB,CAChDgiF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBACb,MAEEo4D,EAAaF,EAASvsC,gBAAgB9D,aAAaqwC,EAAS9iD,QAAQU,WAAW,GAC/EuiD,EAAaH,EAASvsC,gBAAgBvD,oBAAoB8vC,EAAS9iD,QAAQU,WAAW,GAC1FoiD,EAASvsC,gBAAgBxD,cAAciwC,GACvCzyD,EAAMp0B,EAAOytB,aACXztB,EAAOyqB,eAAeo8D,EAAWt8D,MAAOpQ,GACxCna,EAAOyqB,eAAeq8D,EAAWv8D,MAAOnQ,GACxCpa,EAAOgqB,aACL28D,EAAS9iD,QAAQiB,SACblF,EAAAle,SAAS87B,MACT5d,EAAAle,SAAS47B,MACbt9C,EAAOsqB,eAAeu8D,EAAWt8D,MAAOo8D,EAAS9iD,QAAQqvB,gBACzDlzD,EAAOsqB,eAAew8D,EAAWv8D,MAAOo8D,EAAS9iD,QAAQqvB,kBAG7D,MAEF,QACE9+B,EAAMp0B,EAAOgqB,aAAa4V,EAAAle,SAASqxD,OAAQ54D,EAAMC,GACjD,MAEF,QACEga,EAAMp0B,EAAOgqB,aAAa4V,EAAAle,SAASwxD,OAAQ/4D,EAAMC,GACjD,MAEF,QACEusE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAET,IAAK,OACH,GAAuB,GAAnBjK,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKY,IAAG,KAEzD,OAAQiiD,EAAS93B,YAAYjrD,MAC3B,OACE,GAAI+iF,EAAS93B,YAAYlqD,GAAE,KAAuB,CAChDgiF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBACb,MAIJ,QACE2F,EAAMja,EACN,MAEF,QACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQmzD,QAASr3D,GAC1C,MAEF,QACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQ4zD,QAAS93D,GAC1C,MAEF,QACEwsE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAET,IAAK,QACH,GAAuB,GAAnBjK,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKY,IAAG,KAEzD,OAAQiiD,EAAS93B,YAAYjrD,MAC3B,OACE,GAAI+iF,EAAS93B,YAAYlqD,GAAE,KAAuB,CAChDgiF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBACb,MAIJ,QACE2F,EAAMja,EACN,MAEF,QACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQozD,SAAUt3D,GAC3C,MAEF,QACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQ6zD,SAAU/3D,GAC3C,MAEF,QACEwsE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAET,IAAK,WACH,GAAuB,GAAnBjK,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKY,IAAG,KAGzD,OADAtqB,EAAOusE,EAAS70B,kBAAkB3nC,EAAS,GAAIw8D,EAAS93B,YAAW,KAC3D83B,EAAS93B,YAAYjrD,MAC3B,QACEwwB,EAAMp0B,EAAOgqB,aAAa4V,EAAAle,SAASoxD,YAAa34D,EAAMC,GACtD,MAEF,QACEga,EAAMp0B,EAAOgqB,aAAa4V,EAAAle,SAASuxD,YAAa94D,EAAMC,GACtD,MAEF,QACEusE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAET,IAAK,UACH,GAAuB,GAAnBjK,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKY,IAAG,KAEzD,OAAQiiD,EAAS93B,YAAYjrD,MAC3B,OACE,GAAI+iF,EAAS93B,YAAYlqD,GAAE,KAAuB,CAChDgiF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBACb,MAIJ,QACE2F,EAAMja,EACN,MAEF,QACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQszD,WAAYx3D,GAC7C,MAEF,QACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQ+zD,WAAYj4D,GAC7C,MAEF,QACEwsE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAET,IAAK,cACH,GAAuB,GAAnBjK,EAASxiB,OAYX,OAXM3C,GAAyC,GAAxBA,EAAc2C,SAC/B3C,GAAiBA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAChF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgT,SAAS,IAAM,MAG/EgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,IAAMzpB,GAAyC,GAAxBA,EAAc2C,OAMnC,OALI3C,GAAiBA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAChF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgT,SAAS,IAAM,KAEtE3a,EAAOyuB,oBAEhB,OAAQzpB,EAAc,GAAGpB,MACvB,OACA,OACEuW,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKW,IAAG,KACvDrQ,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQi0D,eAAgBn4D,GACjD,MAEF,OACA,OACEA,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKY,IAAG,KACvDtQ,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQk0D,eAAgBp4D,GACjD,MAEF,OACE,GAAInV,EAAc,GAAGL,GAAE,KAMrB,OALAgiF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbyhF,EAAS93B,YAAc7pD,EAAc,GAC9BhF,EAAOyuB,oBAIlB,OACEtU,EAAOwsE,EAAS70B,kBACd3nC,EAAS,GACTw8D,EAAS9iD,QAAQiB,SACbpF,EAAAoE,KAAKY,IACLhF,EAAAoE,KAAKW,IAAG,KAIdrQ,EAAMp0B,EAAO6pB,YACX88D,EAAS9iD,QAAQiB,SACblF,EAAAvhB,QAAQk0D,eACR3yC,EAAAvhB,QAAQi0D,eACZn4D,GAEF,MAEF,QACEA,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKxO,IAAG,KACvDlB,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQm0D,eAAgBr4D,GACjD,MAEF,QACEA,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKG,IAAG,KACvD7P,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQo0D,eAAgBt4D,GACjD,MAEF,QACEwsE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAKjB,OADAk4D,EAAS93B,YAAc7pD,EAAc,GAC9BovB,EAET,IAAK,OACH,GAAuB,GAAnBjK,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKY,IAAG,KAEzD,OAAQiiD,EAAS93B,YAAYjrD,MAC3B,QACEwwB,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQuzD,QAASz3D,GAC1C,MAEF,QACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQg0D,QAASl4D,GAC1C,MAGF,QACEwsE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAET,IAAK,QACH,GAAuB,GAAnBjK,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,GAAiBA,EAAc2C,OAAQ,CAEzC,GADAg/E,EAAS93B,YAAc7pD,EAAc,GACT,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKY,IAAG,KAEzD,OAAQiiD,EAAS93B,YAAYjrD,MAC3B,OACE,GAAI+iF,EAAS93B,YAAYlqD,GAAE,KAAuB,CAChDgiF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBACb,MAIJ,QACE2F,EAAMja,EACN,MAGF,QACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQqzD,SAAUv3D,GAC3C,MAEF,QACEia,EAAMp0B,EAAO6pB,YAAY+V,EAAAvhB,QAAQ8zD,SAAUh4D,GAC3C,MAEF,QACEwsE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAKT,IAAK,OACH,OAAIjK,EAASxiB,OAAS,GAAKwiB,EAASxiB,OAAS,GACrC3C,GAAyC,GAAxBA,EAAc2C,QACnCg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgT,SAAS,IAAM,KAG3EwP,EAASxiB,OAAS,EACpBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAe0lD,wCACf7qB,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAGlDgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAG7C3a,EAAOyuB,qBAEVzpB,GAAyC,GAAxBA,EAAc2C,QAQrCwS,EAAOwsE,EAAS70B,kBACd3nC,EAAS,GACTw8D,EAAS9iD,QAAQU,UAAS,MAIxBld,EAA4B,GAAnB8C,EAASxiB,OAAco/E,EAAuBJ,EAAUx8D,EAAS,IAAM,GACvE,EACJnqB,EAAOyuB,qBAEhBk4D,EAAS93B,YAAc7pD,EAAc,GAC9BhF,EAAO6qB,WACZ7lB,EAAc,GAAG6zC,SACjB7zC,EAAc,GAAGL,GAAG,GACpBwV,EACAnV,EAAc,GAAGL,GAAE,IACnBszD,EAAetzD,GAAE,IACjBszD,EAAe/Y,KAAOl6C,EAAc,GAAGk6C,MAClCynC,EAAS93B,YAAcoJ,GAAgBxhB,gBACvCkwC,EAAS93B,YAAc7pD,EAAc,IAAIyxC,eAC9CpvB,MA3BIriB,GAAiBA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAChF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgT,SAAS,IAAM,KAEtE3a,EAAOyuB,qBAyBlB,IAAK,QAEH,GADAk4D,EAAS93B,YAAcnvB,EAAAoE,KAAKa,KACxBxa,EAASxiB,OAAS,GAAKwiB,EAASxiB,OAAS,EAkB3C,OAjBM3C,GAAyC,GAAxBA,EAAc2C,QACnCg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgT,SAAS,IAAM,KAG3EwP,EAASxiB,OAAS,EACpBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAe0lD,wCACf7qB,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAGlDgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAG7C3a,EAAOyuB,oBAEhB,IAAMzpB,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJAg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgT,SAAS,IAAM,KAEtE3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBACd3nC,EAAS,GACTw8D,EAAS9iD,QAAQU,UAAS,KAI5BnqB,EAAOusE,EAAS70B,kBACd3nC,EAAS,GACTnlB,EAAc,GACdA,EAAc,GAAGL,GAAE,GAChB,EACA,EAAwB,GAGzBQ,OAAI,EAoBR,OAlBEH,EAAc,GAAGL,GAAE,MAEhBgiF,EAAS93B,YAAYlqD,GAAE,IACxBgiF,EAAS93B,YAAY3P,KAAOl6C,EAAc,GAAGk6C,OAG/C9kC,EAAOusE,EAASttB,kBACdj/C,EACAusE,EAAS93B,YAAa7pD,EAAc,GAAE,IAGtCmlB,EAAS,IAEXhlB,EAAOH,EAAc,IAErBG,EAAOwhF,EAAS93B,aAEdxnC,EAA4B,GAAnB8C,EAASxiB,OAAco/E,EAAuBJ,EAAUx8D,EAAS,IAAM,GACvE,EACJnqB,EAAOyuB,qBAEhBk4D,EAAS93B,YAAcnvB,EAAAoE,KAAKa,KACrB3kC,EAAOkrB,YAAYlmB,EAAc,GAAG6zC,SAAU1+B,EAAMC,EAAMjV,EAAKsxC,eAAgBpvB,IAExF,IAAK,SAEH,GADAs/D,EAAS93B,YAAc83B,EAAS9iD,QAAQU,UACjB,GAAnBpa,EAASxiB,OAWX,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnCg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgT,SAAS,IAAM,KAG/EgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEVzpB,GAAyC,GAAxBA,EAAc2C,QACnCg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgT,SAAS,IAAM,KAG/E,IAAIk+B,EAAoB7zC,EAAe,GAAG6zC,SAkB1C,OAjBI8tC,EAAS9iD,QAAQiB,SAEfmzB,EAAetzD,GAAE,IAAuBszD,EAAe/Y,MAAQ,IACjEynC,EAAS93B,YAAcnvB,EAAAoE,KAAKO,IAC5BjQ,EAAMp0B,EAAOipB,UAAU4vB,IAEvBzkB,EAAMp0B,EAAOqpB,UAAUwvB,EAAU,GAI/Bof,EAAetzD,GAAE,IAA8C,IAAvBszD,EAAe/Y,MACzDynC,EAAS93B,YAAcnvB,EAAAoE,KAAKQ,IAC5BlQ,EAAMp0B,EAAOqpB,UAAUwvB,EAAU,IAEjCzkB,EAAMp0B,EAAOipB,UAAU4vB,GAGpBzkB,EAET,IAAK,UAEH,GADAuyD,EAAS93B,YAAc83B,EAAS9iD,QAAQU,UACjB,GAAnBpa,EAASxiB,OAWX,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnCg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgT,SAAS,IAAM,KAG/EgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,IAAMzpB,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJAg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgT,SAAS,IAAM,KAEtE3a,EAAOyuB,oBAEhB,IACIu4D,OAAS,EACb,OAFInuC,EAAoB7zC,EAAe,GAAG6zC,UAGxC,KAAK,EAAKmuC,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,QAA0B,OAAfv0E,QAAO,GAAezS,EAAOyuB,oBAmB1C,OAjBIk4D,EAAS9iD,QAAQiB,SAEfmzB,EAAetzD,GAAE,IAAuBszD,EAAe/Y,MAAQ,IACjEynC,EAAS93B,YAAcnvB,EAAAoE,KAAKO,IAC5BjQ,EAAMp0B,EAAOipB,UAAU+9D,IAEvB5yD,EAAMp0B,EAAOqpB,UAAU29D,EAAW,GAIhC/uB,EAAetzD,GAAE,IAA8C,IAAvBszD,EAAe/Y,MACzDynC,EAAS93B,YAAcnvB,EAAAoE,KAAKQ,IAC5BlQ,EAAMp0B,EAAOqpB,UAAU29D,EAAW,IAElC5yD,EAAMp0B,EAAOipB,UAAU+9D,GAGpB5yD,EAET,IAAK,WAEH,GADAuyD,EAAS93B,YAAc83B,EAAS9iD,QAAQU,UACpCpa,EAASxiB,OAAS,EAWpB,OAVM3C,GAAyC,GAAxBA,EAAc2C,QACnCg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgT,SAAS,IAAM,KAG/EgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,IAAMzpB,GAAyC,GAAxBA,EAAc2C,OAKnC,OAJAg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgT,SAAS,IAAM,KAEtE3a,EAAOyuB,oBAEhB,IAAI6iB,EACJ,KADIA,EAAYtsC,EAAc,GAAG8rC,gBAM/B,OAJA61C,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAENlF,EAAOyuB,oBAEhB,IAAIpH,OAAM,EACV,GAAI8C,EAASxiB,OAAQ,CACnB,GACEwiB,EAAS,GAAGvmB,MAAQ+7B,EAAAl8B,SAASI,SACTsmB,EAAS,GAAIrW,aAAe6rB,EAAA/rB,YAAYiB,OAM5D,OAJA8xE,EAAS7qE,MACP2jB,EAAA5lB,eAAeiyB,wBACf3hB,EAAS,GAAGjlB,OAEPlF,EAAOyuB,oBAEhB,IAAIw4D,EAAsC98D,EAAS,GAAIxoB,MACnDikE,EAAQt0B,EAAU9kC,QAAU8kC,EAAU9kC,QAAQjL,IAAI0lF,GAAa,KACnE,IAAMrhB,GAASA,EAAMhiE,MAAQkqD,EAAA5rB,YAAY2O,MAKvC,OAJA81C,EAAS7qE,MACP2jB,EAAA5lB,eAAeqtE,yBACf/8D,EAAS,GAAGjlB,MAAOosC,EAAU9hB,aAAcy3D,GAEtCjnF,EAAOyuB,oBAEhBpH,EAAiBu+C,EAAOnuB,kBAExBpwB,EAASiqB,EAAU4G,oBAErB,OAAIyuC,EAAS9iD,QAAQiB,SAEfmzB,EAAetzD,GAAE,IAAuBszD,EAAe/Y,MAAQ,IACjEynC,EAAS93B,YAAcnvB,EAAAoE,KAAKO,IACrBrkC,EAAOipB,UAAU5B,IAEjBrnB,EAAOqpB,UAAUhC,GAItB4wC,EAAetzD,GAAE,IAA8C,IAAvBszD,EAAe/Y,MACzDynC,EAAS93B,YAAcnvB,EAAAoE,KAAKQ,IACrBtkC,EAAOqpB,UAAUhC,IAEjBrnB,EAAOipB,UAAU5B,GAO9B,IAAK,SACH,GAAuB,GAAnB8C,EAASxiB,OAcX,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAASr1B,4BAA4BnnC,EAAS,GAAIuV,EAAAoE,KAAKxO,IAAG,GAE/DnwB,EAAOwhF,EAAS93B,YAOpB,OANAz0C,EAAOusE,EAAS70B,kBAAkB3nC,EAAS,GAAIhlB,EAAI,KACnDkV,EAAOssE,EAAS/wB,cACd+wB,EAASr1B,4BAA4BnnC,EAAS,GAAIuV,EAAAoE,KAAKU,KAAI,GAC3DmiD,EAAS93B,aAEX83B,EAAS93B,YAAc1pD,EACfwhF,EAAS93B,YAAYjrD,MAC3B,OACA,OACA,OACA,OACA,QAIA,QACEwwB,EAAMp0B,EAAOytB,aAAatT,EAAMC,EAAMC,GACtC,MAEF,QACEssE,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAMp0B,EAAOyuB,oBAIjB,OAAO2F,EAET,IAAK,cAaH,OAZuB,GAAnBjK,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAGhD3V,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGzBxvB,EAAOyuB,oBAKhB,IAAK,iBAcH,OAbAk4D,EAAS93B,YAAcnvB,EAAAoE,KAAKxO,IACL,GAAnBnL,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAGhD3V,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGzBxvB,EAAOkqB,WAAW0V,EAAArZ,OAAOgtD,eAElC,IAAK,cAiBH,OAhBAoT,EAAS93B,YAAcnvB,EAAAoE,KAAKxO,IACL,GAAnBnL,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDR,EAAOna,EAAOyuB,qBAEdtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAIuV,EAAAoE,KAAKxO,IAAG,KAErDtwB,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGzBxvB,EAAOkqB,WAAW0V,EAAArZ,OAAOitD,WAAY,MAAQr5D,IAGtD,IAAK,cAOH,GANInV,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,OAMX,OALAg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAcnvB,EAAAoE,KAAKa,KACrB3kC,EAAOyuB,oBAqBhB,MAnBAtU,EAAOwsE,EAAS70B,kBACd3nC,EAAS,GACTw8D,EAAS9iD,QAAQU,UAAS,KAI5BnqB,EAAOusE,EAAS70B,kBACd3nC,EAAS,GACTw8D,EAAS9iD,QAAQU,UAAS,KAI5BlqB,EAAOssE,EAAS70B,kBACd3nC,EAAS,GACTw8D,EAAS9iD,QAAQU,UAAS,KAI5BoiD,EAAS93B,YAAcnvB,EAAAoE,KAAKa,KACtB,IAAI9P,MAAM,mBAGlB,IAAK,aAOH,GANI7vB,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,OAMX,OALAg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAcnvB,EAAAoE,KAAKa,KACrB3kC,EAAOyuB,oBAqBhB,MAnBAtU,EAAOwsE,EAAS70B,kBACd3nC,EAAS,GACTw8D,EAAS9iD,QAAQU,UAAS,KAI5BnqB,EAAOusE,EAAS70B,kBACd3nC,EAAS,GACTuV,EAAAoE,KAAKO,IAAG,KAIVhqB,EAAOssE,EAAS70B,kBACd3nC,EAAS,GACTw8D,EAAS9iD,QAAQU,UAAS,KAI5BoiD,EAAS93B,YAAcnvB,EAAAoE,KAAKa,KACtB,IAAI9P,MAAM,mBAMlB,IAAK,aACH,OAAM7vB,GAAyC,GAAxBA,EAAc2C,OAQd,GAAnBwiB,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAc7pD,EAAc,GAC9BhF,EAAOyuB,sBAEhBtU,EAAOwsE,EAASr1B,4BACdnnC,EAAS,GACTnlB,EAAc,GAAE,GAGlB2hF,EAAS93B,YAAc7pD,EAAc,GACjC2hF,EAAS93B,YAAY3P,MAAQl6C,EAAc,GAAGk6C,MAChDynC,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAENlF,EAAOyuB,qBAITtU,IA9BDnV,GAAiBA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAChF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgT,SAAS,IAAM,KAEtE3a,EAAOyuB,qBA2BlB,IAAK,SACH,GAAItE,EAASxiB,OAAS,GAAKwiB,EAASxiB,OAAS,EAqB3C,OApBI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,GAAG+7C,iBACtC,GAAxB/7C,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAIvDwP,EAASxiB,OAAS,EACpBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAe0lD,wCACf7qB,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAEzCwP,EAASxiB,OAAS,GAC3Bg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAG7C3a,EAAOyuB,oBAEhB,GAAIzpB,EAAe,CAEjB,GADIA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,GAAG+7C,iBACtC,GAAxB/7C,EAAc2C,OAKhB,OAJAg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBtU,EAAOwsE,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,UAE/DmV,EAAOwsE,EAASr1B,4BAA4BnnC,EAAS,GAAIuV,EAAAoE,KAAKU,KAAI,GAGhEr/B,EAAOwhF,EAAS93B,YAIpB,GAHA83B,EAAS93B,YAAc1pD,EAAK47C,gBAGxB4lC,EAAS9iD,QAAQmB,SACnB,OAAIizB,GAAkBv4B,EAAAoE,KAAKa,MACzBgiD,EAAS93B,YAAcnvB,EAAAoE,KAAKa,KACrB3kC,EAAOqtB,aAETlT,EAGT,IAAIgtE,EAAQzvB,EAAaivB,EAA6B,GAAnBx8D,EAASxiB,OAAcwiB,EAAS,GAAK,KAAMuqB,GAI9E,GAFAiyC,EAAS93B,YAAc1pD,EAAK47C,gBAExBkX,GAAkBv4B,EAAAoE,KAAKa,KAAM,CAC/B,OAAQgiD,EAAS93B,YAAYjrD,MAC3B,QACEwwB,EAAMp0B,EAAOmtB,SACXntB,EAAO6pB,YAAY+V,EAAAvhB,QAAQmhC,OACzBrlC,GAEFgtE,GAEF,MAEF,OACA,OACE/yD,EAAMp0B,EAAOmtB,SACXntB,EAAO6pB,YAAY+V,EAAAvhB,QAAQohC,OACzBtlC,GAEFgtE,GAEF,MAEF,OACA,OACE/yD,EAAMp0B,EAAOmtB,SACXntB,EAAO6pB,YACL88D,EAAS9iD,QAAQiB,SACblF,EAAAvhB,QAAQohC,OACR7f,EAAAvhB,QAAQmhC,OACZrlC,GAEFgtE,GAEF,MAGF,QACE/yD,EAAMp0B,EAAOmtB,SACXntB,EAAOgqB,aAAa4V,EAAAle,SAASq7B,MAC3B5iC,EACAna,EAAOypB,UAAU,IAEnB09D,GAEF,MAEF,QACE/yD,EAAMp0B,EAAOmtB,SACXntB,EAAOgqB,aAAa4V,EAAAle,SAASs7B,MAC3B7iC,EACAna,EAAO2pB,UAAU,IAEnBw9D,GAEF,MAEF,QACER,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAM+yD,EAIVR,EAAS93B,YAAcnvB,EAAAoE,KAAKa,UAE5B,OAAQgiD,EAAS93B,YAAYjrD,MAC3B,OACA,OACA,OACA,OACA,QACMusC,EAAOw2C,EAASvsC,gBAAgBjK,KAChC0mB,EAAY8vB,EAASvsC,gBAAgBvD,oBACvC8vC,EAAS93B,aACR1e,EAAKuM,YAAYviC,EAAMwsE,EAAS93B,cAEnCz6B,EAAMp0B,EAAOmtB,SACXntB,EAAOyqB,eAAeosC,EAAUtsC,MAAOpQ,GACvCna,EAAOsqB,eAAeusC,EAAUtsC,MAAOqV,EAAA7jB,WAAW8Z,KAClDsxD,GAEF,MAEF,OACA,OACA,QACMtwB,EAAY8vB,EAASvsC,gBAAgBvD,oBAAoBnX,EAAAoE,KAAKxO,KAAK,GACvElB,EAAMp0B,EAAOmtB,SACXntB,EAAOyqB,eAAeosC,EAAUtsC,MAAOpQ,GACvCna,EAAOsqB,eAAeusC,EAAUtsC,MAAOqV,EAAA7jB,WAAW8Z,KAClDsxD,GAEF,MAEF,OACA,OACMtwB,EAAY8vB,EAASvsC,gBAAgBvD,oBAAoBnX,EAAAoE,KAAKG,KAAK,GACvE7P,EAAMp0B,EAAOmtB,SACXntB,EAAO6pB,YAAY+V,EAAAvhB,QAAQohC,OACzBz/C,EAAOyqB,eAAeosC,EAAUtsC,MAAOpQ,IAEzCgtE,EACAnnF,EAAOsqB,eAAeusC,EAAUtsC,MAAOqV,EAAA7jB,WAAWga,MAEpD,MAEF,OACA,OACM8gC,EAAY8vB,EAASvsC,gBAAgBvD,oBAAoB8vC,EAAS9iD,QAAQU,WAAW,GACzFnQ,EAAMp0B,EAAOmtB,SACXntB,EAAO6pB,YACL88D,EAAS9iD,QAAQiB,SACblF,EAAAvhB,QAAQohC,OACR7f,EAAAvhB,QAAQmhC,OACZx/C,EAAOyqB,eAAeosC,EAAUtsC,MAAOpQ,IAEzCgtE,EACAnnF,EAAOsqB,eAAeusC,EAAUtsC,MAAOo8D,EAAS9iD,QAAQqvB,iBAE1D,MAEF,QACM2D,EAAY8vB,EAASvsC,gBAAgBvD,oBAAoBnX,EAAAoE,KAAKW,KAAK,GACvErQ,EAAMp0B,EAAOmtB,SACXntB,EAAOgqB,aAAa4V,EAAAle,SAASq7B,MAC3B/8C,EAAOyqB,eAAeosC,EAAUtsC,MAAOpQ,GACvCna,EAAOypB,UAAU,IAEnB09D,EACAnnF,EAAOsqB,eAAeusC,EAAUtsC,MAAOqV,EAAA7jB,WAAWma,MAEpD,MAEF,QACM2gC,EAAY8vB,EAASvsC,gBAAgBvD,oBAAoBnX,EAAAoE,KAAKY,KAAK,GACvEtQ,EAAMp0B,EAAOmtB,SACXntB,EAAOgqB,aAAa4V,EAAAle,SAASs7B,MAC3Bh9C,EAAOyqB,eAAeosC,EAAUtsC,MAAOpQ,GACvCna,EAAO2pB,UAAU,IAEnBw9D,EACAnnF,EAAOsqB,eAAeusC,EAAUtsC,MAAOqV,EAAA7jB,WAAWqa,MAEpD,MAEF,QACEuwD,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAEbkvB,EAAM+yD,EAKZ,OAAO/yD,EAET,IAAK,YAOH,OANIpvB,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,uBAEZ0hB,EAAOw2C,EAASvsC,gBAAgBjK,MAC/BrrC,IAAG,MACRsvB,EAAMuyD,EAASr1B,4BAA4BnnC,EAAS,GAAI8tC,EAAc,GACtE9nB,EAAKwK,MAAK,MACHvmB,GAET,IAAK,gBACH,GAAIjK,EAASxiB,OAAS,EAcpB,OAbI3C,IACEA,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IACnC,GAAxBA,EAAc2C,QAChBg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,MAI3DgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAe0lD,wCACf7qB,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C3a,EAAOyuB,oBAEhB,IAAIvoB,OAAU,EACd,GAAIlB,EAAe,CACjB,GAA4B,GAAxBA,EAAc2C,OAMhB,OALI3C,EAAc2C,SAAQg/E,EAAS93B,YAAc7pD,EAAc,IAC/D2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD3a,EAAOyuB,oBAEhBvoB,EAAalB,EAAc,QAE3BkB,EAAa+xD,EAGf,GADA99C,EAAOwsE,EAASr1B,4BAA4BnnC,EAAS,GAAIuV,EAAAoE,KAAKO,IAAG,GACpC,GAAzBsiD,EAAS93B,YAAYjrD,KAKvB,OAJA+iF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfthB,EAAS,GAAGjlB,OAEPlF,EAAOyuB,oBAOhB,IALA,IAAI0yC,EAAch3C,EAASxiB,OAAS,EAChCy/E,EAAe,IAAIjxE,MAAqBgrD,GACxCkmB,EAAiB,IAAIlxE,MAAcgrD,EAAc,GACjDhD,EAAmBj4D,EAAWuwC,eAC9B6wC,EAAmB,IAAInxE,MAAkBgrD,GACpCzgE,EAAI,EAAGA,EAAIygE,IAAezgE,EAAG,CACpC0mF,EAAa1mF,GAAKimF,EAASr1B,4BAA4BnnC,EAAS,EAAIzpB,GAAIg/B,EAAAoE,KAAKxO,IAAG,GAChF,IAAIiyD,EAAcZ,EAAS93B,YAC3Bw4B,EAAe3mF,GAAK6mF,EAAYlwC,oBAChCiwC,EAAiB5mF,GAAK6mF,EAAY9wC,eAEpC4wC,EAAelmB,GAAej7D,EAAWmxC,oBACzC,IAAI9oB,EAAW84D,EAAe/rE,KAAK,IAC/B+T,EAAUrvB,EAAO6oB,2BAA2Bs1C,EAAkBmpB,GAKlE,OAJKj4D,IAASA,EAAUrvB,EAAOsoB,gBAAgBiG,EAAU4vC,EAAkBmpB,IAC3EX,EAAS93B,YAAc3oD,EAGhBlG,EAAOsuB,mBAAmBnU,EAAMitE,EAAc74D,GAKvD,IAAK,KAOH,OANIvpB,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAcnvB,EAAAoE,KAAKC,GACrB/jC,EAAOyuB,qBAETk4D,EAAS70B,kBACd3nC,EAAS,GACTuV,EAAAoE,KAAKC,GAAE,KAKX,IAAK,MAOH,OANI/+B,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAcnvB,EAAAoE,KAAKE,IACrBhkC,EAAOyuB,qBAETk4D,EAAS70B,kBACd3nC,EAAS,GACTuV,EAAAoE,KAAKE,IAAG,KAKZ,IAAK,MAOH,OANIh/B,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAcnvB,EAAAoE,KAAKxO,IACrBt1B,EAAOyuB,qBAETk4D,EAAS70B,kBACd3nC,EAAS,GACTuV,EAAAoE,KAAKxO,IAAG,KAKZ,IAAK,MAOH,OANItwB,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAcnvB,EAAAoE,KAAKG,IACrBjkC,EAAOyuB,qBAETk4D,EAAS70B,kBACd3nC,EAAS,GACTuV,EAAAoE,KAAKG,IAAG,KAKZ,IAAK,QAOH,OANIj/B,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAc83B,EAAS9iD,QAAQiB,SACpCpF,EAAAoE,KAAKkd,QACLthB,EAAAoE,KAAKmd,QACFjhD,EAAOyuB,qBAETk4D,EAAS70B,kBACd3nC,EAAS,GACTw8D,EAAS9iD,QAAQiB,SACbpF,EAAAoE,KAAKkd,QACLthB,EAAAoE,KAAKmd,QAAO,KAKpB,IAAK,KAOH,OANIj8C,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAcnvB,EAAAoE,KAAKK,GACrBnkC,EAAOyuB,qBAETk4D,EAAS70B,kBACd3nC,EAAS,GACTuV,EAAAoE,KAAKK,GAAE,KAKX,IAAK,MAOH,OANIn/B,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAcnvB,EAAAoE,KAAKM,IACrBpkC,EAAOyuB,qBAETk4D,EAAS70B,kBACd3nC,EAAS,GACTuV,EAAAoE,KAAKM,IAAG,KAKZ,IAAK,MAOH,OANIp/B,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAcnvB,EAAAoE,KAAKO,IACrBrkC,EAAOyuB,qBAETk4D,EAAS70B,kBACd3nC,EAAS,GACTuV,EAAAoE,KAAKO,IAAG,KAKZ,IAAK,MAOH,OANIr/B,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAcnvB,EAAAoE,KAAKQ,IACrBtkC,EAAOyuB,qBAETk4D,EAAS70B,kBACd3nC,EAAS,GACTuV,EAAAoE,KAAKQ,IAAG,KAKZ,IAAK,QAOH,OANIt/B,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAc83B,EAAS9iD,QAAQU,UACjCvkC,EAAOyuB,qBAETk4D,EAAS70B,kBACd3nC,EAAS,GACTw8D,EAAS9iD,QAAQU,UAAS,KAK9B,IAAK,OAOH,OANIv/B,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAcnvB,EAAAoE,KAAKU,KACrBxkC,EAAOyuB,qBAETk4D,EAAS70B,kBACd3nC,EAAS,GACTuV,EAAAoE,KAAKU,KAAI,KAKb,IAAK,MAOH,OANIx/B,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAcnvB,EAAAoE,KAAKW,IACrBzkC,EAAOyuB,qBAETk4D,EAAS70B,kBACd3nC,EAAS,GACTuV,EAAAoE,KAAKW,IAAG,KAKZ,IAAK,MAOH,OANIz/B,GACF2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGT,GAAnBrF,EAASxiB,QACXg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAElDgsE,EAAS93B,YAAcnvB,EAAAoE,KAAKY,IACrB1kC,EAAOyuB,qBAETk4D,EAAS70B,kBACd3nC,EAAS,GACTuV,EAAAoE,KAAKY,IAAG,KAMd,IAAIx9B,EAkBN,SACEy/E,EACArkF,EACA6nB,EACA8tC,EACAvjB,GAEA,OAAQpyC,EAAUktB,cAOhB,IAAK,UAAW,OAAOg4D,EAAS,MAAOb,EAAUjnD,EAAAoE,KAAKxO,IAAKnL,EAAUuV,EAAAoE,KAAKxO,IAAKof,GAC/E,IAAK,UAAW,OAAO8yC,EAAS,MAAOb,EAAUjnD,EAAAoE,KAAKG,IAAK9Z,EAAUuV,EAAAoE,KAAKG,IAAKyQ,GAE/E,IAAK,UAAW,OAAO8yC,EAAS,MAAOb,EAAUjnD,EAAAoE,KAAKxO,IAAKnL,EAAUuV,EAAAoE,KAAKxO,IAAKof,GAC/E,IAAK,UAAW,OAAO8yC,EAAS,MAAOb,EAAUjnD,EAAAoE,KAAKG,IAAK9Z,EAAUuV,EAAAoE,KAAKG,IAAKyQ,GAE/E,IAAK,aAAc,OAAO8yC,EAAS,SAAUb,EAAUjnD,EAAAoE,KAAKxO,IAAKnL,EAAUuV,EAAAoE,KAAKxO,IAAKof,GACrF,IAAK,aAAc,OAAO8yC,EAAS,SAAUb,EAAUjnD,EAAAoE,KAAKG,IAAK9Z,EAAUuV,EAAAoE,KAAKG,IAAKyQ,GAErF,IAAK,WAAY,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKxO,IAAKnL,EAAUuV,EAAAoE,KAAKxO,IAAKof,GACjF,IAAK,WAAY,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKG,IAAK9Z,EAAUuV,EAAAoE,KAAKG,IAAKyQ,GAEjF,IAAK,WAAY,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKxO,IAAKnL,EAAUuV,EAAAoE,KAAKxO,IAAKof,GACjF,IAAK,WAAY,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKG,IAAK9Z,EAAUuV,EAAAoE,KAAKG,IAAKyQ,GAEjF,IAAK,UAAW,OAAO8yC,EAAS,MAAOb,EAAUjnD,EAAAoE,KAAKW,IAAKta,EAAUuV,EAAAoE,KAAKW,IAAKiQ,GAC/E,IAAK,UAAW,OAAO8yC,EAAS,MAAOb,EAAUjnD,EAAAoE,KAAKY,IAAKva,EAAUuV,EAAAoE,KAAKY,IAAKgQ,GAE/E,IAAK,UAAW,OAAO8yC,EAAS,MAAOb,EAAUjnD,EAAAoE,KAAKW,IAAKta,EAAUuV,EAAAoE,KAAKW,IAAKiQ,GAC/E,IAAK,UAAW,OAAO8yC,EAAS,MAAOb,EAAUjnD,EAAAoE,KAAKY,IAAKva,EAAUuV,EAAAoE,KAAKY,IAAKgQ,GAE/E,IAAK,UAAW,OAAO8yC,EAAS,MAAOb,EAAUjnD,EAAAoE,KAAKW,IAAKta,EAAUuV,EAAAoE,KAAKW,IAAKiQ,GAC/E,IAAK,UAAW,OAAO8yC,EAAS,MAAOb,EAAUjnD,EAAAoE,KAAKY,IAAKva,EAAUuV,EAAAoE,KAAKY,IAAKgQ,GAE/E,IAAK,WAAY,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKW,IAAKta,EAAUuV,EAAAoE,KAAKW,IAAKiQ,GACjF,IAAK,WAAY,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKY,IAAKva,EAAUuV,EAAAoE,KAAKY,IAAKgQ,GAEjF,IAAK,YAAa,OAAO8yC,EAAS,QAASb,EAAUjnD,EAAAoE,KAAKW,IAAKta,EAAUuV,EAAAoE,KAAKW,IAAKiQ,GACnF,IAAK,YAAa,OAAO8yC,EAAS,QAASb,EAAUjnD,EAAAoE,KAAKY,IAAKva,EAAUuV,EAAAoE,KAAKY,IAAKgQ,GAEnF,IAAK,eAAgB,OAAO8yC,EAAS,WAAYb,EAAUjnD,EAAAoE,KAAKW,IAAKta,EAAUuV,EAAAoE,KAAKW,IAAKiQ,GACzF,IAAK,eAAgB,OAAO8yC,EAAS,WAAYb,EAAUjnD,EAAAoE,KAAKY,IAAKva,EAAUuV,EAAAoE,KAAKY,IAAKgQ,GAEzF,IAAK,cAAe,OAAO8yC,EAAS,UAAWb,EAAUjnD,EAAAoE,KAAKW,IAAKta,EAAUuV,EAAAoE,KAAKW,IAAKiQ,GACvF,IAAK,cAAe,OAAO8yC,EAAS,UAAWb,EAAUjnD,EAAAoE,KAAKY,IAAKva,EAAUuV,EAAAoE,KAAKY,IAAKgQ,GAEvF,IAAK,sBAAuB,OAAO8yC,EAAS,cAAeb,EAAUjnD,EAAAoE,KAAKxO,IAAKnL,EAAUuV,EAAAoE,KAAKW,IAAKiQ,GACnG,IAAK,sBAAuB,OAAO8yC,EAAS,cAAeb,EAAUjnD,EAAAoE,KAAKG,IAAK9Z,EAAUuV,EAAAoE,KAAKY,IAAKgQ,GACnG,IAAK,sBAAuB,OAAO8yC,EAAS,cAAeb,EAAUjnD,EAAAoE,KAAKW,IAAKta,EAAUuV,EAAAoE,KAAKxO,IAAKof,GACnG,IAAK,sBAAuB,OAAO8yC,EAAS,cAAeb,EAAUjnD,EAAAoE,KAAKY,IAAKva,EAAUuV,EAAAoE,KAAKG,IAAKyQ,GAEnG,IAAK,WAAY,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKW,IAAKta,EAAUuV,EAAAoE,KAAKW,IAAKiQ,GACjF,IAAK,WAAY,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKY,IAAKva,EAAUuV,EAAAoE,KAAKY,IAAKgQ,GAEjF,IAAK,YAAa,OAAO8yC,EAAS,QAASb,EAAUjnD,EAAAoE,KAAKW,IAAKta,EAAUuV,EAAAoE,KAAKW,IAAKiQ,GACnF,IAAK,YAAa,OAAO8yC,EAAS,QAASb,EAAUjnD,EAAAoE,KAAKY,IAAKva,EAAUuV,EAAAoE,KAAKY,IAAKgQ,GAEnF,IAAK,cAAe,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKC,GAAI5Z,EAAUuV,EAAAoE,KAAKxO,IAAKof,GACnF,IAAK,cAAe,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKK,GAAIha,EAAUuV,EAAAoE,KAAKO,IAAKqQ,GACnF,IAAK,eAAgB,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKE,IAAK7Z,EAAUuV,EAAAoE,KAAKxO,IAAKof,GACrF,IAAK,eAAgB,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKM,IAAKja,EAAUuV,EAAAoE,KAAKO,IAAKqQ,GACrF,IAAK,WAAY,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKxO,IAAKnL,EAAUuV,EAAAoE,KAAKxO,IAAKof,GACjF,IAAK,cAAe,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKC,GAAI5Z,EAAUuV,EAAAoE,KAAKG,IAAKyQ,GACnF,IAAK,cAAe,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKK,GAAIha,EAAUuV,EAAAoE,KAAKQ,IAAKoQ,GACnF,IAAK,eAAgB,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKE,IAAK7Z,EAAUuV,EAAAoE,KAAKG,IAAKyQ,GACrF,IAAK,eAAgB,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKM,IAAKja,EAAUuV,EAAAoE,KAAKQ,IAAKoQ,GACrF,IAAK,eAAgB,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKxO,IAAKnL,EAAUuV,EAAAoE,KAAKG,IAAKyQ,GACrF,IAAK,eAAgB,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKO,IAAKla,EAAUuV,EAAAoE,KAAKQ,IAAKoQ,GACrF,IAAK,WAAY,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKG,IAAK9Z,EAAUuV,EAAAoE,KAAKG,IAAKyQ,GACjF,IAAK,WAAY,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKW,IAAKta,EAAUuV,EAAAoE,KAAKW,IAAKiQ,GACjF,IAAK,WAAY,OAAO8yC,EAAS,OAAQb,EAAUjnD,EAAAoE,KAAKY,IAAKva,EAAUuV,EAAAoE,KAAKY,IAAKgQ,GAEjF,IAAK,aAAc,OAAO8yC,EAAS,QAASb,EAAUjnD,EAAAoE,KAAKC,GAAI5Z,EAAUuV,EAAAoE,KAAKxO,IAAKof,GACnF,IAAK,cAAe,OAAO8yC,EAAS,QAASb,EAAUjnD,EAAAoE,KAAKE,IAAK7Z,EAAUuV,EAAAoE,KAAKxO,IAAKof,GACrF,IAAK,YAAa,OAAO8yC,EAAS,QAASb,EAAUjnD,EAAAoE,KAAKxO,IAAKnL,EAAUuV,EAAAoE,KAAKxO,IAAKof,GACnF,IAAK,aAAc,OAAO8yC,EAAS,QAASb,EAAUjnD,EAAAoE,KAAKC,GAAI5Z,EAAUuV,EAAAoE,KAAKG,IAAKyQ,GACnF,IAAK,cAAe,OAAO8yC,EAAS,QAASb,EAAUjnD,EAAAoE,KAAKE,IAAK7Z,EAAUuV,EAAAoE,KAAKG,IAAKyQ,GACrF,IAAK,cAAe,OAAO8yC,EAAS,QAASb,EAAUjnD,EAAAoE,KAAKxO,IAAKnL,EAAUuV,EAAAoE,KAAKG,IAAKyQ,GACrF,IAAK,YAAa,OAAO8yC,EAAS,QAASb,EAAUjnD,EAAAoE,KAAKG,IAAK9Z,EAAUuV,EAAAoE,KAAKG,IAAKyQ,GACnF,IAAK,YAAa,OAAO8yC,EAAS,QAASb,EAAUjnD,EAAAoE,KAAKW,IAAKta,EAAUuV,EAAAoE,KAAKW,IAAKiQ,GACnF,IAAK,YAAa,OAAO8yC,EAAS,QAASb,EAAUjnD,EAAAoE,KAAKY,IAAKva,EAAUuV,EAAAoE,KAAKY,IAAKgQ,GAErF,OAAO,EAxGI+yC,CAAad,EAAUrkF,EAAW6nB,EAAU8tC,EAAgBvjB,GACvE,OAAIxtC,GACElC,GAAiBA,EAAc2C,QACjCg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAe4kD,sBACf/pB,EAAWxvC,MAAO5C,EAAUktB,cAGzBtoB,IAETy/E,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACfiJ,EAAWxvC,OAENlF,EAAOyuB,qBA8FhB,SAAA+4D,EACEvmF,EACA0lF,EACAe,EACAv9D,EACAw9D,EACAjzC,GAEA,IAAIpyC,EAAYmQ,OAAOk0E,EAAS30C,QAAQxP,eAAejhC,IAAIN,IAE3D,OADAwR,OAAOnQ,EAAUsB,MAAQkqD,EAAA5rB,YAAYsG,oBAC9B22B,EAAYwnB,EAA6BrkF,GAAaolF,GAAgBv9D,EAAUw9D,EAAWjzC,GAIpG,SAAAkyC,EACED,EACA3hF,EACAmlB,EACAuqB,GAEA,GAAuB,GAAnBvqB,EAASxiB,OACX,OAAK3C,GAAyC,GAAxBA,EAAc2C,OAO7B3C,EAAc,IANnB2hF,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAgBA,EAAc2C,OAAOgT,SAAS,IAAM,KAEtE,MAIX,GAAuB,GAAnBwP,EAASxiB,OAAa,CACxB,GAAI3C,EACF,GAA4B,GAAxBA,EAAc2C,OAChBg/E,EAAS70B,kBAAkB3nC,EAAS,GAAInlB,EAAc,GAAE,SACnD,CACL,GAAIA,EAAc2C,OAKhB,OAJAg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAEhD,KAETgsE,EAASr1B,4BAA4BnnC,EAAS,GAAIuV,EAAAoE,KAAKxO,IAAG,QAG5DqxD,EAASr1B,4BAA4BnnC,EAAS,GAAIuV,EAAAoE,KAAKxO,IAAG,GAE5D,OAAOqxD,EAAS93B,YAYlB,OAVI7pD,GAAiBA,EAAc2C,OAAS,GAC1Cg/E,EAAS7qE,MACP2jB,EAAA5lB,eAAem2B,oCACf0E,EAAWxvC,MAAO,IAAKF,EAAc2C,OAAOgT,SAAS,KAGzDgsE,EAAS7qE,MACP2jB,EAAA5lB,eAAekyB,+BACf2I,EAAWxvC,MAAO,IAAKilB,EAASxiB,OAAOgT,SAAS,KAE3C,KAIT,SAAAosE,EAAgCJ,EAAoB5+E,GAClD,IAAIb,EACAvF,EA6BJ,OA5BIglF,EAAS9iD,QAAQiB,UACnB59B,EAAOy/E,EAASptB,qBAAqBxxD,EAAY23B,EAAAoE,KAAKod,QAAO,MAE3DthB,EAAAxH,gBAAgBlxB,IAAS04B,EAAA5jB,aAAa2Z,OACtCiK,EAAAvH,kBAAkBnxB,IAAS04B,EAAA7jB,WAAWga,KACR,GAA9B6J,EAAApH,qBAAqBtxB,KACpBvF,EAAQi+B,EAAArH,oBAAoBrxB,IAAS,KAEtCy/E,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACf1jC,EAAW7C,OAEbvD,GAAS,KAGXuF,EAAOy/E,EAASptB,qBAAqBxxD,EAAY23B,EAAAoE,KAAKqd,QAAO,MAE3DvhB,EAAAxH,gBAAgBlxB,IAAS04B,EAAA5jB,aAAa2Z,OACtCiK,EAAAvH,kBAAkBnxB,IAAS04B,EAAA7jB,WAAW8Z,MACrCl0B,EAAQi+B,EAAAtH,iBAAiBpxB,IAAS,KAEnCy/E,EAAS7qE,MACP2jB,EAAA5lB,eAAe4xB,wBACf1jC,EAAW7C,OAEbvD,GAAS,IAGNA,EAlpFT5B,EAAAo/D,cAqpFA,IAAMyoB,EAAuB,kBAG7B7nF,EAAA4lE,gBAAA,SACEghB,EACAzyC,EACAQ,GAEA,IAAI1C,EAAU20C,EAAS30C,QACvBv/B,OAAOyhC,EAAclC,SAAWA,GAChC,IAAIhyC,EAAS2mF,EAAS3mF,OAClB6jC,EAAU8iD,EAAS9iD,QAEnBgkD,EAAoB71C,EAAQxP,eAAejhC,IAAIqmF,GACnD,IAAKC,EASH,OARA71C,EAAQl2B,MACN2jB,EAAA5lB,eAAe0tB,mBACfmN,EAAWxvC,MAAO0iF,GAEpB51C,EAAQp2B,KACN6jB,EAAA5lB,eAAeiuE,iGACfpzC,EAAWxvC,OAENlF,EAAOyuB,oBAEhB,GAAIo5D,EAAkBjkF,MAAQkqD,EAAA5rB,YAAYsG,mBAKxC,OAJAwJ,EAAQl2B,MACN2jB,EAAA5lB,eAAei4B,uGACf4C,EAAWxvC,MAAO2iF,EAAkBr4D,cAE/BxvB,EAAOyuB,oBAGhB,IAAIs5D,EAAuCF,EAAmBtkD,UAC9D,OAAMwkD,GAAoBpB,EAASj0B,gBAAgBq1B,IAEnDpB,EAAS93B,YAAc3a,EAAc/uC,KAC9BnF,EAAOiuB,WACZ85D,EAAiBv4D,cACfqU,EAAQiB,SACJ9kC,EAAOqpB,UAAU6qB,EAAcgE,qBAC/Bl4C,EAAOipB,UAAUirB,EAAcgE,sBAErCrU,EAAQqvB,iBAToElzD,EAAOyuB,qBAavF,IAAMu5D,EAAoB,QAG1B,SAAAtwB,EACEivB,EACAzsE,EACAw6B,GAEA,IAAI1C,EAAU20C,EAAS30C,QACnBhyC,EAAS2mF,EAAS3mF,OAElBqjE,EAAarxB,EAAQtP,YAAYnhC,IAAI,UACzC,IAAK8hE,EAAY,OAAOrjE,EAAOyuB,oBAE/B,IAAIw5D,EAAiBj2C,EAAQxP,eAAejhC,IAAIymF,GAChD,IAAKC,GAAkBA,EAAerkF,MAAQkqD,EAAA5rB,YAAYsG,mBAAoB,OAAOxoC,EAAOyuB,oBAE5F,IAAIy5D,EAAoCD,EAAgB1kD,UACxD,IAAM2kD,IAAiBvB,EAASj0B,gBAAgBw1B,GAAiB,OAAOloF,EAAOyuB,oBAEnD,MAAXvU,EACbysE,EAAS70B,kBAAkB53C,EAASmpD,EAAU,KAC9CA,EAAWxhB,aAAa7hD,GAEV2mF,EAAS5jB,oBAAoBruB,EAAWxvC,MAAM4I,OAAOJ,gBAGvE,OADAi5E,EAAS93B,YAAcnvB,EAAAoE,KAAKa,KACrB3kC,EAAOysB,YAAY,MACxBzsB,EAAOouB,iBACL85D,EAAc14D,gBACdoQ,EAAA7jB,WAAW4Q,MAEb3sB,EAAOyuB,sBA7BX1uB,EAAA23D,8BC7vFA13D,EAAAD,QAAAO,oBCAA,SAAA6wD,GAEA,MAAAg3B,EAAAh3B,EAAAi3B,UAAA5nF,EAAA,IAEA,QAAAyB,KAAAkmF,GACAlmF,EAAA2L,WAAA,cAAA3L,EAAA2L,WAAA,gBACAujD,EAAAlvD,GAAAkmF,EAAAlmF,IAIAkvD,EAAAppC,gBAAA,SAAAm3B,GACA,OAAAA,EACAipC,EAAAE,QAAAnpC,GADA,GAIAiS,EAAA/oC,YAAA,SAAA4C,GACAA,GAAAm9D,EAAAG,MAAAt9D,IAGAmmC,EAAAo3B,YAAA,SAAAC,EAAAC,EAAAtmF,GACA,OAAAgmF,EAAAO,SAAAF,EAAAC,EAAAtmF,IAGAgvD,EAAA1yB,MAAA,SAAAzT,EAAA2T,GACAwpD,EAAAQ,OAAA39D,GAAA2T,GAGAwyB,EAAA38B,KAAA,SAAAxJ,GACA,OAAAm9D,EAAAQ,OAAA39D,IAKA,MAAAzD,EAAA/mB,EAAA,GAAA+mB,OAEAA,EAAAjlB,UAAAsyB,OAAA,WACA,IAAAg0D,EAAAT,EAAAU,MACAz0D,EAAA,GAIA,OAHA+zD,EAAAU,MAAA,SAAAC,GAAgC10D,GAAA00D,EAAA,MAChCC,qBAAA1oF,KAAAunB,KACAugE,EAAAU,MAAAD,EACAx0D,GAGA7M,EAAAjlB,UAAAwyB,QAAA,WACA,IAAA8zD,EAAAT,EAAAU,MACAz0D,EAAA,GAIA,OAHA+zD,EAAAU,MAAA,SAAAC,GAAgC10D,GAAA00D,EAAA,MAChCE,0BAAA3oF,KAAAunB,KACAugE,EAAAU,MAAAD,EACAx0D,oCClDAp0B,EAAAD,QAAAkpF,KACA,IAAAC,EAAA,IAAA30D,WAAA,GACA40D,EAAA,EAEAF,EAAA,yBAAA/pC,GACA,KAAAA,KAAA,YAEA,GAAAiqC,EAAAjqC,EAAAgqC,EAAAvhF,OAAA,CACA,IAAAyhF,EAAAF,GACAA,EAAA,IAAA30D,WAAAgjD,KAAAhoB,IAAA,MAAA25B,EAAAvhF,OAAAu3C,EAAA,EAAAgqC,EAAAvhF,UACA7C,IAAAskF,GAGA,IAAAp+D,EAAAm+D,EAIA,OAHA,GAAAA,GAAAjqC,KACAiqC,EAAA,KAAAA,IAEAn+D,GAGAi+D,EAAA,qBAAAj+D,KAIAi+D,EAAA,qBAAAT,EAAAC,EAAAvpC,GACAgqC,EAAAG,WAAAb,EAAAC,IAAAvpC,IAGA+pC,EAAA,eAAAj+D,EAAArpB,EAAA0lB,GACA6hE,EAAAl+D,GAAA,EAAA3D,IAAA1lB,GAGAsnF,EAAA,cAAAj+D,EAAA3D,GACA,OAAA6hE,EAAAl+D,GAAA,EAAA3D,yBCjCA,SAAA8pC,GAEA,IAAA83B,EAAA,oBAAAvoC,qBAAA,IAAAyQ,MAAA/wD,KA6IA,SAAAkpF,IACAz0D,MAAA00D,kBACA10D,MAAA00D,kBAAAlpF,KAAAipF,GAEAjpF,KAAAmpF,MAAAnpF,KAAAY,KAAA,KAAAZ,KAAA6Z,QAAA,UAAA2a,OAAA20D,MAWA,SAAAC,EAAAvvE,GACA7Z,KAAA6Z,WAAA,mBACA2a,MAAA00D,kBACA10D,MAAA00D,kBAAAlpF,KAAAopF,GAEAppF,KAAAmpF,MAAAnpF,KAAAY,KAAA,KAAAZ,KAAA6Z,QAAA,UAAA2a,OAAA20D,MA/JAP,EAAAS,WAAA,EAEAtoF,OAAAuoF,iBACAV,EAAA,YAAAtnF,GAA0C,OAAAA,GAAA,SAE1Ck+C,WAAgBl+C,OAAA,IAAAioF,UAAA,GAChBr0D,WAAgB5zB,MAAA,IAAAioF,UAAA,KAGhBxoF,OAAAuoF,iBACAV,EAAA,aAAAtnF,GAA4C,OAAAA,GAAA,SAE5Ck+C,WAAgBl+C,OAAA,MAAAioF,UAAA,GAChBr0D,WAAgB5zB,MAAA,MAAAioF,UAAA,KAGhBxoF,OAAAuoF,iBACAV,EAAA,IAAAA,EAAA,eAAAtnF,GAAmE,SAAAA,IAEnEk+C,WAAgBl+C,OAAA,WAAAioF,UAAA,GAChBr0D,WAAgB5zB,MAAA,WAAAioF,UAAA,KAGhBxoF,OAAAuoF,iBACAV,EAAA,YAAAtnF,GAA0C,WAAAA,IAE1Ck+C,WAAgBl+C,MAAA,EAAAioF,UAAA,GAChBr0D,WAAgB5zB,MAAA,IAAAioF,UAAA,KAGhBxoF,OAAAuoF,iBACAV,EAAA,aAAAtnF,GAA4C,aAAAA,IAE5Ck+C,WAAgBl+C,MAAA,EAAAioF,UAAA,GAChBr0D,WAAgB5zB,MAAA,MAAAioF,UAAA,KAGhBxoF,OAAAuoF,iBACAV,EAAA,IAAAA,EAAA,eAAAtnF,GAAmE,OAAAA,IAAA,IAEnEk+C,WAAgBl+C,MAAA,EAAAioF,UAAA,GAChBr0D,WAAgB5zB,MAAA,WAAAioF,UAAA,KAGhBxoF,OAAAuoF,iBACAV,EAAA,cAAAtnF,GAA8C,QAAAA,IAE9Ck+C,WAAgBl+C,MAAA,EAAAioF,UAAA,GAChBr0D,WAAgB5zB,MAAA,EAAAioF,UAAA,KAGhBxoF,OAAAuoF,iBACAV,EAAA,aAAAtnF,GAA4C,OAAA41E,KAAA+H,OAAA39E,KAE5Ck+C,WAAgBl+C,MAAA41E,KAAA+H,QAAA,eAAAsK,UAAA,GAChBr0D,WAAgB5zB,MAAA41E,KAAA+H,OAAA,eAAAsK,UAAA,GAChBC,oBAAyBloF,MAAA41E,KAAA+H,OAAA,iBAAAsK,UAAA,GACzB3K,kBAAuBt9E,OAAA,SAAAioF,UAAA,GACvBzK,kBAAuBx9E,MAAA,SAAAioF,UAAA,GACvBE,SAAcnoF,MAAA41E,KAAA+H,OAAA,cAAAsK,UAAA,KAGdxoF,OAAAuoF,iBACAV,EAAA,aAAAtnF,GAA4C,OAAAA,IAE5Ck+C,WAAgBl+C,OAAA,uBAAAioF,UAAA,GAChBr0D,WAAgB5zB,MAAA,uBAAAioF,UAAA,GAChBC,oBAAyBloF,MAAA,wBAAAioF,UAAA,GACzB3K,kBAAuBt9E,OAAA,iBAAAioF,UAAA,GACvBzK,kBAAuBx9E,MAAA,iBAAAioF,UAAA,GACvBE,SAAcnoF,MAAA,sBAAAioF,UAAA,KAGdX,EAAA,IAAA1R,KAAAwS,MAEAd,EAAA,aAAAtnF,GACA,IAAAZ,EAAAw2E,KAAAwS,MAAApoF,MACA,OAAAA,EAAA,GAAAZ,KAGAkoF,EAAA,gBAAAtnF,GAGA,kBADAA,GAAA,WADAA,OAAA,gBACAA,IAAA,eACAA,IAAA,oBAGAsnF,EAAA,cAAAtnF,EAAAs9C,GAEA,OAAAt9C,IADAs9C,GAAA,IACAt9C,IAAA,GAAAs9C,GAGAgqC,EAAA,cAAAtnF,EAAAs9C,GAEA,OAAAt9C,KADAs9C,GAAA,IACAt9C,GAAA,GAAAs9C,GAGAgqC,EAAA,IAAA1R,KAAAyS,IAEAf,EAAA,IAAA1R,KAAAhoB,IAEA05B,EAAA,IAAA1R,KAAA96B,IAEAwsC,EAAA,KAAA1R,KAAAz2B,KAEAmoC,EAAA,MAAA1R,KAAAsF,MAGAoM,EAAA,iBAAAtnF,GACA,WAAA41E,KAAAyS,IAAAroF,EAAA41E,KAAA0S,MAAAtoF,IACA,EAAA41E,KAAA2S,MAAA,GAAAvoF,GAEA41E,KAAA2S,MAAAvoF,IAGAsnF,EAAA,gBAAAx6E,EAAAC,EAAA7D,GACA,OAAAA,EAAA4D,EAAAC,GAGAu6E,EAAA,KAAA1R,KAAA4S,KAEAlB,EAAA,MAAA1R,KAAA0S,MAEAhB,EAAA,kBAAAH,EAAAsB,GACA,OAAA7S,KAAAyS,IAAAlB,GAAAvR,KAAA8S,KAAAD,IAGAnB,EAAA,eAAAtnF,GACA,IAAA6lD,EAAA7lD,GAAA,WACA8lD,GAAA,SAAA9lD,IAAA,EAIA,OAFA6lD,GADA7lD,EAAA6lD,EAAAC,IACA,WACAA,GAAA,MAAA9lD,IAAA,KAIAsnF,EAAA,iBAAAtnF,GACA,OAAAA,GAAA,QAAAA,GAAA,iBAAAA,GAUA2nF,EAAAhnF,UAAAlB,OAAAY,OAAA6yB,MAAAvyB,WACAgnF,EAAAhnF,UAAArB,KAAA,mBACAqoF,EAAAhnF,UAAA4X,QAAA,cAEA+uE,EAAA,uBACA,UAAAK,GAWAG,EAAAnnF,UAAAlB,OAAAY,OAAA6yB,MAAAvyB,WACAmnF,EAAAnnF,UAAArB,KAAA,iBAEAgoF,EAAA,gBAAAqB,EAAApwE,GACA,GAAAowE,EAAA,OAAAA,EACA,UAAAb,EAAAvvE,IAGA+uE,EAAA,oBAAAtnF,GACA,OAAAA,GAGAsnF,EAAA,kBAAApqD,EAAA64C,GACA,SAAAG,SAAAh5C,OAAAujD,IAGA9iD,OAAA,uBAAAD,GACA,OAAAC,OAAAksB,aAAAx5C,MAAAstB,OAAAD,IAGAC,OAAA,wBAAAD,GACA,OAAAC,OAAAirD,cAAAv4E,MAAAstB,OAAAD,IAGA4pD,EAAA,UAAAuB,OAAAC,UAEAxB,EAAA,iBAAA/oD,GACA,uBAAAA,GAGA+oD,EAAA,qBAAA/oD,GACA,uBAAAA,GAAA,iBAAAA,GAGA+oD,EAAA,kBAAA/oD,GACA,uBAAAA,gBAAAZ,QAGA2pD,EAAA,QAAA9yE,MAAAmtE,QAEA2F,EAAA,mBAAA/hF,GACA,OAAAA,GAGA+hF,EAAA,cAAAH,EAAAsB,GACA,OAAAtB,EAAAsB,GAGAnB,EAAA,eAAAH,EAAAsB,GACA,OAAA7S,KAAA+H,OAAAwJ,EAAAsB,IAGAnB,EAAA,OAAA1R,KAEA/2E,EAAA,GAAAA,CAAAyoF,oGCpNAzoF,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__24__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is a builtin. */\n  BUILTIN = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  EXTERNAL\n}\n\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a:{\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.d:{\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32 = _BinaryenTypeInt32(),\n  I64 = _BinaryenTypeInt64(),\n  F32 = _BinaryenTypeFloat32(),\n  F64 =  _BinaryenTypeFloat64(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = allocate_memory(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      free_memory(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      free_memory(cArr3);\n      free_memory(cArr2);\n      free_memory(cArr1);\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\n      free_memory(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocPtrArray(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      free_memory(cArr);\n      for (let i = numNames; i >= 0; --i) {\n        free_memory(names[i]);\n      }\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0;\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeFunction(func: FunctionRef): void {\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) free_memory(cStr);\n      if (binaryPtr) free_memory(binaryPtr);\n      if (sourceMapPtr) free_memory(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    free_memory(this.cachedByValue);\n    free_memory(this.cachedTemporaryName);\n    free_memory(this.cachedPrecomputeName);\n    free_memory(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = allocate_memory(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = allocate_memory(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeNode,\n  TypeParameterNode,\n  ParameterKind,\n  SignatureNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  AssertionExpression,\n  ElementAccessExpression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  StringLiteralExpression,\n  CallExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Abi\n} from \"./abi\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,Element> = new Map();\n\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n\n  /** Target expression of the previously resolved property or element access. */\n  resolvedThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  resolvedElementExpression : Expression | null = null;\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.sources = [];\n  }\n\n\n  toAbi(): Abi {\n    let abi = new Abi(this);\n    abi.resolve();\n    return abi;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryResolveImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryResolveImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = this.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    var globalAliases = options.globalAliases;\n    if (globalAliases) {\n      for (let [alias, name] of globalAliases) {\n        if (!name.length) continue; // explicitly disabled\n        let element = this.elementsLookup.get(name);\n        if (element) this.elementsLookup.set(alias, element);\n        else throw new Error(\"element not found: \" + name);\n      }\n    }\n\n    // register 'Array'\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\n    if (arrayPrototype) {\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\n    }\n\n    // register 'String'\n    var stringPrototype = this.elementsLookup.get(\"String\");\n    if (stringPrototype) {\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\n      if (stringInstance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = stringInstance;\n          this.typesLookup.set(\"string\", stringInstance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = <Element>assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = <Element>this.moduleLevelExports.get(\"main\");\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to resolve an import by traversing exports and queued exports. */\n  private tryResolveImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  private filterDecorators(decorators: DecoratorNode[], acceptedFlags: DecoratorFlags): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Processes global options, if present. */\n  private checkGlobalOptions(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (declaration.range.source.is(CommonFlags.BUILTIN)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n        if (element.is(CommonFlags.BUILTIN)) element.internalName = globalName;\n      }\n    }\n  }\n\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.filterDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, prototype);\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"class member expected\");\n        }\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.filterDecorators(decorators, DecoratorFlags.NONE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.filterDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n      // TBD: no need to mark as MODULE_EXPORT\n    }\n  }\n\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.filterDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.filterDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, element);\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobalOptions(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    identifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = identifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = identifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if from a library file\n    if (identifier.range.source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          identifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.filterDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, prototype);\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.filterDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, prototype);\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobalOptions(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          if (this.moduleLevelExports.get(simpleName) !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, namespace);\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.filterDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, global);\n        }\n      }\n      this.checkGlobalOptions(global, declaration);\n    }\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(\n        returnTypeNode,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Type | null {\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\n      if (!signature) return null;\n      return node.isNullable\n        ? signature.type.asNullable()\n        : signature.type;\n    }\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\n\n    var element: Element | null;\n    if (\n      (element = this.elementsLookup.get(localName)) || // file-global\n      (element = this.elementsLookup.get(globalName))   // program-global\n    ) {\n      switch (element.kind) {\n        case ElementKind.ENUM: return Type.i32;\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\n            typeNode.typeArguments,\n            contextualTypeArguments,\n            null\n          ); // reports\n          if (!instance) return null;\n          return node.isNullable\n            ? instance.type.asNullable()\n            : instance.type;\n        }\n      }\n    }\n\n    // check (global) type alias\n    var alias = this.typeAliases.get(simpleName);\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\n\n    // resolve parameters\n    if (typeNode.typeArguments) {\n      let k = typeNode.typeArguments.length;\n      let paramTypes = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let paramType = this.resolveType( // reports\n          typeNode.typeArguments[i],\n          contextualTypeArguments,\n          reportNotFound\n        );\n        if (!paramType) return null;\n        paramTypes[i] = paramType;\n      }\n\n      if (k) { // can't be a placeholder if it has parameters\n        let instanceKey = typesToString(paramTypes);\n        if (instanceKey.length) {\n          localName += \"<\" + instanceKey + \">\";\n          globalName += \"<\" + instanceKey + \">\";\n        }\n      } else if (contextualTypeArguments) {\n        let placeholderType = contextualTypeArguments.get(globalName);\n        if (placeholderType) return placeholderType;\n      }\n    }\n\n    var type: Type | null;\n\n    // check file-global / program-global type\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\n      return type;\n    }\n\n    if (reportNotFound) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        true\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n      let parent: Element | null;\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return element;\n          }\n          parent = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: {\n          parent = (<Class>context).prototype.parent;\n          break;\n        }\n        default: {\n          parent = context;\n          break;\n        }\n      }\n\n      // search parent\n      while (parent) {\n        let members = parent.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return element;\n          }\n        }\n        parent = parent.parent;\n      }\n    }\n\n    // search current file\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.resolvedThisExpression = null;\n      this.resolvedElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = this.elementsLookup.get(name)) {\n      this.resolvedThisExpression = null;\n      this.resolvedElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    this.error(\n      DiagnosticCode.Cannot_find_name_0,\n      identifier.range, name\n    );\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let classReference = (<VariableLikeElement>target).type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolvedElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.resolvedThisExpression = targetExpression;\n            this.resolvedElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.resolvedThisExpression = targetExpression;\n            this.resolvedElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            elementAccess.range, (<Class>target).internalName\n          );\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      targetExpression.range\n    );\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.resolvedThisExpression = null;\n          this.resolvedElementExpression = null;\n          return parent;\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.resolvedThisExpression = null;\n          this.resolvedElementExpression = null;\n          return parent;\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.resolvedThisExpression = expression;\n            this.resolvedElementExpression = null;\n            return this.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            targetExpression.range, target.internalName\n          );\n          return null;\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return null;\n  }\n\n  // resolveExpressionType(\n  //   expression: Expression,\n  //   contextualFunction: Function\n  // ): Type {\n  //   var element = this.resolveExpression(expression, contextualFunction);\n  //   switch (element.kind) {\n\n  //   }\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = Element.replaceComma(internalName);\n  }\n\n  static replaceComma(str: string):string{\n    if(!str) return str;\n    let result  = \"\";\n    for(let ch of str){\n      result +=  ch == \",\" ? \"_\" : ch;\n    }\n    return result;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    functionTypeArguments: Type[] | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = this.declaration;\n    var isInstance = this.is(CommonFlags.INSTANCE);\n    var classPrototype = this.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = this.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(this.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          functionTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (this.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = this.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      this,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    this.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\n    assert(this.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(this.classPrototype);\n\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\n\n    var simpleName = this.simpleName;\n    var partialKey = typesToString(classTypeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      this.declaration,\n      classPrototype,\n      this.decoratorFlags\n    );\n    partialPrototype.flags = this.flags;\n    partialPrototype.operatorKind = this.operatorKind;\n    partialPrototype.classTypeArguments = classTypeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments( // reports\n        assert(this.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\n  resolveBuiltinTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null\n  ): Type[] | null {\n    assert(this.is(CommonFlags.BUILTIN));\n    var resolvedTypeArguments: Type[] | null = null;\n    if (typeArgumentNodes) {\n      let k = typeArgumentNodes.length;\n      resolvedTypeArguments = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let resolvedType = this.program.resolveType( // reports\n          typeArgumentNodes[i],\n          contextualTypeArguments,\n          true\n        );\n        if (!resolvedType) return null;\n        resolvedTypeArguments[i] = resolvedType;\n      }\n    }\n    return resolvedTypeArguments;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // inherit contextual type arguments\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    var declaration = this.declaration;\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        this.program.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          declaration.extendsType.range\n        );\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        this.program.error(\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n          declaration.extendsType.range, baseClass.internalName\n        );\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        this.program.error(\n          DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n          Range.join(declaration.name.range, declaration.extendsType.range)\n        );\n        return null;\n      }\n    }\n\n    // override call specific contextual type arguments if provided\n    var i: i32, k: i32;\n    if (typeArguments) {\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      for (i = 0; i < k; ++i) {\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else if (declaration.typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n\n    var simpleName = this.simpleName;\n    var internalName = this.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    this.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      memoryOffset = baseClass.currentMemoryOffset;\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n    }\n\n    // Resolve constructor\n    if (this.constructorPrototype) {\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\n    }\n\n    // Resolve instance members\n    if (this.instanceMembers) {\n      for (let member of this.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            if (!fieldDeclaration.type) {\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\n            }\n            let fieldType = this.program.resolveType( // reports\n              fieldDeclaration.type,\n              instance.contextualTypeArguments\n            );\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: {\n                if (memoryOffset & 1) ++memoryOffset;\n                break;\n              }\n              case 4: {\n                if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\n                break;\n              }\n              case 8: {\n                if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\n                break;\n              }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\n            if (partialPrototype) {\n              partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n              instance.members.set(member.simpleName, partialPrototype);\n            }\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype);\n            let setterPrototype = (<Property>member).setterPrototype;\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              this\n            );\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype.internalName = (\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\n            );\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype.internalName = (\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\n              );\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, prototype] of this.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = prototype.resolvePartial(typeArguments); // reports\n        if (!operatorPartial) continue;\n        operatorInstance = operatorPartial.resolve(); // reports\n      } else {\n        operatorInstance = prototype.resolve(); // reports\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\n    return instance;\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    alternativeReportNode: Node | null\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments(\n        this.declaration.typeParameters,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        alternativeReportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    } else {\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          ) {\n            ++this.pos;\n          }\n          break;\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        while (--this.tokenPos > posBefore) {\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate as compileBuiltinAllocate,\n  compileAbort as compileBuiltinAbort\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getFunctionBody,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: Function[] = [];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      this.options.isWasm64\n        ? Module.MAX_MEMORY_WASM64\n        : Module.MAX_MEMORY_WASM32,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    var functionTableExported = false;\n    if (functionTableSize) {\n      let entries = new Array<FunctionRef>(functionTableSize);\n      for (let i = 0; i < functionTableSize; ++i) {\n        entries[i] = functionTable[i].ref;\n      }\n      module.setFunctionTable(entries);\n      module.addTableExport(\"0\", \"table\");\n      functionTableExported = true;\n    }\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\n    }\n\n    return module;\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.program.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration, global.parent);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // inlined constant can be compiled as-is\n    if (global.is(CommonFlags.INLINED)) {\n      initExpr = this.compileInlineConstant(global, global.type, true);\n\n    } else {\n\n      // evaluate initializer if present\n      if (declaration && declaration.initializer) {\n        if (!initExpr) {\n          initExpr = this.compileExpression(\n            declaration.initializer,\n            global.type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          );\n        }\n\n        // check if the initializer is constant\n        if (getExpressionId(initExpr) != ExpressionId.Const) {\n\n          // if a constant global, check if the initializer becomes constant after precompute\n          if (isConstant) {\n            initExpr = this.precomputeExpressionRef(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                declaration.range\n              );\n              initializeInStart = true;\n            }\n          } else {\n            initializeInStart = true;\n          }\n        }\n\n      // initialize to zero if there's no initializer\n      } else {\n        initExpr = global.type.toNativeZero(module);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile as-is\n\n      if (isConstant) {\n        let exprType = getExpressionType(initExpr);\n        switch (exprType) {\n          case NativeType.I32: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n            break;\n          }\n          case NativeType.I64: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(\n              getConstValueI64Low(initExpr),\n              getConstValueI64High(initExpr)\n            );\n            break;\n          }\n          case NativeType.F32: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = getConstValueF32(initExpr);\n            break;\n          }\n          case NativeType.F64: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = getConstValueF64(initExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            return false;\n          }\n        }\n        global.set(CommonFlags.INLINED); // inline the value from now on\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\n          module.addGlobal(internalName, nativeType, false, initExpr);\n          module.addGlobalExport(internalName, mangleExportName(global));\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\n          module.addGlobal(internalName, nativeType, false, initExpr);\n        }\n\n      } else /* mutable */ {\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\n      }\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        if (val.is(CommonFlags.INLINED)) {\n          if (element.declaration.isTopLevelExport) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              false, // constant\n              module.createI32(val.constantValue)\n            );\n          }\n        } else {\n          let initExpr: ExpressionRef;\n          if (valueDeclaration.value) {\n            initExpr = this.compileExpression(\n              <Expression>valueDeclaration.value,\n              Type.i32,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            );\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              initExpr = this.precomputeExpressionRef(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                if (element.is(CommonFlags.CONST)) {\n                  this.warning(\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                    valueDeclaration.range\n                  );\n                }\n                initInStart = true;\n              }\n            }\n          } else if (previousValue == null) {\n            initExpr = module.createI32(0);\n          } else if (previousValue.is(CommonFlags.INLINED)) {\n            initExpr = module.createI32(previousValue.constantValue + 1);\n          } else {\n            // in TypeScript this errors with TS1061, but actually we can do:\n            initExpr = module.createBinary(BinaryOp.AddI32,\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\n              module.createI32(1)\n            );\n            if (element.is(CommonFlags.CONST)) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n          if (initInStart) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              true, // mutable\n              module.createI32(0)\n            );\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            if (getExpressionType(initExpr) == NativeType.I32) {\n              val.constantValue = getConstValueI32(initExpr);\n              val.set(CommonFlags.INLINED);\n            } else {\n              assert(false);\n              val.constantValue = 0;\n            }\n          }\n        }\n        previousValue = <EnumValue>val;\n\n        // export values if the enum is exported\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\n          if (member.is(CommonFlags.INLINED) || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n            module.addGlobalExport(member.internalName, mangleExportName(member));\n          } else if (valueDeclaration) {\n            this.warning(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              valueDeclaration.range\n            );\n          }\n        }\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  private ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration, instance.prototype.parent); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    // check module-level export\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\n      if (signature.requiredParameters < signature.parameterTypes.length) {\n        // export the trampoline if the function takes optional parameters\n        instance = this.ensureTrampoline(instance);\n        this.ensureArgcSet();\n      }\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var module = this.module;\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let internalExportName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        member.externalName.text\n      );\n      let element = fileLevelExports.get(internalExportName);\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            let functionInstance = this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n            if (functionInstance) {\n              let functionDeclaration = functionInstance.prototype.declaration;\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\n            let globalDeclaration = (<Global>element).declaration;\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\n              if ((<Global>element).is(CommonFlags.INLINED)) {\n                module.addGlobalExport(element.internalName, member.externalName.text);\n              } else {\n                this.warning(\n                  DiagnosticCode.Cannot_export_a_mutable_global,\n                  member.range\n                );\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\n            let module = this.module;\n            let name = (<Field>element).simpleName;\n            let type = (<Field>element).type;\n            let nativeType = type.toNativeType();\n            let offset = (<Field>element).memoryOffset;\n            let usizeType = this.options.usizeType;\n            let nativeSizeType = this.options.nativeSizeType;\n\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\n            module.addFunction(\n              getterName,\n              this.ensureFunctionType(null, type, usizeType),\n              null,\n              module.createLoad(\n                type.byteSize,\n                type.is(TypeFlags.SIGNED),\n                module.createGetLocal(0, nativeSizeType),\n                nativeType,\n                offset\n              )\n            );\n            module.addFunctionExport(getterName, getterName);\n\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\n            if (element.is(CommonFlags.READONLY)) break;\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\n            module.addFunction(\n              setterName,\n              this.ensureFunctionType([ type ], Type.void, usizeType),\n              null,\n              module.createStore(\n                type.byteSize,\n                module.createGetLocal(0, nativeSizeType),\n                module.createGetLocal(1, nativeType),\n                nativeType,\n                offset\n              )\n            );\n            module.addFunctionExport(setterName, setterName);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ], terminated ? NativeType.Unreachable : NativeType.None);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = this.precomputeExpressionRef(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyExpr = this.compileStatement(statement.statement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    var terminated = alwaysTrue && flow.isAny(FlowFlags.ANY_TERMINATING);\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel,\n        module.createBlock(null, repeatBlock, NativeType.None)\n      )\n    );\n\n    return module.createBlock(\n      breakLabel,\n      breakBlock,\n      terminated\n        ? NativeType.Unreachable\n        : NativeType.None\n      );\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileBuiltinAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = program.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.precomputeExpressionRef(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var alwaysReturns = alwaysTrue && flow.is(FlowFlags.RETURNS);\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var expr = module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ], alwaysReturns ? NativeType.Unreachable : NativeType.None);\n    return expr;\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        if (!(element.is(CommonFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.precomputeExpressionRef(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\n    var module = this.module;\n    var type = this.currentType;\n    var nativeType = type.toNativeType();\n    var funcRef = module.addTemporaryFunction(nativeType, null, expr);\n    module.runPasses([ \"precompute\" ], funcRef);\n    var ret = getFunctionBody(funcRef);\n    module.removeTemporaryFunction();\n    return ret;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.program.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var target = program.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prototype = (<Property>target).setterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(); // reports\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (program.resolvedElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.program.resolvedThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = setterPrototype.resolve(); // reports\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.program.resolvedThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.program.resolvedElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.program.resolvedThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = prototype.resolveUsingTypeArguments( // reports\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.program.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments,\n                true\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = prototype.resolve(\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = prototype.resolve(\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.program.resolvedThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.program.resolvedThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n      case ElementKind.PROPERTY: // TODO\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var expr = compileBuiltinCall( // reports\n      this,\n      prototype,\n      prototype.resolveBuiltinTypeArguments(\n        expression.typeArguments,\n        this.currentFunction.flow.contextualTypeArguments\n      ),\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      return this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"oob\", [\n        module.createSwitch(names, \"oob\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\n    return ret;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.program.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localType = (<Local>target).type;\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = (<FunctionPrototype>target).resolve(\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.program.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\n      }\n      // case LiteralKind.OBJECT:\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  compileStaticString(stringValue: string): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var stringSegments = this.stringSegments;\n\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\n    if (!stringSegment) {\n      let stringLength = stringValue.length;\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\n      stringBuffer[0] =  stringLength         & 0xff;\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\n      for (let i = 0; i < stringLength; ++i) {\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\n      }\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\n      stringSegments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    var stringType = this.program.typesLookup.get(\"string\");\n    this.currentType = stringType ? stringType : options.usizeType;\n    if (options.isWasm64) {\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    }\n    assert(i64_is_i32(stringOffset));\n    return module.createI32(i64_low(stringOffset));\n  }\n\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\n    var isStatic = true;\n    var module = this.module;\n\n    // obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    var elementCount = expressions.length;\n    if (elementCount) { // non-empty static or dynamic\n      let nativeElementType = elementType.toNativeType();\n      let values: usize;\n      let byteLength: usize;\n      switch (nativeElementType) {\n        case NativeType.I32: {\n          values = changetype<usize>(new Int32Array(elementCount));\n          byteLength = elementCount * 4;\n          break;\n        }\n        case NativeType.I64: {\n          values = changetype<usize>(new Array<I64>(elementCount));\n          byteLength = elementCount * 8;\n          break;\n        }\n        case NativeType.F32: {\n          values = changetype<usize>(new Float32Array(elementCount));\n          byteLength = elementCount * 4;\n          break;\n        }\n        case NativeType.F64: {\n          values = changetype<usize>(new Float64Array(elementCount));\n          byteLength = elementCount * 8;\n          break;\n        }\n        default: {\n          assert(false);\n          return module.createUnreachable();\n        }\n      }\n\n      // precompute value expressions\n      let exprs = new Array<ExpressionRef>(elementCount);\n      let expr: BinaryenExpressionRef;\n      for (let i = 0; i < elementCount; ++i) {\n        exprs[i] = expressions[i]\n          ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n          : elementType.toNativeZero(module);\n        if (isStatic) {\n          expr = this.precomputeExpressionRef(exprs[i]);\n          if (getExpressionId(expr) == ExpressionId.Const) {\n            assert(getExpressionType(expr) == nativeElementType);\n            switch (nativeElementType) {\n              case NativeType.I32: {\n                changetype<i32[]>(values)[i] = getConstValueI32(expr);\n                break;\n              }\n              case NativeType.I64: {\n                changetype<I64[]>(values)[i] = i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                );\n                break;\n              }\n              case NativeType.F32: {\n                changetype<f32[]>(values)[i] = getConstValueF32(expr);\n                break;\n              }\n              case NativeType.F64: {\n                changetype<f64[]>(values)[i] = getConstValueF64(expr);\n                break;\n              }\n              default: assert(false); // checked above\n            }\n          } else {\n            // TODO: emit a warning if declared 'const'\n            // if (isConst) {\n            //   this.warn(\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n            //     reportNode.range\n            //   );\n            // }\n            isStatic = false;\n          }\n        }\n      }\n\n      let usizeTypeSize = this.options.usizeType.byteSize;\n      if (isStatic) { // non-empty, all elements can be precomputed\n\n        // Create a combined static memory segment composed of:\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\n\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\n        let data = new Uint8Array(arraySize + bufferTotalSize);\n        let segment = this.addMemorySegment(data);\n        let offset = 0;\n\n        // write Array struct\n        if (usizeTypeSize == 8) {\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\n          offset += 8;\n        } else {\n          assert(i64_high(segment.offset) == 0);\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\n          offset += 4;\n        }\n        writeI32(elementCount, data, offset); // length_\n        offset += 4;\n        assert(offset == arraySize);\n\n        // write ArrayBuffer struct\n        writeI32(byteLength, data, offset);\n        offset += bufferHeaderSize; // incl. alignment\n\n        // write ArrayBuffer data\n        switch (nativeElementType) {\n          case NativeType.I32: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        assert(offset <= arraySize + bufferTotalSize);\n\n        this.currentType = arrayType;\n        return usizeTypeSize == 8\n          ? module.createI64(\n              i64_low(segment.offset),\n              i64_high(segment.offset)\n            )\n          : module.createI32(\n              i64_low(segment.offset)\n            );\n\n      } else { // non-empty, some elements can't be precomputed\n\n        this.currentType = arrayType;\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n        if (!setter) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            reportNode.range, arrayInstance.internalName\n          );\n          return module.createUnreachable();\n        }\n        let nativeArrayType = arrayType.toNativeType();\n        let currentFunction = this.currentFunction;\n        let tempLocal = currentFunction.getTempLocal(arrayType, false);\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\n        let index = 0;\n        stmts[index++] = module.createSetLocal(tempLocal.index,\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n            module.createI32(0), // this\n            module.createI32(elementCount)\n          ])\n        );\n        for (let i = 0; i < elementCount; ++i) {\n          stmts[index++] = this.makeCallDirect(setter, [\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\n            module.createI32(i),\n            exprs[i]\n          ]);\n        }\n        assert(index + 1 == stmts.length);\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n        currentFunction.freeTempLocal(tempLocal);\n        this.currentType = arrayType;\n        return module.createBlock(null, stmts, nativeArrayType);\n      }\n\n    } else { // empty, TBD: cache this somehow?\n      this.currentType = arrayType;\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(0)\n      ]);\n    }\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.program.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = classPrototype.resolve(\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = classPrototype.resolveUsingTypeArguments( // reports\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the first matching constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance = classInstance.constructorInstance;\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\n      constructorInstance = currentClassInstance.constructorInstance;\n    }\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(program.resolvedThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>target).getterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(null); // reports\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.parent);\n            assert(parent.kind == ElementKind.CLASS);\n            let thisExpression = assert(program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr, inline);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, 0, inline);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileBuiltinAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleExportName(element: Element, simpleName: string = element.simpleName): string {\n  switch (element.kind) {\n    case ElementKind.FUNCTION: {\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\n      return parent\n        ? mangleExportName(parent)\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n        + simpleName\n        : simpleName;\n    }\n    case ElementKind.FIELD: {\n      let parent = assert((<Field>element).parent);\n      return mangleExportName(parent)\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n          + simpleName;\n    }\n    case ElementKind.ENUMVALUE: {\n      let parent = assert((<EnumValue>element).parent);\n      return mangleExportName(parent)\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n          + simpleName;\n    }\n    case ElementKind.CLASS: {\n      let parent = (<Class>element).prototype.parent;\n      return parent\n        ? mangleExportName(parent)\n        + STATIC_DELIMITER\n        + simpleName\n        : simpleName;\n    }\n    default: {\n      let parent = element.parent;\n      return parent\n        ? mangleExportName(parent)\n        + STATIC_DELIMITER\n        + simpleName\n        : simpleName;\n    }\n  }\n}\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement,\n  parentElement: Element | null = null\n): void {\n  mangleImportName_moduleName = parentElement ? parentElement.simpleName : declaration.range.source.simplePath;\n  mangleImportName_elementName = element.simpleName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionExpression,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // mark the special builtins library file\n    if (source.normalizedPath == builtinsFile) {\n      source.set(CommonFlags.BUILTIN);\n    }\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // mark builtins\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    // return backlog.length ? backlog.shift() : null;\n    let fileName = backlog.length ? backlog.shift() : null;\n\n    return fileName;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\n\n    if (tn.skip(Token.PUBLIC)) {\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      if (tn.skip(Token.ABSTRACT)) {\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      } else {\n        flags |= CommonFlags.INSTANCE;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (tn.skip(Token.GET)) {\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.GET;\n        isGetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.SET)) {\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.SET | CommonFlags.SET;\n        isSetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\n      flags |= CommonFlags.CONSTRUCTOR;\n      isConstructor = true;\n      if (flags & CommonFlags.STATIC) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(staticStart, staticEnd), \"static\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.READONLY) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\n        ); // recoverable\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n\n    if (token == Token.NULL) {\n      return Node.createNullExpression(tn.range());\n    }\n    if (token == Token.TRUE) {\n      return Node.createTrueExpression(tn.range());\n    }\n    if (token == Token.FALSE) {\n      return Node.createFalseExpression(tn.range());\n    }\n\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.INVALID) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    switch (token) {\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Expression_expected,\n          tn.range()\n        );\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = 0\n  ): Expression | null {\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression?\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) return null;\n        expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos)); // is again callable\n      }\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA ? Precedence.COMMA + 1 : 0);\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  // skipBlock(tn: Tokenizer): void {\n  //   var depth = 0;\n  //   var token: Token;\n  //   do {\n  //     token = tn.next();\n  //     if (token == Token.OPENBRACE) {\n  //       ++depth;\n  //     } else if (token == Token.CLOSEBRACE) {\n  //       if (depth) --depth;\n  //       if (!depth) break; // done\n  //     }\n  //   } while (token != Token.ENDOFFILE);\n  // }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING,\n  INVALID = -1\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"current_memory()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"grow_memory(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","import {\n  Type,\n  TypeKind,\n  Signature\n} from \"./types\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement,\n  Class\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  DecoratorNode,\n  SignatureNode,\n  ClassDeclaration,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  TypeNode,\n  NodeKind,\n  Source,\n  ParameterNode,\n  Expression,\n  Node,\n  VariableLikeDeclarationStatement,\n  LiteralKind,\n  StringLiteralExpression,\n  CommonTypeNode\n} from \"./ast\";\n\n\nenum AbiParameterKind{\n  BOOL, // boolean and bool\n  NUMBER, // original type except boolean and bool\n  STRING, // string kind\n  ARRAY, // array kind\n  CLASS // class kind\n}\n\nclass Struct {\n\n  name: string;\n  base: string;\n  fields: Array<Object> = new Array<Object>();\n}\n\nclass AbiTypeAlias{\n  new_type_name: string;\n  type:string\n\n  constructor(newTypeName:string, wasmType:string){\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\nclass Action {\n\n  name: string;\n  type: string;\n  ricardian_contract:string = \"\";\n\n  constructor(name: string, type: string) {\n    this.name = name;\n    this.type = type;\n  }\n}\n\n\nclass SourceNode{\n  sourceName: string;\n  importNames: Array<string>;\n\n  constructor(sourceNode:string){\n    this.sourceName = sourceNode;\n    this.importNames = new Array();\n  }\n}\n\nclass Table{\n  name:string;\n  type:string;\n  index_type:string = \"int64\";\n  keys_names:string[] = [\"currency\"];\n  keys_types:string[] = [\"uint64\"];\n\n  constructor(name: string, type: string){\n    this.name = name;\n    this.type = type;\n  }\n}\n\n\nexport class Abi {\n\n  abiInfo: {\n    version:string,\n    types: Array<AbiTypeAlias>, \n    structs: Array<Struct>, \n    actions: Array<Action>,\n    tables: Array<Table> \n  };\n\n  dispatch: string;\n\n  program: Program;\n\n  abiTypeLookup: Map<string, string> = new Map();\n\n  typeAliasSet: Set<string> = new Set<string>();\n\n  structsLookup: Map<string, Struct> = new Map();\n\n  elementLookup: Map<string, Element> = new Map();\n\n  constructor(program: Program) {\n\n    this.program = program;\n\n    this.abiInfo = {\n    version: \"ultraio:1.0\",\n    types: new Array<AbiTypeAlias>(),\n    structs: new Array<Struct>(),\n    actions: new Array<Action>(),\n    tables: new Array<Table>()};\n\n    this.abiTypeLookup = new Map([\n      [\"i8\", \"int8\"],\n      [\"i16\", \"int16\"],\n      [\"i32\", \"int32\"],\n      [\"i64\", \"int64\"],\n      [\"isize\", \"\"],\n      [\"u8\", \"uint8\"],\n      [\"u16\", \"uint16\"],\n      [\"u32\", \"uint32\"],\n      [\"u64\", \"uint64\"],\n      [\"usize\", \"usize\"],\n      [\"bool\", \"uint8\"], // eos not support the bool\n      [\"f32\", \"f32\"],\n      [\"f64\", \"f64\"],\n      [\"boolean\", \"uint8\"], // eos not suppot the bool\n      [\"account_name\", \"name\"],\n      [\"permission_name\", \"name\"],\n      [\"action_name\", \"name\"],\n      [\"weight_type\", \"uint16\"],\n      [\"Asset\", \"asset\"]\n    ]);\n  }\n\n  /**\n  *  Add abi struct for abi info.\n  */\n  toAbiStruct(methodName: string, signature: SignatureNode): Struct {\n\n    let struct = new Struct();\n    struct.name = methodName;\n    struct.base = \"\";\n\n    let types = signature.parameters;\n    if (types) {\n      for (let type of types) {\n        let typeKind = type.type.range.toString();\n        this.addAbiTypeAlias(typeKind);\n        struct.fields.push({ name: type.name.range.toString(), type: type.type.range.toString() });\n      }\n    }\n    return struct;\n  }\n\n\n  addAbiTypeAlias(typeKindName: string): void{\n\n    if(!this.typeAliasSet.has(typeKindName)){\n      // It's the assemblyscript internal type \n      let originalTypeName = this.findContractOriginalType(typeKindName);\n      let wasmType = this.abiTypeLookup.get(originalTypeName);\n      if(wasmType){\n        this.abiInfo.types.push( new AbiTypeAlias(typeKindName, wasmType));\n      } \n      this.typeAliasSet.add(typeKindName);\n    }\n  }\n\n  /**\n  * Find the original type name, \n  * eg: declare type account_name = u64;\n        declare type account_name_alias = account_name;\n\n    findContractOriginalType(\"account_name_alias\") return \"account_name\";\n  */\n  findContractOriginalType(typeKindName:string): string {\n\n    let abiType:string|null = this.abiTypeLookup.get(typeKindName);\n    if(abiType){\n      return typeKindName;\n    }\n    let typeAlias = this.program.typeAliases.get(typeKindName);\n    if(typeAlias){\n      let commonaTypeName = typeAlias.type.range.toString()\n      return this.findContractOriginalType(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find the script original type name\n  */\n  findScriptOriginalTypeName(typeKindName: string): string {\n    let typeAlias = this.program.typeAliases.get(typeKindName);\n    if(typeAlias){\n      let commonaTypeName = typeAlias.type.range.toString()\n      return this.findScriptOriginalTypeName(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find assemblyscript original type name \n  * eg: account_name return 'u64'\n  */\n  findScriptOriginalType(typeKindName: string): Type | null{\n    let originalName = this.findScriptOriginalTypeName(typeKindName);\n    //Get the AssemblyScript original type \n    let scriptType:Type|null =  this.program.typesLookup.get(originalName);\n    return scriptType;\n  }\n\n\n  // Check the FunctionPrototype weather has decoratorKind\n  checkFuncPrototypeDecorator(funcPrototype: FunctionPrototype, decoratorKind: DecoratorKind): bool {\n    let decorators = funcPrototype.declaration.decorators;\n    let isActionDecorator =false;\n    if (decorators ) {\n      for (let decorator of decorators) {\n        if (decorator.decoratorKind == decoratorKind){\n          isActionDecorator = true;\n        }\n      }\n    }\n    return isActionDecorator;\n  }\n\n  isWrapWithQutation(str: string):bool{\n\n    if(str == undefined || str == null){\n      return false;\n    } \n\n    return  str.charAt(0) == \"\\\"\" && str.charAt(str.length-1) == \"\\\"\"\n         ? true : false;\n  }\n\n\n  /**\n  *  Check that element whether is functionPrototype  \n  *\n  */\n  isActionFuncPrototype(element: Element): bool {\n\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE){\n      let funcType = <FunctionPrototype>element;\n      return this.checkFuncPrototypeDecorator(funcType, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  /**\n  * Resolve the class database decoreator \n  */\n  resolveClassDecorator(decorators: DecoratorNode[]):void {\n    for(let decorator of decorators){\n      if(decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments){\n        // Decorator argument must have two arguments \n        if( decorator.arguments.length < 2){\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n\n        let type = decorator.arguments[0].range.toString();\n        let name = this.retrieveArgumentText(decorator.arguments[1]);\n\n        this.abiInfo.tables.push( new Table(name, type) );\n\n        this.resolveExpressionToStruct(decorator.arguments[0]);\n      }\n    }\n  }\n\n\n  retrieveArgumentText(expr: Expression ): string{\n     let argu:string = expr.range.toString();\n     \n     if(this.isWrapWithQutation(argu)){\n       return argu.substring(1, argu.length-2);\n     }\n\n     let internelName = this.getInternalName(expr);\n     let element:Element|null = this.program.elementsLookup.get(internelName);\n\n     if(element){\n       let declaration:VariableLikeDeclarationStatement|null = (<VariableLikeElement> element).declaration;\n       if(declaration && declaration.initializer){\n         let literal:StringLiteralExpression = <StringLiteralExpression> declaration.initializer;\n         return literal.value;\n       }\n     }\n     throw new Error(`Cann't find constant ${internelName}`);\n  }  \n\n\n  getInternalName(node: Node): string{\n\n    let internalPath = node.range.source.internalPath;\n    let name = node.range.toString();\n    let internalName = `${internalPath}/${name}`;\n    return internalName;\n  }\n\n\n\n  /**\n  *  Get struct from expression. \n  *\n  */\n  resolveExpressionToStruct(expr: Expression): void{\n\n    let internalPath = expr.range.source.internalPath;\n    let name = expr.range.toString();\n    let internalName = `${internalPath}/${name}`;\n    this.retrieveStructByInternalName(internalName);\n  }\n\n  retrieveStructByInternalName(internalName: string):void{\n\n    let element = this.program.elementsLookup.get(internalName);\n    if(!element || element.kind != ElementKind.CLASS_PROTOTYPE){\n      throw new Error(`Element ${internalName} not found, pleasure make sure that class ${internalName} was existed.`);\n    }\n\n\n    let classPrototype = <ClassPrototype> element;\n    this.resolveClassPrototypeToStruct(classPrototype);\n  }\n\n\n  resolveClassPrototypeToStruct(classPrototype: ClassPrototype):void{\n\n    let members: DeclarationStatement[] = classPrototype.declaration.members;\n\n    let struct = new Struct();\n    struct.name = classPrototype.simpleName;\n\n    if(this.abiTypeLookup.get(struct.name)){\n      return ;\n    }\n\n    struct.base = \"\";\n    for(let member of members){\n      if(member.kind == NodeKind.FIELDDECLARATION){\n        let filedDeclare :FieldDeclaration = <FieldDeclaration>member;\n        let filedName = member.name.range.toString();\n        let filedType = filedDeclare.type;\n\n        if(filedType){\n          struct.fields.push({name:filedName, type: filedType.range.toString()} );\n        }\n      }\n    }\n\n    this.addStruct(struct);\n  }\n\n\n\n  addStruct(struct: Struct): void {\n\n    if(!this.structsLookup.has(struct.name)){\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n\n  isArray(typeName:string): bool {\n    return typeName.indexOf(\"[\") != -1;\n  }\n\n  getBaseTypeName(typeName: string): string{\n\n    let bracketIndex = typeName.indexOf(\"[\");\n    if(bracketIndex != -1){\n      let index = typeName.indexOf(\" \") == -1 ?  bracketIndex : typeName.indexOf(\" \");\n      let baseTypeName =  typeName.substring(0, index);\n      return baseTypeName;\n    }\n    return typeName;\n  }\n\n  static nameMap = \".12345abcdefghijklmnopqrstuvwxyz\";\n\n\n  checkName(str: string):void{\n\n    if(str.length > 13){\n      throw new Error(`Action Name:${str} should be less than 13 characters.`);\n    }  \n\n    for(let ch of str){\n      if(Abi.nameMap.indexOf(ch) == -1){\n        throw new Error(`Action Name:${str} should only contains the following symbol .12345abcdefghijklmnopqrstuvwxyz`);\n      }\n    }\n  }\n\n\n  /** \n  * string TypeKind is 9, and usize TypeKind is also 9.\n  */\n  resolveAbiParameterType(type:CommonTypeNode): {typeKind:AbiParameterKind, typeName:string, isArray: bool}{  \n\n    let parameterType = type.range.toString();\n    let typeAlias = this.program.typeAliases.get(parameterType);\n    if(typeAlias){\n      parameterType = typeAlias.type.range.toString();\n    } \n\n    let isArray:bool = this.isArray(parameterType);\n    let baseTypeName: string = this.getBaseTypeName(parameterType);\n\n    // console.log(\"isArray:\" + isArray );\n    // console.log(\"baseTypeName:\" + baseTypeName + \". type kind:\" + type.kind);\n\n    if (baseTypeName == \"string\"){\n      return {typeKind: AbiParameterKind.STRING, typeName: baseTypeName, isArray};\n    }\n\n    let originalName:string = this.findContractOriginalType(baseTypeName);\n    let originalType:Type|null = this.findScriptOriginalType(originalName);\n\n\n\n    if(!originalType){\n        return {typeKind: AbiParameterKind.CLASS, typeName: originalName, isArray:isArray};\n    } else if(originalType.kind == TypeKind.BOOL){\n        return {typeKind: AbiParameterKind.BOOL, typeName: originalType.toString() , isArray:isArray};\n    } else {\n        return {typeKind: AbiParameterKind.NUMBER, typeName: originalType.toString(), isArray:isArray}\n    }\n  }\n\n\n  /**\n  *  Resolve ClassPrototype to dispatcher  \n  *\n  *\n  */\n  resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n\n    let body = new Array<string>();\n    let hasActionDecorator = false;\n    if (clzPrototype.instanceMembers) {\n\n      let contractName = clzPrototype.simpleName; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n      \n      body.push(`  if (receiver == code) {`);\n      body.push(`    let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let instance of clzPrototype.instanceMembers.values()) {\n        if (this.isActionFuncPrototype(instance)) {\n\n          this.resolveFunctionPrototype(<FunctionPrototype>instance);\n          hasActionDecorator = true;\n          let declaration:FunctionDeclaration = (<FunctionPrototype>instance).declaration; // FunctionDeclaration\n\n          let funcName = declaration.name.range.toString();\n          let types = declaration.signature.parameters; // FunctionDeclaration parameter types\n          \n          this.checkName(funcName);\n\n          body.push(`    if (action == N(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (var index = 0; index < types.length; index++) {\n            let type:ParameterNode = types[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n\n            let abiType = this.resolveAbiParameterType(type.type);\n\n            if(abiType.isArray){\n              if(abiType.typeKind == AbiParameterKind.NUMBER){\n                body.push(`      let ${parameterName} = ds.readVector<${abiType.typeName}>();`);\n              } else if(abiType.typeKind == AbiParameterKind.BOOL){\n                body.push(`      let ${parameterName} = ds.readVector<u8>();`);\n              } else if(abiType.typeKind == AbiParameterKind.STRING){\n\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${abiType.typeName}>();`);\n              }\n\n\n            } else{\n              if(abiType.typeKind == AbiParameterKind.STRING){\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if(abiType.typeKind == AbiParameterKind.BOOL){\n                body.push(`      let ${parameterName} = ds.read<u8>() != 0;`);\n              } else if(abiType.typeKind == AbiParameterKind.NUMBER ){\n                body.push(`      let ${parameterName} = ds.read<${abiType.typeName}>();`);\n              } else {\n                let internalName = this.getInternalName(type.type);\n                this.retrieveStructByInternalName(internalName);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds)`);\n              }\n            }\n            fields.push(parameterName);\n          }\n          body.push(`      ${contractVarName}.${funcName}(${fields.join(',')});`);\n          body.push(\"    }\");\n        }\n      }\n      body.push(\"  }\");\n\n      if(hasActionDecorator){\n        let clzName = clzPrototype.simpleName;\n        let sourcePath = clzPrototype.declaration.range.source.internalPath;\n        if(clzPrototype.declaration.decorators){\n          this.resolveClassDecorator(clzPrototype.declaration.decorators);\n        }\n      }\n    }\n    return hasActionDecorator ? body : new Array();\n  }\n\n  resolveFunctionPrototype(funcPrototype: FunctionPrototype): void {\n\n    let declaration:FunctionDeclaration = funcPrototype.declaration;\n    let funcName = declaration.name.range.toString();\n    let signature = funcPrototype.declaration.signature;\n    let struct = this.toAbiStruct(funcName, signature);\n\n    this.addStruct(struct)\n    this.abiInfo.actions.push(new Action(funcName, funcName));\n  }\n\n\n  printTypeAliasInfo():void{\n\n    let typesLookupKeys = this.program.typesLookup.keys();\n    for(let key of typesLookupKeys){\n      let value = this.program.typesLookup.get(key);\n      if(value){\n        console.log(`type look up key: ${key}. value: ${value.kind}`);\n      }\n    }\n\n    let typesAliasKeys = this.program.typeAliases.keys();\n    for(let key of typesAliasKeys){\n      let value = this.program.typeAliases.get(key);\n      if(value){\n        console.log(`type alias key: ${key}. Value: ${value.type.range.toString()}`);\n      }\n    }\n  }\n\n  printElementLookUpInfo():void{\n    let keys = this.program.elementsLookup.keys();\n      for(let key of keys){\n        let value = this.program.elementsLookup.get(key);\n        if(value)\n          console.log(`Element lookup key:${key}.Kind:${value.kind}`);\n      }\n  }\n\n  resolve(): void{\n\n    // this.printTypeAliasInfo();\n    // this.printElementLookUpInfo();\n    // this.findDBManager();\n\n    let dispatchBuffer = new Array<string>();\n\n    for (let element of this.program.elementsLookup.values()) {\n      // The element is ClassPrototype\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(clzPrototype.internalName)) {\n          let classDispatch:Array<string> = this.resolveClassDispatcher(clzPrototype);\n          classDispatch.forEach((value:string, index:number):void => {\n            dispatchBuffer.push(value);\n          });\n          this.elementLookup.set(clzPrototype.internalName, element);\n        } \n      }\n    }\n\n    if(dispatchBuffer.length == 0){\n      // throw new Error(`The smart contract must specify one action.`);\n    }\n\n    this.dispatch = this.assemblyDispatch(dispatchBuffer);  \n  }\n\n\n  // Concat the dispatch message\n  assemblyDispatch(body: Array<string>): string{\n\n    let sb = new Array<string>();\n    sb.push(\"export function apply(receiver: u64, code: u64, action: u64): void {\");\n\n    body.forEach( (value:string, index:number):void =>{\n      sb.push(value);\n    });\n    sb.push(\"}\");\n\n    return sb.join(\"\\n\");\n  }\n}\n\n\n\n","/** @module util *//***/\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags\n} from \"./program\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"current_memory\": { // current_memory() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"set_memory\": { // set_memory(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\nconst allocateInternalName = \"allocate_memory\";\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\n  if (!allocatePrototype) {\n    program.error(\n      DiagnosticCode.Cannot_find_name_0,\n      reportNode.range, allocateInternalName\n    );\n    program.info(\n      DiagnosticCode.An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf,\n      reportNode.range\n    );\n    return module.createUnreachable();\n  }\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\n    program.error(\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n      reportNode.range, allocatePrototype.internalName\n    );\n    return module.createUnreachable();\n  }\n\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\n\n  compiler.currentType = classInstance.type;\n  return module.createCall(\n    allocateInstance.internalName, [\n      options.isWasm64\n        ? module.createI64(classInstance.currentMemoryOffset)\n        : module.createI32(classInstance.currentMemoryOffset)\n    ],\n    options.nativeSizeType\n  );\n}\n\nconst abortInternalName = \"abort\";\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\n  if (!stringType) return module.createUnreachable();\n\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\n\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__24__;","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\n\nfor (var key in binaryen)\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\n    global[key] = binaryen[key];\n\n// Utilize Binaryen's heap\n\nglobal.allocate_memory = function(size) {\n  if (!size) return 0; // should be safe in our case\n  return binaryen._malloc(size);\n};\n\nglobal.free_memory = function(ptr) {\n  if (ptr) binaryen._free(ptr);\n};\n\nglobal.move_memory = function(dest, src, n) {\n  return binaryen._memmove(dest, src, n);\n};\n\nglobal.store = function(ptr, val) {\n  binaryen.HEAPU8[ptr] = val;\n};\n\nglobal.load = function(ptr) {\n  return binaryen.HEAPU8[ptr];\n};\n\n// Implement module stubs\n\nconst Module = require(\"../../module\").Module;\n\nModule.prototype.toText = function toText() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrint(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrintAsmjs(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n","module.exports = globalScope => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\n    if (!(size >>>= 0)) return 0;\n\n    if (HEAP_OFFSET + size > HEAP.length) {\n      var oldHeap = HEAP;\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n      HEAP.set(oldHeap);\n    }\n\n    var ptr = HEAP_OFFSET;\n    if ((HEAP_OFFSET += size) & 7)\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n\n    return ptr;\n  };\n\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\n    // TODO\n  };\n\n  globalScope[\"move_memory\"] = function move_memory(dest, src, size) {\n    HEAP.copyWithin(dest, src, src + size);\n  };\n\n  globalScope[\"store\"] = function store(ptr, value, offset) {\n    HEAP[ptr + (offset | 0)] = value;\n  };\n\n  globalScope[\"load\"] = function load(ptr, offset) {\n    return HEAP[ptr + (offset | 0)];\n  };\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nrequire(\"./memory\")(globalScope);\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"../../../std/portable/index\";\nimport \"./binaryen\";\nimport \"./float\";\nimport \"./i64\";\n"],"sourceRoot":""}