{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__23__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","abi_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","OperatorKind","QueuedExport","QueuedImport","TypeAlias","operatorKindFromDecorator","decoratorKind","arg","assert","length","DecoratorKind","OPERATOR","OPERATOR_BINARY","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","CommonFlags","DecoratorFlags","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","arrayBufferViewPrototype","stringInstance","resolvedThisExpression","resolvedElementExpression","sources","__extends","toAbi","abi","Abi","resolve","getSource","normalizedPath","k","source","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedExtends","queuedImplements","filespace","Filespace","set","internalName","currentFilespace","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","declaration","element","tryResolveImport","referencedName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","extendsType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","Error","INTERFACE_PROTOTYPE","stringPrototype","has","Duplicate_identifier_0","programLevelInternalName","type","filterDecorators","decorators","acceptedFlags","presentFlags","NONE","decorator","flag","decoratorKindToFlag","decoratorNameToKind","Duplicate_decorator","toString","Decorator_0_is_not_valid_here","checkGlobalOptions","parentNode","hasDecorator","GLOBAL","is","BUILTIN","isLibrary","SOURCE","globalName","namespace","fileLevelInternalName","simpleName","ClassPrototype","SEALED","UNMANAGED","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Range","join","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","decoratorFlags","INLINE","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","EnumValue","initializeExport","internalPath","identifier","prefix","FILESPACE","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameters","numParameters","parameterTypes","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","isNullable","asNullable","typeNode","localName","ENUM","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","target","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","elementExpression","indexedGet","lookupOverload","Index_signature_is_missing_in_type_0","base","resolveElementAccess","elementAccess","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","explicitLocal","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","FUNCTION_PROTOTYPE","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","DiagnosticEmitter","Element","program","flags","replaceComma","str","result","str_1","str_1_1","ch","NAMESPACE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","local","inheritedTypeArguments_2","inheritedTypeArguments_2_1","parameterName","getParameterName","Flow","create","addLocal","getTempLocal","wrapped","temps","toNativeType","NativeType","I32","I64","F32","F64","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_3","inheritedTypeArguments_3_1","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","instanceProperty","partialGetterPrototype","partialSetterPrototype","_j","_k","_l","operatorInstance","operatorPartial","asClass","inheritedTypeArguments_4","inheritedTypeArguments_4_1","baseType","isAssignableTo","current","unchecked","uncheckedOverload","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","enterBranchOrScope","branch","slice","leaveBranchOrScope","propagate","_b","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritMutual","left","right","leftExt","rightExt","thisExt","minLength","min","canOverflow","expr","operand","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","program_1","tokenizer_1","Token","util_1","Node","createType","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","nameStr","ACTION","DATABASE","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","asGlobal","__export","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","None","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeFunction","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","_BinaryenFunctionGetBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","g","eval","e","window","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","cachedNullableType","ceil","nonNullableType","computeSmallIntegerShift","targetType","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","features","hasFeature","feature","Feature","ConversionKind","WrapMode","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argcVar","argcSet","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureTrampoline","ensureArgcSet","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","staticMembers","setter","ctorInstance","_e","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","count","Nop","blockFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","repeatLabel","alwaysTrue","compileExpressionRetainType","condPre","incrExpr","bodyExpr","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifFalseFlow","ifTrueExpr","ifFalseExpr","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","terminated","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","precomputeExpression","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","compileCallInlineUnchecked","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","elementType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenExpr","ifElseExpr","ifThenType","ifElseType","ifThenAllocates","ifElseAllocates","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","compileAllocate","field","nativeFieldType","builtinsFile","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","ctor","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Break","Switch","CallImport","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Return","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","AbiParameterKind","Struct","fields","AbiTypeAlias","newTypeName","wasmType","new_type_name","Action","ricardian_contract","Table","index_type","keys_names","keys_types","abiTypeLookup","typeAliasSet","structsLookup","elementLookup","abiInfo","version","structs","actions","tables","toAbiStruct","methodName","struct","types_1_1","typeKind","addAbiTypeAlias","typeKindName","originalTypeName","findContractOriginalType","typeAlias","commonaTypeName","findScriptOriginalTypeName","findScriptOriginalType","checkFuncPrototypeDecorator","funcPrototype","isActionDecorator","decorators_1","decorators_1_1","isWrapWithQutation","undefined","charAt","isActionFuncPrototype","funcType","resolveClassDecorator","decorators_2","decorators_2_1","retrieveArgumentText","resolveExpressionToStruct","argu","internelName","getInternalName","retrieveStructByInternalName","resolveClassPrototypeToStruct","filedDeclare","filedName","filedType","addStruct","isArray","getBaseTypeName","bracketIndex","checkName","nameMap","resolveAbiParameterType","baseTypeName","originalType","BOOL","NUMBER","resolveClassDispatcher","clzPrototype","hasActionDecorator","contractName","contractVarName","resolveFunctionPrototype","funcName","abiType","printTypeAliasInfo","typesLookupKeys","keys","typesLookupKeys_1","typesLookupKeys_1_1","key","console","typesAliasKeys","typesAliasKeys_1","typesAliasKeys_1_1","printElementLookUpInfo","keys_1","keys_1_1","dispatchBuffer","forEach","dispatch","assemblyDispatch","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","compiler","evaluateConstantType","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","deferASM","deferASMCall","typeArgument","valueType","allocateInternalName","allocatePrototype","An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","y","sign","isTrueish","fromCodePoint","Number","isInteger"],"mappings":"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AAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__23__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToString\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeNode,\n  TypeParameterNode,\n  ParameterKind,\n  SignatureNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  AssertionExpression,\n  ElementAccessExpression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  StringLiteralExpression,\n  CallExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\nimport { CharCode } from \"./util\";\n\n\nimport {\n  Abi\n} from \"./abi\";\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  isReExport: bool;\n  referencedName: string;\n  member: ExportMember;\n}\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  internalName: string;\n  referencedName: string;\n  referencedNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,Element> = new Map();\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** ArrayBufferView prototype reference. */\n  arrayBufferViewPrototype: InterfacePrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n\n  /** Target expression of the previously resolved property or element access. */\n  resolvedThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  resolvedElementExpression : Expression | null = null;\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.sources = [];\n  }\n\n\n  toAbi(): Abi {\n    let abi = new Abi(this);\n    abi.resolve();\n    return abi;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.internalName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.internalName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.referencedName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.internalName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.referencedNameAlt)) {\n            this.elementsLookup.set(queuedImport.internalName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.referencedName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = this.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    var globalAliases = options.globalAliases;\n    if (globalAliases) {\n      for (let [alias, name] of globalAliases) {\n        if (!name.length) continue; // explicitly disabled\n        let element = this.elementsLookup.get(name);\n        if (element) this.elementsLookup.set(alias, element);\n        else throw new Error(\"element not found: \" + name);\n      }\n    }\n\n    // register 'Array'\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\n    if (arrayPrototype) {\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\n    }\n\n    // register 'ArrayBufferView'\n    var arrayBufferViewPrototype = this.elementsLookup.get(\"ArrayBufferView\");\n    if (arrayBufferViewPrototype) {\n      assert(arrayBufferViewPrototype.kind == ElementKind.INTERFACE_PROTOTYPE);\n      this.arrayBufferViewPrototype = <InterfacePrototype>arrayBufferViewPrototype;\n    }\n\n    // register 'String'\n    var stringPrototype = this.elementsLookup.get(\"String\");\n    if (stringPrototype) {\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\n      if (stringInstance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = stringInstance;\n          this.typesLookup.set(\"string\", stringInstance.type);\n        }\n      }\n    }\n  }\n\n  /** Tries to resolve an import by traversing exports and queued exports. */\n  private tryResolveImport(\n    referencedName: string,\n    queuedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(referencedName)) return element;\n      let queuedExport = queuedExports.get(referencedName);\n      if (!queuedExport) return null;\n      if (queuedExport.isReExport) {\n        referencedName = queuedExport.referencedName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.referencedName);\n    } while (true);\n  }\n\n  private filterDecorators(decorators: DecoratorNode[], acceptedFlags: DecoratorFlags): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Processes global options, if present. */\n  private checkGlobalOptions(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (declaration.range.source.is(CommonFlags.BUILTIN)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n        if (element.is(CommonFlags.BUILTIN)) element.internalName = globalName;\n      }\n    }\n  }\n\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.filterDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"class member expected\");\n        }\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.filterDecorators(decorators, DecoratorFlags.NONE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.filterDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n      // TBD: no need to mark as MODULE_EXPORT\n    }\n  }\n\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.filterDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.filterDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, element);\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobalOptions(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    identifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = identifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = identifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if from a library file\n    if (identifier.range.source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          identifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.referencedName = referencedName; // -> internal name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.referencedName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.referencedName = referencedName; // -> export name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.filterDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.internalName = internalName;\n      let prefix = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.referencedName = prefix;\n      queuedImport.referencedNameAlt = prefix + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null;\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(referencedName)) {\n      this.elementsLookup.set(internalName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.internalName = internalName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.referencedName = referencedName; // try exact first\n      queuedImport.referencedNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.referencedName = referencedName; // try exact first\n      queuedImport.referencedNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration;\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.filterDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobalOptions(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, namespace);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.filterDecorators(decorators,\n              DecoratorFlags.GLOBAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(internalName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(internalName, global);\n        }\n      }\n      this.checkGlobalOptions(global, declaration);\n    }\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(\n        returnTypeNode,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Type | null {\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\n      if (!signature) return null;\n      return node.isNullable\n        ? signature.type.asNullable()\n        : signature.type;\n    }\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\n\n    var element: Element | null;\n    if (\n      (element = this.elementsLookup.get(localName)) || // file-global\n      (element = this.elementsLookup.get(globalName))   // program-global\n    ) {\n      switch (element.kind) {\n        case ElementKind.ENUM: return Type.i32;\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\n            typeNode.typeArguments,\n            contextualTypeArguments,\n            null\n          ); // reports\n          if (!instance) return null;\n          return node.isNullable\n            ? instance.type.asNullable()\n            : instance.type;\n        }\n      }\n    }\n\n    // check (global) type alias\n    var alias = this.typeAliases.get(simpleName);\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\n\n    // resolve parameters\n    if (typeNode.typeArguments) {\n      let k = typeNode.typeArguments.length;\n      let paramTypes = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let paramType = this.resolveType( // reports\n          typeNode.typeArguments[i],\n          contextualTypeArguments,\n          reportNotFound\n        );\n        if (!paramType) return null;\n        paramTypes[i] = paramType;\n      }\n\n      if (k) { // can't be a placeholder if it has parameters\n        let instanceKey = typesToString(paramTypes);\n        if (instanceKey.length) {\n          localName += \"<\" + instanceKey + \">\";\n          globalName += \"<\" + instanceKey + \">\";\n        }\n      } else if (contextualTypeArguments) {\n        let placeholderType = contextualTypeArguments.get(globalName);\n        if (placeholderType) return placeholderType;\n      }\n    }\n\n    var type: Type | null;\n\n    // check file-global / program-global type\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\n      return type;\n    }\n\n    if (reportNotFound) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        true\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    contextualFunction: Function | null,\n    contextualEnum: Enum | null = null\n  ): Element | null {\n    var name = identifier.text;\n\n    var element: Element | null;\n    var namespace: Element | null;\n\n    // check siblings\n    if (contextualEnum) {\n\n      if (\n        contextualEnum.members &&\n        (element = contextualEnum.members.get(name)) &&\n        element.kind == ElementKind.ENUMVALUE\n      ) {\n        this.resolvedThisExpression = null;\n        this.resolvedElementExpression = null;\n        return element; // ENUMVALUE\n      }\n\n    } else if (contextualFunction) {\n\n      // check locals\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\n        this.resolvedThisExpression = null;\n        this.resolvedElementExpression = null;\n        return element; // LOCAL\n      }\n\n      // check outer scope locals\n      // let outerScope = contextualFunction.outerScope;\n      // while (outerScope) {\n      //   if (element = outerScope.getScopedLocal(name)) {\n      //     let scopedLocal = <Local>element;\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\n      //     return resolvedElement.set(scopedGlobal);\n      //   }\n      //   outerScope = outerScope.currentFunction.outerScope;\n      // }\n\n      // search contextual parent namespaces if applicable\n      if (namespace = contextualFunction.prototype.parent) {\n        do {\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return element; // LOCAL\n          }\n        } while (namespace = namespace.parent);\n      }\n    }\n\n    // search current file\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.resolvedThisExpression = null;\n      this.resolvedElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = this.elementsLookup.get(name)) {\n      this.resolvedThisExpression = null;\n      this.resolvedElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    this.error(\n      DiagnosticCode.Cannot_find_name_0,\n      identifier.range, name\n    );\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let classReference = (<VariableLikeElement>target).type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolvedElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.resolvedThisExpression = targetExpression;\n            this.resolvedElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.resolvedThisExpression = targetExpression;\n            this.resolvedElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            elementAccess.range, (<Class>target).internalName\n          );\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      targetExpression.range\n    );\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.resolvedThisExpression = null;\n          this.resolvedElementExpression = null;\n          return parent;\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.resolvedThisExpression = null;\n          this.resolvedElementExpression = null;\n          return parent;\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.resolvedThisExpression = expression;\n            this.resolvedElementExpression = null;\n            return this.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            targetExpression.range, target.internalName\n          );\n          return null;\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return null;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is a builtin. */\n  BUILTIN = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = Element.replaceComma(internalName);\n  }\n\n  static replaceComma(str: string):string{\n    if(!str) return str;\n    let result  = \"\";\n    for(let ch of str){\n      result +=  ch == \",\" ? \"_\" : ch;\n    }\n    return result;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(lo: i32, hi: i32): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = i64_new(lo, hi);\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    functionTypeArguments: Type[] | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = this.declaration;\n    var isInstance = this.is(CommonFlags.INSTANCE);\n    var classPrototype = this.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = this.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(this.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          functionTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (this.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = this.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      this,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    this.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\n    assert(this.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(this.classPrototype);\n\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\n\n    var simpleName = this.simpleName;\n    var partialKey = typesToString(classTypeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      this.declaration,\n      classPrototype,\n      this.decoratorFlags\n    );\n    partialPrototype.flags = this.flags;\n    partialPrototype.operatorKind = this.operatorKind;\n    partialPrototype.classTypeArguments = classTypeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments( // reports\n        assert(this.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\n  resolveBuiltinTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null\n  ): Type[] | null {\n    assert(this.is(CommonFlags.BUILTIN));\n    var resolvedTypeArguments: Type[] | null = null;\n    if (typeArgumentNodes) {\n      let k = typeArgumentNodes.length;\n      resolvedTypeArguments = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let resolvedType = this.program.resolveType( // reports\n          typeArgumentNodes[i],\n          contextualTypeArguments,\n          true\n        );\n        if (!resolvedType) return null;\n        resolvedTypeArguments[i] = resolvedType;\n      }\n    }\n    return resolvedTypeArguments;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // inherit contextual type arguments\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    var declaration = this.declaration;\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        this.program.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          declaration.extendsType.range\n        );\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        this.program.error(\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n          declaration.extendsType.range, baseClass.internalName\n        );\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        this.program.error(\n          DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n          Range.join(declaration.name.range, declaration.extendsType.range)\n        );\n        return null;\n      }\n    }\n\n    // override call specific contextual type arguments if provided\n    var i: i32, k: i32;\n    if (typeArguments) {\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      for (i = 0; i < k; ++i) {\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else if (declaration.typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n\n    var simpleName = this.simpleName;\n    var internalName = this.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    this.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      memoryOffset = baseClass.currentMemoryOffset;\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n    }\n\n    // Resolve constructor\n    if (this.constructorPrototype) {\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\n    }\n\n    // Resolve instance members\n    if (this.instanceMembers) {\n      for (let member of this.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            if (!fieldDeclaration.type) {\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\n            }\n            let fieldType = this.program.resolveType( // reports\n              fieldDeclaration.type,\n              instance.contextualTypeArguments\n            );\n            if (fieldType) {\n              let fieldInstance = new Field(\n                <FieldPrototype>member,\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n                fieldType,\n                fieldDeclaration,\n                instance\n              );\n              switch (fieldType.byteSize) { // align\n                case 1: break;\n                case 2: {\n                  if (memoryOffset & 1) ++memoryOffset;\n                  break;\n                }\n                case 4: {\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\n                  break;\n                }\n                case 8: {\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\n                  break;\n                }\n                default: assert(false);\n              }\n              fieldInstance.memoryOffset = memoryOffset;\n              memoryOffset += fieldType.byteSize;\n              instance.members.set(member.simpleName, fieldInstance);\n            }\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\n            if (partialPrototype) {\n              partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n              instance.members.set(member.simpleName, partialPrototype);\n            }\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype);\n            let setterPrototype = (<Property>member).setterPrototype;\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              this\n            );\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype.internalName = (\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\n            );\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype.internalName = (\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\n              );\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, prototype] of this.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = prototype.resolvePartial(typeArguments); // reports\n        if (!operatorPartial) continue;\n        operatorInstance = operatorPartial.resolve(); // reports\n      } else {\n        operatorInstance = prototype.resolve(); // reports\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\n    return instance;\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    alternativeReportNode: Node | null\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments(\n        this.declaration.typeParameters,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        alternativeReportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    } else {\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always throws. */\n  THROWS = 1 << 1,\n  /** This branch always breaks. */\n  BREAKS = 1 << 2,\n  /** This branch always continues. */\n  CONTINUES = 1 << 3,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 4,\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 5,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 6,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 7,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 8,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 9,\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 10,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 11,\n  /** This branch returns a properly wrapped value. */\n  RETURNS_WRAPPED = 1 << 12,\n\n  /** This branch is terminated if any of these flags is set. */\n  TERMINATED = FlowFlags.RETURNS | FlowFlags.THROWS | FlowFlags.BREAKS | FlowFlags.CONTINUES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Enters a new branch or scope and returns the new flow. */\n  enterBranchOrScope(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Leaves the current branch or scope and returns the parent flow. */\n  leaveBranchOrScope(propagate: bool = true): Flow {\n    var parent = assert(this.parent);\n\n    // Free block-scoped locals\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n\n    // Propagate conditionaal flags to parent\n    if (propagate) {\n      if (this.is(FlowFlags.RETURNS)) {\n        parent.set(FlowFlags.CONDITIONALLY_RETURNS);\n      }\n      if (this.is(FlowFlags.THROWS)) {\n        parent.set(FlowFlags.CONDITIONALLY_THROWS);\n      }\n      if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\n        parent.set(FlowFlags.CONDITIONALLY_BREAKS);\n      }\n      if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\n        parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\n      }\n      if (this.is(FlowFlags.ALLOCATES)) {\n        parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n      }\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. on inner block). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (\n      FlowFlags.RETURNS |\n      FlowFlags.RETURNS_WRAPPED |\n      FlowFlags.THROWS |\n      FlowFlags.BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.ALLOCATES\n    );\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. on then/else branches). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // flags set in both arms\n    this.flags |= left.flags & right.flags & (\n      FlowFlags.RETURNS |\n      FlowFlags.RETURNS_WRAPPED |\n      FlowFlags.THROWS |\n      FlowFlags.BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.ALLOCATES\n    );\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(\n      left.wrappedLocals,\n      right.wrappedLocals\n    );\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./program\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE\n}\n\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a:{\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.d:{\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    this.internalPath = mangleInternalPath(this.normalizedPath);\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Tests if a specific decorator is present within the specified decorators. */\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let expression = decorators[i].name;\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[94m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32 = _BinaryenTypeInt32(),\n  I64 = _BinaryenTypeInt64(),\n  F32 = _BinaryenTypeFloat32(),\n  F64 =  _BinaryenTypeFloat64(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = allocate_memory(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      free_memory(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      free_memory(cArr3);\n      free_memory(cArr2);\n      free_memory(cArr1);\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\n      free_memory(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocPtrArray(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      free_memory(cArr);\n      for (let i = numNames; i >= 0; --i) {\n        free_memory(names[i]);\n      }\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0;\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeFunction(func: FunctionRef): void {\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) free_memory(cStr);\n      if (binaryPtr) free_memory(binaryPtr);\n      if (sourceMapPtr) free_memory(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    free_memory(this.cachedByValue);\n    free_memory(this.cachedTemporaryName);\n    free_memory(this.cachedPrecomputeName);\n    free_memory(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = allocate_memory(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = allocate_memory(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          ) {\n            ++this.pos;\n          }\n          break;\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        while (--this.tokenPos > posBefore) {\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the int type of this type. Defaults to `Type.i32` if this is not an int type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: return this;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate as compileBuiltinAllocate,\n  compileAbort as compileBuiltinAbort\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getFunctionBody,\n  getGetLocalIndex\n} from \"./module\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  CommonFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags,\n\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./program\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, does not set up a memory. */\n  noMemory: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Outer function in compilation, if compiling a function expression. */\n  outerFunction: Function | null = null;\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunction: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[] = [];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: Function[] = [];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function wrapping top-level statements, of all files.\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n    var startFunctionInstance = new Function(\n      <FunctionPrototype>startFunctionPrototype,\n      startFunctionPrototype.internalName,\n      new Signature([], Type.void)\n    );\n    this.startFunction = startFunctionInstance;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty\n    var startFunctionBody = this.startFunctionBody;\n    if (startFunctionBody.length) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      module.setStart(funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    if (!options.noMemory) {\n      let memoryOffset = this.memoryOffset;\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n      this.memoryOffset = memoryOffset;\n      if (options.isWasm64) {\n        module.addGlobal(\n          \"HEAP_BASE\",\n          NativeType.I64,\n          false,\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          \"HEAP_BASE\",\n          NativeType.I32,\n          false,\n          module.createI32(i64_low(memoryOffset))\n        );\n      }\n\n      // determine initial page size\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\n      module.setMemory(\n        i64_low(pages),\n        this.options.isWasm64\n          ? Module.MAX_MEMORY_WASM64\n          : Module.MAX_MEMORY_WASM32,\n        this.memorySegments,\n        options.target,\n        \"memory\"\n      );\n    }\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    var functionTableExported = false;\n    if (functionTableSize) {\n      let entries = new Array<FunctionRef>(functionTableSize);\n      for (let i = 0; i < functionTableSize; ++i) {\n        entries[i] = functionTable[i].ref;\n      }\n      module.setFunctionTable(entries);\n      module.addTableExport(\"0\", \"table\");\n      functionTableExported = true;\n    }\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\n    }\n\n    return module;\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunction = this.startFunction;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunction;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.program.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            Type.void,\n            ConversionKind.NONE,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        module.addGlobalImport(\n          global.internalName,\n          global.parent\n            ? global.parent.simpleName\n            : \"env\",\n          global.simpleName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // inlined constant can be compiled as-is\n    if (global.is(CommonFlags.INLINED)) {\n      initExpr = this.compileInlineConstant(global, global.type, true);\n\n    } else {\n\n      // evaluate initializer if present\n      if (declaration && declaration.initializer) {\n        if (!initExpr) {\n          initExpr = this.compileExpression(\n            declaration.initializer,\n            global.type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          );\n        }\n\n        // check if the initializer is constant\n        if (getExpressionId(initExpr) != ExpressionId.Const) {\n\n          // if a constant global, check if the initializer becomes constant after precompute\n          if (isConstant) {\n            initExpr = this.precomputeExpressionRef(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                declaration.range\n              );\n              initializeInStart = true;\n            }\n          } else {\n            initializeInStart = true;\n          }\n        }\n\n      // initialize to zero if there's no initializer\n      } else {\n        initExpr = global.type.toNativeZero(module);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile as-is\n\n      if (isConstant) {\n        let exprType = getExpressionType(initExpr);\n        switch (exprType) {\n          case NativeType.I32: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n            break;\n          }\n          case NativeType.I64: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(\n              getConstValueI64Low(initExpr),\n              getConstValueI64High(initExpr)\n            );\n            break;\n          }\n          case NativeType.F32: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = getConstValueF32(initExpr);\n            break;\n          }\n          case NativeType.F64: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = getConstValueF64(initExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            return false;\n          }\n        }\n        global.set(CommonFlags.INLINED); // inline the value from now on\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\n          module.addGlobal(internalName, nativeType, false, initExpr);\n          module.addGlobalExport(internalName, mangleExportName(global));\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\n          module.addGlobal(internalName, nativeType, false, initExpr);\n        }\n\n      } else /* mutable */ {\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\n      }\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        if (val.is(CommonFlags.INLINED)) {\n          if (element.declaration.isTopLevelExport) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              false, // constant\n              module.createI32(val.constantValue)\n            );\n          }\n        } else {\n          let initExpr: ExpressionRef;\n          if (valueDeclaration.value) {\n            initExpr = this.compileExpression(\n              <Expression>valueDeclaration.value,\n              Type.i32,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            );\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              initExpr = this.precomputeExpressionRef(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                if (element.is(CommonFlags.CONST)) {\n                  this.warning(\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                    valueDeclaration.range\n                  );\n                }\n                initInStart = true;\n              }\n            }\n          } else if (previousValue == null) {\n            initExpr = module.createI32(0);\n          } else if (previousValue.is(CommonFlags.INLINED)) {\n            initExpr = module.createI32(previousValue.constantValue + 1);\n          } else {\n            // in TypeScript this errors with TS1061, but actually we can do:\n            initExpr = module.createBinary(BinaryOp.AddI32,\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\n              module.createI32(1)\n            );\n            if (element.is(CommonFlags.CONST)) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n          if (initInStart) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              true, // mutable\n              module.createI32(0)\n            );\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            if (getExpressionType(initExpr) == NativeType.I32) {\n              val.constantValue = getConstValueI32(initExpr);\n              val.set(CommonFlags.INLINED);\n            } else {\n              assert(false);\n              val.constantValue = 0;\n            }\n          }\n        }\n        previousValue = <EnumValue>val;\n\n        // export values if the enum is exported\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\n          if (member.is(CommonFlags.INLINED) || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n            module.addGlobalExport(member.internalName, mangleExportName(member));\n          } else if (valueDeclaration) {\n            this.warning(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              valueDeclaration.range\n            );\n          }\n        }\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  private ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        stmt = this.compileStatement(body);\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmt = module.createBlock(null, [\n                stmt,\n                module.createGetLocal(0, nativeSizeType)\n              ], nativeSizeType);\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmt = module.createBlock(null, [\n                stmt,\n                module.createTeeLocal(0,\n                  this.makeConditionalAllocate(<Class>parent, declaration.name)\n                )\n              ], nativeSizeType);\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n\n      // create the function import\n      let parent = instance.prototype.parent;\n      ref = module.addFunctionImport(\n        instance.internalName,\n        parent\n          ? parent.simpleName\n          : \"env\",\n        instance.simpleName,\n        typeRef\n      );\n    }\n\n    // check module-level export\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\n      if (signature.requiredParameters < signature.parameterTypes.length) {\n        // export the trampoline if the function takes optional parameters\n        instance = this.ensureTrampoline(instance);\n        this.ensureArgcSet();\n      }\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var module = this.module;\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let internalExportName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        member.externalName.text\n      );\n      let element = fileLevelExports.get(internalExportName);\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            let functionInstance = this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n            if (functionInstance) {\n              let functionDeclaration = functionInstance.prototype.declaration;\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\n            let globalDeclaration = (<Global>element).declaration;\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\n              if ((<Global>element).is(CommonFlags.INLINED)) {\n                module.addGlobalExport(element.internalName, member.externalName.text);\n              } else {\n                this.warning(\n                  DiagnosticCode.Cannot_export_a_mutable_global,\n                  member.range\n                );\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\n            let module = this.module;\n            let name = (<Field>element).simpleName;\n            let type = (<Field>element).type;\n            let nativeType = type.toNativeType();\n            let offset = (<Field>element).memoryOffset;\n            let usizeType = this.options.usizeType;\n            let nativeSizeType = this.options.nativeSizeType;\n\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\n            module.addFunction(\n              getterName,\n              this.ensureFunctionType(null, type, usizeType),\n              null,\n              module.createLoad(\n                type.byteSize,\n                type.is(TypeFlags.SIGNED),\n                module.createGetLocal(0, nativeSizeType),\n                nativeType,\n                offset\n              )\n            );\n            module.addFunctionExport(getterName, getterName);\n\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\n            if (element.is(CommonFlags.READONLY)) break;\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\n            module.addFunction(\n              setterName,\n              this.ensureFunctionType([ type ], Type.void, usizeType),\n              null,\n              module.createStore(\n                type.byteSize,\n                module.createGetLocal(0, nativeSizeType),\n                module.createGetLocal(1, nativeType),\n                nativeType,\n                offset\n              )\n            );\n            module.addFunctionExport(setterName, setterName);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunction) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    var count = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      if (getExpressionId(stmt) != ExpressionId.Nop) {\n        stmts[count++] = stmt;\n        if (flow.isAny(FlowFlags.TERMINATED)) break;\n      }\n    }\n    stmts.length = count;\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n\n    // Not actually a branch, but can contain its own scoped variables.\n    var blockFlow = this.currentFunction.flow.enterBranchOrScope();\n    this.currentFunction.flow = blockFlow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts, NativeType.None);\n\n    // Switch back to the parent flow\n    var parentFlow = blockFlow.leaveBranchOrScope();\n    this.currentFunction.flow = parentFlow;\n    parentFlow.inherit(blockFlow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it?\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.leaveBranchOrScope();\n    currentFunction.leaveBreakContext();\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        flow.isAny(FlowFlags.BREAKS | FlowFlags.CONTINUES | FlowFlags.RETURNS)\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ], NativeType.None);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = true;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = this.precomputeExpressionRef(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyExpr = this.compileStatement(statement.statement);\n\n    // Switch back to the parent flow\n    var parentFlow = flow.leaveBranchOrScope();\n    if (alwaysTrue) parentFlow.inherit(flow);\n    currentFunction.flow = parentFlow;\n    currentFunction.leaveBreakContext();\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (parentFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel,\n        module.createBlock(null, repeatBlock, NativeType.None)\n      )\n    );\n\n    var expr = module.createBlock(breakLabel, breakBlock, NativeType.None);\n\n    // If the loop is guaranteed to run and return, append a hint for Binaryen\n    if (flow.isAny(FlowFlags.RETURNS | FlowFlags.THROWS)) {\n      expr = module.createBlock(null, [\n        expr,\n        module.createUnreachable()\n      ]);\n    }\n    return expr;\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var ifTrueFlow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.leaveBranchOrScope();\n\n    var ifFalseFlow: Flow | null;\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      ifFalseFlow = currentFunction.flow.enterBranchOrScope();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      let parentFlow = ifFalseFlow.leaveBranchOrScope();\n      currentFunction.flow = parentFlow;\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = currentFunction.flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.TERMINATED)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      currentFunction.flow = flow.leaveBranchOrScope(false);\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      let flow = currentFunction.flow;\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileBuiltinAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunction &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = program.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpression( // reports\n          declaration.initializer,\n          Type.void,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.precomputeExpressionRef(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(getConstValueI32(initExpr), 0);\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  getConstValueI64Low(initExpr),\n                  getConstValueI64High(initExpr)\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\n    // TODO: evaluate if condition is always true\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.leaveBranchOrScope();\n    currentFunction.leaveBreakContext();\n\n    var expr = module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          flow.isAny(FlowFlags.CONTINUES | FlowFlags.BREAKS | FlowFlags.RETURNS)\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ], NativeType.None);\n\n    // If the loop is guaranteed to run and return, propagate that and append a hint\n    if (alwaysReturns) {\n      expr = module.createBlock(null, [\n        expr,\n        module.createUnreachable()\n      ]);\n    }\n    return expr;\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        if (!(element.is(CommonFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.precomputeExpressionRef(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\n    var module = this.module;\n    var type = this.currentType;\n    var nativeType = type.toNativeType();\n    var funcRef = module.addTemporaryFunction(nativeType, null, expr);\n    module.runPasses([ \"precompute\" ], funcRef);\n    var ret = getFunctionBody(funcRef);\n    module.removeTemporaryFunction();\n    return ret;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.program.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var target = program.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prototype = (<Property>target).setterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(); // reports\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (program.resolvedElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.program.resolvedThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = setterPrototype.resolve(); // reports\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.program.resolvedThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.program.resolvedElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.program.resolvedThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = prototype.resolveUsingTypeArguments( // reports\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.program.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments,\n                true\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = prototype.resolve(\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = prototype.resolve(\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.program.resolvedThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.program.resolvedThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n      case ElementKind.PROPERTY: // TODO\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var expr = compileBuiltinCall( // reports\n      this,\n      prototype,\n      prototype.resolveBuiltinTypeArguments(\n        expression.typeArguments,\n        this.currentFunction.flow.contextualTypeArguments\n      ),\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      return this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.TERMINATED)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.TERMINATED)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"oob\", [\n        module.createSwitch(names, \"oob\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer && initializer.kind == NodeKind.LITERAL)) {\n          // TODO: other kinds might be constant as well\n          // NOTE: if the initializer is missing this is reported in ensureTrampoline below\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\n    return ret;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.program.resolveIdentifier( // reports\n      expression,\n      currentFunction,\n      this.currentEnum\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localType = (<Local>target).type;\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = (<FunctionPrototype>target).resolve(\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.program.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\n      }\n      // case LiteralKind.OBJECT:\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  compileStaticString(stringValue: string): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var stringSegments = this.stringSegments;\n\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\n    if (!stringSegment) {\n      let stringLength = stringValue.length;\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\n      stringBuffer[0] =  stringLength         & 0xff;\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\n      for (let i = 0; i < stringLength; ++i) {\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\n      }\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\n      stringSegments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    var stringType = this.program.typesLookup.get(\"string\");\n    this.currentType = stringType ? stringType : options.usizeType;\n    if (options.isWasm64) {\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    }\n    assert(i64_is_i32(stringOffset));\n    return module.createI32(i64_low(stringOffset));\n  }\n\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\n    var isStatic = true;\n    var module = this.module;\n\n    // obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    var elementCount = expressions.length;\n    if (elementCount) { // non-empty static or dynamic\n      let nativeElementType = elementType.toNativeType();\n      let values: usize;\n      let byteLength: usize;\n      switch (nativeElementType) {\n        case NativeType.I32: {\n          values = changetype<usize>(new Int32Array(elementCount));\n          byteLength = elementCount * 4;\n          break;\n        }\n        case NativeType.I64: {\n          values = changetype<usize>(new Array<I64>(elementCount));\n          byteLength = elementCount * 8;\n          break;\n        }\n        case NativeType.F32: {\n          values = changetype<usize>(new Float32Array(elementCount));\n          byteLength = elementCount * 4;\n          break;\n        }\n        case NativeType.F64: {\n          values = changetype<usize>(new Float64Array(elementCount));\n          byteLength = elementCount * 8;\n          break;\n        }\n        default: {\n          assert(false);\n          return module.createUnreachable();\n        }\n      }\n\n      // precompute value expressions\n      let exprs = new Array<ExpressionRef>(elementCount);\n      let expr: BinaryenExpressionRef;\n      for (let i = 0; i < elementCount; ++i) {\n        exprs[i] = expressions[i]\n          ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n          : elementType.toNativeZero(module);\n        if (isStatic) {\n          expr = this.precomputeExpressionRef(exprs[i]);\n          if (getExpressionId(expr) == ExpressionId.Const) {\n            assert(getExpressionType(expr) == nativeElementType);\n            switch (nativeElementType) {\n              case NativeType.I32: {\n                changetype<i32[]>(values)[i] = getConstValueI32(expr);\n                break;\n              }\n              case NativeType.I64: {\n                changetype<I64[]>(values)[i] = i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                );\n                break;\n              }\n              case NativeType.F32: {\n                changetype<f32[]>(values)[i] = getConstValueF32(expr);\n                break;\n              }\n              case NativeType.F64: {\n                changetype<f64[]>(values)[i] = getConstValueF64(expr);\n                break;\n              }\n              default: assert(false); // checked above\n            }\n          } else {\n            // TODO: emit a warning if declared 'const'\n            // if (isConst) {\n            //   this.warn(\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n            //     reportNode.range\n            //   );\n            // }\n            isStatic = false;\n          }\n        }\n      }\n\n      let usizeTypeSize = this.options.usizeType.byteSize;\n      if (isStatic) { // non-empty, all elements can be precomputed\n\n        // Create a combined static memory segment composed of:\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\n\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\n        let data = new Uint8Array(arraySize + bufferTotalSize);\n        let segment = this.addMemorySegment(data);\n        let offset = 0;\n\n        // write Array struct\n        if (usizeTypeSize == 8) {\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\n          offset += 8;\n        } else {\n          assert(i64_high(segment.offset) == 0);\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\n          offset += 4;\n        }\n        writeI32(elementCount, data, offset); // length_\n        offset += 4;\n        assert(offset == arraySize);\n\n        // write ArrayBuffer struct\n        writeI32(byteLength, data, offset);\n        offset += bufferHeaderSize; // incl. alignment\n\n        // write ArrayBuffer data\n        switch (nativeElementType) {\n          case NativeType.I32: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        assert(offset <= arraySize + bufferTotalSize);\n\n        this.currentType = arrayType;\n        return usizeTypeSize == 8\n          ? module.createI64(\n              i64_low(segment.offset),\n              i64_high(segment.offset)\n            )\n          : module.createI32(\n              i64_low(segment.offset)\n            );\n\n      } else { // non-empty, some elements can't be precomputed\n\n        this.currentType = arrayType;\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n        if (!setter) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            reportNode.range, arrayInstance.internalName\n          );\n          return module.createUnreachable();\n        }\n        let nativeArrayType = arrayType.toNativeType();\n        let currentFunction = this.currentFunction;\n        let tempLocal = currentFunction.getTempLocal(arrayType, false);\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\n        let index = 0;\n        stmts[index++] = module.createSetLocal(tempLocal.index,\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n            module.createI32(0), // this\n            module.createI32(elementCount)\n          ])\n        );\n        for (let i = 0; i < elementCount; ++i) {\n          stmts[index++] = this.makeCallDirect(setter, [\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\n            module.createI32(i),\n            exprs[i]\n          ]);\n        }\n        assert(index + 1 == stmts.length);\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n        currentFunction.freeTempLocal(tempLocal);\n        this.currentType = arrayType;\n        return module.createBlock(null, stmts, nativeArrayType);\n      }\n\n    } else { // empty, TBD: cache this somehow?\n      this.currentType = arrayType;\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(0)\n      ]);\n    }\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.program.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\n      expression.typeArguments,\n      currentFunction.flow.contextualTypeArguments,\n      expression\n    );\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the first matching constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance = classInstance.constructorInstance;\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\n      constructorInstance = currentClassInstance.constructorInstance;\n    }\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(program.resolvedThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>target).getterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(null); // reports\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.parent);\n            assert(parent.kind == ElementKind.CLASS);\n            let thisExpression = assert(program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenExpr: ExpressionRef;\n    var ifElseExpr: ExpressionRef;\n    var ifThenType: Type;\n    var ifElseType: Type;\n\n    // if part of a constructor, keep track of memory allocations\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n      let flow = currentFunction.flow;\n\n      flow = flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n      ifThenType = this.currentType;\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\n      flow = flow.leaveBranchOrScope();\n      currentFunction.flow = flow;\n\n      flow = flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n      ifElseType = this.currentType;\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\n      flow = flow.leaveBranchOrScope();\n      currentFunction.flow = flow;\n\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\n\n    // otherwise simplify\n    } else {\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n      ifThenType = this.currentType;\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n      ifElseType = this.currentType;\n    }\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          contextualType == Type.void\n            ? ConversionKind.NONE\n            : ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileBuiltinAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleExportName(element: Element, simpleName: string = element.simpleName): string {\n  switch (element.kind) {\n    case ElementKind.FUNCTION: {\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\n      return parent\n        ? mangleExportName(parent)\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n        + simpleName\n        : simpleName;\n    }\n    case ElementKind.FIELD: {\n      let parent = assert((<Field>element).parent);\n      return mangleExportName(parent)\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n          + simpleName;\n    }\n    case ElementKind.ENUMVALUE: {\n      let parent = assert((<EnumValue>element).parent);\n      return mangleExportName(parent)\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n          + simpleName;\n    }\n    case ElementKind.CLASS: {\n      let parent = (<Class>element).prototype.parent;\n      return parent\n        ? mangleExportName(parent)\n        + STATIC_DELIMITER\n        + simpleName\n        : simpleName;\n    }\n    default: {\n      let parent = element.parent;\n      return parent\n        ? mangleExportName(parent)\n        + STATIC_DELIMITER\n        + simpleName\n        : simpleName;\n    }\n  }\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  Program,\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionExpression,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // mark the special builtins library file\n    if (source.normalizedPath == builtinsFile) {\n      source.set(CommonFlags.BUILTIN);\n    }\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // mark builtins\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    // return backlog.length ? backlog.shift() : null;\n    let fileName = backlog.length ? backlog.shift() : null;\n\n    return fileName;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\n\n    if (tn.skip(Token.PUBLIC)) {\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      if (tn.skip(Token.ABSTRACT)) {\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      } else {\n        flags |= CommonFlags.INSTANCE;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (tn.skip(Token.GET)) {\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.GET;\n        isGetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.SET)) {\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.SET | CommonFlags.SET;\n        isSetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\n      flags |= CommonFlags.CONSTRUCTOR;\n      isConstructor = true;\n      if (flags & CommonFlags.STATIC) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(staticStart, staticEnd), \"static\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.READONLY) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\n        ); // recoverable\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = ret.internalPath;\n          if (internalPath !== null && !this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n\n    if (token == Token.NULL) {\n      return Node.createNullExpression(tn.range());\n    }\n    if (token == Token.TRUE) {\n      return Node.createTrueExpression(tn.range());\n    }\n    if (token == Token.FALSE) {\n      return Node.createFalseExpression(tn.range());\n    }\n\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.INVALID) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    switch (token) {\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Expression_expected,\n          tn.range()\n        );\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = 0\n  ): Expression | null {\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression with type arguments\n    var typeArguments: CommonTypeNode[] | null;\n    while (\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\n      tn.skip(Token.OPENPAREN)\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) return null;\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA ? Precedence.COMMA + 1 : 0);\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  // skipBlock(tn: Tokenizer): void {\n  //   var depth = 0;\n  //   var token: Token;\n  //   do {\n  //     token = tn.next();\n  //     if (token == Token.OPENBRACE) {\n  //       ++depth;\n  //     } else if (token == Token.CLOSEBRACE) {\n  //       if (depth) --depth;\n  //       if (!depth) break; // done\n  //     }\n  //   } while (token != Token.ENDOFFILE);\n  // }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING,\n  INVALID = -1\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  Program,\n  Element,\n  CommonFlags,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"current_memory()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"grow_memory(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program,\n  LIBRARY_PREFIX\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `noMemory` option. */\nexport function setNoMemory(options: Options, noMemory: bool): void {\n  options.noMemory = noMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX };\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","import {\n  Type,\n  TypeKind,\n  Signature\n} from \"./types\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement,\n  Class\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  DecoratorNode,\n  SignatureNode,\n  ClassDeclaration,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  TypeNode,\n  NodeKind,\n  Source,\n  ParameterNode,\n  Expression,\n  Node,\n  VariableLikeDeclarationStatement,\n  LiteralKind,\n  StringLiteralExpression,\n  CommonTypeNode\n} from \"./ast\";\n\n\nenum AbiParameterKind{\n  BOOL, // boolean and bool\n  NUMBER, // original type except boolean and bool\n  STRING, // string kind\n  ARRAY, // array kind\n  CLASS // class kind\n}\n\nclass Struct {\n\n  name: string;\n  base: string;\n  fields: Array<Object> = new Array<Object>();\n}\n\nclass AbiTypeAlias{\n  new_type_name: string;\n  type:string\n\n  constructor(newTypeName:string, wasmType:string){\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\nclass Action {\n\n  name: string;\n  type: string;\n  ricardian_contract:string = \"\";\n\n  constructor(name: string, type: string) {\n    this.name = name;\n    this.type = type;\n  }\n}\n\n\nclass SourceNode{\n  sourceName: string;\n  importNames: Array<string>;\n\n  constructor(sourceNode:string){\n    this.sourceName = sourceNode;\n    this.importNames = new Array();\n  }\n}\n\nclass Table{\n  name:string;\n  type:string;\n  index_type:string = \"int64\";\n  keys_names:string[] = [\"currency\"];\n  keys_types:string[] = [\"uint64\"];\n\n  constructor(name: string, type: string){\n    this.name = name;\n    this.type = type;\n  }\n}\n\n\nexport class Abi {\n\n  abiInfo: {\n    version:string,\n    types: Array<AbiTypeAlias>, \n    structs: Array<Struct>, \n    actions: Array<Action>,\n    tables: Array<Table> \n  };\n\n  dispatch: string;\n\n  program: Program;\n\n  abiTypeLookup: Map<string, string> = new Map();\n\n  typeAliasSet: Set<string> = new Set<string>();\n\n  structsLookup: Map<string, Struct> = new Map();\n\n  elementLookup: Map<string, Element> = new Map();\n\n  constructor(program: Program) {\n\n    this.program = program;\n\n    this.abiInfo = {\n    version: \"ultraio:1.0\",\n    types: new Array<AbiTypeAlias>(),\n    structs: new Array<Struct>(),\n    actions: new Array<Action>(),\n    tables: new Array<Table>()};\n\n    this.abiTypeLookup = new Map([\n      [\"i8\", \"int8\"],\n      [\"i16\", \"int16\"],\n      [\"i32\", \"int32\"],\n      [\"i64\", \"int64\"],\n      [\"isize\", \"\"],\n      [\"u8\", \"uint8\"],\n      [\"u16\", \"uint16\"],\n      [\"u32\", \"uint32\"],\n      [\"u64\", \"uint64\"],\n      [\"usize\", \"usize\"],\n      [\"bool\", \"uint8\"], // eos not support the bool\n      [\"f32\", \"f32\"],\n      [\"f64\", \"f64\"],\n      [\"boolean\", \"uint8\"], // eos not suppot the bool\n      [\"account_name\", \"name\"],\n      [\"permission_name\", \"name\"],\n      [\"action_name\", \"name\"],\n      [\"weight_type\", \"uint16\"],\n      [\"Asset\", \"asset\"]\n    ]);\n  }\n\n  /**\n  *  Add abi struct for abi info.\n  */\n  toAbiStruct(methodName: string, signature: SignatureNode): Struct {\n\n    let struct = new Struct();\n    struct.name = methodName;\n    struct.base = \"\";\n\n    let types = signature.parameters;\n    if (types) {\n      for (let type of types) {\n        let typeKind = type.type.range.toString();\n        this.addAbiTypeAlias(typeKind);\n        struct.fields.push({ name: type.name.range.toString(), type: type.type.range.toString() });\n      }\n    }\n    return struct;\n  }\n\n\n  addAbiTypeAlias(typeKindName: string): void{\n\n    if(!this.typeAliasSet.has(typeKindName)){\n      // It's the assemblyscript internal type \n      let originalTypeName = this.findContractOriginalType(typeKindName);\n      let wasmType = this.abiTypeLookup.get(originalTypeName);\n      if(wasmType){\n        this.abiInfo.types.push( new AbiTypeAlias(typeKindName, wasmType));\n      } \n      this.typeAliasSet.add(typeKindName);\n    }\n  }\n\n  /**\n  * Find the original type name, \n  * eg: declare type account_name = u64;\n        declare type account_name_alias = account_name;\n\n    findContractOriginalType(\"account_name_alias\") return \"account_name\";\n  */\n  findContractOriginalType(typeKindName:string): string {\n\n    let abiType:string|null = this.abiTypeLookup.get(typeKindName);\n    if(abiType){\n      return typeKindName;\n    }\n    let typeAlias = this.program.typeAliases.get(typeKindName);\n    if(typeAlias){\n      let commonaTypeName = typeAlias.type.range.toString()\n      return this.findContractOriginalType(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find the script original type name\n  */\n  findScriptOriginalTypeName(typeKindName: string): string {\n    let typeAlias = this.program.typeAliases.get(typeKindName);\n    if(typeAlias){\n      let commonaTypeName = typeAlias.type.range.toString()\n      return this.findScriptOriginalTypeName(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find assemblyscript original type name \n  * eg: account_name return 'u64'\n  */\n  findScriptOriginalType(typeKindName: string): Type | null{\n    let originalName = this.findScriptOriginalTypeName(typeKindName);\n    //Get the AssemblyScript original type \n    let scriptType:Type|null =  this.program.typesLookup.get(originalName);\n    return scriptType;\n  }\n\n\n  // Check the FunctionPrototype weather has decoratorKind\n  checkFuncPrototypeDecorator(funcPrototype: FunctionPrototype, decoratorKind: DecoratorKind): bool {\n    let decorators = funcPrototype.declaration.decorators;\n    let isActionDecorator =false;\n    if (decorators ) {\n      for (let decorator of decorators) {\n        if (decorator.decoratorKind == decoratorKind){\n          isActionDecorator = true;\n        }\n      }\n    }\n    return isActionDecorator;\n  }\n\n  isWrapWithQutation(str: string):bool{\n\n    if(str == undefined || str == null){\n      return false;\n    } \n\n    return  str.charAt(0) == \"\\\"\" && str.charAt(str.length-1) == \"\\\"\"\n         ? true : false;\n  }\n\n\n  /**\n  *  Check that element whether is functionPrototype  \n  *\n  */\n  isActionFuncPrototype(element: Element): bool {\n\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE){\n      let funcType = <FunctionPrototype>element;\n      return this.checkFuncPrototypeDecorator(funcType, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  /**\n  * Resolve the class database decoreator \n  */\n  resolveClassDecorator(decorators: DecoratorNode[]):void {\n    for(let decorator of decorators){\n      if(decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments){\n        // Decorator argument must have two arguments \n        if( decorator.arguments.length < 2){\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n\n        let type = decorator.arguments[0].range.toString();\n        let name = this.retrieveArgumentText(decorator.arguments[1]);\n\n        this.abiInfo.tables.push( new Table(name, type) );\n\n        this.resolveExpressionToStruct(decorator.arguments[0]);\n      }\n    }\n  }\n\n\n  retrieveArgumentText(expr: Expression ): string{\n     let argu:string = expr.range.toString();\n     \n     if(this.isWrapWithQutation(argu)){\n       return argu.substring(1, argu.length-2);\n     }\n\n     let internelName = this.getInternalName(expr);\n     let element:Element|null = this.program.elementsLookup.get(internelName);\n\n     if(element){\n       let declaration:VariableLikeDeclarationStatement|null = (<VariableLikeElement> element).declaration;\n       if(declaration && declaration.initializer){\n         let literal:StringLiteralExpression = <StringLiteralExpression> declaration.initializer;\n         return literal.value;\n       }\n     }\n     throw new Error(`Cann't find constant ${internelName}`);\n  }  \n\n\n  getInternalName(node: Node): string{\n\n    let internalPath = node.range.source.internalPath;\n    let name = node.range.toString();\n    let internalName = `${internalPath}/${name}`;\n    return internalName;\n  }\n\n\n\n  /**\n  *  Get struct from expression. \n  *\n  */\n  resolveExpressionToStruct(expr: Expression): void{\n\n    let internalPath = expr.range.source.internalPath;\n    let name = expr.range.toString();\n    let internalName = `${internalPath}/${name}`;\n    this.retrieveStructByInternalName(internalName);\n  }\n\n  retrieveStructByInternalName(internalName: string):void{\n\n    let element = this.program.elementsLookup.get(internalName);\n    if(!element || element.kind != ElementKind.CLASS_PROTOTYPE){\n      throw new Error(`Element ${internalName} not found, pleasure make sure that class ${internalName} was existed.`);\n    }\n\n\n    let classPrototype = <ClassPrototype> element;\n    this.resolveClassPrototypeToStruct(classPrototype);\n  }\n\n\n  resolveClassPrototypeToStruct(classPrototype: ClassPrototype):void{\n\n    let members: DeclarationStatement[] = classPrototype.declaration.members;\n\n    let struct = new Struct();\n    struct.name = classPrototype.simpleName;\n\n    if(this.abiTypeLookup.get(struct.name)){\n      return ;\n    }\n\n    struct.base = \"\";\n    for(let member of members){\n      if(member.kind == NodeKind.FIELDDECLARATION){\n        let filedDeclare :FieldDeclaration = <FieldDeclaration>member;\n        let filedName = member.name.range.toString();\n        let filedType = filedDeclare.type;\n\n        if(filedType){\n          struct.fields.push({name:filedName, type: filedType.range.toString()} );\n        }\n      }\n    }\n\n    this.addStruct(struct);\n  }\n\n\n\n  addStruct(struct: Struct): void {\n\n    if(!this.structsLookup.has(struct.name)){\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n\n  isArray(typeName:string): bool {\n    return typeName.indexOf(\"[\") != -1;\n  }\n\n  getBaseTypeName(typeName: string): string{\n\n    let bracketIndex = typeName.indexOf(\"[\");\n    if(bracketIndex != -1){\n      let index = typeName.indexOf(\" \") == -1 ?  bracketIndex : typeName.indexOf(\" \");\n      let baseTypeName =  typeName.substring(0, index);\n      return baseTypeName;\n    }\n    return typeName;\n  }\n\n  static nameMap = \".12345abcdefghijklmnopqrstuvwxyz\";\n\n\n  checkName(str: string):void{\n\n    if(str.length > 13){\n      throw new Error(`Action Name:${str} should be less than 13 characters.`);\n    }  \n\n    for(let ch of str){\n      if(Abi.nameMap.indexOf(ch) == -1){\n        throw new Error(`Action Name:${str} should only contains the following symbol .12345abcdefghijklmnopqrstuvwxyz`);\n      }\n    }\n  }\n\n\n  /** \n  * string TypeKind is 9, and usize TypeKind is also 9.\n  */\n  resolveAbiParameterType(type:CommonTypeNode): {typeKind:AbiParameterKind, typeName:string, isArray: bool}{  \n\n    let parameterType = type.range.toString();\n    let typeAlias = this.program.typeAliases.get(parameterType);\n    if(typeAlias){\n      parameterType = typeAlias.type.range.toString();\n    } \n\n    let isArray:bool = this.isArray(parameterType);\n    let baseTypeName: string = this.getBaseTypeName(parameterType);\n\n    // console.log(\"isArray:\" + isArray );\n    // console.log(\"baseTypeName:\" + baseTypeName + \". type kind:\" + type.kind);\n\n    if (baseTypeName == \"string\"){\n      return {typeKind: AbiParameterKind.STRING, typeName: baseTypeName, isArray};\n    }\n\n    let originalName:string = this.findContractOriginalType(baseTypeName);\n    let originalType:Type|null = this.findScriptOriginalType(originalName);\n\n\n\n    if(!originalType){\n        return {typeKind: AbiParameterKind.CLASS, typeName: originalName, isArray:isArray};\n    } else if(originalType.kind == TypeKind.BOOL){\n        return {typeKind: AbiParameterKind.BOOL, typeName: originalType.toString() , isArray:isArray};\n    } else {\n        return {typeKind: AbiParameterKind.NUMBER, typeName: originalType.toString(), isArray:isArray}\n    }\n  }\n\n\n  /**\n  *  Resolve ClassPrototype to dispatcher  \n  *\n  *\n  */\n  resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n\n    let body = new Array<string>();\n    let hasActionDecorator = false;\n    if (clzPrototype.instanceMembers) {\n\n      let contractName = clzPrototype.simpleName; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n      \n      body.push(`  if (receiver == code) {`);\n      body.push(`    let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n\n      for (let instance of clzPrototype.instanceMembers.values()) {\n        if (this.isActionFuncPrototype(instance)) {\n\n          this.resolveFunctionPrototype(<FunctionPrototype>instance);\n          hasActionDecorator = true;\n          let declaration:FunctionDeclaration = (<FunctionPrototype>instance).declaration; // FunctionDeclaration\n\n          let funcName = declaration.name.range.toString();\n          let types = declaration.signature.parameters; // FunctionDeclaration parameter types\n          \n          this.checkName(funcName);\n\n          body.push(`    if (action == N(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (var index = 0; index < types.length; index++) {\n            let type:ParameterNode = types[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n\n            let abiType = this.resolveAbiParameterType(type.type);\n\n            if(abiType.isArray){\n              if(abiType.typeKind == AbiParameterKind.NUMBER){\n                body.push(`      let ${parameterName} = ds.readVector<${abiType.typeName}>();`);\n              } else if(abiType.typeKind == AbiParameterKind.BOOL){\n                body.push(`      let ${parameterName} = ds.readVector<u8>();`);\n              } else if(abiType.typeKind == AbiParameterKind.STRING){\n\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${abiType.typeName}>();`);\n              }\n\n\n            } else{\n              if(abiType.typeKind == AbiParameterKind.STRING){\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if(abiType.typeKind == AbiParameterKind.BOOL){\n                body.push(`      let ${parameterName} = ds.read<u8>() != 0;`);\n              } else if(abiType.typeKind == AbiParameterKind.NUMBER ){\n                body.push(`      let ${parameterName} = ds.read<${abiType.typeName}>();`);\n              } else {\n                let internalName = this.getInternalName(type.type);\n                this.retrieveStructByInternalName(internalName);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds)`);\n              }\n            }\n            fields.push(parameterName);\n          }\n          body.push(`      ${contractVarName}.${funcName}(${fields.join(',')});`);\n          body.push(\"    }\");\n        }\n      }\n      body.push(\"  }\");\n\n      if(hasActionDecorator){\n        let clzName = clzPrototype.simpleName;\n        let sourcePath = clzPrototype.declaration.range.source.internalPath;\n        if(clzPrototype.declaration.decorators){\n          this.resolveClassDecorator(clzPrototype.declaration.decorators);\n        }\n      }\n    }\n    return hasActionDecorator ? body : new Array();\n  }\n\n  resolveFunctionPrototype(funcPrototype: FunctionPrototype): void {\n\n    let declaration:FunctionDeclaration = funcPrototype.declaration;\n    let funcName = declaration.name.range.toString();\n    let signature = funcPrototype.declaration.signature;\n    let struct = this.toAbiStruct(funcName, signature);\n\n    this.addStruct(struct)\n    this.abiInfo.actions.push(new Action(funcName, funcName));\n  }\n\n\n  printTypeAliasInfo():void{\n\n    let typesLookupKeys = this.program.typesLookup.keys();\n    for(let key of typesLookupKeys){\n      let value = this.program.typesLookup.get(key);\n      if(value){\n        console.log(`type look up key: ${key}. value: ${value.kind}`);\n      }\n    }\n\n    let typesAliasKeys = this.program.typeAliases.keys();\n    for(let key of typesAliasKeys){\n      let value = this.program.typeAliases.get(key);\n      if(value){\n        console.log(`type alias key: ${key}. Value: ${value.type.range.toString()}`);\n      }\n    }\n  }\n\n  printElementLookUpInfo():void{\n    let keys = this.program.elementsLookup.keys();\n      for(let key of keys){\n        let value = this.program.elementsLookup.get(key);\n        if(value)\n          console.log(`Element lookup key:${key}.Kind:${value.kind}`);\n      }\n  }\n\n  resolve(): void{\n\n    // this.printTypeAliasInfo();\n    // this.printElementLookUpInfo();\n    // this.findDBManager();\n\n    let dispatchBuffer = new Array<string>();\n\n    for (let element of this.program.elementsLookup.values()) {\n      // The element is ClassPrototype\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(clzPrototype.internalName)) {\n          let classDispatch:Array<string> = this.resolveClassDispatcher(clzPrototype);\n          classDispatch.forEach((value:string, index:number):void => {\n            dispatchBuffer.push(value);\n          });\n          this.elementLookup.set(clzPrototype.internalName, element);\n        } \n      }\n    }\n\n    if(dispatchBuffer.length == 0){\n      throw new Error(`The smart contract must specify one action.`);\n    }\n\n    this.dispatch = this.assemblyDispatch(dispatchBuffer);  \n  }\n\n\n  // Concat the dispatch message\n  assemblyDispatch(body: Array<string>): string{\n\n    let sb = new Array<string>();\n    sb.push(\"export function apply(receiver: u64, code: u64, action: u64): void {\");\n\n    body.forEach( (value:string, index:number):void =>{\n      sb.push(value);\n    });\n    sb.push(\"}\");\n\n    return sb.join(\"\\n\");\n  }\n}\n\n\n\n","/** @module util *//***/\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags\n} from \"./program\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"current_memory\": { // current_memory() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"set_memory\": { // set_memory(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\nconst allocateInternalName = \"allocate_memory\";\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\n  if (!allocatePrototype) {\n    program.error(\n      DiagnosticCode.Cannot_find_name_0,\n      reportNode.range, allocateInternalName\n    );\n    program.info(\n      DiagnosticCode.An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf,\n      reportNode.range\n    );\n    return module.createUnreachable();\n  }\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\n    program.error(\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n      reportNode.range, allocatePrototype.internalName\n    );\n    return module.createUnreachable();\n  }\n\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\n\n  compiler.currentType = classInstance.type;\n  return module.createCall(\n    allocateInstance.internalName, [\n      options.isWasm64\n        ? module.createI64(classInstance.currentMemoryOffset)\n        : module.createI32(classInstance.currentMemoryOffset)\n    ],\n    options.nativeSizeType\n  );\n}\n\nconst abortInternalName = \"abort\";\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\n  if (!stringType) return module.createUnreachable();\n\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\n\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__23__;","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\n\nfor (var key in binaryen)\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\n    global[key] = binaryen[key];\n\n// Utilize Binaryen's heap\n\nglobal.allocate_memory = function(size) {\n  if (!size) return 0; // should be safe in our case\n  return binaryen._malloc(size);\n};\n\nglobal.free_memory = function(ptr) {\n  if (ptr) binaryen._free(ptr);\n};\n\nglobal.move_memory = function(dest, src, n) {\n  return binaryen._memmove(dest, src, n);\n};\n\nglobal.store = function(ptr, val) {\n  binaryen.HEAPU8[ptr] = val;\n};\n\nglobal.load = function(ptr) {\n  return binaryen.HEAPU8[ptr];\n};\n\n// Implement module stubs\n\nconst Module = require(\"../../module\").Module;\n\nModule.prototype.toText = function toText() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrint(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrintAsmjs(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n","module.exports = globalScope => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\n    if (!(size >>>= 0)) return 0;\n\n    if (HEAP_OFFSET + size > HEAP.length) {\n      var oldHeap = HEAP;\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n      HEAP.set(oldHeap);\n    }\n\n    var ptr = HEAP_OFFSET;\n    if ((HEAP_OFFSET += size) & 7)\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n\n    return ptr;\n  };\n\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\n    // TODO\n  };\n\n  globalScope[\"move_memory\"] = function move_memory(dest, src, size) {\n    HEAP.copyWithin(dest, src, src + size);\n  };\n\n  globalScope[\"store\"] = function store(ptr, value, offset) {\n    HEAP[ptr + (offset | 0)] = value;\n  };\n\n  globalScope[\"load\"] = function load(ptr, offset) {\n    return HEAP[ptr + (offset | 0)];\n  };\n};\n","module.exports = globalScope => {\n  globalScope[\"JSMath\"] = Math;\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nrequire(\"./portable/math\")(globalScope);\nrequire(\"./portable/memory\")(globalScope);\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"../../../std/portable\";\nimport \"./binaryen\";\nimport \"./i64\";\nimport \"./float\";\n"],"sourceRoot":""}