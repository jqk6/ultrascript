{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/serialize.ts","webpack://assemblyscript/./src/util/astutil.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/wrapper.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__18__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","common_1","tokenizer_1","Token","Range","NodeKind","util_1","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","nodeIsGenericCallable","Node","parent","flags","CommonFlags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","range","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","text","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","length","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizedPath","normalizePath","startsWith","resolvePath","source","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","LIBRARY_PREFIX","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","assert","charCodeAt","ACTION","BUILTIN","DATABASE","EXTERNAL","GLOBAL","INLINE","IGNORE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","PATH_DELIMITER","simplePath","substring","Array","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","STATIC_DELIMITER","INSTANCE_DELIMITER","endsWith","findDecorator","decorator","OperatorKind","diagnostics_1","types_1","ast_1","module_1","abi_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnostics","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","toAbi","abi","Abi","resolve","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","globalName","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","toString","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","join","warning","Operation_not_supported","push","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","GETTER_PREFIX","SETTER_PREFIX","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE_PREFIX","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","DiagnosticEmitter","Element","program","_internalName","replaceComma","str","result","str_1","str_1_1","ch","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","line","column","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","PARENT_SUBST","INNER_DELIMITER","LIBRARY_SUBST","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","__export","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","g","eval","e","window","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","functionTableExported","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_e","_f","_g","_h","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_j","_k","fullName","_l","_m","ctor","compileSourceByPath","reportNode","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","resolveFunctionInclTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","exception","console","log","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","retainConstantType","scopedThis","_this_cannot_be_referenced_in_current_location","superType","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","classInstance","currentClassInstance","makeAllocate","propertyAccess","resolvePropertyAccess","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","fieldType","nativeFieldType","fieldDeclaration","parentElement","serialize_1","wrapper_1","astutil_1","Struct","fields","AbiTypeAlias","newTypeName","wasmType","new_type_name","Action","ricardian_contract","AbiHelper","abiTypeLookup","Table","indexType","index_type","keys_names","keys_types","typeAliasSet","structsLookup","elementLookup","fileSerializeLookup","abiInfo","version","structs","actions","tables","toAbiStruct","methodName","struct","types_1_1","typeKind","addAbiTypeAlias","typeKindName","originalTypeName","findContractOriginalType","typeAlias","commonaTypeName","findScriptOriginalTypeName","findScriptOriginalType","checkFuncPrototypeDecorator","funcPrototype","isActionDecorator","decorators_1","decorators_1_1","isWrapWithQutation","undefined","charAt","isActionFuncPrototype","funcType","resolveClassDecorator","decorators_2","decorators_2_1","retrieveArgumentText","resolveExpressionToStruct","getClassPrimaryKey","classDeclaration","argu","NodeUtil","getInternalName","resolveExpressionToElement","retrieveStructByInternalName","resolveClassPrototypeToStruct","members_1","members_1_1","fieldDeclare","AstUtil","haveSpecifyDecorator","resolveAbiParameterType","fieldTypeName","isArray","getBasicTypeName","addStruct","checkName","resolveClassDispatcher","clzPrototype","hasActionDecorator","contractName","contractVarName","resolveFunctionPrototype","funcName","abiType","VarialbeKind","NUMBER","factType","BOOL","printTypeAliasInfo","typesLookupKeys","keys","typesLookupKeys_1","typesLookupKeys_1_1","typesAliasKeys","typesAliasKeys_1","typesAliasKeys_1_1","printElementLookUpInfo","keys_1","keys_1_1","printClassProtoTypeInfo","keys_2","keys_2_1","serializeHelper","SerializeHelper","wrapper","Wrapper","insertPoints","addSerializePoint","dispatchBuffer","forEach","dispatch","assemblyDispatch","hasElement","nameMap","commonTypeNode","variableType","declareType","baseTypeName","findAbiType","findFactType","bracketIndex","indexOf","endIndex","findFactTypeName","SerializeGenerator","SERIALIZE_METHOD_NAME","DESERIALIZE_METHOD_NAME","PRIMARY_METHOD_NAME","needImplSerialize","needImplDeSerialize","needImplPrimary","generatorSerializeFlag","functionPrototype","checkFieldImplSerialize","hasImplSerialize","SERIALIZE_INTERFANCE","getSerializePoints","serializePoint","SerializePoint","needDeserialize","needSerialize","needPrimaryKey","addSerializeExpr","serializeField","addDeserializeExpr","deserializeField","typeNodeHelper","paramDeclaration","InsertPoint","insertData","getInsertData","serialize","deserialize","primaryKey","serializeClassname","classDeclareStr","classpath","sortSerializePoints","fileSerialize","sort","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","contextualFunction","targetExpression","propertyName","elementAccess","explicitLocal","functionTarget","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","typeParameterNodes","binaryen","emitText","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","stack","AssertionError","ASC_TARGET","defineProperties","writable","Math","fround","MIN_POSITIVE_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","EPSILON","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","fromCodePoint","Number","isInteger","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","F64","Float64Array","F32","Float32Array","I32","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","gte","lte","minSafeF64","maxSafeF64","toNumber","i64_to_string","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","ClzI64","CtzI64","PopcntI64","RotlI32","RotlI64","RotrI32","RotrI64","AbsF32","AbsF64","tempLocal0","tempLocal1","MaxF32","MaxF64","MinF32","MinF64","CeilF32","CeilF64","FloorF32","FloorF64","CopysignF32","CopysignF64","NearestF32","NearestF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","SqrtF32","SqrtF64","TruncF32","TruncF64","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","CurrentMemory","GrowMemory","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","valueType","stringType","existingIndex","gcPrototype","gcInstance","VIRTUAL","nativeSizeSize","baseInstance","allocateInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","indent","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","processSuper","baseConstructorPrototype","concreteFunctionDeclaration","bodyStmt","_superCall","trim","blockStmt","baseFunctionDeclaration","content","method","createSuperCall","decompiler_1","definitions_1","formatDiagnostic","parser_1","parseFile","parser","Parser","nextFile","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","decompiler","Decompiler","decompile","buildIDL","IDLBuilder","build","buildTSD","TSDBuilder","functionId","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallImport","CallIndirect","SetGlobal","Store","Drop","Host","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","indentLevel","typeToString","visitInterface","numMembers","members_2","members_2_1","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","skipBlock","depth","Precedence"],"mappings":"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AAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__18__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION,\n  DATABASE,\n  IGNORE,\n  EXTERNAL,\n  BUILTIN\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.a: {\n        if (nameStr == \"action\") return DecoratorKind.ACTION;\n        break;\n      }\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.d: {\n        if (nameStr == \"database\") return DecoratorKind.DATABASE;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        if (nameStr == \"ignore\") return DecoratorKind.IGNORE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Abi\n} from \"./abi\";\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents a module-level export. */\nclass ModuleExport {\n  element: Element;\n  identifier: IdentifierExpression;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n  toAbi(): Abi {\n    var abi = new Abi(this);\n    abi.resolve();\n    return abi;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let element = this.elementsLookup.get(name);\n          if (element) this.elementsLookup.set(alias, element);\n          else throw new Error(\"element not found: \" + name);\n        }\n      }\n    }\n\n    // register 'ArrayBuffer'\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n    }\n\n    // register 'Array'\n    if (this.elementsLookup.has(\"Array\")) {\n      let element = assert(this.elementsLookup.get(\"Array\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>element;\n    }\n\n    // register 'String'\n    if (this.elementsLookup.has(\"String\")) {\n      let element = assert(this.elementsLookup.get(\"String\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\n      if (instance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>element).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = instance;\n          this.typesLookup.set(\"string\", instance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n\n    // register 'abort' if present\n    if (this.elementsLookup.has(\"abort\")) {\n      let element = <Element>this.elementsLookup.get(\"abort\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      if (instance) this.abortInstance = instance;\n    }\n\n    // register 'memory.allocate' if present\n    if (this.elementsLookup.has(\"memory\")) {\n      let element = <Element>this.elementsLookup.get(\"memory\");\n      let members = element.members;\n      if (members) {\n        if (members.has(\"allocate\")) {\n          element = assert(members.get(\"allocate\"));\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.memoryAllocateInstance = instance;\n        }\n      }\n    }\n\n    // register GC hooks if present\n    if (\n      this.elementsLookup.has(\"__gc_allocate\") &&\n      this.elementsLookup.has(\"__gc_link\") &&\n      this.elementsLookup.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (flag == DecoratorFlags.BUILTIN) {\n          if (decorator.range.source.isLibrary) {\n            presentFlags |= flag;\n          } else {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          }\n        } else if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias globally if explicitly annotated @global or exported from a top-level library file\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n      }\n    }\n    // builtins use the global name directly\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\n      element.internalName = declaration.programLevelInternalName;\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    externalIdentifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = externalIdentifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = externalIdentifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if a top-level export of a library file\n    var source = externalIdentifier.range.source;\n    if (source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          externalIdentifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n\n    // add module level export if a top-level export of an entry file\n    } else if (source.isEntry) {\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\n        element,\n        identifier: externalIdentifier\n      });\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (this.elementsLookup.has(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          <Element>this.elementsLookup.get(referencedName),\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          if (existingExport.element !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: namespace,\n            identifier: declaration.name\n          });\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.INLINE |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: global,\n            identifier: declaration.name\n          });\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  _internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this._internalName = internalName;\n  }\n\n  static replaceComma(str: string): string {\n    if (!str) return str;\n    var result  =  \"\";\n    for (let ch of str) {\n      result +=  ch == \",\" ? \"_\" : ch;\n    }\n    return result;\n  }\n\n  get internalName(): string {\n    return Element.replaceComma(this._internalName);\n  }\n\n  set internalName(internalName: string) {\n    this._internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is compiled. */\n  COMPILED = 1 << 21,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 22,\n  /** Is scoped. */\n  SCOPED = 1 << 23,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 24,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 25,\n  /** Is the main function. */\n  MAIN = 1 << 26,\n\n  // Other\n\n  QUOTED = 1 << 27\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport const enum NativeType {\n  None = 0,        // _BinaryenTypeNone(),\n  I32  = 1,        // _BinaryenTypeInt32(),\n  I64  = 2,        // _BinaryenTypeInt64(),\n  F32  = 3,        // _BinaryenTypeFloat32(),\n  F64  = 4,        // _BinaryenTypeFloat64(),\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\n  Auto = -1        // _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = memory.allocate(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n      memory.free(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocPtrArray(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0; // for free'ing\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    memory.free(this.cachedByValue);\n    memory.free(this.cachedTemporaryName);\n    memory.free(this.cachedPrecomputeName);\n    memory.free(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: FunctionRef[] = [];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      this.options.isWasm64\n        ? Module.MAX_MEMORY_WASM64\n        : Module.MAX_MEMORY_WASM32,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    var functionTableExported = false;\n    if (functionTableSize) {\n      module.setFunctionTable(functionTable);\n      module.addTableExport(\"0\", \"table\");\n      functionTableExported = true;\n    }\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\n    }\n\n    // set up module exports\n    for (let [name, moduleExport] of program.moduleLevelExports) {\n      this.makeModuleExport(name, moduleExport.element);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      }\n    }\n\n    switch (element.kind) {\n\n      // export global\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<Global>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<EnumValue>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n\n      // export function\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n\n      // export getter and setter\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>element).getterPrototype);\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterPrototype;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export a getter and a setter\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // skip prototype and export instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          let ctor = instance.constructorInstance;\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n\n      // all possible members already handled above\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE: break;\n\n      default: assert(false);\n    }\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration, global.parent);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (declaration !== null && declaration.initializer !== null) {\n      if (!initExpr) {\n        initExpr = this.compileExpression(\n          declaration.initializer,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        let initExpr: ExpressionRef;\n        if (valueDeclaration.value) {\n          initExpr = this.compileExpression(\n            <Expression>valueDeclaration.value,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueDeclaration.value.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              valueDeclaration.range\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          previousValueIsMut = true;\n        } else {\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration, instance.prototype.parent); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let element = fileLevelExports.get(\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\n      );\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.ref);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    try {\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n    } catch (exception) {\n      let normalizePath = expression.range.source.normalizedPath;\n      console.log(`Compile expression failed. The normalizePath: ${normalizePath} around line: ${expression.range.line}.`);\n      throw exception;\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.resolver.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(\n            prototype,\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n      case ElementKind.PROPERTY: // TODO\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        this.currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\n    return ret;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expr = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(compiledValues[i]);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var currentFunction = this.currentFunction;\n    var tempLocal = currentFunction.getTempLocal(arrayType, false);\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      compileAllocate(this, classReference, expression)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the top-most visible constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance: Function | null = null;\n    do {\n      constructorInstance = currentClassInstance.constructorInstance;\n      if (constructorInstance) break; // TODO: check visibility\n    } while (currentClassInstance = currentClassInstance.base);\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>target).getterPrototype;\n        if (prototype) {\n          let instance = this.resolver.resolveFunction(prototype, null);\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.parent);\n            assert(parent.kind == ElementKind.CLASS);\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr, inline);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, 0, inline);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement,\n  parentElement: Element | null = null\n): void {\n  mangleImportName_moduleName = parentElement ? parentElement.simpleName : declaration.range.source.simplePath;\n  mangleImportName_elementName = element.simpleName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","import {\n  SerializeHelper,\n  InsertPoint,\n  VariableDeclaration,\n  VarialbeKind,\n  NodeUtil\n} from \"./serialize\";\n\nimport {\n  Type,\n} from \"./types\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program,\n  VariableLikeElement\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  DecoratorNode,\n  SignatureNode,\n  FunctionDeclaration,\n  DeclarationStatement,\n  FieldDeclaration,\n  NodeKind,\n  ParameterNode,\n  Expression,\n  VariableLikeDeclarationStatement,\n  StringLiteralExpression,\n  ClassDeclaration,\n  MethodDeclaration\n} from \"./ast\";\nimport { Wrapper } from \"./wrapper\";\nimport { AstUtil } from \"./util/astutil\";\n\nclass Struct {\n\n  name: string;\n  base: string;\n  fields: Array<Object> = new Array<Object>();\n}\n\nclass AbiTypeAlias {\n  new_type_name: string;\n  type: string;\n\n  constructor(newTypeName: string, wasmType: string) {\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\nclass Action {\n\n  name: string;\n  type: string;\n  ricardian_contract: string = \"\";\n\n  constructor(name: string, type: string) {\n    this.name = name;\n    this.type = type;\n  }\n}\n\nexport class AbiHelper {\n\n  static abiTypeLookup: Map<string, string> = new Map([\n    [\"i8\", \"int8\"],\n    [\"i16\", \"int16\"],\n    [\"i32\", \"int32\"],\n    [\"i64\", \"int64\"],\n    [\"isize\", \"\"],\n    [\"u8\", \"uint8\"],\n    [\"u16\", \"uint16\"],\n    [\"u32\", \"uint32\"],\n    [\"u64\", \"uint64\"],\n    [\"usize\", \"usize\"],\n    [\"bool\", \"uint8\"], // eos not support the bool\n    [\"f32\", \"f32\"],\n    [\"f64\", \"f64\"],\n    [\"boolean\", \"uint8\"], // eos not suppot the bool\n    [\"account_name\", \"name\"],\n    [\"permission_name\", \"name\"],\n    [\"action_name\", \"name\"],\n    [\"weight_type\", \"uint16\"],\n    [\"Asset\", \"asset\"]\n  ]);\n}\n\nclass Table {\n  name: string;\n  type: string;\n  index_type: string = \"i64\";\n  keys_names: string[] = [\"currency\"];\n  keys_types: string[] = [\"uint64\"];\n\n  constructor(name: string, type: string, indexType:string = \"i64\") {\n    this.name = name;\n    this.type = type;\n    this.index_type = indexType; \n  }\n}\n\nexport class Abi {\n\n  abiInfo: {\n    version: string,\n    types: Array<AbiTypeAlias>,\n    structs: Array<Struct>,\n    actions: Array<Action>,\n    tables: Array<Table>\n  };\n\n  dispatch: string;\n\n  program: Program;\n\n  abiTypeLookup: Map<string, string> = new Map();\n\n  typeAliasSet: Set<string> = new Set<string>();\n\n  structsLookup: Map<string, Struct> = new Map();\n\n  elementLookup: Map<string, Element> = new Map();\n\n  fileSerializeLookup: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n  constructor(program: Program) {\n\n    this.program = program;\n\n    this.abiInfo = {\n      version: \"ultraio:1.0\",\n      types: new Array<AbiTypeAlias>(),\n      structs: new Array<Struct>(),\n      actions: new Array<Action>(),\n      tables: new Array<Table>()\n    };\n\n    this.abiTypeLookup = AbiHelper.abiTypeLookup;\n  }\n\n  /**\n  *  Add abi struct for abi info.\n  */\n  toAbiStruct(methodName: string, signature: SignatureNode): Struct {\n\n    var struct = new Struct();\n    struct.name = methodName;\n    struct.base = \"\";\n\n    var types = signature.parameters;\n    if (types) {\n      for (let type of types) {\n        let typeKind = type.type.range.toString();\n        this.addAbiTypeAlias(typeKind);\n        struct.fields.push({ name: type.name.range.toString(), type: type.type.range.toString() });\n      }\n    }\n    return struct;\n  }\n\n  addAbiTypeAlias(typeKindName: string): void {\n\n    if (!this.typeAliasSet.has(typeKindName)) {\n      // It's the assemblyscript internal type\n      let originalTypeName = this.findContractOriginalType(typeKindName);\n      let wasmType = this.abiTypeLookup.get(originalTypeName);\n      if (wasmType) {\n        this.abiInfo.types.push(new AbiTypeAlias(typeKindName, wasmType));\n      }\n      this.typeAliasSet.add(typeKindName);\n    }\n  }\n\n  /**\n  * Find the original type name,\n  * eg: declare type account_name = u64;\n        declare type account_name_alias = account_name;\n\n    findContractOriginalType(\"account_name_alias\") return \"account_name\";\n  */\n  findContractOriginalType(typeKindName: string): string {\n\n    var abiType: string | null = this.abiTypeLookup.get(typeKindName);\n    if (abiType) {\n      return typeKindName;\n    }\n    var typeAlias = this.program.typeAliases.get(typeKindName);\n    if (typeAlias) {\n      let commonaTypeName = typeAlias.type.range.toString();\n      return this.findContractOriginalType(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find the script original type name\n  * @param typeKindName\n  */\n  findScriptOriginalTypeName(typeKindName: string): string {\n    var typeAlias = this.program.typeAliases.get(typeKindName);\n    if (typeAlias) {\n      let commonaTypeName = typeAlias.type.range.toString();\n      return this.findScriptOriginalTypeName(commonaTypeName);\n    } else {\n      return typeKindName;\n    }\n  }\n\n  /**\n  * Find assemblyscript original type name\n  * eg: account_name return 'u64'\n  *\n  * @param typeKindName\n  */\n  findScriptOriginalType(typeKindName: string): Type | null {\n    var originalName = this.findScriptOriginalTypeName(typeKindName);\n    //Get the AssemblyScript original type\n    var scriptType: Type | null = this.program.typesLookup.get(originalName);\n    return scriptType;\n  }\n\n  // Check the FunctionPrototype weather has decoratorKind\n  checkFuncPrototypeDecorator(funcPrototype: FunctionPrototype, decoratorKind: DecoratorKind): bool {\n    var decorators = funcPrototype.declaration.decorators;\n    var isActionDecorator = false;\n    if (decorators) {\n      for (let decorator of decorators) {\n        if (decorator.decoratorKind == decoratorKind) {\n          isActionDecorator = true;\n        }\n      }\n    }\n    return isActionDecorator;\n  }\n\n  isWrapWithQutation(str: string): bool {\n\n    if (str == undefined || str == null) {\n      return false;\n    }\n    return str.charAt(0) == \"\\\"\" && str.charAt(str.length - 1) == \"\\\"\"\n      ? true : false;\n  }\n\n  /**\n  *  Check that element whether is functionPrototype\n  *\n  */\n  isActionFuncPrototype(element: Element): bool {\n\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let funcType = <FunctionPrototype>element;\n      return this.checkFuncPrototypeDecorator(funcType, DecoratorKind.ACTION);\n    }\n    return false;\n  }\n\n  /**\n  * Resolve the class database decoreator\n  */\n  resolveClassDecorator(decorators: DecoratorNode[]): void {\n    for (let decorator of decorators) {\n      if (decorator.decoratorKind == DecoratorKind.DATABASE && decorator.arguments) {\n        // Decorator argument must have two arguments\n        if (decorator.arguments.length < 2) {\n          throw new Error(\"Database decorator must have two arguments\");\n        }\n\n        let type = decorator.arguments[0].range.toString();\n        let name = this.retrieveArgumentText(decorator.arguments[1]);\n\n        // let classPrototype:ClassPrototype = <ClassPrototype>this.resolveExpressionToElement(decorator.arguments[0]);\n        // let indexType = this.getClassPrimaryKey(classPrototype.declaration);\n        this.abiInfo.tables.push(new Table(name, type));\n        this.resolveExpressionToStruct(decorator.arguments[0]);\n      }\n    }\n  }\n\n  getClassPrimaryKey(classDeclaration: ClassDeclaration ): string {\n\n    if (!classDeclaration.members) {\n      throw new Error(`Class:${classDeclaration.name} not have primary key.`);\n    }\n    const primaryMethodName = \"primaryKey\";\n    for (let member of classDeclaration.members) {\n      if (member.kind == NodeKind.METHODDECLARATION && member.name.range.toString() == primaryMethodName) {\n        let method:MethodDeclaration = <MethodDeclaration>member;\n        let returnType =  method.signature.returnType; \n        if (returnType.isNullable) {\n          throw new Error(`The primaryKey method of class:${classDeclaration.name} must return value.`);\n        } else {\n          return this.findScriptOriginalTypeName(returnType.range.toString());\n        }\n      }\n    }\n    throw new Error(`Class:${classDeclaration.name} not have primary key.`);\n  }\n\n  retrieveArgumentText(expr: Expression): string {\n    var argu: string = expr.range.toString();\n\n    if (this.isWrapWithQutation(argu)) {\n      return argu.substring(1, argu.length - 1);\n    }\n\n    var internalName = NodeUtil.getInternalName(expr);\n    var element: Element | null = this.program.elementsLookup.get(internalName);\n\n    if (element) {\n      let declaration: VariableLikeDeclarationStatement | null = (<VariableLikeElement>element).declaration;\n      if (declaration && declaration.initializer) {\n        let literal: StringLiteralExpression = <StringLiteralExpression>declaration.initializer;\n        return literal.value;\n      }\n    }\n    throw new Error(`Cann't find constant ${internalName}`);\n  }\n\n\n\n  resolveExpressionToElement(expr: Expression): Element {\n\n    var internalPath = expr.range.source.internalPath;\n    var name = expr.range.toString();\n    var internalName = `${internalPath}/${name}`;\n    var element = this.program.elementsLookup.get(internalName);\n    if (!element || element.kind != ElementKind.CLASS_PROTOTYPE) {\n      throw new Error(`Element ${internalName} not found, pleasure make sure that class ${internalName} was existed.`);\n    }\n    return element;\n  }\n\n  /**\n  *  Get struct from expression.\n  */\n  resolveExpressionToStruct(expr: Expression): void {\n\n    var internalPath = expr.range.source.internalPath;\n    var name = expr.range.toString();\n    var internalName = `${internalPath}/${name}`;\n    this.retrieveStructByInternalName(internalName);\n  }\n\n  retrieveStructByInternalName(internalName: string): void {\n\n    var element = this.program.elementsLookup.get(internalName);\n    if (!element || element.kind != ElementKind.CLASS_PROTOTYPE) {\n      throw new Error(`Element ${internalName} not found, pleasure make sure that class ${internalName} was existed.`);\n    }\n    var classPrototype = <ClassPrototype>element;\n    this.resolveClassPrototypeToStruct(classPrototype);\n  }\n\n  resolveClassPrototypeToStruct(classPrototype: ClassPrototype): void {\n\n    var members: DeclarationStatement[] = classPrototype.declaration.members;\n    var struct = new Struct();\n    struct.name = classPrototype.simpleName;\n\n    if (this.abiTypeLookup.get(struct.name)) {\n      return;\n    }\n\n    struct.base = \"\";\n    for (let member of members) {\n      if (member.kind == NodeKind.FIELDDECLARATION) {\n        let fieldDeclare: FieldDeclaration = <FieldDeclaration>member;\n        let fieldName = member.name.range.toString();\n        let fieldType = fieldDeclare.type;\n\n        if (fieldType && !AstUtil.haveSpecifyDecorator(fieldDeclare, DecoratorKind.IGNORE)) {\n          let declaration:VariableDeclaration = new VariableDeclaration(this.program, fieldType).resolveAbiParameterType();\n          let fieldTypeName = fieldType.range.toString();\n          let type =  !declaration.isArray ? fieldTypeName :  `${declaration.getBasicTypeName(fieldTypeName)}[]`;\n          struct.fields.push({ name: fieldName, type:type });\n        }\n      }\n    }\n    this.addStruct(struct);\n  }\n\n  addStruct(struct: Struct): void {\n\n    if (!this.structsLookup.has(struct.name)) {\n      this.abiInfo.structs.push(struct);\n      this.structsLookup.set(struct.name, struct);\n    }\n  }\n\n  static nameMap: string = \"._0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n  checkName(str: string): void {\n\n    assert(str.length > 0, `Action name should not empty`);\n    assert(str.length <= 21, `Action Name:${str} should be less than 21 characters.`);\n  }\n\n  /**\n  *  Resolve ClassPrototype to dispatcher\n  */\n  resolveClassDispatcher(clzPrototype: ClassPrototype): Array<string> {\n\n    var body = new Array<string>();\n    var hasActionDecorator = false;\n    if (clzPrototype.instanceMembers) {\n\n      let contractName = clzPrototype.simpleName; //\n      let contractVarName = \"_\" + contractName; // TODO To enhancement the code\n\n      body.push(`  if (receiver == code) {`);\n      body.push(`    let ${contractVarName} = new ${contractName}(receiver);`);\n      body.push(`    let ds = ${contractVarName}.getDataStream();`);\n      body.push(`    ${contractVarName}.setActionName(actH, actL);`);\n      body.push(`    ${contractVarName}.onInit();`);\n\n      for (let instance of clzPrototype.instanceMembers.values()) {\n        if (this.isActionFuncPrototype(instance)) {\n\n          this.resolveFunctionPrototype(<FunctionPrototype>instance);\n          hasActionDecorator = true;\n          let declaration: FunctionDeclaration = (<FunctionPrototype>instance).declaration; // FunctionDeclaration\n\n          let funcName = declaration.name.range.toString();\n          let types = declaration.signature.parameters; // FunctionDeclaration parameter types\n\n          this.checkName(funcName);\n          //let action = new NameEx(actH, actL);\n          body.push(`    if (${contractVarName}.isAction(\"${funcName}\")){`);\n\n          let fields = new Array<string>();\n          for (let index = 0; index < types.length; index++) {\n            let type: ParameterNode = types[index];\n            let parameterType = type.type.range.toString();\n            let parameterName = type.name.range.toString();\n\n            let variableDeclaration: VariableDeclaration = new VariableDeclaration(this.program, type.type);\n            let abiType = variableDeclaration.resolveAbiParameterType();\n\n            if (abiType.isArray) {\n              if (abiType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${parameterName} = ds.readVector<${abiType.factType}>();`);\n              } else if (abiType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${parameterName} = ds.readVector<u8>();`);\n              } else if (abiType.kind == VarialbeKind.STRING) {\n                body.push(`      let ${parameterName} = ds.readStringVector();`);\n              } else {\n                body.push(`      let ${parameterName} = ds.readComplexVector<${abiType.baseType}>();`);\n              }\n            } else {\n              if (abiType.kind == VarialbeKind.STRING) {\n                body.push(`      let ${parameterName} = ds.readString();`);\n              } else if (abiType.kind == VarialbeKind.BOOL) {\n                body.push(`      let ${parameterName} = ds.read<u8>() != 0;`);\n              } else if (abiType.kind == VarialbeKind.NUMBER) {\n                body.push(`      let ${parameterName} = ds.read<${abiType.factType}>();`);\n              } else {\n                let internalName = NodeUtil.getInternalName(type.type);\n                this.retrieveStructByInternalName(internalName);\n                body.push(`      let ${parameterName} = new ${parameterType}();`);\n                body.push(`      ${parameterName}.deserialize(ds);`);\n              }\n            }\n            fields.push(parameterName);\n          }\n          body.push(`      ${contractVarName}.${funcName}(${fields.join(\",\")});`);\n          body.push(\"    }\");\n        }\n      }\n      body.push(`    ${contractVarName}.onStop();`);\n      body.push(\"  }\");\n\n      if (hasActionDecorator) {\n        if (clzPrototype.declaration.decorators) {\n          this.resolveClassDecorator(clzPrototype.declaration.decorators);\n        }\n      }\n    }\n    return hasActionDecorator ? body : new Array();\n  }\n\n  resolveFunctionPrototype(funcPrototype: FunctionPrototype): void {\n\n    var declaration: FunctionDeclaration = funcPrototype.declaration;\n    var funcName = declaration.name.range.toString();\n    var signature = funcPrototype.declaration.signature;\n    var struct = this.toAbiStruct(funcName, signature);\n\n    this.addStruct(struct);\n    this.abiInfo.actions.push(new Action(funcName, funcName));\n  }\n\n  printTypeAliasInfo(): void {\n\n    var typesLookupKeys = this.program.typesLookup.keys();\n    for (let key of typesLookupKeys) {\n      let value = this.program.typesLookup.get(key);\n      if (value) {\n        console.log(`type look up key: ${key}. value: ${value.kind}`);\n      }\n    }\n\n    var typesAliasKeys = this.program.typeAliases.keys();\n    for (let key of typesAliasKeys) {\n      let value = this.program.typeAliases.get(key);\n      if (value) {\n        console.log(`type alias key: ${key}. Value: ${value.type.range.toString()}`);\n      }\n    }\n  }\n\n  printElementLookUpInfo(): void {\n    var keys = this.program.elementsLookup.keys();\n    for (let key of keys) {\n      let value = this.program.elementsLookup.get(key);\n      if (value) {\n        console.log(`Element lookup key:${key}.Kind:${value.kind}`);\n      }\n    }\n  }\n\n  private printClassProtoTypeInfo(): void {\n    var keys = this.program.elementsLookup.keys();\n    for (let key of keys) {\n      let value: Element | null = this.program.elementsLookup.get(key);\n      if (value && value.kind == ElementKind.CLASS_PROTOTYPE) {\n        // console.log(`Element lookup key:${key}.Kind:${value.kind}`);\n        let classPrototype: ClassPrototype = <ClassPrototype>value;\n        if (classPrototype.basePrototype) {\n          console.log(`Element lookup key:${key}. Base prototype:${classPrototype.basePrototype.simpleName}`);\n        }\n      }\n\n    }\n  }\n\n  resolve(): void {\n\n    // this.printTypeAliasInfo();\n    // this.printElementLookUpInfo();\n    // this.findDBManager();\n    // this.printClassProtoTypeInfo();\n\n    var serializeHelper: SerializeHelper = new SerializeHelper(this.program);\n    var wrapper:Wrapper = new Wrapper(this.program);\n\n    for (let index = 0; index < wrapper.insertPoints.length; index ++) {\n      serializeHelper.addSerializePoint(wrapper.insertPoints[index])\n    }\n\n    serializeHelper.resolve();\n    this.fileSerializeLookup = serializeHelper.fileSerializeLookup;\n\n    var dispatchBuffer = new Array<string>();\n\n    for (let element of this.program.elementsLookup.values()) {\n      // The element is ClassPrototype\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let clzPrototype = <ClassPrototype>element;\n        if (!this.elementLookup.has(clzPrototype.internalName)) {\n          let classDispatch: Array<string> = this.resolveClassDispatcher(clzPrototype);\n          classDispatch.forEach((value: string, index: number): void => {\n            dispatchBuffer.push(value);\n          });\n          this.elementLookup.set(clzPrototype.internalName, element);\n        }\n      }\n    }\n\n    if (dispatchBuffer.length == 0) {\n      // throw new Error(`The smart contract must specify one action.`);\n    }\n\n    this.dispatch = this.assemblyDispatch(dispatchBuffer);\n  }\n\n  hasElement(name: string): bool {\n    var element: Element | null = this.program.elementsLookup.get(name);\n    return element ? true : false;\n  }\n\n  // Concat the dispatch message\n  private assemblyDispatch(body: Array<string>): string {\n\n    var sb = new Array<string>();\n    sb.push(\"export function apply(receiver: u64, code: u64, actH: u64, actL: u64): void {\");\n\n    body.forEach((value: string, index: number): void => {\n      sb.push(value);\n    });\n    sb.push(\"}\");\n\n    return sb.join(\"\\n\");\n  }\n}\n","import {\n    Type,\n    TypeKind\n} from \"./types\";\n\nimport {\n    Range\n} from \"./tokenizer\";\n\nimport {\n    ElementKind,\n    Element,\n    ClassPrototype,\n    FunctionPrototype,\n    Program,\n    FieldPrototype\n} from \"./program\";\n\nimport {\n    ClassDeclaration,\n    FieldDeclaration,\n    TypeNode,\n    NodeKind,\n    Node,\n    CommonTypeNode,\n    DecoratorKind,\n} from \"./ast\";\nimport { AbiHelper } from \"./abi\";\nimport { AstUtil } from \"./util/astutil\";\n\nexport enum VarialbeKind {\n    BOOL, // boolean and bool\n    NUMBER, // original type except boolean and bool\n    STRING, // string kind\n    ARRAY, // array kind\n    CLASS // class kind\n}\n\nexport class NodeUtil {\n\n    /**\n     * Get the node internal name\n     * @param node The program node\n     */\n    static getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName;\n    }\n}\n\nexport class VariableDeclaration {\n\n    program: Program;\n\n    abiTypeLookup: Map<string, string> = new Map();\n\n    commonTypeNode: CommonTypeNode;\n\n    kind: VarialbeKind;\n    /** Parameter name, u64 */\n    declareType: string;\n    /** Base Parameter type */\n    baseType: string;\n    /** The abi field type, eg:account_name */\n    abiType: string;\n    /** The field fact type, eg: u64, u32 */\n    factType: string;\n    // /** Whether parameter or field is array  */\n\n    constructor(program: Program, commonTypeNode: CommonTypeNode) {\n        this.program = program;\n        this.commonTypeNode = commonTypeNode;\n        this.abiTypeLookup = AbiHelper.abiTypeLookup;\n    }\n\n    /**\n     * string TypeKind is 9, and usize TypeKind is also 9.\n     * @param type\n     */\n    resolveAbiParameterType(): VariableDeclaration {\n\n        var variableType = this.commonTypeNode.range.toString();\n        var typeAlias = this.program.typeAliases.get(variableType);\n        if (typeAlias) {\n            variableType = typeAlias.type.range.toString();\n        }\n        this.declareType = variableType;\n        var baseTypeName: string = this.getBasicTypeName(variableType);\n        this.baseType = baseTypeName;\n        if (baseTypeName == \"string\" || baseTypeName == \"String\") {\n            this.kind = VarialbeKind.STRING;\n            this.factType = \"string\";\n            return this;\n        }\n\n        this.abiType = this.findAbiType(baseTypeName);\n        var factType: Type | null = this.findFactType(this.abiType);\n\n        if (!factType) {\n            this.kind = VarialbeKind.CLASS;\n        } else if (factType.kind == TypeKind.BOOL) {\n            this.kind = VarialbeKind.BOOL;\n            this.factType = factType.toString();\n        } else {\n            this.kind = VarialbeKind.NUMBER;\n            this.factType = factType.toString();\n        }\n        return this;\n    }\n\n    /**\n     * Find the original type name\n     * eg: declare type account_name = u64;\n     *     declare type account_name_alias = account_name;\n     *     findAbiType(\"account_name_alias\") return \"account_name\";\n     *\n     * eg: findAbiType(\"u64\") return \"u64\";\n     * @param typeKindName\n     * */\n    findAbiType(typeKindName: string): string {\n\n        /**Watch the type whether was the root type */\n        var abiType: string | null = this.abiTypeLookup.get(typeKindName);\n        if (abiType) {\n            return typeKindName;\n        }\n        var typeAlias = this.program.typeAliases.get(typeKindName);\n        if (typeAlias) {\n            let typeName = typeAlias.type.range.toString();\n            return this.findAbiType(typeName);\n        } else {\n            return typeKindName;\n        }\n    }\n\n    get isArray(): bool {\n        return this.declareType.includes(\"[\") || \n            (this.declareType.includes(\"Array\") && this.declareType.includes(\"<\"));\n    }\n\n\n    /**\n     * Get the basic type name\n     * If the type name is string[], so the basic type name is string\n     * @param typeName\n     */\n    getBasicTypeName(typeName: string): string {\n\n        var bracketIndex = typeName.indexOf(\"[\");\n        if (bracketIndex != -1) {\n            let index = typeName.indexOf(\" \") == -1 ? bracketIndex : typeName.indexOf(\" \");\n            let baseTypeName = typeName.substring(0, index);\n            return baseTypeName;\n        }\n\n        bracketIndex = typeName.indexOf(\"<\");\n        if (bracketIndex != -1) {\n            let endIndex = typeName.indexOf(\">\");\n            return typeName.substring(bracketIndex + 1, endIndex);\n        }\n\n        return typeName;\n    }\n\n    /**\n     *  Find the script original type name\n     *  @param typeKindName\n     *\n     */\n    private findFactTypeName(typeKindName: string): string {\n        var typeAlias = this.program.typeAliases.get(typeKindName);\n        if (typeAlias) {\n            let commonaTypeName = typeAlias.type.range.toString();\n            return this.findFactTypeName(commonaTypeName);\n        } else {\n            return typeKindName;\n        }\n    }\n\n    /**\n    * Find assemblyscript original type name\n    * eg: account_name return 'u64'\n    *\n    * @param typeKindName\n    */\n    private findFactType(typeKindName: string): Type | null {\n        var originalName = this.findFactTypeName(typeKindName);\n        //Get the AssemblyScript original type\n        var scriptType: Type | null = this.program.typesLookup.get(originalName);\n        return scriptType;\n    }\n}\n\n/**\n * Serialiize Generateor\n */\nclass SerializeGenerator {\n\n    SERIALIZE_METHOD_NAME: string = \"serialize\";\n\n    DESERIALIZE_METHOD_NAME: string = \"deserialize\";\n\n    PRIMARY_METHOD_NAME: string = \"primaryKey\";\n\n    classPrototype: ClassPrototype;\n    /**Need to implement the Serialize method of the serialize interface */\n    private needImplSerialize: boolean = true;\n    /**Need to implement the Deserialize method of the serialize interface */\n    private needImplDeSerialize: boolean = true;\n    /**Need to implement the primaryKey method */\n    private needImplPrimary: boolean = true;\n\n    constructor(classPrototype: ClassPrototype) {\n        this.classPrototype = classPrototype;\n        this.generatorSerializeFlag();\n    }\n\n    getInternalName(node: Node): string {\n        var internalPath = node.range.source.internalPath;\n        var name = node.range.toString();\n        var internalName = `${internalPath}/${name}`;\n        return internalName;\n    }\n\n    generatorSerializeFlag(): void {\n\n        if (!this.classPrototype.instanceMembers) {\n            return;\n        }\n\n        for (let [_, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n                let functionPrototype = <FunctionPrototype>element;\n                if (functionPrototype.declaration.name.range.toString() == this.SERIALIZE_METHOD_NAME) {\n                    this.needImplSerialize = false;\n                }\n                if (functionPrototype.declaration.name.range.toString() == this.DESERIALIZE_METHOD_NAME) {\n                    this.needImplDeSerialize = false;\n                }\n                if (functionPrototype.declaration.name.range.toString() == this.PRIMARY_METHOD_NAME) {\n                    this.needImplPrimary = false;\n                }\n            }\n        }\n    }\n\n    checkFieldImplSerialize(typeNode: CommonTypeNode): bool {\n\n        var internalName = NodeUtil.getInternalName(typeNode);\n        var element: Element | null = this.classPrototype.program.elementsLookup.get(internalName);\n\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n            let hasImpl = SerializeHelper.hasImplSerialize((<ClassPrototype>element).declaration);\n            if (!hasImpl) {\n                throw new Error(`Class ${internalName} not implements the interface ${SerializeHelper.SERIALIZE_INTERFANCE}`);\n            }\n        }\n        return true;\n    }\n\n    /**Parse the class prototype and get serialize points */\n    getSerializePoints(): SerializePoint {\n\n        var serializePoint: SerializePoint = new SerializePoint(this.classPrototype.declaration.range);\n        serializePoint.classDeclaration = this.classPrototype.declaration;\n        serializePoint.needDeserialize = this.needImplDeSerialize;\n        serializePoint.needSerialize = this.needImplSerialize;\n        serializePoint.needPrimaryKey = this.needImplPrimary;\n\n        if (!this.classPrototype.instanceMembers) {\n            return serializePoint;\n        }\n\n        for (let [fieldName, element] of this.classPrototype.instanceMembers) {\n            if (element.kind == ElementKind.FIELD_PROTOTYPE) {\n\n                let fieldPrototype: FieldPrototype = <FieldPrototype>element;\n                let fieldDeclaration: FieldDeclaration = fieldPrototype.declaration;\n                let commonType: CommonTypeNode | null = fieldDeclaration.type;\n\n                if (commonType && commonType.kind == NodeKind.TYPE && !AstUtil.haveSpecifyDecorator(fieldDeclaration, DecoratorKind.IGNORE)) {\n                    let typeNode = <TypeNode>commonType;\n                    if (this.needImplDeSerialize && this.checkFieldImplSerialize(commonType)) {\n                        serializePoint.addSerializeExpr(this.serializeField(fieldName, typeNode));\n                    }\n\n                    if (this.needImplSerialize && this.checkFieldImplSerialize(commonType)) {\n                        serializePoint.addDeserializeExpr(this.deserializeField(fieldName, typeNode));\n                    }\n                }\n            }\n        }\n        serializePoint.addDeserializeExpr(`   }`);\n        serializePoint.addSerializeExpr(`   }`);\n\n        return serializePoint;\n    }\n\n    /** Implement the serrialize field */\n    serializeField(fieldName: string, typeNode: TypeNode): string {\n\n        var typeNodeHelper: VariableDeclaration = new VariableDeclaration(this.classPrototype.program, typeNode);\n        var body: Array<string> = new Array<string>();\n        var paramDeclaration: VariableDeclaration = typeNodeHelper.resolveAbiParameterType();\n\n        if (paramDeclaration.isArray) {\n            if (paramDeclaration.kind == VarialbeKind.NUMBER) {\n                body.push(`      ds.writeVector<${paramDeclaration.abiType}>(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.BOOL) {\n                body.push(`      ds.writeVector<u8>(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.STRING) {\n                body.push(`      ds.writeStringVector(this.${fieldName});`);\n            } else {\n                body.push(`      ds.writeComplexVector<${paramDeclaration.declareType}>(this.${fieldName});`);\n            }\n        } else {\n            if (paramDeclaration.kind == VarialbeKind.STRING) {\n                body.push(`      ds.writeString(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.BOOL) {\n                body.push(`      ds.write<u8>(this.${fieldName});`);\n            } else if (paramDeclaration.kind == VarialbeKind.NUMBER) {\n                body.push(`      ds.write<${paramDeclaration.declareType}>(this.${fieldName});`);\n            } else {\n                body.push(`      this.${fieldName}.serialize(ds);`);\n            }\n        }\n        return body.join(\"\\n\");\n    }\n\n    deserializeField(fieldName: string, type: TypeNode): string {\n\n        var typeNodeHelper: VariableDeclaration = new VariableDeclaration(this.classPrototype.program, type);\n\n        var body: Array<string> = new Array<string>();\n        var variableType: VariableDeclaration = typeNodeHelper.resolveAbiParameterType();\n\n        if (variableType.isArray) {\n            if (variableType.kind == VarialbeKind.NUMBER) {\n                body.push(`      this.${fieldName} = ds.readVector<${variableType.factType}>();`);\n            } else if (variableType.kind == VarialbeKind.BOOL) {\n                body.push(`      this.${fieldName} = ds.readVector<u8>();`);\n            } else if (variableType.kind == VarialbeKind.STRING) {\n                body.push(`      this.${fieldName} = ds.readStringVector();`);\n            } else {\n                body.push(`      this.${fieldName} = ds.readComplexVector<${variableType.baseType}>();`);\n            }\n        } else {\n            if (variableType.kind == VarialbeKind.STRING) {\n                body.push(`      this.${fieldName} = ds.readString();`);\n            } else if (variableType.kind == VarialbeKind.BOOL) {\n                body.push(`      this.${fieldName} = ds.read<u8>() != 0;`);\n            } else if (variableType.kind == VarialbeKind.NUMBER) {\n                body.push(`      this.${fieldName} = ds.read<${variableType.factType}>();`);\n            } else {\n                body.push(`      this.${fieldName}.deserialize(ds);`);\n            }\n        }\n        return body.join(\"\\n\");\n    }\n}\n\nexport class InsertPoint {\n\n    range: Range;\n    insertData: string;\n\n    get line(): i32 {\n        return this.range.line -1;\n    }\n    get normalizedPath(): string {\n        return this.range.source.normalizedPath;\n    }\n\n    get classpath(): string {\n        return this.range.source.normalizedPath + this.range.toString();\n    }\n\n    getInsertData(): string {\n        return this.insertData;\n    }\n\n    constructor(range: Range, insertData:string = \"\"){\n        this.range = range;\n        this.insertData = insertData;\n    }\n}\n\nexport class SerializePoint extends InsertPoint {\n\n    private serialize: Array<string> = new Array<string>();\n\n    private deserialize: Array<string> = new Array<string>();\n\n    private primaryKey: Array<string> = new Array<string>();\n\n    needSerialize: bool;\n\n    needDeserialize: bool;\n\n    needPrimaryKey: bool;\n\n    classDeclaration: ClassDeclaration\n\n    constructor(range: Range) {\n        super(range.atEnd);\n        this.serialize.push(`    serialize(ds: DataStream): void {`);\n        this.deserialize.push(`    deserialize(ds: DataStream): void {`);\n        this.primaryKey.push(`     primaryKey(): id_type {`);\n        this.primaryKey.push(`       return 0;`);\n        this.primaryKey.push(`    }`);\n    }\n\n    addSerializeExpr(expr: string): void {\n        this.serialize.push(expr);\n    }\n\n    addDeserializeExpr(expr: string): void {\n        this.deserialize.push(expr);\n    }\n\n    get classpath(): string{\n        return this.range.source.normalizedPath + this.range.toString() + this.classDeclaration.name.range.toString();\n    }\n\n    getInsertData(): string {\n        var insertData = [];\n\n        if (this.needDeserialize){\n            insertData.push(this.deserialize.join(\"\\n\"));\n        }\n        if (this.needSerialize) {\n            insertData.push(this.serialize.join(\"\\n\"));\n        }\n        if (this.needPrimaryKey) {\n            insertData.push(this.primaryKey.join(\"\\n\"))\n        }\n\n        return insertData.join(\"\\n\");\n    }\n}\n\nexport class SerializeHelper {\n\n    static SERIALIZE_INTERFANCE: string = \"Serializable\";\n    /**Program  */\n    program: Program;\n\n    serializeClassname: Set<string> = new Set<string>();\n\n    fileSerializeLookup: Map<string, Array<InsertPoint>> = new Map<string, Array<InsertPoint>>();\n\n    constructor(program: Program) {\n        this.program = program;\n    }\n\n    static hasImplSerialize(classDeclaration: ClassDeclaration): bool {\n        var classDeclareStr = classDeclaration.range.toString();\n        return classDeclareStr.includes(this.SERIALIZE_INTERFANCE) && classDeclareStr.includes(\"implements\");\n    }\n\n    resolve(): void {\n\n        for (let [_, element] of this.program.elementsLookup) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let classDeclaration: ClassDeclaration = (<ClassPrototype>element).declaration;\n                if (SerializeHelper.hasImplSerialize(classDeclaration)) {\n                    let generator: SerializeGenerator = new SerializeGenerator(<ClassPrototype>element);\n                    let serializePoint: SerializePoint = generator.getSerializePoints();\n\n                    console.log(`serializePoint.classpath: ${serializePoint.classpath}`);\n\n                    if (!this.serializeClassname.has(serializePoint.classpath)) {\n                        this.addSerializePoint(serializePoint);\n                        this.serializeClassname.add(serializePoint.classpath);\n                    }\n                }\n            }\n        }\n        this.sortSerializePoints();\n    }\n\n    /**\n     * Add the serialize point\n     * @param serialize The serialize point\n     */\n    addSerializePoint(serialize: InsertPoint): void {\n\n        var normalizedPath = serialize.normalizedPath;\n        var fileSerialize: Array<InsertPoint> | null = this.fileSerializeLookup.get(normalizedPath);\n        if (fileSerialize) {\n            fileSerialize.push(serialize);\n        } else {\n            fileSerialize = new Array<InsertPoint>();\n            fileSerialize.push(serialize);\n            this.fileSerializeLookup.set(normalizedPath, fileSerialize);\n        }\n    }\n\n    /**\n     * Sorting the serialize points by the line number\n     * the max line number is in front of.\n     */\n    sortSerializePoints(): void {\n        for (let [_, array] of this.fileSerializeLookup) {\n            let compartor = (a: InsertPoint, b: InsertPoint): i32 => {\n                return (b.line - a.line);\n            };\n            array.sort(compartor);\n        }\n    }\n\n}\n","import { DeclarationStatement, DecoratorKind } from \"../ast\";\n\nexport class AstUtil {\n\n    /**\n     * Have the specify decorator\n     */\n    static haveSpecifyDecorator(statement: DeclarationStatement, decorator: DecoratorKind): bool {\n        var decorators = statement.decorators;\n        if (!decorators) {\n            return false;\n        }\n        for (let _decorator of decorators) {\n            if (_decorator.decoratorKind == decorator) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n}","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              contextualTypeArguments,\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    {\n      let typeArgumentNodes = typeNode.typeArguments;\n      if (typeArgumentNodes) {\n        let numTypeArguments = typeArgumentNodes.length;\n        let paramTypes = new Array<Type>(numTypeArguments);\n        for (let i = 0; i < numTypeArguments; ++i) {\n          let paramType = this.resolveType( // reports\n            typeArgumentNodes[i],\n            contextualTypeArguments,\n            reportMode\n          );\n          if (!paramType) return null;\n          paramTypes[i] = paramType;\n        }\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\n          let instanceKey = typesToString(paramTypes);\n          if (instanceKey.length) {\n            localName += \"<\" + instanceKey + \">\";\n            globalName += \"<\" + instanceKey + \">\";\n          }\n        } else if (contextualTypeArguments) {\n          let placeholderType = contextualTypeArguments.get(globalName);\n          if (placeholderType) return placeholderType;\n        }\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        return type;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          null,\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType(\n          (<AssertionExpression>expression).toType,\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this.program, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = prototype.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(prototype.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (prototype.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Copy contextual type arguments so we don't pollute the original map\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    if (prototype.constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        prototype.constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\n      } else {\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let typeParameterNodes = prototype.declaration.typeParameters;\n      let expectedTypeArguments = typeParameterNodes.length;\n      assert(expectedTypeArguments > 0);\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\n      if (expectedTypeArguments != actualTypeArguments) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\n          );\n        }\n        return null;\n      }\n      resolvedTypeArguments = this.resolveTypeArguments(\n        typeParameterNodes,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return new binaryen.Module(this.ref).emitText();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return new binaryen.Module(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[ptr + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[ptr + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags,\n  Global,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case \"isManaged\": { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"memory.size\": { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // user-defined diagnostic macros\n\n    case \"ERROR\": {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case \"WARNING\": {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case \"INFO\": {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n\n    // gc\n\n    case \"iterateRoots\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  // __gc_allocate(size, markFn)\n  if (program.hasGC && classInstance.type.isManaged(program)) {\n    let allocateInstance = assert(program.gcAllocateInstance);\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset),\n        module.createI32(\n          ensureGCHook(compiler, classInstance)\n        )\n      ],\n      options.nativeSizeType\n    );\n\n  // memory.allocate(size)\n  } else {\n    let allocateInstance = program.memoryAllocateInstance;\n    if (!allocateInstance) {\n      program.error(\n        DiagnosticCode.Cannot_find_name_0,\n        reportNode.range, \"memory.allocate\"\n      );\n      return module.createUnreachable();\n    }\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset)\n      ],\n      options.nativeSizeType\n    );\n  }\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\");\n  if (!stringType) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsLookup.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"iv\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"iv\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for internals)\n  var members = classInstance.members;\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(0);\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  functionTable[gcHookIndex] = module.addFunction(\n    classInstance.internalName + \"~gc\",\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  return gcHookIndex;\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","import { ClassDeclaration, Statement, NodeKind, BlockStatement } from \"./ast\";\nimport { Program, ElementKind, ClassPrototype, FunctionPrototype } from \"./program\";\nimport { InsertPoint } from \"./serialize\";\n\nexport class Wrapper {\n\n    program: Program;\n\n    insertPoints: InsertPoint[];\n\n    constructor(program: Program) {\n        this.program = program;\n        this.insertPoints = [];\n        this.resolve();\n    }\n\n    resolve(): void {\n\n        for (let [_, element] of this.program.elementsLookup) {\n            if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n                let classPrototype = <ClassPrototype>element;\n                if (classPrototype.basePrototype) {\n                    this.processSuper(classPrototype);\n                }\n                // let classDeclaration: ClassDeclaration = classPrototype.declaration;\n            }\n        }\n    }\n\n    processSuper(classPrototype: ClassPrototype): void {\n        var constructorPrototype: FunctionPrototype | null = classPrototype.constructorPrototype;\n        if (!classPrototype.basePrototype) {\n            return;\n        }\n        var baseConstructorPrototype: FunctionPrototype | null = classPrototype.basePrototype.constructorPrototype;\n        if (!constructorPrototype) {\n            return;\n        }\n        if (!baseConstructorPrototype) {\n            return;\n        }\n        var concreteFunctionDeclaration = constructorPrototype.declaration;\n\n        if(concreteFunctionDeclaration.body) {\n            let stmt = concreteFunctionDeclaration.body;\n            var bodyStmt = concreteFunctionDeclaration.body.range.toString();\n            let endIndex = bodyStmt.indexOf(\";\");\n            let superCall = bodyStmt.substring(1, endIndex).trim();\n            let _superCall = `        this._${superCall};`;\n            if (stmt.kind == NodeKind.BLOCK) {\n                let blockStmt = <BlockStatement>stmt;\n                if (blockStmt.statements.length >= 1){\n                    this.insertPoints.push(new InsertPoint(blockStmt.statements[0].range.atEnd, _superCall));\n                }\n            }\n        }\n\n        var baseFunctionDeclaration = baseConstructorPrototype.declaration;\n        var body:Statement|null = baseFunctionDeclaration.body;\n\n        if (body) {\n         var content = body.range.toString();\n         var signature  = baseFunctionDeclaration.signature.range.toString();\n         var method =  this.createSuperCall(signature, content);\n        //  console.log(classPrototype.declaration.range.toString()  + \"line\" + classPrototype.declaration.range.line);\n         this.insertPoints.push(new InsertPoint(classPrototype.declaration.range.atEnd, method));\n        }\n    }\n    createSuperCall(signature: string, body: string): string {\n        return `    _super${signature}: void ${body}`;\n    }\n}","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\n      // FIXME: doesn't honor the actual externally visible name\n      this.visitElement(moduleExport.element);\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorator.range\n        );\n      }\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET | CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression?\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) return null;\n        expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos)); // is again callable\n      }\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n"],"sourceRoot":""}