{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/abi.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__23__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","abi_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","OperatorKind","QueuedExport","QueuedImport","TypeAlias","operatorKindFromString","str","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","DIV","REM","POW","AND","OR","XOR","EQ","NE","GT","GE","LT","LE","INVALID","ElementKind","CommonFlags","DecoratorFlags","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","arrayBufferViewPrototype","stringInstance","resolvedThisExpression","resolvedElementExpression","sources","__extends","toAbi","abi","Abi","resolve","getSource","normalizedPath","k","length","source","lookupSourceByPath","normalizedPathWithoutExtension","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedExtends","queuedImplements","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","assert","extendsType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","INTERFACE_PROTOTYPE","stringPrototype","has","Duplicate_identifier_0","programLevelInternalName","type","filterDecorators","decorators","acceptedFlags","presentFlags","NONE","decorator","IDENTIFIER","flag","decoratorKindToFlag","stringToDecoratorKind","Duplicate_decorator","Decorator_0_is_not_valid_here","checkGlobalOptions","parentNode","hasDecorator","GLOBAL","is","BUILTIN","isLibrary","SOURCE","globalName","namespace","fileLevelInternalName","simpleName","ClassPrototype","SEALED","UNMANAGED","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Range","join","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","decoratorFlags","OPERATOR","INLINE","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","decoratorKind","DecoratorKind","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","toString","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","localName","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","target","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","elementExpression","indexedGet","lookupOverload","Index_signature_is_missing_in_type_0","base","resolveElementAccess","elementAccess","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","explicitLocal","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","PROPERTYACCESS","ELEMENTACCESS","CALL","FUNCTION_PROTOTYPE","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","DiagnosticEmitter","Element","program","flags","NAMESPACE","ENUM","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","local","inheritedTypeArguments_2","inheritedTypeArguments_2_1","parameterName","getParameterName","Flow","create","addLocal","getTempLocal","wrapped","temps","toNativeType","NativeType","I32","I64","F32","F64","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_3","inheritedTypeArguments_3_1","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","instanceProperty","partialGetterPrototype","partialSetterPrototype","_j","_k","_l","operatorInstance","operatorPartial","asClass","inheritedTypeArguments_4","inheritedTypeArguments_4_1","baseType","isAssignableTo","current","unchecked","uncheckedOverload","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","enterBranchOrScope","branch","slice","leaveBranchOrScope","_b","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritMutual","left","right","leftExt","rightExt","thisExt","minLength","min","canOverflow","expr","operand","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","program_1","tokenizer_1","Token","util_1","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","CUSTOM","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","ACTION","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","asGlobal","__export","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","None","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeFunction","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","_BinaryenFunctionGetBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","g","eval","e","window","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","cachedNullableType","ceil","nonNullableType","computeSmallIntegerShift","targetType","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","features","hasFeature","feature","Feature","ConversionKind","WrapMode","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argcVar","argcSet","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureTrampoline","ensureArgcSet","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","staticMembers","setter","ctorInstance","_e","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","count","Nop","blockFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysTrue","compileExpressionRetainType","condPre","incrExpr","bodyExpr","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifFalseFlow","ifTrueExpr","ifFalseExpr","context","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","fallsThrough","nextLabel","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","precomputeExpression","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","argumentExpressions","thisArg","compileCallDirect","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueExpr","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","compileCallInlineUnchecked","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenExpr","ifElseExpr","ifThenType","ifElseType","ifThenAllocates","ifElseAllocates","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","compileAllocate","field","nativeFieldType","builtinsFile","Parser","backlog","seenlog","tryParseSignatureIsSignature","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","ctor","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Break","Switch","CallImport","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Return","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","AbiStruct","fields","newTypeName","wasmType","new_type_name","Action","SourceNode","sourceNode","sourceName","importNames","abiInfo","structs","actions","typeAliasLookup","typeAliasSet","elementLookup","importElements","getStruct","methodName","struct","typeKind","addAbiTypeAlias","typeKindName","checkFuncPrototypeDecorator","funcPrototype","decorators_1","decorators_1_1","isActionFuncPrototype","funcType","resolveClzDispatcher","clzPrototype","isActionClz","contractName","contractVarName","resolveFunctionPrototype","funcName","iIndex","sIndex","clzName","sourcePath","checkAndImportElements","elementName","sourceNode_1","isExportStatement","statements_1","statements_1_1","resolveFuncDispatcher","funcDispatcher","abiStruct","dispatchBuffer","forEach","dispatch","assemblyDispatch","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","compiler","evaluateConstantType","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","abort","deferASM","deferASMCall","typeArgument","valueType","allocateInternalName","allocatePrototype","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","y","sign","isTrueish","undefined","fromCodePoint","Number","isInteger","arg","isArray"],"mappings":"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AAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__23__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToString\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeNode,\n  TypeParameterNode,\n  ParameterKind,\n  SignatureNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  AssertionExpression,\n  ElementAccessExpression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  StringLiteralExpression,\n  CallExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  stringToDecoratorKind\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\n\n\nimport {\n  Abi\n} from \"./abi\";\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  isReExport: bool;\n  referencedName: string;\n  member: ExportMember;\n}\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  internalName: string;\n  referencedName: string;\n  referencedNameAlt: string;\n  declaration: ImportDeclaration;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n  INDEXED_GET,\n  INDEXED_SET,\n  UNCHECKED_INDEXED_GET,\n  UNCHECKED_INDEXED_SET,\n  ADD,\n  SUB,\n  MUL,\n  DIV,\n  REM,\n  POW,\n  AND,\n  OR,\n  XOR,\n  EQ,\n  NE,\n  GT,\n  GE,\n  LT,\n  LE\n}\n\nfunction operatorKindFromString(str: string): OperatorKind {\n  switch (str) {\n    case \"[]\" : return OperatorKind.INDEXED_GET;\n    case \"[]=\": return OperatorKind.INDEXED_SET;\n    case \"{}\" : return OperatorKind.UNCHECKED_INDEXED_GET;\n    case \"{}=\": return OperatorKind.UNCHECKED_INDEXED_SET;\n    case \"+\"  : return OperatorKind.ADD;\n    case \"-\"  : return OperatorKind.SUB;\n    case \"*\"  : return OperatorKind.MUL;\n    case \"/\"  : return OperatorKind.DIV;\n    case \"%\"  : return OperatorKind.REM;\n    case \"**\" : return OperatorKind.POW;\n    case \"&\"  : return OperatorKind.AND;\n    case \"|\"  : return OperatorKind.OR;\n    case \"^\"  : return OperatorKind.XOR;\n    case \"==\" : return OperatorKind.EQ;\n    case \"!=\" : return OperatorKind.NE;\n    case \">\"  : return OperatorKind.GT;\n    case \">=\" : return OperatorKind.GE;\n    case \"<\"  : return OperatorKind.LT;\n    case \"<=\" : return OperatorKind.LE;\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,Element> = new Map();\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** ArrayBufferView prototype reference. */\n  arrayBufferViewPrototype: InterfacePrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n\n  /** Target expression of the previously resolved property or element access. */\n  resolvedThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  resolvedElementExpression : Expression | null = null;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.sources = [];\n  }\n\n\n  toAbi(): Abi {\n    let abi = new Abi(this);\n    abi.resolve();\n    return abi;\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\n      if (element) {\n        this.elementsLookup.set(queuedImport.internalName, element);\n        queuedImports.splice(i, 1);\n      } else {\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\n          this.elementsLookup.set(queuedImport.internalName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            queuedImport.declaration.range,\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\n            queuedImport.declaration.externalName.text\n          );\n          ++i;\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.referencedName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = this.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    var globalAliases = options.globalAliases;\n    if (globalAliases) {\n      for (let [alias, name] of globalAliases) {\n        let element = this.elementsLookup.get(name); // TODO: error? has no source range\n        if (element) this.elementsLookup.set(alias, element);\n      }\n    }\n\n    // register 'Array'\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\n    if (arrayPrototype) {\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\n    }\n\n    // register 'ArrayBufferView'\n    var arrayBufferViewPrototype = this.elementsLookup.get(\"ArrayBufferView\");\n    if (arrayBufferViewPrototype) {\n      assert(arrayBufferViewPrototype.kind == ElementKind.INTERFACE_PROTOTYPE);\n      this.arrayBufferViewPrototype = <InterfacePrototype>arrayBufferViewPrototype;\n    }\n\n    // register 'String'\n    var stringPrototype = this.elementsLookup.get(\"String\");\n    if (stringPrototype) {\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\n      if (stringInstance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = stringInstance;\n          this.typesLookup.set(\"string\", stringInstance.type);\n        }\n      }\n    }\n  }\n\n  /** Tries to resolve an import by traversing exports and queued exports. */\n  private tryResolveImport(\n    referencedName: string,\n    queuedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(referencedName)) return element;\n      let queuedExport = queuedExports.get(referencedName);\n      if (!queuedExport) return null;\n      if (queuedExport.isReExport) {\n        referencedName = queuedExport.referencedName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.referencedName);\n    } while (true);\n  }\n\n  private filterDecorators(decorators: DecoratorNode[], acceptedFlags: DecoratorFlags): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.name.kind == NodeKind.IDENTIFIER) {\n        let name = (<IdentifierExpression>decorator.name).text;\n        let kind = stringToDecoratorKind(name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, name\n            );\n          } else if (presentFlags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, name\n            );\n          } else {\n            presentFlags |= flag;\n          }\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Processes global options, if present. */\n  private checkGlobalOptions(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (declaration.range.source.is(CommonFlags.BUILTIN)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n        if (element.is(CommonFlags.BUILTIN)) element.internalName = globalName;\n      }\n    }\n  }\n\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.filterDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"class member expected\");\n        }\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.filterDecorators(decorators, DecoratorFlags.NONE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.filterDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n      // TBD: no need to mark as MODULE_EXPORT\n    }\n  }\n\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.filterDecorators(decorators,\n        DecoratorFlags.OPERATOR |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    // handle operator annotations. operators are either instance methods taking\n    // a second argument of the instance's type or static methods taking two\n    // arguments of the instance's type. return values vary depending on the\n    // operation.\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\n          if (numArgs == 1) {\n            let firstArg = (<Expression[]>decorator.arguments)[0];\n            if (\n              firstArg.kind == NodeKind.LITERAL &&\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n            ) {\n              let kind = operatorKindFromString((<StringLiteralExpression>firstArg).value);\n              if (kind == OperatorKind.INVALID) {\n                this.error(\n                  DiagnosticCode.Operation_not_supported,\n                  firstArg.range\n                );\n              } else {\n                let overloads = classPrototype.overloadPrototypes;\n                if (overloads.has(kind)) {\n                  this.error(\n                    DiagnosticCode.Duplicate_function_implementation,\n                    firstArg.range\n                  );\n                } else {\n                  prototype.operatorKind = kind;\n                  overloads.set(kind, prototype);\n                }\n              }\n            } else {\n              this.error(\n                DiagnosticCode.String_literal_expected,\n                firstArg.range\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"1\", numArgs.toString(0)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.filterDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, element);\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobalOptions(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    name: string,\n    element: Element,\n    identifier: IdentifierExpression\n  ): void {\n    this.fileLevelExports.set(name, element);\n    if (identifier.range.source.isLibrary) { // add global alias\n      if (this.elementsLookup.has(identifier.text)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          identifier.range, identifier.text\n        );\n      } else {\n        element.internalName = identifier.text;\n        this.elementsLookup.set(identifier.text, element);\n      }\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.referencedName = referencedName; // -> internal name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.referencedName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.referencedName = referencedName; // -> export name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.filterDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n      this.error( // TODO\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(referencedName)) {\n      this.elementsLookup.set(internalName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.internalName = internalName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.referencedName = referencedName; // try exact first\n      queuedImport.referencedNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.referencedName = referencedName; // try exact first\n      queuedImport.referencedNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration;\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var prototype = new InterfacePrototype(\n      this,\n      declaration.name.text,\n      internalName,\n      declaration,\n      decorators\n        ? this.filterDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, prototype);\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobalOptions(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobalOptions(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(internalName, namespace);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.filterDecorators(decorators,\n              DecoratorFlags.GLOBAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(internalName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(internalName, global);\n        }\n      }\n      this.checkGlobalOptions(global, declaration);\n    }\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameterTypes;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(\n        returnTypeNode,\n        contextualTypeArguments,\n        reportNotFound\n      );\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportNotFound: bool = true\n  ): Type | null {\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\n      if (!signature) return null;\n      return Type.u32.asFunction(signature);\n    }\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\n\n    var element: Element | null;\n\n    // check file-global / program-global element\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\n            typeNode.typeArguments,\n            contextualTypeArguments,\n            null\n          ); // reports\n          return instance ? instance.type : null;\n        }\n      }\n    }\n\n    // check (global) type alias\n    var alias = this.typeAliases.get(simpleName);\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\n\n    // resolve parameters\n    if (typeNode.typeArguments) {\n      let k = typeNode.typeArguments.length;\n      let paramTypes = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let paramType = this.resolveType( // reports\n          typeNode.typeArguments[i],\n          contextualTypeArguments,\n          reportNotFound\n        );\n        if (!paramType) return null;\n        paramTypes[i] = paramType;\n      }\n\n      if (k) { // can't be a placeholder if it has parameters\n        let instanceKey = typesToString(paramTypes);\n        if (instanceKey.length) {\n          localName += \"<\" + instanceKey + \">\";\n          globalName += \"<\" + instanceKey + \">\";\n        }\n      } else if (contextualTypeArguments) {\n        let placeholderType = contextualTypeArguments.get(globalName);\n        if (placeholderType) return placeholderType;\n      }\n    }\n\n    var type: Type | null;\n\n    // check file-global / program-global type\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\n      return type;\n    }\n\n    if (reportNotFound) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        true\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    contextualFunction: Function | null,\n    contextualEnum: Enum | null = null\n  ): Element | null {\n    var name = identifier.text;\n\n    var element: Element | null;\n    var namespace: Element | null;\n\n    // check siblings\n    if (contextualEnum) {\n\n      if (\n        contextualEnum.members &&\n        (element = contextualEnum.members.get(name)) &&\n        element.kind == ElementKind.ENUMVALUE\n      ) {\n        this.resolvedThisExpression = null;\n        this.resolvedElementExpression = null;\n        return element; // ENUMVALUE\n      }\n\n    } else if (contextualFunction) {\n\n      // check locals\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\n        this.resolvedThisExpression = null;\n        this.resolvedElementExpression = null;\n        return element; // LOCAL\n      }\n\n      // check outer scope locals\n      // let outerScope = contextualFunction.outerScope;\n      // while (outerScope) {\n      //   if (element = outerScope.getScopedLocal(name)) {\n      //     let scopedLocal = <Local>element;\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\n      //     return resolvedElement.set(scopedGlobal);\n      //   }\n      //   outerScope = outerScope.currentFunction.outerScope;\n      // }\n\n      // search contextual parent namespaces if applicable\n      if (namespace = contextualFunction.prototype.parent) {\n        do {\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return element; // LOCAL\n          }\n        } while (namespace = namespace.parent);\n      }\n    }\n\n    // search current file\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.resolvedThisExpression = null;\n      this.resolvedElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = this.elementsLookup.get(name)) {\n      this.resolvedThisExpression = null;\n      this.resolvedElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    this.error(\n      DiagnosticCode.Cannot_find_name_0,\n      identifier.range, name\n    );\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let classReference = (<VariableLikeElement>target).type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolvedElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.resolvedThisExpression = targetExpression;\n            this.resolvedElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        let member: Element | null;\n        if (members && (member = members.get(propertyName))) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = null;\n          return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            elementAccess.range, (<Class>target).internalName\n          );\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.resolvedThisExpression = targetExpression;\n          this.resolvedElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      targetExpression.range\n    );\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.resolvedThisExpression = null;\n          this.resolvedElementExpression = null;\n          return parent;\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.resolvedThisExpression = null;\n            this.resolvedElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.resolvedThisExpression = null;\n          this.resolvedElementExpression = null;\n          return parent;\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.resolvedThisExpression = expression;\n            this.resolvedElementExpression = null;\n            return this.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            targetExpression.range, target.internalName\n          );\n          return null;\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return null;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE\n}\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is a builtin. */\n  BUILTIN = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is an operator overload. */\n  OPERATOR = 1 << 1,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 2,\n  /** Is a sealed class. */\n  SEALED = 1 << 3,\n  /** Is always inlined. */\n  INLINE = 1 << 4\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR: return DecoratorFlags.OPERATOR;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A namespace. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(lo: i32, hi: i32): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = i64_new(lo, hi);\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    functionTypeArguments: Type[] | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = this.declaration;\n    var isInstance = this.is(CommonFlags.INSTANCE);\n    var classPrototype = this.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = this.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(this.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          functionTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameterTypes;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (this.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = this.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      this,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    this.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\n    assert(this.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(this.classPrototype);\n\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\n\n    var simpleName = this.simpleName;\n    var partialKey = typesToString(classTypeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      this.declaration,\n      classPrototype,\n      this.decoratorFlags\n    );\n    partialPrototype.flags = this.flags;\n    partialPrototype.operatorKind = this.operatorKind;\n    partialPrototype.classTypeArguments = classTypeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments( // reports\n        assert(this.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\n  resolveBuiltinTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null\n  ): Type[] | null {\n    assert(this.is(CommonFlags.BUILTIN));\n    var resolvedTypeArguments: Type[] | null = null;\n    if (typeArgumentNodes) {\n      let k = typeArgumentNodes.length;\n      resolvedTypeArguments = new Array<Type>(k);\n      for (let i = 0; i < k; ++i) {\n        let resolvedType = this.program.resolveType( // reports\n          typeArgumentNodes[i],\n          contextualTypeArguments,\n          true\n        );\n        if (!resolvedType) return null;\n        resolvedTypeArguments[i] = resolvedType;\n      }\n    }\n    return resolvedTypeArguments;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\n  resolve(\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = this.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // inherit contextual type arguments\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    var declaration = this.declaration;\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        this.program.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          declaration.extendsType.range\n        );\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        this.program.error(\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n          declaration.extendsType.range, baseClass.internalName\n        );\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        this.program.error(\n          DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n          Range.join(declaration.name.range, declaration.extendsType.range)\n        );\n        return null;\n      }\n    }\n\n    // override call specific contextual type arguments if provided\n    var i: i32, k: i32;\n    if (typeArguments) {\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      for (i = 0; i < k; ++i) {\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else if (declaration.typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n\n    var simpleName = this.simpleName;\n    var internalName = this.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    this.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      memoryOffset = baseClass.currentMemoryOffset;\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n    }\n\n    // Resolve constructor\n    if (this.constructorPrototype) {\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\n    }\n\n    // Resolve instance members\n    if (this.instanceMembers) {\n      for (let member of this.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            if (!fieldDeclaration.type) {\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\n            }\n            let fieldType = this.program.resolveType( // reports\n              fieldDeclaration.type,\n              instance.contextualTypeArguments\n            );\n            if (fieldType) {\n              let fieldInstance = new Field(\n                <FieldPrototype>member,\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n                fieldType,\n                fieldDeclaration,\n                instance\n              );\n              switch (fieldType.byteSize) { // align\n                case 1: break;\n                case 2: {\n                  if (memoryOffset & 1) ++memoryOffset;\n                  break;\n                }\n                case 4: {\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\n                  break;\n                }\n                case 8: {\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\n                  break;\n                }\n                default: assert(false);\n              }\n              fieldInstance.memoryOffset = memoryOffset;\n              memoryOffset += fieldType.byteSize;\n              instance.members.set(member.simpleName, fieldInstance);\n            }\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\n            if (partialPrototype) {\n              partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n              instance.members.set(member.simpleName, partialPrototype);\n            }\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype);\n            let setterPrototype = (<Property>member).setterPrototype;\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              this\n            );\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype.internalName = (\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\n            );\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype.internalName = (\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\n              );\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, prototype] of this.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = prototype.resolvePartial(typeArguments); // reports\n        if (!operatorPartial) continue;\n        operatorInstance = operatorPartial.resolve(); // reports\n      } else {\n        operatorInstance = prototype.resolve(); // reports\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\n    return instance;\n  }\n\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\n  resolveUsingTypeArguments(\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    alternativeReportNode: Node | null\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (this.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.program.resolveTypeArguments(\n        this.declaration.typeParameters,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        alternativeReportNode\n      );\n      if (!resolvedTypeArguments) return null;\n    } else {\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\n    }\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always throws. */\n  THROWS = 1 << 1,\n  /** This branch always breaks. */\n  BREAKS = 1 << 2,\n  /** This branch always continues. */\n  CONTINUES = 1 << 3,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 4,\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 5,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 6,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 7,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 8,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 9,\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 10,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 11,\n  /** This branch returns a properly wrapped value. */\n  RETURNS_WRAPPED = 1 << 12\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Enters a new branch or scope and returns the new flow. */\n  enterBranchOrScope(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Leaves the current branch or scope and returns the parent flow. */\n  leaveBranchOrScope(): Flow {\n    var parent = assert(this.parent);\n\n    // Free block-scoped locals\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n\n    // Propagate conditionaal flags to parent\n    if (this.is(FlowFlags.RETURNS)) {\n      parent.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (this.is(FlowFlags.THROWS)) {\n      parent.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\n      parent.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\n      parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (this.is(FlowFlags.ALLOCATES)) {\n      parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. on inner block). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (\n      FlowFlags.RETURNS |\n      FlowFlags.RETURNS_WRAPPED |\n      FlowFlags.THROWS |\n      FlowFlags.BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.ALLOCATES\n    );\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. on then/else branches). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // flags set in both arms\n    this.flags |= left.flags & right.flags & (\n      FlowFlags.RETURNS |\n      FlowFlags.RETURNS_WRAPPED |\n      FlowFlags.THROWS |\n      FlowFlags.BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.ALLOCATES\n    );\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(\n      left.wrappedLocals,\n      right.wrappedLocals\n    );\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./program\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameterTypes = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    expression: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = expression; expression.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = expression.kind == NodeKind.IDENTIFIER\n      ? stringToDecoratorKind((<IdentifierExpression>expression).text)\n      : DecoratorKind.CUSTOM;\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[],\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameterTypes: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  ACTION\n}\n\n/** Returns the decorator kind represented by the specified string. */\nexport function stringToDecoratorKind(str: string): DecoratorKind {\n  switch (str) {\n    case \"global\": return DecoratorKind.GLOBAL;\n    case \"operator\": return DecoratorKind.OPERATOR;\n    case \"unmanaged\": return DecoratorKind.UNMANAGED;\n    case \"sealed\": return DecoratorKind.SEALED;\n    case \"inline\": return DecoratorKind.INLINE;\n    case \"action\": return DecoratorKind.ACTION\n    default: return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    this.internalPath = mangleInternalPath(this.normalizedPath);\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members. */\n  members: ExportMember[];\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Tests if a specific decorator is present within the specified decorators. */\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let expression = decorators[i].name;\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32 = _BinaryenTypeInt32(),\n  I64 = _BinaryenTypeInt64(),\n  F32 = _BinaryenTypeFloat32(),\n  F64 =  _BinaryenTypeFloat64(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = allocate_memory(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      free_memory(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      free_memory(cStr);\n      free_memory(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      free_memory(cArr);\n      free_memory(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      free_memory(cStr3);\n      free_memory(cStr2);\n      free_memory(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      free_memory(cArr3);\n      free_memory(cArr2);\n      free_memory(cArr1);\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\n      free_memory(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocPtrArray(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      free_memory(cArr);\n      for (let i = numNames; i >= 0; --i) {\n        free_memory(names[i]);\n      }\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0;\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeFunction(func: FunctionRef): void {\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) free_memory(cStr);\n      if (binaryPtr) free_memory(binaryPtr);\n      if (sourceMapPtr) free_memory(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    free_memory(this.cachedByValue);\n    free_memory(this.cachedTemporaryName);\n    free_memory(this.cachedPrecomputeName);\n    free_memory(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      free_memory(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      free_memory(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = allocate_memory(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = allocate_memory(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  switch (text.length && text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          ) {\n            ++this.pos;\n          }\n          break;\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        while (--this.tokenPos > posBefore) {\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if (c < CharCode._0 || c > CharCode._9) break;\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the int type of this type. Defaults to `Type.i32` if this is not an int type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: return this;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (currentClass = this.classReference) {\n          if (targetClass = target.classReference) {\n            return currentClass.isAssignableTo(targetClass);\n          }\n        } else if (currentFunction = this.signatureReference) {\n          if (targetFunction = target.signatureReference) {\n            return currentFunction.isAssignableTo(targetFunction);\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: {\n        let functionType = this.signatureReference;\n        return kindOnly || !functionType ? \"u32\" : functionType.toString(true);\n      }\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: {\n        let classType = this.classReference;\n        return kindOnly || !classType ? \"usize\" : classType.toString();\n      }\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    default: return \"\";\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate as compileBuiltinAllocate,\n  compileAbort as compileBuiltinAbort\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getFunctionBody,\n  getGetLocalIndex\n} from \"./module\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  CommonFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags,\n\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./program\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, does not set up a memory. */\n  noMemory: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Outer function in compilation, if compiling a function expression. */\n  outerFunction: Function | null = null;\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunction: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[] = [];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: Function[] = [];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      max(options.memoryBase, options.usizeType.byteSize) // leave space for `null`\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function wrapping top-level statements, of all files.\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n    var startFunctionInstance = new Function(\n      <FunctionPrototype>startFunctionPrototype,\n      startFunctionPrototype.internalName,\n      new Signature([], Type.void)\n    );\n    this.startFunction = startFunctionInstance;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty\n    var startFunctionBody = this.startFunctionBody;\n    if (startFunctionBody.length) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      module.setStart(funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    if (!options.noMemory) {\n      let memoryOffset = this.memoryOffset;\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n      this.memoryOffset = memoryOffset;\n      if (options.isWasm64) {\n        module.addGlobal(\n          \"HEAP_BASE\",\n          NativeType.I64,\n          false,\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          \"HEAP_BASE\",\n          NativeType.I32,\n          false,\n          module.createI32(i64_low(memoryOffset))\n        );\n      }\n\n      // determine initial page size\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\n      module.setMemory(\n        i64_low(pages),\n        this.options.isWasm64\n          ? Module.MAX_MEMORY_WASM64\n          : Module.MAX_MEMORY_WASM32,\n        this.memorySegments,\n        options.target,\n        \"memory\"\n      );\n    }\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    var functionTableExported = false;\n    if (functionTableSize) {\n      let entries = new Array<FunctionRef>(functionTableSize);\n      for (let i = 0; i < functionTableSize; ++i) {\n        entries[i] = functionTable[i].ref;\n      }\n      module.setFunctionTable(entries);\n      module.addTableExport(\"0\", \"table\");\n      functionTableExported = true;\n    }\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\n    }\n\n    return module;\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunction = this.startFunction;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunction;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.program.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            Type.void,\n            ConversionKind.NONE,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        module.addGlobalImport(\n          global.internalName,\n          global.parent\n            ? global.parent.simpleName\n            : \"env\",\n          global.simpleName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // inlined constant can be compiled as-is\n    if (global.is(CommonFlags.INLINED)) {\n      initExpr = this.compileInlineConstant(global, global.type, true);\n\n    } else {\n\n      // evaluate initializer if present\n      if (declaration && declaration.initializer) {\n        if (!initExpr) {\n          initExpr = this.compileExpression(\n            declaration.initializer,\n            global.type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          );\n        }\n\n        // check if the initializer is constant\n        if (getExpressionId(initExpr) != ExpressionId.Const) {\n\n          // if a constant global, check if the initializer becomes constant after precompute\n          if (isConstant) {\n            initExpr = this.precomputeExpressionRef(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                declaration.range\n              );\n              initializeInStart = true;\n            }\n          } else {\n            initializeInStart = true;\n          }\n        }\n\n      // initialize to zero if there's no initializer\n      } else {\n        initExpr = global.type.toNativeZero(module);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile as-is\n\n      if (isConstant) {\n        let exprType = getExpressionType(initExpr);\n        switch (exprType) {\n          case NativeType.I32: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n            break;\n          }\n          case NativeType.I64: {\n            global.constantValueKind = ConstantValueKind.INTEGER;\n            global.constantIntegerValue = i64_new(\n              getConstValueI64Low(initExpr),\n              getConstValueI64High(initExpr)\n            );\n            break;\n          }\n          case NativeType.F32: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = getConstValueF32(initExpr);\n            break;\n          }\n          case NativeType.F64: {\n            global.constantValueKind = ConstantValueKind.FLOAT;\n            global.constantFloatValue = getConstValueF64(initExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            return false;\n          }\n        }\n        global.set(CommonFlags.INLINED); // inline the value from now on\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\n          module.addGlobal(internalName, nativeType, false, initExpr);\n          module.addGlobalExport(internalName, mangleExportName(global));\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\n          module.addGlobal(internalName, nativeType, false, initExpr);\n        }\n\n      } else /* mutable */ {\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\n      }\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        if (val.is(CommonFlags.INLINED)) {\n          if (element.declaration.isTopLevelExport) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              false, // constant\n              module.createI32(val.constantValue)\n            );\n          }\n        } else {\n          let initExpr: ExpressionRef;\n          if (valueDeclaration.value) {\n            initExpr = this.compileExpression(\n              <Expression>valueDeclaration.value,\n              Type.i32,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            );\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              initExpr = this.precomputeExpressionRef(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                if (element.is(CommonFlags.CONST)) {\n                  this.warning(\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                    valueDeclaration.range\n                  );\n                }\n                initInStart = true;\n              }\n            }\n          } else if (previousValue == null) {\n            initExpr = module.createI32(0);\n          } else if (previousValue.is(CommonFlags.INLINED)) {\n            initExpr = module.createI32(previousValue.constantValue + 1);\n          } else {\n            // in TypeScript this errors with TS1061, but actually we can do:\n            initExpr = module.createBinary(BinaryOp.AddI32,\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\n              module.createI32(1)\n            );\n            if (element.is(CommonFlags.CONST)) {\n              this.warning(\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n          if (initInStart) {\n            module.addGlobal(\n              val.internalName,\n              NativeType.I32,\n              true, // mutable\n              module.createI32(0)\n            );\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            if (getExpressionType(initExpr) == NativeType.I32) {\n              val.constantValue = getConstValueI32(initExpr);\n              val.set(CommonFlags.INLINED);\n            } else {\n              assert(false);\n              val.constantValue = 0;\n            }\n          }\n        }\n        previousValue = <EnumValue>val;\n\n        // export values if the enum is exported\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\n          if (member.is(CommonFlags.INLINED) || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n            module.addGlobalExport(member.internalName, mangleExportName(member));\n          } else if (valueDeclaration) {\n            this.warning(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              valueDeclaration.range\n            );\n          }\n        }\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  private ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || instance.internalName == \"abort\");\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching but still compile as-is\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        stmt = this.compileStatement(body);\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmt = module.createBlock(null, [\n                stmt,\n                module.createGetLocal(0, nativeSizeType)\n              ], nativeSizeType);\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmt = module.createBlock(null, [\n                stmt,\n                module.createTeeLocal(0,\n                  this.makeConditionalAllocate(<Class>parent, declaration.name)\n                )\n              ], nativeSizeType);\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n\n      // create the function import\n      let parent = instance.prototype.parent;\n      ref = module.addFunctionImport(\n        instance.internalName,\n        parent\n          ? parent.simpleName\n          : \"env\",\n        instance.simpleName,\n        typeRef\n      );\n    }\n\n    // check module-level export\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\n      if (signature.requiredParameters < signature.parameterTypes.length) {\n        // export the trampoline if the function takes optional parameters\n        instance = this.ensureTrampoline(instance);\n        this.ensureArgcSet();\n      }\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var module = this.module;\n    var exports = this.program.fileLevelExports;\n    var members = statement.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let internalExportName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        member.externalName.text\n      );\n      let element = exports.get(internalExportName);\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            let functionInstance = this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n            if (functionInstance) {\n              let functionDeclaration = functionInstance.prototype.declaration;\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\n            let globalDeclaration = (<Global>element).declaration;\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\n              if ((<Global>element).is(CommonFlags.INLINED)) {\n                module.addGlobalExport(element.internalName, member.externalName.text);\n              } else {\n                this.warning(\n                  DiagnosticCode.Cannot_export_a_mutable_global,\n                  member.range\n                );\n              }\n            }\n          }\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = prototype.resolveUsingTypeArguments( // reports\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\n            let module = this.module;\n            let name = (<Field>element).simpleName;\n            let type = (<Field>element).type;\n            let nativeType = type.toNativeType();\n            let offset = (<Field>element).memoryOffset;\n            let usizeType = this.options.usizeType;\n            let nativeSizeType = this.options.nativeSizeType;\n\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\n            module.addFunction(\n              getterName,\n              this.ensureFunctionType(null, type, usizeType),\n              null,\n              module.createLoad(\n                type.byteSize,\n                type.is(TypeFlags.SIGNED),\n                module.createGetLocal(0, nativeSizeType),\n                nativeType,\n                offset\n              )\n            );\n            module.addFunctionExport(getterName, getterName);\n\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\n            if (element.is(CommonFlags.READONLY)) break;\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\n            module.addFunction(\n              setterName,\n              this.ensureFunctionType([ type ], Type.void, usizeType),\n              null,\n              module.createStore(\n                type.byteSize,\n                module.createGetLocal(0, nativeSizeType),\n                module.createGetLocal(1, nativeType),\n                nativeType,\n                offset\n              )\n            );\n            module.addFunctionExport(setterName, setterName);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunction) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    var count = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      if (getExpressionId(stmt) != ExpressionId.Nop) {\n        stmts[count++] = stmt;\n        if (flow.isAny(FlowFlags.BREAKS | FlowFlags.CONTINUES | FlowFlags.RETURNS)) break;\n      }\n    }\n    stmts.length = count;\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n\n    // Not actually a branch, but can contain its own scoped variables.\n    var blockFlow = this.currentFunction.flow.enterBranchOrScope();\n    this.currentFunction.flow = blockFlow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts, NativeType.None);\n\n    // Switch back to the parent flow\n    var parentFlow = blockFlow.leaveBranchOrScope();\n    this.currentFunction.flow = parentFlow;\n    parentFlow.inherit(blockFlow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it?\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.leaveBranchOrScope();\n    currentFunction.leaveBreakContext();\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        flow.isAny(FlowFlags.BREAKS | FlowFlags.CONTINUES | FlowFlags.RETURNS)\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ], NativeType.None);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : module.createNop();\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = true;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = this.precomputeExpressionRef(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : module.createNop();\n    var bodyExpr = this.compileStatement(statement.statement);\n\n    // Switch back to the parent flow\n    var parentFlow = flow.leaveBranchOrScope();\n    if (alwaysTrue) parentFlow.inherit(flow);\n    currentFunction.flow = parentFlow;\n    currentFunction.leaveBreakContext();\n\n    var expr = module.createBlock(breakLabel, [\n      initExpr,\n      module.createLoop(continueLabel, module.createBlock(null, [\n        module.createIf(condExpr, module.createBlock(null, [\n          bodyExpr,\n          incrExpr,\n          module.createBreak(continueLabel)\n        ], NativeType.None))\n      ], NativeType.None))\n    ], NativeType.None);\n\n    // If the loop is guaranteed to run and return, append a hint for Binaryen\n    if (flow.isAny(FlowFlags.RETURNS | FlowFlags.THROWS)) {\n      expr = module.createBlock(null, [\n        expr,\n        module.createUnreachable()\n      ]);\n    }\n    return expr;\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var ifTrueFlow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.leaveBranchOrScope();\n\n    var ifFalseFlow: Flow | null;\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      ifFalseFlow = currentFunction.flow.enterBranchOrScope();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      let parentFlow = ifFalseFlow.leaveBranchOrScope();\n      currentFunction.flow = parentFlow;\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n    var cases = statement.cases;\n    var numCases = cases.length;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = currentFunction.flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let fallsThrough = i != numCases - 1;\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.is(FlowFlags.BREAKS | FlowFlags.CONTINUES | FlowFlags.RETURNS)) break;\n        }\n      }\n      stmts.length = count;\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) alwaysReturns = false; // ignore fall-throughs\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS_WRAPPED))) alwaysReturnsWrapped = false; // ignore fall-throughs\n      if (!(fallsThrough || flow.is(FlowFlags.THROWS))) alwaysThrows = false;\n      if (!(fallsThrough || flow.is(FlowFlags.ALLOCATES))) alwaysAllocates = false;\n\n      // Switch back to the parent flow\n      currentFunction.flow = flow.leaveBranchOrScope();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default and always returns, propagate that\n    if (defaultIndex >= 0) {\n      let flow = currentFunction.flow;\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileBuiltinAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunction &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = program.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpression( // reports\n          declaration.initializer,\n          Type.void,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.precomputeExpressionRef(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(getConstValueI32(initExpr), 0);\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  getConstValueI64Low(initExpr),\n                  getConstValueI64High(initExpr)\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var flow = currentFunction.flow.enterBranchOrScope();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\n    // TODO: evaluate if condition is always true\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.leaveBranchOrScope();\n    currentFunction.leaveBreakContext();\n\n    var expr = module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          flow.isAny(FlowFlags.CONTINUES | FlowFlags.BREAKS | FlowFlags.RETURNS)\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ], NativeType.None);\n\n    // If the loop is guaranteed to run and return, propagate that and append a hint\n    if (alwaysReturns) {\n      expr = module.createBlock(null, [\n        expr,\n        module.createUnreachable()\n      ]);\n    }\n    return expr;\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        if (!(element.is(CommonFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.precomputeExpressionRef(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\n    var module = this.module;\n    var type = this.currentType;\n    var nativeType = type.toNativeType();\n    var funcRef = module.addTemporaryFunction(nativeType, null, expr);\n    module.runPasses([ \"precompute\" ], funcRef);\n    var ret = getFunctionBody(funcRef);\n    module.removeTemporaryFunction();\n    return ret;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) {\n      return module.createDrop(expr);\n    }\n\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\n      this.error(\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n        reportNode.range, fromType.toString(), toType.toString()\n      ); // recoverable\n    }\n\n    // TODO: make this a proper switch?\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.program.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.classReference;\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.classReference;\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.classReference;\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.classReference;\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        if (operator == Token.EQUALS_EQUALS) { // check operator overload\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, right, expression);\n              break;\n            }\n          }\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        if (operator == Token.EXCLAMATION_EQUALS) { // check operator overload\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, right, expression);\n              break;\n            }\n          }\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.classReference;\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.classReference;\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.classReference;\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.classReference;\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POW);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, right, expression);\n            break;\n          }\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.classReference;\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.classReference;\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.REM);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.WRAP); // !\n        leftType = this.currentType; // ^ must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: { // TODO: check operator overload\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.WRAP);\n        leftType = this.currentType; // ^ clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: operator overload?\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        let classReference = leftType.classReference;\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.AND);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.classReference;\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.OR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.classReference;\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.XOR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n      // checks and recompiles the argument according to its actual annotated type\n      var argumentExpressions: Expression[];\n      var thisArg: ExpressionRef = 0;\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        let parent = assert(operatorInstance.parent);\n        assert(parent.kind == ElementKind.CLASS);\n        thisArg = this.compileExpression(value, (<Class>parent).type, ConversionKind.IMPLICIT, WrapMode.NONE);\n        argumentExpressions = [];\n      } else {\n        argumentExpressions = [ value ];\n      }\n      return this.compileCallDirect(\n        operatorInstance,\n        argumentExpressions,\n        reportNode,\n        thisArg,\n        operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n      );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    // checks and recompiles the arguments according to their actual annotated types\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = this.compileExpression(left, (<Class>parent).type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ];\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var target = program.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var elementType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        elementType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prototype = (<Property>target).setterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(); // reports\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          elementType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (program.resolvedElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          elementType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    var valueExpr = this.compileExpression(valueExpression, elementType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.program.resolvedThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = setterPrototype.resolve(); // reports\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.program.resolvedThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.program.resolvedElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.program.resolvedThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = prototype.resolveUsingTypeArguments( // reports\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameterTypes;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameterTypes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.program.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments,\n                true\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = prototype.resolve(\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = prototype.resolve(\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.program.resolvedThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.program.resolvedThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n      case ElementKind.PROPERTY: // TODO\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var expr = compileBuiltinCall( // reports\n      this,\n      prototype,\n      prototype.resolveBuiltinTypeArguments(\n        expression.typeArguments,\n        this.currentFunction.flow.contextualTypeArguments\n      ),\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      return this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameterTypes[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.BREAKS | FlowFlags.CONTINUES | FlowFlags.RETURNS)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches return\n    if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"oob\", [\n        module.createSwitch(names, \"oob\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      body = module.createBlock(names[i + 1], [\n        body,\n        module.createSetLocal(operandIndex,\n          this.compileExpression(\n            assert(originalParameterDeclarations[minArguments + i].initializer),\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        )\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameterTypes;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = assert(parameterNodes[i].initializer);\n        if (initializer.kind != NodeKind.LITERAL) {\n          // TODO: other kinds might be constant as well\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\n    return ret;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.program.resolveIdentifier( // reports\n      expression,\n      currentFunction,\n      this.currentEnum\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localType = (<Local>target).type;\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = (<FunctionPrototype>target).resolve(\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\n      }\n      // case LiteralKind.OBJECT:\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  compileStaticString(stringValue: string): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var stringSegments = this.stringSegments;\n\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\n    if (!stringSegment) {\n      let stringLength = stringValue.length;\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\n      stringBuffer[0] =  stringLength         & 0xff;\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\n      for (let i = 0; i < stringLength; ++i) {\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\n      }\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\n      stringSegments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    var stringType = this.program.typesLookup.get(\"string\");\n    this.currentType = stringType ? stringType : options.usizeType;\n    if (options.isWasm64) {\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    }\n    assert(i64_is_i32(stringOffset));\n    return module.createI32(i64_low(stringOffset));\n  }\n\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\n    var isStatic = true;\n    var module = this.module;\n\n    // obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    var elementCount = expressions.length;\n    if (elementCount) { // non-empty static or dynamic\n      let nativeElementType = elementType.toNativeType();\n      let values: usize;\n      let byteLength: usize;\n      switch (nativeElementType) {\n        case NativeType.I32: {\n          values = changetype<usize>(new Int32Array(elementCount));\n          byteLength = elementCount * 4;\n          break;\n        }\n        case NativeType.I64: {\n          values = changetype<usize>(new Array<I64>(elementCount));\n          byteLength = elementCount * 8;\n          break;\n        }\n        case NativeType.F32: {\n          values = changetype<usize>(new Float32Array(elementCount));\n          byteLength = elementCount * 4;\n          break;\n        }\n        case NativeType.F64: {\n          values = changetype<usize>(new Float64Array(elementCount));\n          byteLength = elementCount * 8;\n          break;\n        }\n        default: {\n          assert(false);\n          return module.createUnreachable();\n        }\n      }\n\n      // precompute value expressions\n      let exprs = new Array<ExpressionRef>(elementCount);\n      let expr: BinaryenExpressionRef;\n      for (let i = 0; i < elementCount; ++i) {\n        exprs[i] = expressions[i]\n          ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n          : elementType.toNativeZero(module);\n        if (isStatic) {\n          expr = this.precomputeExpressionRef(exprs[i]);\n          if (getExpressionId(expr) == ExpressionId.Const) {\n            assert(getExpressionType(expr) == nativeElementType);\n            switch (nativeElementType) {\n              case NativeType.I32: {\n                changetype<i32[]>(values)[i] = getConstValueI32(expr);\n                break;\n              }\n              case NativeType.I64: {\n                changetype<I64[]>(values)[i] = i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                );\n                break;\n              }\n              case NativeType.F32: {\n                changetype<f32[]>(values)[i] = getConstValueF32(expr);\n                break;\n              }\n              case NativeType.F64: {\n                changetype<f64[]>(values)[i] = getConstValueF64(expr);\n                break;\n              }\n              default: assert(false); // checked above\n            }\n          } else {\n            // TODO: emit a warning if declared 'const'\n            // if (isConst) {\n            //   this.warn(\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n            //     reportNode.range\n            //   );\n            // }\n            isStatic = false;\n          }\n        }\n      }\n\n      let usizeTypeSize = this.options.usizeType.byteSize;\n      if (isStatic) { // non-empty, all elements can be precomputed\n\n        // Create a combined static memory segment composed of:\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\n\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\n        let data = new Uint8Array(arraySize + bufferTotalSize);\n        let segment = this.addMemorySegment(data);\n        let offset = 0;\n\n        // write Array struct\n        if (usizeTypeSize == 8) {\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\n          offset += 8;\n        } else {\n          assert(i64_high(segment.offset) == 0);\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\n          offset += 4;\n        }\n        writeI32(elementCount, data, offset); // length_\n        offset += 4;\n        assert(offset == arraySize);\n\n        // write ArrayBuffer struct\n        writeI32(byteLength, data, offset);\n        offset += bufferHeaderSize; // incl. alignment\n\n        // write ArrayBuffer data\n        switch (nativeElementType) {\n          case NativeType.I32: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            for (let i = 0; i < elementCount; ++i) {\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        assert(offset <= arraySize + bufferTotalSize);\n\n        this.currentType = arrayType;\n        return usizeTypeSize == 8\n          ? module.createI64(\n              i64_low(segment.offset),\n              i64_high(segment.offset)\n            )\n          : module.createI32(\n              i64_low(segment.offset)\n            );\n\n      } else { // non-empty, some elements can't be precomputed\n\n        this.currentType = arrayType;\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n        if (!setter) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            reportNode.range, arrayInstance.internalName\n          );\n          return module.createUnreachable();\n        }\n        let nativeArrayType = arrayType.toNativeType();\n        let currentFunction = this.currentFunction;\n        let tempLocal = currentFunction.getTempLocal(arrayType, false);\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\n        let index = 0;\n        stmts[index++] = module.createSetLocal(tempLocal.index,\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n            module.createI32(0), // this\n            module.createI32(elementCount)\n          ])\n        );\n        for (let i = 0; i < elementCount; ++i) {\n          stmts[index++] = this.makeCallDirect(setter, [\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\n            module.createI32(i),\n            exprs[i]\n          ]);\n        }\n        assert(index + 1 == stmts.length);\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n        currentFunction.freeTempLocal(tempLocal);\n        this.currentType = arrayType;\n        return module.createBlock(null, stmts, nativeArrayType);\n      }\n\n    } else { // empty, TBD: cache this somehow?\n      this.currentType = arrayType;\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(0)\n      ]);\n    }\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.program.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\n      expression.typeArguments,\n      currentFunction.flow.contextualTypeArguments,\n      expression\n    );\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the first matching constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance = classInstance.constructorInstance;\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\n      constructorInstance = currentClassInstance.constructorInstance;\n    }\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(program.resolvedThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>target).getterPrototype;\n        if (prototype) {\n          let instance = prototype.resolve(null); // reports\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.parent);\n            assert(parent.kind == ElementKind.CLASS);\n            let thisExpression = assert(program.resolvedThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenExpr: ExpressionRef;\n    var ifElseExpr: ExpressionRef;\n    var ifThenType: Type;\n    var ifElseType: Type;\n\n    // if part of a constructor, keep track of memory allocations\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n      let flow = currentFunction.flow;\n\n      flow = flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n      ifThenType = this.currentType;\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\n      flow = flow.leaveBranchOrScope();\n      currentFunction.flow = flow;\n\n      flow = flow.enterBranchOrScope();\n      currentFunction.flow = flow;\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n      ifElseType = this.currentType;\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\n      flow = flow.leaveBranchOrScope();\n      currentFunction.flow = flow;\n\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\n\n    // otherwise simplify\n    } else {\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n      ifThenType = this.currentType;\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n      ifElseType = this.currentType;\n    }\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) {\n      // shortcut if compiling the getter already failed\n      return getValue;\n    }\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        if (currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n        break;\n      }\n      case Token.MINUS: {\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n        } else {\n          expr = this.compileExpression(\n            expression.operand,\n            contextualType == Type.void\n              ? Type.i32\n              : contextualType,\n            ConversionKind.NONE,\n            WrapMode.NONE\n          );\n          switch (this.currentType.kind) {\n            case TypeKind.I8:\n            case TypeKind.I16:\n            case TypeKind.I32:\n            case TypeKind.U8:\n            case TypeKind.U16:\n            case TypeKind.U32:\n            case TypeKind.BOOL: {\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n              break;\n            }\n            case TypeKind.USIZE: {\n              if (this.currentType.is(TypeFlags.REFERENCE)) {\n                this.error(\n                  DiagnosticCode.Operation_not_supported,\n                  expression.range\n                );\n                return module.createUnreachable();\n              }\n              // fall-through\n            }\n            case TypeKind.ISIZE: {\n              expr = module.createBinary(\n                this.options.isWasm64\n                  ? BinaryOp.SubI64\n                  : BinaryOp.SubI32,\n                this.currentType.toNativeZero(module),\n                expr\n              );\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: {\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n              break;\n            }\n            case TypeKind.F32: {\n              expr = module.createUnary(UnaryOp.NegF32, expr);\n              break;\n            }\n            case TypeKind.F64: {\n              expr = module.createUnary(UnaryOp.NegF64, expr);\n              break;\n            }\n            default: {\n              assert(false);\n              expr = module.createUnreachable();\n            }\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          contextualType == Type.void\n            ? ConversionKind.NONE\n            : ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n            // fall-through\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        // it might make sense to implement typeof in a way that a generic function can detect\n        // whether its type argument is a class type or string. that could then be used, for\n        // example, to generate hash codes for sets and maps, depending on the kind of type\n        // parameter we have. ideally the comparison would not involve actual string comparison and\n        // limit available operations to hard-coded string literals.\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileBuiltinAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleExportName(element: Element, simpleName: string = element.simpleName): string {\n  switch (element.kind) {\n    case ElementKind.FUNCTION: {\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\n      return parent\n        ? mangleExportName(parent)\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n        + simpleName\n        : simpleName;\n    }\n    case ElementKind.FIELD: {\n      let parent = assert((<Field>element).parent);\n      return mangleExportName(parent)\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n          + simpleName;\n    }\n    case ElementKind.ENUMVALUE: {\n      let parent = assert((<EnumValue>element).parent);\n      return mangleExportName(parent)\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\n          + simpleName;\n    }\n    case ElementKind.CLASS: {\n      let parent = (<Class>element).prototype.parent;\n      return parent\n        ? mangleExportName(parent)\n        + STATIC_DELIMITER\n        + simpleName\n        : simpleName;\n    }\n    default: {\n      let parent = element.parent;\n      return parent\n        ? mangleExportName(parent)\n        + STATIC_DELIMITER\n        + simpleName\n        : simpleName;\n    }\n  }\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  Program,\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionExpression,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Log of source file names to be requested. */\n  backlog: string[] = new Array();\n  /** Log of source file names already processed. */\n  seenlog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var program = this.program;\n\n    // check if already parsed\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].internalPath == internalPath) return;\n    }\n    this.seenlog.add(internalPath);\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    sources.push(source);\n\n    // mark the special builtins library file\n    if (source.normalizedPath == builtinsFile) {\n      source.set(CommonFlags.BUILTIN);\n    }\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // mark builtins\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        tn.next();\n        flags |= CommonFlags.ABSTRACT;\n        if (!tn.skip(Token.CLASS)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(tn.pos), \"class\"\n          );\n          break;\n        }\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        tn.next();\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: {\n        tn.next();\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    // return backlog.length ? backlog.shift() : null;\n    let fileName = backlog.length ? backlog.shift() : null;\n\n    return fileName;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    // 'void'\n    if (token == Token.VOID) {\n      return Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n    }\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor);\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (tn.skip(Token.PUBLIC)) {\n      startRange = tn.range();\n      if (!isConstructor) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          startRange, \"public\"\n        );\n      }\n      accessFlags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PROTECTED)) {\n      startRange = tn.range();\n      if (!isConstructor) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          startRange, \"protected\"\n        );\n      }\n      accessFlags |= CommonFlags.PROTECTED;\n    } else if (tn.skip(Token.PRIVATE)) {\n      startRange = tn.range();\n      if (!isConstructor) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          startRange, \"private\"\n        );\n      }\n      accessFlags |= CommonFlags.PRIVATE;\n    }\n    if (tn.skip(Token.READONLY)) {\n      if (!startRange) startRange = tn.range();\n      if (!isConstructor) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          startRange, \"readonly\"\n        );\n      }\n      accessFlags |= CommonFlags.READONLY;\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\n\n    if (tn.skip(Token.PUBLIC)) {\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      if (tn.skip(Token.ABSTRACT)) {\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      } else {\n        flags |= CommonFlags.INSTANCE;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (tn.skip(Token.GET)) {\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.GET;\n        isGetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.SET)) {\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n        flags |= CommonFlags.SET | CommonFlags.SET;\n        isSetter = true;\n        setStart = tn.tokenPos;\n        setEnd = tn.pos;\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      } else {\n        tn.reset(state);\n      }\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\n      flags |= CommonFlags.CONSTRUCTOR;\n      isConstructor = true;\n      if (flags & CommonFlags.STATIC) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(staticStart, staticEnd), \"static\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n      if (flags & CommonFlags.READONLY) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\n        ); // recoverable\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        null,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        do {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.CLOSEBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n      let path: StringLiteralExpression | null = null;\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath != null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        do {\n          let member = this.parseImportDeclaration(tn);\n          if (!member) return null;\n          members.push(member);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.CLOSEBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.TYPE: {\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n\n    if (token == Token.NULL) {\n      return Node.createNullExpression(tn.range());\n    }\n    if (token == Token.TRUE) {\n      return Node.createTrueExpression(tn.range());\n    }\n    if (token == Token.FALSE) {\n      return Node.createFalseExpression(tn.range());\n    }\n\n    var p = determinePrecedenceStart(token);\n    if (p != Precedence.INVALID) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, p);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    switch (token) {\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Expression_expected,\n          tn.range()\n        );\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = 0\n  ): Expression | null {\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression with type arguments\n    var typeArguments: CommonTypeNode[] | null;\n    while (\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\n      tn.skip(Token.OPENPAREN)\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) return null;\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn);\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn);\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA ? Precedence.COMMA + 1 : 0);\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  // skipBlock(tn: Tokenizer): void {\n  //   var depth = 0;\n  //   var token: Token;\n  //   do {\n  //     token = tn.next();\n  //     if (token == Token.OPENBRACE) {\n  //       ++depth;\n  //     } else if (token == Token.CLOSEBRACE) {\n  //       if (depth) --depth;\n  //       if (!depth) break; // done\n  //     }\n  //   } while (token != Token.ENDOFFILE);\n  // }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING,\n  INVALID = -1\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): i32 {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): i32 {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n    default: return Precedence.INVALID;\n  }\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  Program,\n  Element,\n  CommonFlags,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else assert(false);\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n    } else if (element.is(CommonFlags.SET)) {\n      sb.push(\"set \");\n      sb.push(element.prototype.declaration.name.text);\n    } else {\n      if (!element.is(CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) {\n        sb.push(\"abstract \");\n      }\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    /* TBD: the compiler implicitly generates setters if the class is exported\n    indent(sb, this.indentLevel);\n    sb.push(\"get \");\n    sb.push(element.simpleName);\n    sb.push(\"(): \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    if (!element.is(CommonFlags.READONLY)) {\n      indent(sb, this.indentLevel);\n      if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n      if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n      if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n      sb.push(\"set \");\n      sb.push(element.simpleName);\n      sb.push(\"(\");\n      sb.push(element.simpleName);\n      sb.push(\": \");\n      sb.push(this.typeToString(element.type));\n      sb.push(\");\\n\");\n    }\n    */\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"current_memory()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"grow_memory(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program,\n  LIBRARY_PREFIX\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `noMemory` option. */\nexport function setNoMemory(options: Options, noMemory: bool): void {\n  options.noMemory = noMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX };\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","import {\n  Type,\n  Signature\n} from \"./types\";\n\nimport {\n  ElementKind,\n  Element,\n  ClassPrototype,\n  FunctionPrototype,\n  Program\n} from \"./program\";\n\nimport {\n  DecoratorKind,\n  SignatureNode,\n  ClassDeclaration,\n  TypeNode,\n  NodeKind, \n  Source,\n  ParameterNode\n} from \"./ast\";\n\nclass AbiStruct {\n\n  name: string;\n  base: string;\n  fields: Array<Object>;\n\n  constructor() {\n    this.fields = new Array<Object>();\n  }\n}\n\nclass TypeAlias{\n  new_type_name: string;\n  type:string\n\n  constructor(newTypeName:string, wasmType:string){\n    this.new_type_name = newTypeName;\n    this.type = wasmType;\n  }\n}\n\nclass Action {\n\n  name: string;\n  type: string;\n\n  constructor(name: string, type: string) {\n    this.name = name;\n    this.type = type;\n  }\n}\n\n\nclass SourceNode{\n  sourceName: string;\n  importNames: Array<string>;\n\n  constructor(sourceNode:string){\n    this.sourceName = sourceNode;\n    this.importNames = new Array();\n  }\n}\n\n\nexport class Abi {\n\n  abiInfo: { types: Array<TypeAlias>, structs: Array<AbiStruct>, actions: Array<Action> } = {\n    types: new Array<TypeAlias>(),\n    structs: new Array<AbiStruct>(),\n    actions: new Array<Action>()\n  };\n\n  importElements: Map<string, SourceNode>;\n\n  dispatch: string;\n\n  program: Program;\n\n  typeAliasLookup: Map<string, string>;\n\n  typeAliasSet: Set<string>;\n\n  elementLookup: Map<string, Element>;\n\n  constructor(program: Program) {\n\n    this.program = program;\n\n    this.typeAliasLookup = new Map([\n      [\"i8\", \"int8\"],\n      [\"i16\", \"int16\"],\n      [\"i32\", \"int32\"],\n      [\"i64\", \"int64\"],\n      [\"isize\", \"\"],\n      [\"u8\", \"uint8\"],\n      [\"u16\", \"uint16\"],\n      [\"u32\", \"uint32\"],\n      [\"u64\", \"uint64\"],\n      [\"usize\", \"usize\"],\n      [\"bool\", \"int8\"], // eos not support the bool\n      [\"f32\", \"f32\"],\n      [\"f64\", \"f64\"],\n      [\"boolean\", \"int8\"] // eos not suppot the bool\n    ]);\n\n    this.typeAliasSet = new Set();\n\n    this.elementLookup = new Map();\n\n    this.importElements = new Map();\n  }\n\n  getStruct(methodName: string, signature: SignatureNode): AbiStruct {\n\n    let struct = new AbiStruct();\n    struct.name = methodName;\n    struct.base = \"\";\n\n    let types = signature.parameterTypes;\n    if (types) {\n      for (var index in types) {\n        let type:ParameterNode = types[index];\n        let typeKind = types[index].type.range.toString();\n\n        this.addAbiTypeAlias(typeKind);\n\n        struct.fields.push({ name: types[index].name.range.toString(), type: types[index].type.range.toString() });\n      }\n    }\n    return struct;\n  }\n\n\n  addAbiTypeAlias(typeKindName: string): void{\n\n    if(!this.typeAliasSet.has(typeKindName)){\n      let wasmType = this.typeAliasLookup.get(typeKindName);\n      if(wasmType)\n        this.abiInfo.types.push( new TypeAlias(typeKindName, wasmType));\n\n      this.typeAliasSet.add(typeKindName);\n\n    }\n  }\n\n  // Check the FunctionPrototype weather has decoratorKind\n  checkFuncPrototypeDecorator(funcPrototype: FunctionPrototype, decoratorKind: DecoratorKind): bool {\n    let decorators = funcPrototype.declaration.decorators;\n    if (decorators ) {\n      for (let decorator of decorators) {\n        if (decorator.decoratorKind == decoratorKind)\n          return true;\n      }\n    }\n    return false;\n  }\n\n  isActionFuncPrototype(element: Element): bool {\n\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE){\n      let funcType = (<FunctionPrototype>element);\n      return this.checkFuncPrototypeDecorator(funcType, DecoratorKind.ACTION);\n    }\n\n    return false;\n  }\n\n  resolveClzDispatcher(clzPrototype: ClassPrototype): Array<string> {\n\n    let sb = new Array<string>();\n    let isActionClz = false;\n    if (clzPrototype.instanceMembers) {\n\n      let contractName = clzPrototype.simpleName; //\n      let contractVarName = \"_\" + contractName; //TODO\n      sb[0] = `let ${contractVarName} = new ${contractName}(receiver);`;\n\n\n      for (let instance of clzPrototype.instanceMembers.values()) {\n        if (this.isActionFuncPrototype(instance)) {\n\n          this.resolveFunctionPrototype(<FunctionPrototype>instance);\n          isActionClz = true;\n          let declaration = (<FunctionPrototype>instance).declaration; // FunctionDeclaration\n\n          let funcName = declaration.name.range.toString();\n          let types = declaration.signature.parameterTypes; // FunctionDeclaration parameter types\n\n          let fields = new Array<string>();\n\n          let iIndex = 0, sIndex = 0;\n          for (var index = 0; index < types.length; index++) {\n            let type = types[index];\n            let parameterType = types[index].type.range.toString();\n            if (parameterType == 'string') {\n              fields.push(`<${parameterType}>action.s_params[${sIndex++}]`);\n            } else {\n              fields.push(`<${parameterType}>action.i_params[${iIndex++}]`);\n            }\n          }\n          sb.push(`if (action.name == '${funcName}') ${contractVarName}.${funcName}(${fields.join(',')});`);\n        }\n      }\n\n      if(isActionClz){\n        let clzName = clzPrototype.simpleName;\n        let sourcePath = clzPrototype.declaration.range.source.internalPath;\n        this.checkAndImportElements(sourcePath, clzName);\n      }\n    }\n    return isActionClz ? sb : new Array();\n  }\n\n\n  checkAndImportElements(sourcePath: string, elementName:string){\n\n    let sourceNode = this.importElements.get(sourcePath);\n    if (sourceNode) {\n      let imprtNameSet = sourceNode.importNames;\n      imprtNameSet.push(elementName);\n    } else if (sourcePath) {\n      let sourceNode = new SourceNode(sourcePath);\n      sourceNode.importNames.push(elementName);\n      this.importElements.set(sourcePath, sourceNode);\n    }\n  }\n\n\n  // Check the statement whether export method. NodeKind.EXPORT value is 30, and the NodeKind.IMPORT is 35\n  isExportStatement(source:Source) :bool {\n\n    let statements = source.statements;\n    if (statements) {\n      for (let statement of statements) {\n        if (NodeKind.EXPORT == statement.kind) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n\n  resolveFuncDispatcher(funcPrototype: FunctionPrototype): string {\n\n    let funcDispatcher: string;\n    if (this.isActionFuncPrototype(funcPrototype)) {\n\n      let declaration = funcPrototype.declaration; // FunctionDeclaration\n      let types = declaration.signature.parameterTypes; // FunctionDeclaration parameter types\n      let funcName = declaration.name.range.toString();\n\n      // TODO \n      // let isExportFunc = this.isExportStatement(funcPrototype.declaration.range.source);\n      // if (!isExportFunc) {\n      //   console.log(`Warning: action funciton ${funcName} is not export method!`);\n      //   // return \"\";\n      // }\n\n      this.resolveFunctionPrototype(funcPrototype);\n\n      let fields = new Array<string>();\n      let iIndex = 0, sIndex = 0;\n      for (var index = 0; index < types.length; index++) {\n        let type = types[index];\n        let parameterType = types[index].type.range.toString();\n        \n        if (parameterType == 'string') {\n          fields.push(`<${parameterType}>action.s_params[${sIndex++}]`);\n        } else {\n          fields.push(`<${parameterType}>action.i_params[${iIndex++}]`);\n        }\n      }\n      funcDispatcher = `if (action.name == '${funcName}') ${funcName}(${fields.join(',')});`;\n        \n      let sourcePath = declaration.range.source.internalPath\n      this.checkAndImportElements(sourcePath, funcName);\n      return funcDispatcher;\n    }\n    return \"\";\n  }\n   \n  resolveFunctionPrototype(funcPrototype: FunctionPrototype): void {\n\n    let declaration = funcPrototype.declaration;\n    let funcName = declaration.name.range.toString();\n    let signature = funcPrototype.declaration.signature;\n    let abiStruct = this.getStruct(funcName, signature);\n\n    this.abiInfo.structs.push(abiStruct);\n    this.abiInfo.actions.push(new Action(funcName, funcName));\n  }\n\n\n  resolve(): void{\n\n    let dispatchBuffer = new Array<string>();\n    if (!this.program.elementsLookup) {\n      return ;\n    }\n\n    // Iterator all the elements\n    for (let element of this.program.elementsLookup.values()) {\n\n      // console.log(element.declar);\n\n      if (this.isActionFuncPrototype(element)) {\n\n        if(!this.elementLookup.has(element.internalName)){\n          dispatchBuffer.push(this.resolveFuncDispatcher(<FunctionPrototype>element));\n          this.elementLookup.set(element.internalName, element);\n        }\n      }\n\n      // The element is ClassPrototype\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n\n        let clzPrototype = (<ClassPrototype>element);\n        if (!this.elementLookup.has(clzPrototype.internalName)) {\n\n          let clzDispatch:Array<string> = this.resolveClzDispatcher(clzPrototype);\n          clzDispatch.forEach((value, index) => {\n            dispatchBuffer.push(value);\n          });\n          this.elementLookup.set(clzPrototype.internalName, element);\n        } \n      }\n    }\n    this.dispatch = this.assemblyDispatch(dispatchBuffer);\n  }\n\n  // Concat the dispatch message\n  assemblyDispatch(body: Array<string>): string{\n\n    let sb = new Array<string>();\n    sb.push(\"function dispatch(action:Action, receiver:u64) : void{\");\n\n    body.forEach( (value, index) =>{\n      sb.push(value);\n    });\n    sb.push(\"}\");\n\n    return sb.join(\"\\n\");\n  }\n}\n\n\n\n","/** @module util *//***/\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags\n} from \"./program\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"current_memory\": { // current_memory() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"set_memory\": { // set_memory(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\nconst allocateInternalName = \"allocate_memory\";\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\n  if (!allocatePrototype) {\n    program.error(\n      DiagnosticCode.Cannot_find_name_0,\n      reportNode.range, allocateInternalName\n    );\n    return module.createUnreachable();\n  }\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\n    program.error(\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n      reportNode.range, allocatePrototype.internalName\n    );\n    return module.createUnreachable();\n  }\n\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\n\n  compiler.currentType = classInstance.type;\n  return module.createCall(\n    allocateInstance.internalName, [\n      options.isWasm64\n        ? module.createI64(classInstance.currentMemoryOffset)\n        : module.createI32(classInstance.currentMemoryOffset)\n    ],\n    options.nativeSizeType\n  );\n}\n\nconst abortInternalName = \"abort\";\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\n  if (!stringType) return module.createUnreachable();\n\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\n\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__23__;","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\n\nfor (var key in binaryen)\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\n    global[key] = binaryen[key];\n\n// Utilize Binaryen's heap\n\nglobal.allocate_memory = function(size) {\n  if (!size) return 0; // should be safe in our case\n  return binaryen._malloc(size);\n};\n\nglobal.free_memory = function(ptr) {\n  if (ptr) binaryen._free(ptr);\n};\n\nglobal.move_memory = function(dest, src, n) {\n  return binaryen._memmove(dest, src, n);\n};\n\nglobal.store = function(ptr, val) {\n  binaryen.HEAPU8[ptr] = val;\n};\n\nglobal.load = function(ptr) {\n  return binaryen.HEAPU8[ptr];\n};\n\n// Implement module stubs\n\nconst Module = require(\"../../module\").Module;\n\nModule.prototype.toText = function toText() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrint(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  var previousPrint = binaryen.print;\n  var ret = \"\";\n  binaryen.print = function(x) { ret += x + \"\\n\" };\n  _BinaryenModulePrintAsmjs(this.ref);\n  binaryen.print = previousPrint;\n  return ret;\n};\n","module.exports = globalScope => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\n    if (!(size >>>= 0)) return 0;\n\n    if (HEAP_OFFSET + size > HEAP.length) {\n      var oldHeap = HEAP;\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n      HEAP.set(oldHeap);\n    }\n\n    var ptr = HEAP_OFFSET;\n    if ((HEAP_OFFSET += size) & 7)\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n\n    return ptr;\n  };\n\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\n    // TODO\n  };\n\n  globalScope[\"move_memory\"] = function move_memory(dest, src, size) {\n    HEAP.copyWithin(dest, src, src + size);\n  };\n\n  globalScope[\"store\"] = function store(ptr, value, offset) {\n    HEAP[ptr + (offset | 0)] = value;\n  };\n\n  globalScope[\"load\"] = function load(ptr, offset) {\n    return HEAP[ptr + (offset | 0)];\n  };\n};\n","module.exports = globalScope => {\n  globalScope[\"JSMath\"] = Math;\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nrequire(\"./portable/math\")(globalScope);\nrequire(\"./portable/memory\")(globalScope);\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"../../../std/portable\";\nimport \"./binaryen\";\nimport \"./i64\";\nimport \"./float\";\n"],"sourceRoot":""}